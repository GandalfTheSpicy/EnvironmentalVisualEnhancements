Shader "EVE/Cloud" {
	Properties {
		_Color ("Color Tint", Color) = (1,1,1,1)
		_MainTex ("Main (RGB)", 2D) = "white" {}
		_DetailTex ("Detail (RGB)", 2D) = "white" {}
		_FalloffPow ("Falloff Power", Range(0,3)) = 2
		_FalloffScale ("Falloff Scale", Range(0,20)) = 3
		_DetailScale ("Detail Scale", Range(0,100)) = 100
		_DetailDist ("Detail Distance", Range(0,1)) = 0.00875
		_MinLight ("Minimum Light", Range(0,1)) = .5
		_DistFade ("Fade Distance", Range(0,100)) = 10
		_DistFadeVert ("Fade Scale", Range(0,1)) = .002
		_RimDist ("Rim Distance", Range(0,1)) = 1
		_RimDistSub ("Rim Distance Sub", Range(0,2)) = 1.01
		_InvFade ("Soft Particles Factor", Range(0.01,3.0)) = .01
	}

Category {
	
	Tags { "Queue"="Transparent" "IgnoreProjector"="True" "RenderType"="Transparent" }
	Blend SrcAlpha OneMinusSrcAlpha
	Fog { Mode Global}
	AlphaTest Greater 0
	ColorMask RGB
	Cull Off Lighting On ZWrite Off
	
SubShader {
	Pass {

		Lighting On
		Tags { "LightMode"="ForwardBase"}
		
		Program "vp" {
// Vertex combos: 30
//   d3d9 - ALU: 29 to 47
//   d3d11 - ALU: 24 to 44, TEX: 0 to 0, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_13.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_13.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_12);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  vec3 p_24;
  p_24 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = (main_1 * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale), tmpvar_20.xy, tmpvar_20.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_24, p_24))), 0.0, 1.0))));
  float tmpvar_26;
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  vec3 p_28;
  p_28 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_29;
  p_29 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_28, p_28)) - (_RimDistSub * sqrt(dot (p_29, p_29))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r2.z, v0, c6
dp4 r2.y, v0, c5
dp4 r2.x, v0, c4
add r3.xyz, -r2, c16
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r0.xyz, r2, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mul o6.xyz, r1.w, r3
mov o1.xyz, r2
mov o2.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 144 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkinflmflbipjjegblimchamceanocljpabaaaaaaoaafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
dmaeaaaaeaaaabaaapabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaa
apaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
adaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaj
pcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaagaaaaaa
dcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaa
aeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_22);
  highp float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  zxlerp_21 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = float((mix (tmpvar_31.x, tmpvar_31.z, zxlerp_21) >= tmpvar_31.y));
  nylerp_20 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_31, tmpvar_31.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_31.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_19.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_19.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_30.xy, tmpvar_30.zw);
  tmpvar_18 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_7 * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_42 = sqrt(dot (p_43, p_43));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_41.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_42), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_42)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_6.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_6.xyz = (tmpvar_41.xyz * tmpvar_51);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_22);
  highp float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  zxlerp_21 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = float((mix (tmpvar_31.x, tmpvar_31.z, zxlerp_21) >= tmpvar_31.y));
  nylerp_20 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_31, tmpvar_31.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_31.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_19.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_19.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_30.xy, tmpvar_30.zw);
  tmpvar_18 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_7 * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_42 = sqrt(dot (p_43, p_43));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_41.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_42), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_42)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_6.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_6.xyz = (tmpvar_41.xyz * tmpvar_51);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 384
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 481
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 474
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 394
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 407
#line 415
#line 429
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 462
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 466
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 470
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 494
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 494
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 498
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 502
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 506
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 384
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 481
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 474
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 394
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 407
#line 415
#line 429
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 462
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 466
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 470
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 494
#line 376
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 378
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 364
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 366
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    #line 370
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    #line 374
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 508
lowp vec4 frag( in v2f IN ) {
    #line 510
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 514
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 518
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 522
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 526
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_2.xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_2.xyz - tmpvar_3));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_13.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_13.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_12);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  vec3 p_24;
  p_24 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = (main_1 * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale), tmpvar_20.xy, tmpvar_20.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_24, p_24))), 0.0, 1.0))));
  float tmpvar_26;
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  vec3 p_28;
  p_28 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_29;
  p_29 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_28, p_28)) - (_RimDistSub * sqrt(dot (p_29, p_29))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r2.z, v0, c6
dp4 r2.y, v0, c5
dp4 r2.x, v0, c4
add r3.xyz, -r2, c16
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r0.xyz, r2, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mul o6.xyz, r1.w, r3
mov o1.xyz, r2
mov o2.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 240 // 144 used size, 16 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedainogmdcfgejpgalonkibdpabbkmcdaeabaaaaaamiafaaaaadaaaaaa
cmaaaaaajmaaaaaaieabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaneaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaneaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaneaaaaaaaiaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcdmaeaaaaeaaaabaaapabaaaafjaaaaaeegiocaaaaaaaaaaa
ajaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
dgaaaaafhccabaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaa
egiccaaaacaaaaaaapaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
abaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaadaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaaagaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaafaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaaahaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2.xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_2.xyz - tmpvar_3));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_22);
  highp float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  zxlerp_21 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = float((mix (tmpvar_31.x, tmpvar_31.z, zxlerp_21) >= tmpvar_31.y));
  nylerp_20 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_31, tmpvar_31.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_31.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_19.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_19.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_30.xy, tmpvar_30.zw);
  tmpvar_18 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_7 * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_42 = sqrt(dot (p_43, p_43));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_41.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_42), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_42)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_6.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_6.xyz = (tmpvar_41.xyz * tmpvar_51);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2.xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_2.xyz - tmpvar_3));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_22);
  highp float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  zxlerp_21 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = float((mix (tmpvar_31.x, tmpvar_31.z, zxlerp_21) >= tmpvar_31.y));
  nylerp_20 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_31, tmpvar_31.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_31.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_19.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_19.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_30.xy, tmpvar_30.zw);
  tmpvar_18 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_7 * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_42 = sqrt(dot (p_43, p_43));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_41.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_42), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_42)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_6.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_6.xyz = (tmpvar_41.xyz * tmpvar_51);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 382
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 479
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 projPos;
};
#line 472
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 392
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 405
#line 413
#line 427
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 460
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 464
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 468
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 491
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 491
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 495
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 499
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 503
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 382
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 479
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 projPos;
};
#line 472
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 392
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 405
#line 413
#line 427
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 460
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 464
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 468
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 491
#line 376
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 378
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 364
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 366
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    #line 370
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    #line 374
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 505
lowp vec4 frag( in v2f IN ) {
    #line 507
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 511
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 515
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 519
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 523
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_13.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_13.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_12);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  vec3 p_24;
  p_24 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = (main_1 * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale), tmpvar_20.xy, tmpvar_20.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_24, p_24))), 0.0, 1.0))));
  float tmpvar_26;
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  vec3 p_28;
  p_28 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_29;
  p_29 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_28, p_28)) - (_RimDistSub * sqrt(dot (p_29, p_29))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r2.z, v0, c6
dp4 r2.y, v0, c5
dp4 r2.x, v0, c4
add r3.xyz, -r2, c16
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r0.xyz, r2, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mul o6.xyz, r1.w, r3
mov o1.xyz, r2
mov o2.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 144 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedoojbglnifngiajbgihhibobhendnodekabaaaaaaoaafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
dmaeaaaaeaaaabaaapabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaa
apaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
adaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaj
pcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaagaaaaaa
dcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaa
aeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_22);
  highp float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  zxlerp_21 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = float((mix (tmpvar_31.x, tmpvar_31.z, zxlerp_21) >= tmpvar_31.y));
  nylerp_20 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_31, tmpvar_31.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_31.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_19.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_19.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_30.xy, tmpvar_30.zw);
  tmpvar_18 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_7 * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_42 = sqrt(dot (p_43, p_43));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_41.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_42), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_42)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_6.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_6.xyz = (tmpvar_41.xyz * tmpvar_51);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_22);
  highp float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  zxlerp_21 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = float((mix (tmpvar_31.x, tmpvar_31.z, zxlerp_21) >= tmpvar_31.y));
  nylerp_20 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_31, tmpvar_31.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_31.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_19.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_19.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_30.xy, tmpvar_30.zw);
  tmpvar_18 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_7 * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_42 = sqrt(dot (p_43, p_43));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_41.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_42), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_42)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_6.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_6.xyz = (tmpvar_41.xyz * tmpvar_51);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 393
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 490
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 projPos;
};
#line 483
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 403
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 416
#line 424
#line 438
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 471
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 475
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 479
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 503
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 503
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 507
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 511
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 515
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 393
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 490
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 projPos;
};
#line 483
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 403
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 416
#line 424
#line 438
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 471
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 475
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 479
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 503
#line 376
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 378
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 364
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 366
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    #line 370
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    #line 374
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 517
lowp vec4 frag( in v2f IN ) {
    #line 519
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 523
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 527
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 531
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 535
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_13.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_13.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_12);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  vec3 p_24;
  p_24 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = (main_1 * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale), tmpvar_20.xy, tmpvar_20.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_24, p_24))), 0.0, 1.0))));
  float tmpvar_26;
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  vec3 p_28;
  p_28 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_29;
  p_29 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_28, p_28)) - (_RimDistSub * sqrt(dot (p_29, p_29))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r2.z, v0, c6
dp4 r2.y, v0, c5
dp4 r2.x, v0, c4
add r3.xyz, -r2, c16
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r0.xyz, r2, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mul o6.xyz, r1.w, r3
mov o1.xyz, r2
mov o2.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 144 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkinflmflbipjjegblimchamceanocljpabaaaaaaoaafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
dmaeaaaaeaaaabaaapabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaa
apaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
adaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaj
pcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaagaaaaaa
dcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaa
aeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_22);
  highp float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  zxlerp_21 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = float((mix (tmpvar_31.x, tmpvar_31.z, zxlerp_21) >= tmpvar_31.y));
  nylerp_20 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_31, tmpvar_31.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_31.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_19.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_19.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_30.xy, tmpvar_30.zw);
  tmpvar_18 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_7 * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_42 = sqrt(dot (p_43, p_43));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_41.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_42), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_42)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_6.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_6.xyz = (tmpvar_41.xyz * tmpvar_51);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_22);
  highp float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  zxlerp_21 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = float((mix (tmpvar_31.x, tmpvar_31.z, zxlerp_21) >= tmpvar_31.y));
  nylerp_20 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_31, tmpvar_31.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_31.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_19.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_19.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_30.xy, tmpvar_30.zw);
  tmpvar_18 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_7 * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_42 = sqrt(dot (p_43, p_43));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_41.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_42), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_42)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_6.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_6.xyz = (tmpvar_41.xyz * tmpvar_51);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 385
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 482
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 475
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 395
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 408
#line 416
#line 430
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 463
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 467
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 471
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 495
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 495
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 499
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 503
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 507
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 385
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 482
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 475
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 395
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 408
#line 416
#line 430
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 463
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 467
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 471
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 495
#line 376
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 378
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 364
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 366
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    #line 370
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    #line 374
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 509
lowp vec4 frag( in v2f IN ) {
    #line 511
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 515
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 519
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 523
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 527
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_13.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_13.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_12);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  vec3 p_24;
  p_24 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = (main_1 * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale), tmpvar_20.xy, tmpvar_20.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_24, p_24))), 0.0, 1.0))));
  float tmpvar_26;
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  vec3 p_28;
  p_28 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_29;
  p_29 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_28, p_28)) - (_RimDistSub * sqrt(dot (p_29, p_29))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r2.z, v0, c6
dp4 r2.y, v0, c5
dp4 r2.x, v0, c4
add r3.xyz, -r2, c16
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r0.xyz, r2, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mul o6.xyz, r1.w, r3
mov o1.xyz, r2
mov o2.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 144 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedmcmfhofakgdfkobnmjmobgmbckfnfnmkabaaaaaaoaafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaadapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
dmaeaaaaeaaaabaaapabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaa
apaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
adaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaj
pcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaagaaaaaa
dcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaa
aeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_22);
  highp float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  zxlerp_21 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = float((mix (tmpvar_31.x, tmpvar_31.z, zxlerp_21) >= tmpvar_31.y));
  nylerp_20 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_31, tmpvar_31.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_31.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_19.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_19.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_30.xy, tmpvar_30.zw);
  tmpvar_18 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_7 * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_42 = sqrt(dot (p_43, p_43));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_41.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_42), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_42)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_6.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_6.xyz = (tmpvar_41.xyz * tmpvar_51);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_22);
  highp float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  zxlerp_21 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = float((mix (tmpvar_31.x, tmpvar_31.z, zxlerp_21) >= tmpvar_31.y));
  nylerp_20 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_31, tmpvar_31.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_31.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_19.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_19.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_30.xy, tmpvar_30.zw);
  tmpvar_18 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_7 * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_42 = sqrt(dot (p_43, p_43));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_41.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_42), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_42)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_6.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_6.xyz = (tmpvar_41.xyz * tmpvar_51);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 384
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 481
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 projPos;
};
#line 474
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 394
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 407
#line 415
#line 429
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 462
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 466
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 470
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 494
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 494
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 498
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 502
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 506
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 384
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 481
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 projPos;
};
#line 474
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 394
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 407
#line 415
#line 429
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 462
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 466
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 470
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 494
#line 376
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 378
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 364
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 366
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    #line 370
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    #line 374
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 508
lowp vec4 frag( in v2f IN ) {
    #line 510
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 514
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 518
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 522
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 526
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_13.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_13.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_12);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  vec3 p_24;
  p_24 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = (main_1 * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale), tmpvar_20.xy, tmpvar_20.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_24, p_24))), 0.0, 1.0))));
  float tmpvar_26;
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  vec3 p_28;
  p_28 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_29;
  p_29 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_28, p_28)) - (_RimDistSub * sqrt(dot (p_29, p_29))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r2.z, v0, c6
dp4 r2.y, v0, c5
dp4 r2.x, v0, c4
add r3.xyz, -r2, c16
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r0.xyz, r2, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mul o6.xyz, r1.w, r3
mov o1.xyz, r2
mov o2.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 144 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedgblfoalmdnhkembkdmkiddhkhjlddcjfabaaaaaapiafaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcdmaeaaaaeaaaabaa
apabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
aeaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaa
fgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaagaaaaaadcaaaaalpcaabaaa
acaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaia
ebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaa
aaaaaaaaaiaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaag
pccabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
agaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_22);
  highp float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  zxlerp_21 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = float((mix (tmpvar_31.x, tmpvar_31.z, zxlerp_21) >= tmpvar_31.y));
  nylerp_20 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_31, tmpvar_31.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_31.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_19.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_19.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_30.xy, tmpvar_30.zw);
  tmpvar_18 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_7 * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_42 = sqrt(dot (p_43, p_43));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_41.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_42), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_42)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_6.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_6.xyz = (tmpvar_41.xyz * tmpvar_51);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_22);
  highp float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  zxlerp_21 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = float((mix (tmpvar_31.x, tmpvar_31.z, zxlerp_21) >= tmpvar_31.y));
  nylerp_20 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_31, tmpvar_31.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_31.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_19.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_19.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_30.xy, tmpvar_30.zw);
  tmpvar_18 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_7 * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_42 = sqrt(dot (p_43, p_43));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_41.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_42), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_42)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_6.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_6.xyz = (tmpvar_41.xyz * tmpvar_51);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 399
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 496
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 489
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 390
uniform sampler2D _LightTextureB0;
#line 395
#line 409
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 422
#line 430
#line 444
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 477
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 481
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 485
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 510
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 510
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 514
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 518
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 522
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 399
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 496
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 489
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 390
uniform sampler2D _LightTextureB0;
#line 395
#line 409
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 422
#line 430
#line 444
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 477
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 481
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 485
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 510
#line 376
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 378
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 364
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 366
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    #line 370
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    #line 374
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 524
lowp vec4 frag( in v2f IN ) {
    #line 526
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 530
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 534
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 538
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 542
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_13.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_13.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_12);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  vec3 p_24;
  p_24 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = (main_1 * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale), tmpvar_20.xy, tmpvar_20.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_24, p_24))), 0.0, 1.0))));
  float tmpvar_26;
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  vec3 p_28;
  p_28 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_29;
  p_29 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_28, p_28)) - (_RimDistSub * sqrt(dot (p_29, p_29))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r2.z, v0, c6
dp4 r2.y, v0, c5
dp4 r2.x, v0, c4
add r3.xyz, -r2, c16
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r0.xyz, r2, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mul o6.xyz, r1.w, r3
mov o1.xyz, r2
mov o2.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 144 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedgblfoalmdnhkembkdmkiddhkhjlddcjfabaaaaaapiafaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcdmaeaaaaeaaaabaa
apabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
aeaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaa
fgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaagaaaaaadcaaaaalpcaabaaa
acaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaia
ebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaa
aaaaaaaaaiaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaag
pccabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
agaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_22);
  highp float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  zxlerp_21 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = float((mix (tmpvar_31.x, tmpvar_31.z, zxlerp_21) >= tmpvar_31.y));
  nylerp_20 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_31, tmpvar_31.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_31.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_19.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_19.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_30.xy, tmpvar_30.zw);
  tmpvar_18 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_7 * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_42 = sqrt(dot (p_43, p_43));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_41.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_42), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_42)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_6.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_6.xyz = (tmpvar_41.xyz * tmpvar_51);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 400
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 497
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 490
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 390
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 410
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 423
#line 431
#line 445
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 478
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 482
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 486
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 511
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 511
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 515
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 519
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 523
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 400
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 497
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 490
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 390
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 410
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 423
#line 431
#line 445
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 478
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 482
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 486
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 511
#line 376
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 378
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 364
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 366
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    #line 370
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    #line 374
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 525
lowp vec4 frag( in v2f IN ) {
    #line 527
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 531
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 535
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 539
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 543
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_13.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_13.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_12);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  vec3 p_24;
  p_24 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = (main_1 * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale), tmpvar_20.xy, tmpvar_20.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_24, p_24))), 0.0, 1.0))));
  float tmpvar_26;
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  vec3 p_28;
  p_28 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_29;
  p_29 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_28, p_28)) - (_RimDistSub * sqrt(dot (p_29, p_29))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r2.z, v0, c6
dp4 r2.y, v0, c5
dp4 r2.x, v0, c4
add r3.xyz, -r2, c16
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r0.xyz, r2, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mul o6.xyz, r1.w, r3
mov o1.xyz, r2
mov o2.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 144 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedoojbglnifngiajbgihhibobhendnodekabaaaaaaoaafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
dmaeaaaaeaaaabaaapabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaa
apaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
adaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaj
pcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaagaaaaaa
dcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaa
aeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_22);
  highp float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  zxlerp_21 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = float((mix (tmpvar_31.x, tmpvar_31.z, zxlerp_21) >= tmpvar_31.y));
  nylerp_20 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_31, tmpvar_31.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_31.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_19.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_19.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_30.xy, tmpvar_30.zw);
  tmpvar_18 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_7 * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_42 = sqrt(dot (p_43, p_43));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_41.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_42), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_42)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_6.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_6.xyz = (tmpvar_41.xyz * tmpvar_51);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_22);
  highp float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  zxlerp_21 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = float((mix (tmpvar_31.x, tmpvar_31.z, zxlerp_21) >= tmpvar_31.y));
  nylerp_20 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_31, tmpvar_31.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_31.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_19.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_19.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_30.xy, tmpvar_30.zw);
  tmpvar_18 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_7 * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_42 = sqrt(dot (p_43, p_43));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_41.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_42), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_42)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_6.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_6.xyz = (tmpvar_41.xyz * tmpvar_51);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 390
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 487
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 480
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 400
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 413
#line 421
#line 435
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 468
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 472
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 476
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 500
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 500
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 504
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 508
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 512
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 390
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 487
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 480
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 400
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 413
#line 421
#line 435
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 468
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 472
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 476
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 500
#line 376
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 378
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 364
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 366
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    #line 370
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    #line 374
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 514
lowp vec4 frag( in v2f IN ) {
    #line 516
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 520
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 524
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 528
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 532
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_13.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_13.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_12);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  vec3 p_24;
  p_24 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = (main_1 * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale), tmpvar_20.xy, tmpvar_20.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_24, p_24))), 0.0, 1.0))));
  float tmpvar_26;
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  vec3 p_28;
  p_28 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_29;
  p_29 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_28, p_28)) - (_RimDistSub * sqrt(dot (p_29, p_29))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r2.z, v0, c6
dp4 r2.y, v0, c5
dp4 r2.x, v0, c4
add r3.xyz, -r2, c16
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r0.xyz, r2, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mul o6.xyz, r1.w, r3
mov o1.xyz, r2
mov o2.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 368 // 144 used size, 18 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedcelcdkekkghfpkgbmnpnbbligabkbmhdabaaaaaapiafaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaadapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcdmaeaaaaeaaaabaa
apabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
aeaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaa
fgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaagaaaaaadcaaaaalpcaabaaa
acaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaia
ebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaa
aaaaaaaaaiaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaag
pccabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
agaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_22);
  highp float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  zxlerp_21 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = float((mix (tmpvar_31.x, tmpvar_31.z, zxlerp_21) >= tmpvar_31.y));
  nylerp_20 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_31, tmpvar_31.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_31.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_19.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_19.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_30.xy, tmpvar_30.zw);
  tmpvar_18 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_7 * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_42 = sqrt(dot (p_43, p_43));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_41.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_42), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_42)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_6.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_6.xyz = (tmpvar_41.xyz * tmpvar_51);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_22);
  highp float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  zxlerp_21 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = float((mix (tmpvar_31.x, tmpvar_31.z, zxlerp_21) >= tmpvar_31.y));
  nylerp_20 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_31, tmpvar_31.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_31.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_19.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_19.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_30.xy, tmpvar_30.zw);
  tmpvar_18 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_7 * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_42 = sqrt(dot (p_43, p_43));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_41.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_42), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_42)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_6.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_6.xyz = (tmpvar_41.xyz * tmpvar_51);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 392
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 489
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 482
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 390
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 402
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 415
#line 423
#line 437
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 470
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 474
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 478
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 503
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 503
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 507
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 511
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 515
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 392
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 489
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 482
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 390
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 402
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 415
#line 423
#line 437
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 470
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 474
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 478
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 503
#line 376
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 378
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 364
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 366
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    #line 370
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    #line 374
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 517
lowp vec4 frag( in v2f IN ) {
    #line 519
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 523
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 527
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 531
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 535
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_13.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_13.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_12);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  vec3 p_24;
  p_24 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = (main_1 * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale), tmpvar_20.xy, tmpvar_20.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_24, p_24))), 0.0, 1.0))));
  float tmpvar_26;
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  vec3 p_28;
  p_28 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_29;
  p_29 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_28, p_28)) - (_RimDistSub * sqrt(dot (p_29, p_29))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r2.z, v0, c6
dp4 r2.y, v0, c5
dp4 r2.x, v0, c4
add r3.xyz, -r2, c16
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r0.xyz, r2, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mul o6.xyz, r1.w, r3
mov o1.xyz, r2
mov o2.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 144 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbbihbjmplgaahljoihldaahojilnofhjabaaaaaapiafaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcdmaeaaaaeaaaabaa
apabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
aeaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaa
fgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaagaaaaaadcaaaaalpcaabaaa
acaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaia
ebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaa
aaaaaaaaaiaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaag
pccabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
agaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_22);
  highp float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  zxlerp_21 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = float((mix (tmpvar_31.x, tmpvar_31.z, zxlerp_21) >= tmpvar_31.y));
  nylerp_20 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_31, tmpvar_31.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_31.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_19.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_19.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_30.xy, tmpvar_30.zw);
  tmpvar_18 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_7 * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_42 = sqrt(dot (p_43, p_43));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_41.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_42), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_42)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_6.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_6.xyz = (tmpvar_41.xyz * tmpvar_51);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_22);
  highp float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  zxlerp_21 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = float((mix (tmpvar_31.x, tmpvar_31.z, zxlerp_21) >= tmpvar_31.y));
  nylerp_20 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_31, tmpvar_31.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_31.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_19.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_19.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_30.xy, tmpvar_30.zw);
  tmpvar_18 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_7 * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_42 = sqrt(dot (p_43, p_43));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_41.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_42), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_42)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_6.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_6.xyz = (tmpvar_41.xyz * tmpvar_51);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 397
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 494
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 487
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform samplerCube _ShadowMapTexture;
#line 395
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 407
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 420
#line 428
#line 442
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 475
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 479
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 483
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 508
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 508
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 512
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 516
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 520
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 397
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 494
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 487
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform samplerCube _ShadowMapTexture;
#line 395
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 407
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 420
#line 428
#line 442
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 475
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 479
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 483
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 508
#line 376
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 378
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 364
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 366
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    #line 370
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    #line 374
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 522
lowp vec4 frag( in v2f IN ) {
    #line 524
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 528
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 532
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 536
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 540
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_13.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_13.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_12);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  vec3 p_24;
  p_24 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = (main_1 * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale), tmpvar_20.xy, tmpvar_20.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_24, p_24))), 0.0, 1.0))));
  float tmpvar_26;
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  vec3 p_28;
  p_28 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_29;
  p_29 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_28, p_28)) - (_RimDistSub * sqrt(dot (p_29, p_29))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r2.z, v0, c6
dp4 r2.y, v0, c5
dp4 r2.x, v0, c4
add r3.xyz, -r2, c16
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r0.xyz, r2, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mul o6.xyz, r1.w, r3
mov o1.xyz, r2
mov o2.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 144 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbbihbjmplgaahljoihldaahojilnofhjabaaaaaapiafaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcdmaeaaaaeaaaabaa
apabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
aeaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaa
fgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaagaaaaaadcaaaaalpcaabaaa
acaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaia
ebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaa
aaaaaaaaaiaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaag
pccabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
agaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_22);
  highp float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  zxlerp_21 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = float((mix (tmpvar_31.x, tmpvar_31.z, zxlerp_21) >= tmpvar_31.y));
  nylerp_20 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_31, tmpvar_31.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_31.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_19.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_19.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_30.xy, tmpvar_30.zw);
  tmpvar_18 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_7 * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_42 = sqrt(dot (p_43, p_43));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_41.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_42), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_42)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_6.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_6.xyz = (tmpvar_41.xyz * tmpvar_51);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_22);
  highp float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  zxlerp_21 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = float((mix (tmpvar_31.x, tmpvar_31.z, zxlerp_21) >= tmpvar_31.y));
  nylerp_20 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_31, tmpvar_31.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_31.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_19.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_19.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_30.xy, tmpvar_30.zw);
  tmpvar_18 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_7 * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_42 = sqrt(dot (p_43, p_43));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_41.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_42), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_42)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_6.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_6.xyz = (tmpvar_41.xyz * tmpvar_51);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 398
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 495
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 488
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform samplerCube _ShadowMapTexture;
#line 395
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 408
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 421
#line 429
#line 443
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 476
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 480
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 484
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 509
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 509
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 513
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 517
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 521
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 398
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 495
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 488
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform samplerCube _ShadowMapTexture;
#line 395
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 408
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 421
#line 429
#line 443
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 476
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 480
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 484
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 509
#line 376
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 378
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 364
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 366
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    #line 370
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    #line 374
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 523
lowp vec4 frag( in v2f IN ) {
    #line 525
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 529
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 533
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 537
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 541
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_13.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_13.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_12);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  vec3 p_24;
  p_24 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = (main_1 * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale), tmpvar_20.xy, tmpvar_20.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_24, p_24))), 0.0, 1.0))));
  float tmpvar_26;
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  vec3 p_28;
  p_28 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_29;
  p_29 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_28, p_28)) - (_RimDistSub * sqrt(dot (p_29, p_29))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r2.z, v0, c6
dp4 r2.y, v0, c5
dp4 r2.x, v0, c4
add r3.xyz, -r2, c16
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r0.xyz, r2, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mul o6.xyz, r1.w, r3
mov o1.xyz, r2
mov o2.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 368 // 144 used size, 18 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedgblfoalmdnhkembkdmkiddhkhjlddcjfabaaaaaapiafaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcdmaeaaaaeaaaabaa
apabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
aeaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaa
fgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaagaaaaaadcaaaaalpcaabaaa
acaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaia
ebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaa
aaaaaaaaaiaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaag
pccabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
agaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_22);
  highp float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  zxlerp_21 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = float((mix (tmpvar_31.x, tmpvar_31.z, zxlerp_21) >= tmpvar_31.y));
  nylerp_20 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_31, tmpvar_31.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_31.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_19.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_19.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_30.xy, tmpvar_30.zw);
  tmpvar_18 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_7 * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_42 = sqrt(dot (p_43, p_43));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_41.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_42), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_42)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_6.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_6.xyz = (tmpvar_41.xyz * tmpvar_51);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_22);
  highp float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  zxlerp_21 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = float((mix (tmpvar_31.x, tmpvar_31.z, zxlerp_21) >= tmpvar_31.y));
  nylerp_20 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_31, tmpvar_31.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_31.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_19.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_19.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_30.xy, tmpvar_30.zw);
  tmpvar_18 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_7 * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_42 = sqrt(dot (p_43, p_43));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_41.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_42), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_42)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_6.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_6.xyz = (tmpvar_41.xyz * tmpvar_51);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 407
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 504
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 497
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 398
uniform sampler2D _LightTextureB0;
#line 403
#line 417
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 430
#line 438
#line 452
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 485
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 489
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 493
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 518
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 518
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 522
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 526
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 530
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 407
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 504
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 497
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 398
uniform sampler2D _LightTextureB0;
#line 403
#line 417
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 430
#line 438
#line 452
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 485
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 489
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 493
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 518
#line 376
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 378
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 364
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 366
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    #line 370
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    #line 374
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 532
lowp vec4 frag( in v2f IN ) {
    #line 534
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 538
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 542
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 546
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 550
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_13.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_13.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_12);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  vec3 p_24;
  p_24 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = (main_1 * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale), tmpvar_20.xy, tmpvar_20.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_24, p_24))), 0.0, 1.0))));
  float tmpvar_26;
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  vec3 p_28;
  p_28 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_29;
  p_29 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_28, p_28)) - (_RimDistSub * sqrt(dot (p_29, p_29))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r2.z, v0, c6
dp4 r2.y, v0, c5
dp4 r2.x, v0, c4
add r3.xyz, -r2, c16
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r0.xyz, r2, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mul o6.xyz, r1.w, r3
mov o1.xyz, r2
mov o2.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 368 // 144 used size, 18 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedgblfoalmdnhkembkdmkiddhkhjlddcjfabaaaaaapiafaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcdmaeaaaaeaaaabaa
apabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
aeaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaa
fgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaagaaaaaadcaaaaalpcaabaaa
acaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaia
ebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaa
aaaaaaaaaiaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaag
pccabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
agaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_22);
  highp float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  zxlerp_21 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = float((mix (tmpvar_31.x, tmpvar_31.z, zxlerp_21) >= tmpvar_31.y));
  nylerp_20 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_31, tmpvar_31.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_31.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_19.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_19.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_30.xy, tmpvar_30.zw);
  tmpvar_18 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_7 * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_42 = sqrt(dot (p_43, p_43));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_41.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_42), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_42)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_6.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_6.xyz = (tmpvar_41.xyz * tmpvar_51);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 407
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 504
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 497
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 398
uniform sampler2D _LightTextureB0;
#line 403
#line 417
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 430
#line 438
#line 452
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 485
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 489
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 493
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 518
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 518
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 522
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 526
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 530
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 407
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 504
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 497
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 398
uniform sampler2D _LightTextureB0;
#line 403
#line 417
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 430
#line 438
#line 452
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 485
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 489
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 493
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 518
#line 376
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 378
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 364
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 366
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    #line 370
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    #line 374
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 532
lowp vec4 frag( in v2f IN ) {
    #line 534
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 538
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 542
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 546
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 550
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_13.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_13.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_12);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  vec3 p_24;
  p_24 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = (main_1 * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale), tmpvar_20.xy, tmpvar_20.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_24, p_24))), 0.0, 1.0))));
  float tmpvar_26;
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  vec3 p_28;
  p_28 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_29;
  p_29 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_28, p_28)) - (_RimDistSub * sqrt(dot (p_29, p_29))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r2.z, v0, c6
dp4 r2.y, v0, c5
dp4 r2.x, v0, c4
add r3.xyz, -r2, c16
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r0.xyz, r2, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mul o6.xyz, r1.w, r3
mov o1.xyz, r2
mov o2.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 144 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbbihbjmplgaahljoihldaahojilnofhjabaaaaaapiafaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcdmaeaaaaeaaaabaa
apabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
aeaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaa
fgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaagaaaaaadcaaaaalpcaabaaa
acaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaia
ebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaa
aaaaaaaaaiaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaag
pccabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
agaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_22);
  highp float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  zxlerp_21 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = float((mix (tmpvar_31.x, tmpvar_31.z, zxlerp_21) >= tmpvar_31.y));
  nylerp_20 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_31, tmpvar_31.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_31.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_19.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_19.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_30.xy, tmpvar_30.zw);
  tmpvar_18 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_7 * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_42 = sqrt(dot (p_43, p_43));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_41.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_42), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_42)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_6.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_6.xyz = (tmpvar_41.xyz * tmpvar_51);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_22);
  highp float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  zxlerp_21 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = float((mix (tmpvar_31.x, tmpvar_31.z, zxlerp_21) >= tmpvar_31.y));
  nylerp_20 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_31, tmpvar_31.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_31.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_19.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_19.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_30.xy, tmpvar_30.zw);
  tmpvar_18 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_7 * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_42 = sqrt(dot (p_43, p_43));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_41.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_42), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_42)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_6.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_6.xyz = (tmpvar_41.xyz * tmpvar_51);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 403
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 500
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 493
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 402
uniform highp mat4 _LightMatrix0;
#line 413
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 426
#line 434
#line 448
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 481
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 485
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 489
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 514
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 514
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 518
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 522
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 526
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 403
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 500
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 493
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 402
uniform highp mat4 _LightMatrix0;
#line 413
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 426
#line 434
#line 448
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 481
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 485
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 489
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 514
#line 376
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 378
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 364
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 366
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    #line 370
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    #line 374
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 528
lowp vec4 frag( in v2f IN ) {
    #line 530
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 534
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 538
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 542
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 546
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_13.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_13.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_12);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  vec3 p_24;
  p_24 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = (main_1 * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale), tmpvar_20.xy, tmpvar_20.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_24, p_24))), 0.0, 1.0))));
  float tmpvar_26;
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  vec3 p_28;
  p_28 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_29;
  p_29 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_28, p_28)) - (_RimDistSub * sqrt(dot (p_29, p_29))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r2.z, v0, c6
dp4 r2.y, v0, c5
dp4 r2.x, v0, c4
add r3.xyz, -r2, c16
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r0.xyz, r2, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mul o6.xyz, r1.w, r3
mov o1.xyz, r2
mov o2.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 144 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbbihbjmplgaahljoihldaahojilnofhjabaaaaaapiafaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcdmaeaaaaeaaaabaa
apabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
aeaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaa
fgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaagaaaaaadcaaaaalpcaabaaa
acaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaia
ebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaa
aaaaaaaaaiaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaag
pccabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
agaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_22);
  highp float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  zxlerp_21 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = float((mix (tmpvar_31.x, tmpvar_31.z, zxlerp_21) >= tmpvar_31.y));
  nylerp_20 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_31, tmpvar_31.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_31.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_19.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_19.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_30.xy, tmpvar_30.zw);
  tmpvar_18 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_7 * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_42 = sqrt(dot (p_43, p_43));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_41.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_42), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_42)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_6.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_6.xyz = (tmpvar_41.xyz * tmpvar_51);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_22);
  highp float tmpvar_32;
  tmpvar_32 = float((tmpvar_31.z >= tmpvar_31.x));
  zxlerp_21 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = float((mix (tmpvar_31.x, tmpvar_31.z, zxlerp_21) >= tmpvar_31.y));
  nylerp_20 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_31, tmpvar_31.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_31.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_19.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_19.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_30.xy, tmpvar_30.zw);
  tmpvar_18 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_7 * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_42 = sqrt(dot (p_43, p_43));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_41.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_42), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_42)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_6.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_6.xyz = (tmpvar_41.xyz * tmpvar_51);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 404
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 501
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 494
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 402
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 414
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 427
#line 435
#line 449
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 482
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 486
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 490
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 515
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 515
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 519
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 523
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 527
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 404
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 501
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 494
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 402
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 414
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 427
#line 435
#line 449
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 482
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 486
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 490
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 515
#line 376
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 378
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 364
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 366
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    #line 370
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    #line 374
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 529
lowp vec4 frag( in v2f IN ) {
    #line 531
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 535
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 539
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 543
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 547
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  vec4 o_6;
  vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_13.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_13.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_12);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  vec3 p_24;
  p_24 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = (main_1 * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale), tmpvar_20.xy, tmpvar_20.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_24, p_24))), 0.0, 1.0))));
  float tmpvar_26;
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  vec3 p_28;
  p_28 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_29;
  p_29 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_28, p_28)) - (_RimDistSub * sqrt(dot (p_29, p_29))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_MainRotation]
Matrix 16 [_DetailRotation]
Matrix 20 [_LightMatrix0]
"vs_3_0
; 42 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c27, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
mov r1.w, r0
dp4 r1.y, v0, c5
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r4.xyz, r2, -r0
dp3 r1.x, r4, r4
rsq r1.z, r1.x
dp4 r1.x, v0, c4
mul r3.xyz, r1.xyww, c27.x
mul r3.y, r3, c25.x
mul o5.xyz, r1.z, r4
dp4 r1.z, v0, c6
mov o0, r1
mad o8.xy, r3.z, c26.zwzw, r3
add r3.xyz, -r2, c24
dp3 r2.w, r3, r3
rsq r2.w, r2.w
dp4 r1.w, v0, c15
dp4 r1.z, v0, c14
dp4 r1.x, v0, c12
dp4 r1.y, v0, c13
dp4 o3.w, -r1, c19
dp4 o3.z, -r1, c18
dp4 o3.y, -r1, c17
dp4 o3.x, -r1, c16
mov o4, -r1
mov r1.xyz, r2
dp4 r1.w, v0, c11
dp4 o7.z, r1, c22
dp4 o7.y, r1, c21
dp4 o7.x, r1, c20
dp4 r1.x, v0, c2
mul o6.xyz, r2.w, r3
mov o1.xyz, r2
mov o2.xyz, r0
mov o8.z, -r1.x
mov o8.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 208 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 144 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 46 instructions, 4 temp regs, 0 temp arrays:
// ALU 40 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedpmkknldcgihfffeodadmfaapjaeiciemabaaaaaageaiaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
maagaaaaeaaaabaalaabaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaadhccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaa
acaaaaaaegiccaaaacaaaaaaapaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaa
aaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaabaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaa
acaaaaaaegiocaaaaaaaaaaaadaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaa
egaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaa
egiocaaaaaaaaaaaagaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaa
afaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaa
adaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaia
ebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaia
ebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaia
ebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaiaebaaaaaa
abaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaaaaaaaaaaakaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaajaaaaaaagaabaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaalaaaaaa
kgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaaahaaaaaaegiccaaa
aaaaaaaaamaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaa
aaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaa
abaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadp
dgaaaaaficcabaaaaiaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaaiaaaaaa
kgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaa
aaaaaaaackiacaaaacaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaacaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaahaaaaaadkbabaaaaaaaaaaa
akaabaaaaaaaaaaadgaaaaageccabaaaaiaaaaaaakaabaiaebaaaaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(uv_24.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(uv_24.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_23);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_22 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_22) >= tmpvar_32.y));
  nylerp_21 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_20.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_20.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_19 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_8 * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_7.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_7.xyz = (tmpvar_42.xyz * tmpvar_52);
  lowp float tmpvar_53;
  tmpvar_53 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (color_7.w * clamp ((_InvFade * (tmpvar_54 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_55;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(uv_24.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(uv_24.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_23);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_22 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_22) >= tmpvar_32.y));
  nylerp_21 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_20.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_20.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_19 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_8 * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_7.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_7.xyz = (tmpvar_42.xyz * tmpvar_52);
  lowp float tmpvar_53;
  tmpvar_53 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (color_7.w * clamp ((_InvFade * (tmpvar_54 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_55;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 384
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 481
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 474
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 394
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 407
#line 415
#line 429
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 462
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 466
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 470
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 494
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 494
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 498
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 502
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 506
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 510
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 384
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 481
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 474
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 394
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 407
#line 415
#line 429
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 462
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 466
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 470
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 494
#line 376
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 378
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 364
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 366
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    #line 370
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    #line 374
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 512
lowp vec4 frag( in v2f IN ) {
    #line 514
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 518
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 522
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 526
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 530
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    #line 534
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    #line 538
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  vec4 o_6;
  vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_13.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_13.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_12);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  vec3 p_24;
  p_24 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = (main_1 * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale), tmpvar_20.xy, tmpvar_20.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_24, p_24))), 0.0, 1.0))));
  float tmpvar_26;
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  vec3 p_28;
  p_28 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_29;
  p_29 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_28, p_28)) - (_RimDistSub * sqrt(dot (p_29, p_29))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_ProjectionParams]
Vector 22 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_MainRotation]
Matrix 16 [_DetailRotation]
"vs_3_0
; 37 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord8 o7
def c23, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
mov r1.w, r0
dp4 r1.y, v0, c5
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r4.xyz, r2, -r0
dp3 r1.x, r4, r4
rsq r1.z, r1.x
dp4 r1.x, v0, c4
mul r3.xyz, r1.xyww, c23.x
mul r3.y, r3, c21.x
mul o5.xyz, r1.z, r4
dp4 r1.z, v0, c6
mov o0, r1
mad o7.xy, r3.z, c22.zwzw, r3
add r3.xyz, -r2, c20
dp3 r2.w, r3, r3
rsq r2.w, r2.w
dp4 r1.x, v0, c12
dp4 r1.w, v0, c15
dp4 r1.z, v0, c14
dp4 r1.y, v0, c13
dp4 o3.w, -r1, c19
dp4 o3.z, -r1, c18
dp4 o3.y, -r1, c17
dp4 o3.x, -r1, c16
mov o4, -r1
dp4 r1.x, v0, c2
mul o6.xyz, r2.w, r3
mov o1.xyz, r2
mov o2.xyz, r0
mov o7.z, -r1.x
mov o7.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 240 // 144 used size, 16 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 38 instructions, 4 temp regs, 0 temp arrays:
// ALU 32 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedafbhldaaefoipocaldomhmpckmckecbhabaaaaaabaahaaaaadaaaaaa
cmaaaaaajmaaaaaaieabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaneaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaneaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaneaaaaaaaiaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcieafaaaaeaaaabaagbabaaaafjaaaaaeegiocaaaaaaaaaaa
ajaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaagiaaaaacaeaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaa
dgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaaacaaaaaa
egiccaaaacaaaaaaapaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
abaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaadaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaaegaobaaa
acaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaa
aaaaaaaaagaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaafaaaaaa
agaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaa
egiocaaaaaaaaaaaahaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaa
acaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
acaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaa
afaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaaahaaaaaadkaabaaaaaaaaaaa
aaaaaaahdccabaaaahaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaai
bcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaacaaaaaaafaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaacaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaagaaaaaackbabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaa
ahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaahaaaaaa
akaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(uv_24.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(uv_24.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_23);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_22 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_22) >= tmpvar_32.y));
  nylerp_21 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_20.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_20.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_19 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_8 * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_7.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_7.xyz = (tmpvar_42.xyz * tmpvar_52);
  lowp float tmpvar_53;
  tmpvar_53 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (color_7.w * clamp ((_InvFade * (tmpvar_54 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_55;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(uv_24.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(uv_24.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_23);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_22 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_22) >= tmpvar_32.y));
  nylerp_21 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_20.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_20.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_19 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_8 * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_7.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_7.xyz = (tmpvar_42.xyz * tmpvar_52);
  lowp float tmpvar_53;
  tmpvar_53 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (color_7.w * clamp ((_InvFade * (tmpvar_54 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_55;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 382
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 479
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 projPos;
};
#line 472
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 392
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 405
#line 413
#line 427
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 460
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 464
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 468
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 491
#line 508
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 491
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 495
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 499
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 503
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 382
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 479
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 projPos;
};
#line 472
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 392
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 405
#line 413
#line 427
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 460
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 464
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 468
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 491
#line 508
#line 376
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 378
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 364
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 366
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    #line 370
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    #line 374
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 508
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    #line 512
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 516
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 520
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 524
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 528
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 532
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  vec4 o_6;
  vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_13.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_13.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_12);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  vec3 p_24;
  p_24 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = (main_1 * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale), tmpvar_20.xy, tmpvar_20.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_24, p_24))), 0.0, 1.0))));
  float tmpvar_26;
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  vec3 p_28;
  p_28 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_29;
  p_29 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_28, p_28)) - (_RimDistSub * sqrt(dot (p_29, p_29))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_MainRotation]
Matrix 16 [_DetailRotation]
Matrix 20 [_LightMatrix0]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c27, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
mov r1.w, r0
dp4 r1.y, v0, c5
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r4.xyz, r2, -r0
dp3 r1.x, r4, r4
rsq r1.z, r1.x
dp4 r1.x, v0, c4
mul r3.xyz, r1.xyww, c27.x
mul r3.y, r3, c25.x
mul o5.xyz, r1.z, r4
dp4 r1.z, v0, c6
mov o0, r1
mad o8.xy, r3.z, c26.zwzw, r3
add r3.xyz, -r2, c24
dp3 r2.w, r3, r3
rsq r2.w, r2.w
dp4 r1.w, v0, c15
dp4 r1.z, v0, c14
dp4 r1.x, v0, c12
dp4 r1.y, v0, c13
dp4 o3.w, -r1, c19
dp4 o3.z, -r1, c18
dp4 o3.y, -r1, c17
dp4 o3.x, -r1, c16
mov o4, -r1
mov r1.xyz, r2
dp4 r1.w, v0, c11
dp4 o7.w, r1, c23
dp4 o7.z, r1, c22
dp4 o7.y, r1, c21
dp4 o7.x, r1, c20
dp4 r1.x, v0, c2
mul o6.xyz, r2.w, r3
mov o1.xyz, r2
mov o2.xyz, r0
mov o8.z, -r1.x
mov o8.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 208 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 144 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 46 instructions, 4 temp regs, 0 temp arrays:
// ALU 40 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedannkojihaohfmffppgckjalolaacbpkeabaaaaaageaiaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
maagaaaaeaaaabaalaabaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaa
acaaaaaaegiccaaaacaaaaaaapaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaa
aaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaabaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaa
acaaaaaaegiocaaaaaaaaaaaadaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaa
egaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaa
egiocaaaaaaaaaaaagaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaa
afaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaa
adaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaia
ebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaia
ebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaia
ebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaiaebaaaaaa
abaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaipcaabaaaacaaaaaafgafbaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaaabaaaaaa
egaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaa
kgakbaaaabaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaahaaaaaaegiocaaa
aaaaaaaaamaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaaiccaabaaa
aaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaa
abaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadp
dgaaaaaficcabaaaaiaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaaiaaaaaa
kgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaa
aaaaaaaackiacaaaacaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaacaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaahaaaaaadkbabaaaaaaaaaaa
akaabaaaaaaaaaaadgaaaaageccabaaaaiaaaaaaakaabaiaebaaaaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(uv_24.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(uv_24.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_23);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_22 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_22) >= tmpvar_32.y));
  nylerp_21 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_20.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_20.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_19 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_8 * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_7.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_7.xyz = (tmpvar_42.xyz * tmpvar_52);
  lowp float tmpvar_53;
  tmpvar_53 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (color_7.w * clamp ((_InvFade * (tmpvar_54 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_55;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(uv_24.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(uv_24.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_23);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_22 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_22) >= tmpvar_32.y));
  nylerp_21 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_20.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_20.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_19 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_8 * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_7.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_7.xyz = (tmpvar_42.xyz * tmpvar_52);
  lowp float tmpvar_53;
  tmpvar_53 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (color_7.w * clamp ((_InvFade * (tmpvar_54 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_55;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 393
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 490
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 projPos;
};
#line 483
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 403
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 416
#line 424
#line 438
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 471
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 475
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 479
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 503
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 503
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 507
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 511
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 515
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 519
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 393
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 490
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 projPos;
};
#line 483
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 403
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 416
#line 424
#line 438
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 471
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 475
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 479
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 503
#line 376
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 378
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 364
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 366
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    #line 370
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    #line 374
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 521
lowp vec4 frag( in v2f IN ) {
    #line 523
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 527
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 531
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 535
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 539
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    #line 543
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    #line 547
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  vec4 o_6;
  vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_13.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_13.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_12);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  vec3 p_24;
  p_24 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = (main_1 * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale), tmpvar_20.xy, tmpvar_20.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_24, p_24))), 0.0, 1.0))));
  float tmpvar_26;
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  vec3 p_28;
  p_28 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_29;
  p_29 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_28, p_28)) - (_RimDistSub * sqrt(dot (p_29, p_29))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_MainRotation]
Matrix 16 [_DetailRotation]
Matrix 20 [_LightMatrix0]
"vs_3_0
; 42 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c27, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
mov r1.w, r0
dp4 r1.y, v0, c5
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r4.xyz, r2, -r0
dp3 r1.x, r4, r4
rsq r1.z, r1.x
dp4 r1.x, v0, c4
mul r3.xyz, r1.xyww, c27.x
mul r3.y, r3, c25.x
mul o5.xyz, r1.z, r4
dp4 r1.z, v0, c6
mov o0, r1
mad o8.xy, r3.z, c26.zwzw, r3
add r3.xyz, -r2, c24
dp3 r2.w, r3, r3
rsq r2.w, r2.w
dp4 r1.w, v0, c15
dp4 r1.z, v0, c14
dp4 r1.x, v0, c12
dp4 r1.y, v0, c13
dp4 o3.w, -r1, c19
dp4 o3.z, -r1, c18
dp4 o3.y, -r1, c17
dp4 o3.x, -r1, c16
mov o4, -r1
mov r1.xyz, r2
dp4 r1.w, v0, c11
dp4 o7.z, r1, c22
dp4 o7.y, r1, c21
dp4 o7.x, r1, c20
dp4 r1.x, v0, c2
mul o6.xyz, r2.w, r3
mov o1.xyz, r2
mov o2.xyz, r0
mov o8.z, -r1.x
mov o8.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 208 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 144 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 46 instructions, 4 temp regs, 0 temp arrays:
// ALU 40 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedpmkknldcgihfffeodadmfaapjaeiciemabaaaaaageaiaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
maagaaaaeaaaabaalaabaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaadhccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaa
acaaaaaaegiccaaaacaaaaaaapaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaa
aaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaabaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaa
acaaaaaaegiocaaaaaaaaaaaadaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaa
egaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaa
egiocaaaaaaaaaaaagaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaa
afaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaa
adaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaia
ebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaia
ebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaia
ebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaiaebaaaaaa
abaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaaaaaaaaaaakaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaajaaaaaaagaabaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaalaaaaaa
kgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaaahaaaaaaegiccaaa
aaaaaaaaamaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaa
aaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaa
abaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadp
dgaaaaaficcabaaaaiaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaaiaaaaaa
kgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaa
aaaaaaaackiacaaaacaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaacaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaahaaaaaadkbabaaaaaaaaaaa
akaabaaaaaaaaaaadgaaaaageccabaaaaiaaaaaaakaabaiaebaaaaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(uv_24.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(uv_24.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_23);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_22 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_22) >= tmpvar_32.y));
  nylerp_21 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_20.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_20.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_19 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_8 * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_7.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_7.xyz = (tmpvar_42.xyz * tmpvar_52);
  lowp float tmpvar_53;
  tmpvar_53 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (color_7.w * clamp ((_InvFade * (tmpvar_54 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_55;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(uv_24.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(uv_24.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_23);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_22 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_22) >= tmpvar_32.y));
  nylerp_21 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_20.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_20.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_19 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_8 * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_7.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_7.xyz = (tmpvar_42.xyz * tmpvar_52);
  lowp float tmpvar_53;
  tmpvar_53 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (color_7.w * clamp ((_InvFade * (tmpvar_54 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_55;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 385
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 482
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 475
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 395
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 408
#line 416
#line 430
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 463
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 467
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 471
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 495
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 495
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 499
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 503
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 507
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 511
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 385
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 482
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 475
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 395
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 408
#line 416
#line 430
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 463
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 467
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 471
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 495
#line 376
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 378
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 364
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 366
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    #line 370
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    #line 374
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 513
lowp vec4 frag( in v2f IN ) {
    #line 515
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 519
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 523
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 527
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 531
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    #line 535
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    #line 539
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  vec4 o_6;
  vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_13.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_13.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_12);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  vec3 p_24;
  p_24 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = (main_1 * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale), tmpvar_20.xy, tmpvar_20.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_24, p_24))), 0.0, 1.0))));
  float tmpvar_26;
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  vec3 p_28;
  p_28 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_29;
  p_29 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_28, p_28)) - (_RimDistSub * sqrt(dot (p_29, p_29))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_MainRotation]
Matrix 16 [_DetailRotation]
Matrix 20 [_LightMatrix0]
"vs_3_0
; 41 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c27, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
mov r1.w, r0
dp4 r1.y, v0, c5
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r4.xyz, r2, -r0
dp3 r1.x, r4, r4
rsq r1.z, r1.x
dp4 r1.x, v0, c4
mul r3.xyz, r1.xyww, c27.x
mul r3.y, r3, c25.x
mul o5.xyz, r1.z, r4
dp4 r1.z, v0, c6
mov o0, r1
mad o8.xy, r3.z, c26.zwzw, r3
add r3.xyz, -r2, c24
dp3 r2.w, r3, r3
rsq r2.w, r2.w
dp4 r1.w, v0, c15
dp4 r1.z, v0, c14
dp4 r1.x, v0, c12
dp4 r1.y, v0, c13
dp4 o3.w, -r1, c19
dp4 o3.z, -r1, c18
dp4 o3.y, -r1, c17
dp4 o3.x, -r1, c16
mov o4, -r1
mov r1.xyz, r2
dp4 r1.w, v0, c11
dp4 o7.y, r1, c21
dp4 o7.x, r1, c20
dp4 r1.x, v0, c2
mul o6.xyz, r2.w, r3
mov o1.xyz, r2
mov o2.xyz, r0
mov o8.z, -r1.x
mov o8.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 208 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 144 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 46 instructions, 4 temp regs, 0 temp arrays:
// ALU 40 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedoommjikaafhdbnflakbjifbpgojikkgkabaaaaaageaiaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaadamaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
maagaaaaeaaaabaalaabaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaaddccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaa
acaaaaaaegiccaaaacaaaaaaapaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaa
aaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaabaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaa
acaaaaaaegiocaaaaaaaaaaaadaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaa
egaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaa
egiocaaaaaaaaaaaagaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaa
afaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaa
adaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaia
ebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaia
ebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaia
ebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaiaebaaaaaa
abaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaidcaabaaaacaaaaaafgafbaaaabaaaaaaegiacaaaaaaaaaaaakaaaaaa
dcaaaaakdcaabaaaabaaaaaaegiacaaaaaaaaaaaajaaaaaaagaabaaaabaaaaaa
egaabaaaacaaaaaadcaaaaakdcaabaaaabaaaaaaegiacaaaaaaaaaaaalaaaaaa
kgakbaaaabaaaaaaegaabaaaabaaaaaadcaaaaakdccabaaaahaaaaaaegiacaaa
aaaaaaaaamaaaaaapgapbaaaabaaaaaaegaabaaaabaaaaaadiaaaaaiccaabaaa
aaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaa
abaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadp
dgaaaaaficcabaaaaiaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaaiaaaaaa
kgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaa
aaaaaaaackiacaaaacaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaacaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaahaaaaaadkbabaaaaaaaaaaa
akaabaaaaaaaaaaadgaaaaageccabaaaaiaaaaaaakaabaiaebaaaaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(uv_24.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(uv_24.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_23);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_22 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_22) >= tmpvar_32.y));
  nylerp_21 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_20.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_20.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_19 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_8 * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_7.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_7.xyz = (tmpvar_42.xyz * tmpvar_52);
  lowp float tmpvar_53;
  tmpvar_53 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (color_7.w * clamp ((_InvFade * (tmpvar_54 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_55;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(uv_24.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(uv_24.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_23);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_22 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_22) >= tmpvar_32.y));
  nylerp_21 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_20.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_20.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_19 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_8 * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_7.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_7.xyz = (tmpvar_42.xyz * tmpvar_52);
  lowp float tmpvar_53;
  tmpvar_53 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (color_7.w * clamp ((_InvFade * (tmpvar_54 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_55;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 384
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 481
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 projPos;
};
#line 474
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 394
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 407
#line 415
#line 429
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 462
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 466
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 470
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 494
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 494
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 498
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 502
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 506
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 510
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 384
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 481
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 projPos;
};
#line 474
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 394
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 407
#line 415
#line 429
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 462
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 466
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 470
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 494
#line 376
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 378
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 364
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 366
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    #line 370
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    #line 374
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 512
lowp vec4 frag( in v2f IN ) {
    #line 514
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 518
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 522
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 526
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 530
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    #line 534
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    #line 538
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform mat4 unity_World2Shadow[4];
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  vec4 o_6;
  vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_13.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_13.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_12);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  vec3 p_24;
  p_24 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = (main_1 * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale), tmpvar_20.xy, tmpvar_20.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_24, p_24))), 0.0, 1.0))));
  float tmpvar_26;
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  vec3 p_28;
  p_28 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_29;
  p_29 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_28, p_28)) - (_RimDistSub * sqrt(dot (p_29, p_29))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 28 [_WorldSpaceCameraPos]
Vector 29 [_ProjectionParams]
Vector 30 [_ScreenParams]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Matrix 24 [_LightMatrix0]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c31, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c14
dp4 r2.y, v0, c13
dp4 r2.x, v0, c12
mov r1.w, r0
dp4 r1.y, v0, c5
mov r0.z, c14.w
mov r0.x, c12.w
mov r0.y, c13.w
add r4.xyz, r2, -r0
dp3 r1.x, r4, r4
rsq r1.z, r1.x
dp4 r1.x, v0, c4
mul r3.xyz, r1.xyww, c31.x
mul r3.y, r3, c29.x
mul o5.xyz, r1.z, r4
dp4 r1.z, v0, c6
mov o0, r1
mad o9.xy, r3.z, c30.zwzw, r3
add r3.xyz, -r2, c28
dp3 r2.w, r3, r3
rsq r2.w, r2.w
dp4 r1.w, v0, c19
dp4 r1.z, v0, c18
dp4 r1.x, v0, c16
dp4 r1.y, v0, c17
dp4 o3.w, -r1, c23
dp4 o3.z, -r1, c22
dp4 o3.y, -r1, c21
dp4 o3.x, -r1, c20
mov o4, -r1
mov r1.xyz, r2
dp4 r1.w, v0, c15
dp4 o7.w, r1, c27
dp4 o7.z, r1, c26
dp4 o7.y, r1, c25
dp4 o7.x, r1, c24
dp4 o8.w, r1, c11
dp4 o8.z, r1, c10
dp4 o8.y, r1, c9
dp4 o8.x, r1, c8
dp4 r1.x, v0, c2
mul o6.xyz, r2.w, r3
mov o1.xyz, r2
mov o2.xyz, r0
mov o9.z, -r1.x
mov o9.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 208 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 144 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 50 instructions, 4 temp regs, 0 temp arrays:
// ALU 44 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedeeinibidhbccjcfachnmbekacgpmbjooabaaaaaadaajaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcheahaaaaeaaaabaa
nnabaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaamaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaadaaaaaa
apaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaa
aaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
adaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaaj
pcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaagaaaaaa
dcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaa
acaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaadaaaaaaapaaaaaa
aaaaaaajhcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaa
kgakbaaaaaaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaabaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaacaaaaaa
fgafbaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaajaaaaaaagaabaaaabaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaaabaaaaaaegaobaaa
acaaaaaadcaaaaakpccabaaaahaaaaaaegiocaaaaaaaaaaaamaaaaaapgapbaaa
abaaaaaaegaobaaaacaaaaaadiaaaaaipcaabaaaacaaaaaafgafbaaaabaaaaaa
egiocaaaacaaaaaaajaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaacaaaaaa
aiaaaaaaagaabaaaabaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaacaaaaaaakaaaaaakgakbaaaabaaaaaaegaobaaaacaaaaaadcaaaaak
pccabaaaaiaaaaaaegiocaaaacaaaaaaalaaaaaapgapbaaaabaaaaaaegaobaaa
acaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaa
afaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaaajaaaaaadkaabaaaaaaaaaaa
aaaaaaahdccabaaaajaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaai
bcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
ahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaa
akaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(uv_24.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(uv_24.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_23);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_22 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_22) >= tmpvar_32.y));
  nylerp_21 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_20.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_20.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_19 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_8 * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_7.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_7.xyz = (tmpvar_42.xyz * tmpvar_52);
  lowp float tmpvar_53;
  tmpvar_53 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (color_7.w * clamp ((_InvFade * (tmpvar_54 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_55;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(uv_24.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(uv_24.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_23);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_22 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_22) >= tmpvar_32.y));
  nylerp_21 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_20.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_20.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_19 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_8 * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_7.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_7.xyz = (tmpvar_42.xyz * tmpvar_52);
  lowp float tmpvar_53;
  tmpvar_53 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (color_7.w * clamp ((_InvFade * (tmpvar_54 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_55;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 399
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 496
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 489
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 390
uniform sampler2D _LightTextureB0;
#line 395
#line 409
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 422
#line 430
#line 444
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 477
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 481
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 485
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 510
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 510
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 514
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 518
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 522
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 527
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 399
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 496
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 489
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 390
uniform sampler2D _LightTextureB0;
#line 395
#line 409
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 422
#line 430
#line 444
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 477
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 481
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 485
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 510
#line 376
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 378
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 364
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 366
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    #line 370
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    #line 374
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 529
lowp vec4 frag( in v2f IN ) {
    #line 531
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 535
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 539
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 543
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 547
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    #line 551
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    #line 555
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform mat4 unity_World2Shadow[4];
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  vec4 o_6;
  vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_13.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_13.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_12);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  vec3 p_24;
  p_24 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = (main_1 * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale), tmpvar_20.xy, tmpvar_20.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_24, p_24))), 0.0, 1.0))));
  float tmpvar_26;
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  vec3 p_28;
  p_28 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_29;
  p_29 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_28, p_28)) - (_RimDistSub * sqrt(dot (p_29, p_29))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 28 [_WorldSpaceCameraPos]
Vector 29 [_ProjectionParams]
Vector 30 [_ScreenParams]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Matrix 24 [_LightMatrix0]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c31, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c14
dp4 r2.y, v0, c13
dp4 r2.x, v0, c12
mov r1.w, r0
dp4 r1.y, v0, c5
mov r0.z, c14.w
mov r0.x, c12.w
mov r0.y, c13.w
add r4.xyz, r2, -r0
dp3 r1.x, r4, r4
rsq r1.z, r1.x
dp4 r1.x, v0, c4
mul r3.xyz, r1.xyww, c31.x
mul r3.y, r3, c29.x
mul o5.xyz, r1.z, r4
dp4 r1.z, v0, c6
mov o0, r1
mad o9.xy, r3.z, c30.zwzw, r3
add r3.xyz, -r2, c28
dp3 r2.w, r3, r3
rsq r2.w, r2.w
dp4 r1.w, v0, c19
dp4 r1.z, v0, c18
dp4 r1.x, v0, c16
dp4 r1.y, v0, c17
dp4 o3.w, -r1, c23
dp4 o3.z, -r1, c22
dp4 o3.y, -r1, c21
dp4 o3.x, -r1, c20
mov o4, -r1
mov r1.xyz, r2
dp4 r1.w, v0, c15
dp4 o7.w, r1, c27
dp4 o7.z, r1, c26
dp4 o7.y, r1, c25
dp4 o7.x, r1, c24
dp4 o8.w, r1, c11
dp4 o8.z, r1, c10
dp4 o8.y, r1, c9
dp4 o8.x, r1, c8
dp4 r1.x, v0, c2
mul o6.xyz, r2.w, r3
mov o1.xyz, r2
mov o2.xyz, r0
mov o9.z, -r1.x
mov o9.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 208 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 144 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 50 instructions, 4 temp regs, 0 temp arrays:
// ALU 44 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedeeinibidhbccjcfachnmbekacgpmbjooabaaaaaadaajaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcheahaaaaeaaaabaa
nnabaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaamaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaadaaaaaa
apaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaa
aaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
adaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaaj
pcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaagaaaaaa
dcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaa
acaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaadaaaaaaapaaaaaa
aaaaaaajhcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaa
kgakbaaaaaaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaabaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaacaaaaaa
fgafbaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaajaaaaaaagaabaaaabaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaaabaaaaaaegaobaaa
acaaaaaadcaaaaakpccabaaaahaaaaaaegiocaaaaaaaaaaaamaaaaaapgapbaaa
abaaaaaaegaobaaaacaaaaaadiaaaaaipcaabaaaacaaaaaafgafbaaaabaaaaaa
egiocaaaacaaaaaaajaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaacaaaaaa
aiaaaaaaagaabaaaabaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaacaaaaaaakaaaaaakgakbaaaabaaaaaaegaobaaaacaaaaaadcaaaaak
pccabaaaaiaaaaaaegiocaaaacaaaaaaalaaaaaapgapbaaaabaaaaaaegaobaaa
acaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaa
afaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaaajaaaaaadkaabaaaaaaaaaaa
aaaaaaahdccabaaaajaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaai
bcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
ahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaa
akaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(uv_24.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(uv_24.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_23);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_22 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_22) >= tmpvar_32.y));
  nylerp_21 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_20.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_20.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_19 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_8 * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_7.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_7.xyz = (tmpvar_42.xyz * tmpvar_52);
  lowp float tmpvar_53;
  tmpvar_53 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (color_7.w * clamp ((_InvFade * (tmpvar_54 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_55;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 400
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 497
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 490
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 390
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 410
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 423
#line 431
#line 445
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 478
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 482
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 486
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 511
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 511
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 515
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 519
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 523
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 528
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 400
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 497
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 490
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 390
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 410
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 423
#line 431
#line 445
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 478
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 482
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 486
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 511
#line 376
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 378
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 364
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 366
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    #line 370
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    #line 374
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 530
lowp vec4 frag( in v2f IN ) {
    #line 532
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 536
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 540
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 544
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 548
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    #line 552
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    #line 556
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  vec4 o_6;
  vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  vec4 o_9;
  vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_2 * 0.5);
  vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = o_9;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_13.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_13.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_12);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  vec3 p_24;
  p_24 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = (main_1 * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale), tmpvar_20.xy, tmpvar_20.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_24, p_24))), 0.0, 1.0))));
  float tmpvar_26;
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  vec3 p_28;
  p_28 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_29;
  p_29 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_28, p_28)) - (_RimDistSub * sqrt(dot (p_29, p_29))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_ProjectionParams]
Vector 22 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_MainRotation]
Matrix 16 [_DetailRotation]
"vs_3_0
; 40 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c23, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r2.w, v0, c7
mov r1.w, r2
dp4 r3.z, v0, c10
dp4 r3.y, v0, c9
dp4 r3.x, v0, c8
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.z, v0, c6
mov r2.z, c10.w
mov r2.x, c8.w
mov r2.y, c9.w
add r4.xyz, r3, -r2
dp3 r0.x, r4, r4
rsq r0.w, r0.x
mul r0.xyz, r1.xyww, c23.x
mul r0.y, r0, c21.x
mad r0.xy, r0.z, c22.zwzw, r0
mul o5.xyz, r0.w, r4
mov r0.zw, r1
mov o7, r0
mov o8.xy, r0
mov o0, r1
add r1.xyz, -r3, c20
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 r0.x, v0, c12
dp4 r0.w, v0, c15
dp4 r0.z, v0, c14
dp4 r0.y, v0, c13
dp4 o3.w, -r0, c19
dp4 o3.z, -r0, c18
dp4 o3.y, -r0, c17
dp4 o3.x, -r0, c16
mov o4, -r0
dp4 r0.x, v0, c2
mul o6.xyz, r1.w, r1
mov o1.xyz, r3
mov o2.xyz, r2
mov o8.z, -r0.x
mov o8.w, r2
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 144 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 40 instructions, 4 temp regs, 0 temp arrays:
// ALU 33 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedeclhdecclfaikafdenffipeoolapbgoeabaaaaaageahaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
maafaaaaeaaaabaahaabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaa
acaaaaaaegiccaaaacaaaaaaapaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaa
aaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaabaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaa
acaaaaaaegiocaaaaaaaaaaaadaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaa
egaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaa
egiocaaaaaaaaaaaagaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaa
afaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaa
adaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaia
ebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaia
ebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaia
ebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaiaebaaaaaa
abaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhccabaaaafaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaabaaaaaa
egacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaabkaabaaaaaaaaaaaakiacaaa
abaaaaaaafaaaaaadiaaaaahicaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaaadpdiaaaaakfcaabaaaabaaaaaaagadbaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaaaaaaaaaadpaaaaaaaaaaaaaaahdcaabaaaaaaaaaaakgakbaaaabaaaaaa
mgaabaaaabaaaaaadgaaaaafpccabaaaahaaaaaaegaobaaaaaaaaaaadgaaaaaf
lccabaaaaiaaaaaaegambaaaaaaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaa
aaaaaaaackiacaaaacaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaacaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaahaaaaaadkbabaaaaaaaaaaa
akaabaaaaaaaaaaadgaaaaageccabaaaaiaaaaaaakaabaiaebaaaaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(uv_24.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(uv_24.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_23);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_22 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_22) >= tmpvar_32.y));
  nylerp_21 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_20.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_20.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_19 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_8 * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_7.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_7.xyz = (tmpvar_42.xyz * tmpvar_52);
  lowp float tmpvar_53;
  tmpvar_53 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (color_7.w * clamp ((_InvFade * (tmpvar_54 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_55;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = o_9;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(uv_24.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(uv_24.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_23);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_22 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_22) >= tmpvar_32.y));
  nylerp_21 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_20.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_20.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_19 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_8 * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_7.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_7.xyz = (tmpvar_42.xyz * tmpvar_52);
  lowp float tmpvar_53;
  tmpvar_53 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (color_7.w * clamp ((_InvFade * (tmpvar_54 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_55;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 390
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 487
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 480
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 400
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 413
#line 421
#line 435
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 468
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 472
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 476
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 500
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 500
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 504
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 508
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 512
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 516
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 390
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 487
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 480
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 400
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 413
#line 421
#line 435
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 468
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 472
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 476
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 500
#line 376
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 378
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 364
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 366
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    #line 370
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    #line 374
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 518
lowp vec4 frag( in v2f IN ) {
    #line 520
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 524
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 528
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 532
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 536
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    #line 540
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    #line 544
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  vec4 o_6;
  vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  vec4 o_9;
  vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_2 * 0.5);
  vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD7 = o_9;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_13.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_13.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_12);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  vec3 p_24;
  p_24 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = (main_1 * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale), tmpvar_20.xy, tmpvar_20.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_24, p_24))), 0.0, 1.0))));
  float tmpvar_26;
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  vec3 p_28;
  p_28 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_29;
  p_29 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_28, p_28)) - (_RimDistSub * sqrt(dot (p_29, p_29))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_MainRotation]
Matrix 16 [_DetailRotation]
Matrix 20 [_LightMatrix0]
"vs_3_0
; 44 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c27, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r2.w, v0, c7
dp4 r3.z, v0, c10
dp4 r3.y, v0, c9
dp4 r3.x, v0, c8
mov r1.w, r2
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.z, v0, c6
mov r2.z, c10.w
mov r2.x, c8.w
mov r2.y, c9.w
add r4.xyz, r3, -r2
dp3 r0.x, r4, r4
rsq r0.w, r0.x
mul r0.xyz, r1.xyww, c27.x
mul r0.y, r0, c25.x
mad r0.xy, r0.z, c26.zwzw, r0
mul o5.xyz, r0.w, r4
mov r0.zw, r1
mov o8, r0
mov o9.xy, r0
mov o0, r1
add r1.xyz, -r3, c24
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 r0.w, v0, c15
dp4 r0.z, v0, c14
dp4 r0.x, v0, c12
dp4 r0.y, v0, c13
dp4 o3.w, -r0, c19
dp4 o3.z, -r0, c18
dp4 o3.y, -r0, c17
dp4 o3.x, -r0, c16
mov o4, -r0
mov r0.xyz, r3
dp4 r0.w, v0, c11
dp4 o7.y, r0, c21
dp4 o7.x, r0, c20
dp4 r0.x, v0, c2
mul o6.xyz, r1.w, r1
mov o1.xyz, r3
mov o2.xyz, r2
mov o9.z, -r0.x
mov o9.w, r2
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 368 // 272 used size, 18 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 208 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 48 instructions, 4 temp regs, 0 temp arrays:
// ALU 41 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkbpehdcdogfgekibgifggpkjiokpfchiabaaaaaaliaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaadamaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcpmagaaaaeaaaabaa
lpabaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagfaaaaaddccabaaa
ahaaaaaagfaaaaadpccabaaaaiaaaaaagfaaaaadpccabaaaajaaaaaagiaaaaac
aeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaaf
pccabaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaa
aaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaabaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaadgaaaaag
hccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaadiaaaaaipcaabaaaacaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaabaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaadaaaaaakgbkbaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaaeaaaaaapgbpbaaa
aaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaa
acaaaaaaegiocaaaaaaaaaaaagaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaa
aaaaaaaaafaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaiaaaaaa
pgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaa
egiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaa
baaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaa
abaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaidcaabaaaacaaaaaafgafbaaaabaaaaaaegiacaaaaaaaaaaa
aoaaaaaadcaaaaakdcaabaaaabaaaaaaegiacaaaaaaaaaaaanaaaaaaagaabaaa
abaaaaaaegaabaaaacaaaaaadcaaaaakdcaabaaaabaaaaaaegiacaaaaaaaaaaa
apaaaaaakgakbaaaabaaaaaaegaabaaaabaaaaaadcaaaaakdccabaaaahaaaaaa
egiacaaaaaaaaaaabaaaaaaapgapbaaaabaaaaaaegaabaaaabaaaaaadiaaaaai
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaah
icaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaadpdiaaaaakfcaabaaa
abaaaaaaagadbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaaaa
aaaaaaahdcaabaaaaaaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadgaaaaaf
pccabaaaaiaaaaaaegaobaaaaaaaaaaadgaaaaaflccabaaaajaaaaaaegambaaa
aaaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaacaaaaaa
afaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaaeaaaaaaakbabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaa
agaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaacaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaag
eccabaaaajaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(uv_24.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(uv_24.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_23);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_22 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_22) >= tmpvar_32.y));
  nylerp_21 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_20.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_20.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_19 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_8 * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_7.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_7.xyz = (tmpvar_42.xyz * tmpvar_52);
  lowp float tmpvar_53;
  tmpvar_53 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (color_7.w * clamp ((_InvFade * (tmpvar_54 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_55;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD7 = o_9;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(uv_24.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(uv_24.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_23);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_22 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_22) >= tmpvar_32.y));
  nylerp_21 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_20.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_20.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_19 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_8 * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_7.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_7.xyz = (tmpvar_42.xyz * tmpvar_52);
  lowp float tmpvar_53;
  tmpvar_53 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (color_7.w * clamp ((_InvFade * (tmpvar_54 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_55;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 392
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 489
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 482
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 390
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 402
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 415
#line 423
#line 437
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 470
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 474
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 478
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 503
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 503
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 507
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 511
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 515
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 520
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 392
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 489
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 482
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 390
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 402
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 415
#line 423
#line 437
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 470
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 474
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 478
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 503
#line 376
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 378
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 364
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 366
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    #line 370
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    #line 374
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 522
lowp vec4 frag( in v2f IN ) {
    #line 524
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 528
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 532
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 536
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 540
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    #line 544
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    #line 548
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform vec4 _LightPositionRange;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  vec4 o_6;
  vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_13.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_13.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_12);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  vec3 p_24;
  p_24 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = (main_1 * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale), tmpvar_20.xy, tmpvar_20.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_24, p_24))), 0.0, 1.0))));
  float tmpvar_26;
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  vec3 p_28;
  p_28 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_29;
  p_29 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_28, p_28)) - (_RimDistSub * sqrt(dot (p_29, p_29))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_LightPositionRange]
Matrix 8 [_Object2World]
Matrix 12 [_MainRotation]
Matrix 16 [_DetailRotation]
Matrix 20 [_LightMatrix0]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c28, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
mov r0.x, c8.w
mov r1.w, r0
dp4 r1.y, v0, c5
mov r0.z, c10.w
mov r0.y, c9.w
add r4.xyz, r2, -r0
dp3 r1.x, r4, r4
rsq r1.z, r1.x
dp4 r1.x, v0, c4
mul r3.xyz, r1.xyww, c28.x
mul r3.y, r3, c25.x
mul o5.xyz, r1.z, r4
dp4 r1.z, v0, c6
mov o0, r1
mad o9.xy, r3.z, c26.zwzw, r3
add r3.xyz, -r2, c24
dp3 r2.w, r3, r3
rsq r2.w, r2.w
mov o2.xyz, r0
dp4 r0.x, v0, c2
dp4 r1.w, v0, c15
dp4 r1.z, v0, c14
dp4 r1.x, v0, c12
dp4 r1.y, v0, c13
dp4 o3.w, -r1, c19
dp4 o3.z, -r1, c18
dp4 o3.y, -r1, c17
dp4 o3.x, -r1, c16
mov o4, -r1
mov r1.xyz, r2
dp4 r1.w, v0, c11
mul o6.xyz, r2.w, r3
dp4 o7.z, r1, c22
dp4 o7.y, r1, c21
dp4 o7.x, r1, c20
mov o1.xyz, r2
add o8.xyz, r2, -c27
mov o9.z, -r0.x
mov o9.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 208 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 144 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 47 instructions, 4 temp regs, 0 temp arrays:
// ALU 41 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecednjjgpnijiglcjnfmmikiocmopaabbgmhabaaaaaalmaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahaiaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcaaahaaaaeaaaabaa
maabaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaadhccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaadaaaaaa
apaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaa
aaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
adaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaaj
pcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaagaaaaaa
dcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaa
acaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaadaaaaaaapaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaiaebaaaaaa
abaaaaaaegiccaaaabaaaaaaaeaaaaaaaaaaaaajhccabaaaaiaaaaaaegacbaaa
abaaaaaaegiccaiaebaaaaaaacaaaaaaabaaaaaabaaaaaahecaabaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahhccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaa
diaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaa
acaaaaaafgafbaaaabaaaaaaegiccaaaaaaaaaaaakaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaaaaaaaaaajaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaalaaaaaakgakbaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhccabaaaahaaaaaaegiccaaaaaaaaaaaamaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaa
aaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaa
ajaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaajaaaaaakgakbaaaabaaaaaa
mgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaa
adaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaa
akbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
adaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaa
dgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(uv_24.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(uv_24.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_23);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_22 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_22) >= tmpvar_32.y));
  nylerp_21 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_20.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_20.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_19 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_8 * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_7.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_7.xyz = (tmpvar_42.xyz * tmpvar_52);
  lowp float tmpvar_53;
  tmpvar_53 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (color_7.w * clamp ((_InvFade * (tmpvar_54 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_55;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(uv_24.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(uv_24.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_23);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_22 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_22) >= tmpvar_32.y));
  nylerp_21 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_20.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_20.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_19 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_8 * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_7.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_7.xyz = (tmpvar_42.xyz * tmpvar_52);
  lowp float tmpvar_53;
  tmpvar_53 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (color_7.w * clamp ((_InvFade * (tmpvar_54 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_55;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 397
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 494
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 487
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform samplerCube _ShadowMapTexture;
#line 395
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 407
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 420
#line 428
#line 442
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 475
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 479
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 483
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 508
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 508
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 512
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 516
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 520
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 525
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 397
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 494
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 487
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform samplerCube _ShadowMapTexture;
#line 395
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 407
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 420
#line 428
#line 442
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 475
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 479
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 483
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 508
#line 376
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 378
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 364
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 366
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    #line 370
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    #line 374
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 527
lowp vec4 frag( in v2f IN ) {
    #line 529
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 533
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 537
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 541
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 545
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    #line 549
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    #line 553
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform vec4 _LightPositionRange;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  vec4 o_6;
  vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_13.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_13.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_12);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  vec3 p_24;
  p_24 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = (main_1 * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale), tmpvar_20.xy, tmpvar_20.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_24, p_24))), 0.0, 1.0))));
  float tmpvar_26;
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  vec3 p_28;
  p_28 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_29;
  p_29 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_28, p_28)) - (_RimDistSub * sqrt(dot (p_29, p_29))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_LightPositionRange]
Matrix 8 [_Object2World]
Matrix 12 [_MainRotation]
Matrix 16 [_DetailRotation]
Matrix 20 [_LightMatrix0]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c28, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
mov r0.x, c8.w
mov r1.w, r0
dp4 r1.y, v0, c5
mov r0.z, c10.w
mov r0.y, c9.w
add r4.xyz, r2, -r0
dp3 r1.x, r4, r4
rsq r1.z, r1.x
dp4 r1.x, v0, c4
mul r3.xyz, r1.xyww, c28.x
mul r3.y, r3, c25.x
mul o5.xyz, r1.z, r4
dp4 r1.z, v0, c6
mov o0, r1
mad o9.xy, r3.z, c26.zwzw, r3
add r3.xyz, -r2, c24
dp3 r2.w, r3, r3
rsq r2.w, r2.w
mov o2.xyz, r0
dp4 r0.x, v0, c2
dp4 r1.w, v0, c15
dp4 r1.z, v0, c14
dp4 r1.x, v0, c12
dp4 r1.y, v0, c13
dp4 o3.w, -r1, c19
dp4 o3.z, -r1, c18
dp4 o3.y, -r1, c17
dp4 o3.x, -r1, c16
mov o4, -r1
mov r1.xyz, r2
dp4 r1.w, v0, c11
mul o6.xyz, r2.w, r3
dp4 o7.z, r1, c22
dp4 o7.y, r1, c21
dp4 o7.x, r1, c20
mov o1.xyz, r2
add o8.xyz, r2, -c27
mov o9.z, -r0.x
mov o9.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 208 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 144 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 47 instructions, 4 temp regs, 0 temp arrays:
// ALU 41 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecednjjgpnijiglcjnfmmikiocmopaabbgmhabaaaaaalmaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahaiaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcaaahaaaaeaaaabaa
maabaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaadhccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaadaaaaaa
apaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaa
aaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
adaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaaj
pcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaagaaaaaa
dcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaa
acaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaadaaaaaaapaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaiaebaaaaaa
abaaaaaaegiccaaaabaaaaaaaeaaaaaaaaaaaaajhccabaaaaiaaaaaaegacbaaa
abaaaaaaegiccaiaebaaaaaaacaaaaaaabaaaaaabaaaaaahecaabaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahhccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaa
diaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaa
acaaaaaafgafbaaaabaaaaaaegiccaaaaaaaaaaaakaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaaaaaaaaaajaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaalaaaaaakgakbaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhccabaaaahaaaaaaegiccaaaaaaaaaaaamaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaa
aaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaa
ajaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaajaaaaaakgakbaaaabaaaaaa
mgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaa
adaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaa
akbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
adaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaa
dgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(uv_24.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(uv_24.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_23);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_22 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_22) >= tmpvar_32.y));
  nylerp_21 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_20.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_20.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_19 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_8 * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_7.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_7.xyz = (tmpvar_42.xyz * tmpvar_52);
  lowp float tmpvar_53;
  tmpvar_53 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (color_7.w * clamp ((_InvFade * (tmpvar_54 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_55;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(uv_24.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(uv_24.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_23);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_22 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_22) >= tmpvar_32.y));
  nylerp_21 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_20.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_20.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_19 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_8 * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_7.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_7.xyz = (tmpvar_42.xyz * tmpvar_52);
  lowp float tmpvar_53;
  tmpvar_53 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (color_7.w * clamp ((_InvFade * (tmpvar_54 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_55;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 398
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 495
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 488
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform samplerCube _ShadowMapTexture;
#line 395
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 408
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 421
#line 429
#line 443
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 476
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 480
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 484
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 509
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 509
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 513
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 517
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 521
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 526
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 398
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 495
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 488
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform samplerCube _ShadowMapTexture;
#line 395
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 408
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 421
#line 429
#line 443
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 476
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 480
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 484
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 509
#line 376
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 378
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 364
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 366
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    #line 370
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    #line 374
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 528
lowp vec4 frag( in v2f IN ) {
    #line 530
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 534
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 538
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 542
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 546
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    #line 550
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    #line 554
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform mat4 unity_World2Shadow[4];
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  vec4 o_6;
  vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_13.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_13.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_12);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  vec3 p_24;
  p_24 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = (main_1 * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale), tmpvar_20.xy, tmpvar_20.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_24, p_24))), 0.0, 1.0))));
  float tmpvar_26;
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  vec3 p_28;
  p_28 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_29;
  p_29 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_28, p_28)) - (_RimDistSub * sqrt(dot (p_29, p_29))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 28 [_WorldSpaceCameraPos]
Vector 29 [_ProjectionParams]
Vector 30 [_ScreenParams]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Matrix 24 [_LightMatrix0]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c31, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c14
dp4 r2.y, v0, c13
dp4 r2.x, v0, c12
mov r1.w, r0
dp4 r1.y, v0, c5
mov r0.z, c14.w
mov r0.x, c12.w
mov r0.y, c13.w
add r4.xyz, r2, -r0
dp3 r1.x, r4, r4
rsq r1.z, r1.x
dp4 r1.x, v0, c4
mul r3.xyz, r1.xyww, c31.x
mul r3.y, r3, c29.x
mul o5.xyz, r1.z, r4
dp4 r1.z, v0, c6
mov o0, r1
mad o9.xy, r3.z, c30.zwzw, r3
add r3.xyz, -r2, c28
dp3 r2.w, r3, r3
rsq r2.w, r2.w
dp4 r1.w, v0, c19
dp4 r1.z, v0, c18
dp4 r1.x, v0, c16
dp4 r1.y, v0, c17
dp4 o3.w, -r1, c23
dp4 o3.z, -r1, c22
dp4 o3.y, -r1, c21
dp4 o3.x, -r1, c20
mov o4, -r1
mov r1.xyz, r2
dp4 r1.w, v0, c15
dp4 o7.w, r1, c27
dp4 o7.z, r1, c26
dp4 o7.y, r1, c25
dp4 o7.x, r1, c24
dp4 o8.w, r1, c11
dp4 o8.z, r1, c10
dp4 o8.y, r1, c9
dp4 o8.x, r1, c8
dp4 r1.x, v0, c2
mul o6.xyz, r2.w, r3
mov o1.xyz, r2
mov o2.xyz, r0
mov o9.z, -r1.x
mov o9.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 368 // 272 used size, 18 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 208 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 50 instructions, 4 temp regs, 0 temp arrays:
// ALU 44 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedfpcpeielkbpcbmchoplnppepgokkjbejabaaaaaadaajaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcheahaaaaeaaaabaa
nnabaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaamaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaadaaaaaa
apaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaa
aaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
adaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaaj
pcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaagaaaaaa
dcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaa
acaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaadaaaaaaapaaaaaa
aaaaaaajhcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaa
kgakbaaaaaaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaabaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaacaaaaaa
fgafbaaaabaaaaaaegiocaaaaaaaaaaaaoaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaanaaaaaaagaabaaaabaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaapaaaaaakgakbaaaabaaaaaaegaobaaa
acaaaaaadcaaaaakpccabaaaahaaaaaaegiocaaaaaaaaaaabaaaaaaapgapbaaa
abaaaaaaegaobaaaacaaaaaadiaaaaaipcaabaaaacaaaaaafgafbaaaabaaaaaa
egiocaaaacaaaaaaajaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaacaaaaaa
aiaaaaaaagaabaaaabaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaacaaaaaaakaaaaaakgakbaaaabaaaaaaegaobaaaacaaaaaadcaaaaak
pccabaaaaiaaaaaaegiocaaaacaaaaaaalaaaaaapgapbaaaabaaaaaaegaobaaa
acaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaa
afaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaaajaaaaaadkaabaaaaaaaaaaa
aaaaaaahdccabaaaajaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaai
bcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
ahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaa
akaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(uv_24.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(uv_24.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_23);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_22 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_22) >= tmpvar_32.y));
  nylerp_21 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_20.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_20.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_19 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_8 * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_7.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_7.xyz = (tmpvar_42.xyz * tmpvar_52);
  lowp float tmpvar_53;
  tmpvar_53 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (color_7.w * clamp ((_InvFade * (tmpvar_54 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_55;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(uv_24.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(uv_24.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_23);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_22 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_22) >= tmpvar_32.y));
  nylerp_21 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_20.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_20.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_19 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_8 * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_7.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_7.xyz = (tmpvar_42.xyz * tmpvar_52);
  lowp float tmpvar_53;
  tmpvar_53 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (color_7.w * clamp ((_InvFade * (tmpvar_54 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_55;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 407
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 504
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 497
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 398
uniform sampler2D _LightTextureB0;
#line 403
#line 417
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 430
#line 438
#line 452
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 485
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 489
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 493
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 518
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 518
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 522
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 526
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 530
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 535
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 407
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 504
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 497
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 398
uniform sampler2D _LightTextureB0;
#line 403
#line 417
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 430
#line 438
#line 452
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 485
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 489
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 493
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 518
#line 376
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 378
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 364
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 366
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    #line 370
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    #line 374
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 537
lowp vec4 frag( in v2f IN ) {
    #line 539
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 543
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 547
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 551
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 555
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    #line 559
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    #line 563
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform mat4 unity_World2Shadow[4];
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  vec4 o_6;
  vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_13.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_13.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_12);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  vec3 p_24;
  p_24 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = (main_1 * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale), tmpvar_20.xy, tmpvar_20.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_24, p_24))), 0.0, 1.0))));
  float tmpvar_26;
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  vec3 p_28;
  p_28 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_29;
  p_29 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_28, p_28)) - (_RimDistSub * sqrt(dot (p_29, p_29))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 28 [_WorldSpaceCameraPos]
Vector 29 [_ProjectionParams]
Vector 30 [_ScreenParams]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Matrix 24 [_LightMatrix0]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c31, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c14
dp4 r2.y, v0, c13
dp4 r2.x, v0, c12
mov r1.w, r0
dp4 r1.y, v0, c5
mov r0.z, c14.w
mov r0.x, c12.w
mov r0.y, c13.w
add r4.xyz, r2, -r0
dp3 r1.x, r4, r4
rsq r1.z, r1.x
dp4 r1.x, v0, c4
mul r3.xyz, r1.xyww, c31.x
mul r3.y, r3, c29.x
mul o5.xyz, r1.z, r4
dp4 r1.z, v0, c6
mov o0, r1
mad o9.xy, r3.z, c30.zwzw, r3
add r3.xyz, -r2, c28
dp3 r2.w, r3, r3
rsq r2.w, r2.w
dp4 r1.w, v0, c19
dp4 r1.z, v0, c18
dp4 r1.x, v0, c16
dp4 r1.y, v0, c17
dp4 o3.w, -r1, c23
dp4 o3.z, -r1, c22
dp4 o3.y, -r1, c21
dp4 o3.x, -r1, c20
mov o4, -r1
mov r1.xyz, r2
dp4 r1.w, v0, c15
dp4 o7.w, r1, c27
dp4 o7.z, r1, c26
dp4 o7.y, r1, c25
dp4 o7.x, r1, c24
dp4 o8.w, r1, c11
dp4 o8.z, r1, c10
dp4 o8.y, r1, c9
dp4 o8.x, r1, c8
dp4 r1.x, v0, c2
mul o6.xyz, r2.w, r3
mov o1.xyz, r2
mov o2.xyz, r0
mov o9.z, -r1.x
mov o9.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 368 // 272 used size, 18 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 208 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 50 instructions, 4 temp regs, 0 temp arrays:
// ALU 44 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedfpcpeielkbpcbmchoplnppepgokkjbejabaaaaaadaajaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcheahaaaaeaaaabaa
nnabaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaamaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaadaaaaaa
apaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaa
aaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
adaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaaj
pcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaagaaaaaa
dcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaa
acaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaadaaaaaaapaaaaaa
aaaaaaajhcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaa
kgakbaaaaaaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaabaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaacaaaaaa
fgafbaaaabaaaaaaegiocaaaaaaaaaaaaoaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaanaaaaaaagaabaaaabaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaapaaaaaakgakbaaaabaaaaaaegaobaaa
acaaaaaadcaaaaakpccabaaaahaaaaaaegiocaaaaaaaaaaabaaaaaaapgapbaaa
abaaaaaaegaobaaaacaaaaaadiaaaaaipcaabaaaacaaaaaafgafbaaaabaaaaaa
egiocaaaacaaaaaaajaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaacaaaaaa
aiaaaaaaagaabaaaabaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaacaaaaaaakaaaaaakgakbaaaabaaaaaaegaobaaaacaaaaaadcaaaaak
pccabaaaaiaaaaaaegiocaaaacaaaaaaalaaaaaapgapbaaaabaaaaaaegaobaaa
acaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaa
afaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaaajaaaaaadkaabaaaaaaaaaaa
aaaaaaahdccabaaaajaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaai
bcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
ahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaa
akaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(uv_24.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(uv_24.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_23);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_22 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_22) >= tmpvar_32.y));
  nylerp_21 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_20.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_20.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_19 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_8 * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_7.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_7.xyz = (tmpvar_42.xyz * tmpvar_52);
  lowp float tmpvar_53;
  tmpvar_53 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (color_7.w * clamp ((_InvFade * (tmpvar_54 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_55;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 407
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 504
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 497
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 398
uniform sampler2D _LightTextureB0;
#line 403
#line 417
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 430
#line 438
#line 452
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 485
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 489
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 493
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 518
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 518
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 522
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 526
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 530
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 535
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 407
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 504
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 497
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 398
uniform sampler2D _LightTextureB0;
#line 403
#line 417
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 430
#line 438
#line 452
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 485
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 489
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 493
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 518
#line 376
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 378
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 364
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 366
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    #line 370
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    #line 374
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 537
lowp vec4 frag( in v2f IN ) {
    #line 539
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 543
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 547
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 551
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 555
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    #line 559
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    #line 563
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform vec4 _LightPositionRange;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  vec4 o_6;
  vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_13.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_13.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_12);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  vec3 p_24;
  p_24 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = (main_1 * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale), tmpvar_20.xy, tmpvar_20.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_24, p_24))), 0.0, 1.0))));
  float tmpvar_26;
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  vec3 p_28;
  p_28 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_29;
  p_29 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_28, p_28)) - (_RimDistSub * sqrt(dot (p_29, p_29))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_LightPositionRange]
Matrix 8 [_Object2World]
Matrix 12 [_MainRotation]
Matrix 16 [_DetailRotation]
Matrix 20 [_LightMatrix0]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c28, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
mov r0.x, c8.w
mov r1.w, r0
dp4 r1.y, v0, c5
mov r0.z, c10.w
mov r0.y, c9.w
add r4.xyz, r2, -r0
dp3 r1.x, r4, r4
rsq r1.z, r1.x
dp4 r1.x, v0, c4
mul r3.xyz, r1.xyww, c28.x
mul r3.y, r3, c25.x
mul o5.xyz, r1.z, r4
dp4 r1.z, v0, c6
mov o0, r1
mad o9.xy, r3.z, c26.zwzw, r3
add r3.xyz, -r2, c24
dp3 r2.w, r3, r3
rsq r2.w, r2.w
mov o2.xyz, r0
dp4 r0.x, v0, c2
dp4 r1.w, v0, c15
dp4 r1.z, v0, c14
dp4 r1.x, v0, c12
dp4 r1.y, v0, c13
dp4 o3.w, -r1, c19
dp4 o3.z, -r1, c18
dp4 o3.y, -r1, c17
dp4 o3.x, -r1, c16
mov o4, -r1
mov r1.xyz, r2
dp4 r1.w, v0, c11
mul o6.xyz, r2.w, r3
dp4 o7.z, r1, c22
dp4 o7.y, r1, c21
dp4 o7.x, r1, c20
mov o1.xyz, r2
add o8.xyz, r2, -c27
mov o9.z, -r0.x
mov o9.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 208 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 144 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 47 instructions, 4 temp regs, 0 temp arrays:
// ALU 41 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecednjjgpnijiglcjnfmmikiocmopaabbgmhabaaaaaalmaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahaiaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcaaahaaaaeaaaabaa
maabaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaadhccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaadaaaaaa
apaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaa
aaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
adaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaaj
pcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaagaaaaaa
dcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaa
acaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaadaaaaaaapaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaiaebaaaaaa
abaaaaaaegiccaaaabaaaaaaaeaaaaaaaaaaaaajhccabaaaaiaaaaaaegacbaaa
abaaaaaaegiccaiaebaaaaaaacaaaaaaabaaaaaabaaaaaahecaabaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahhccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaa
diaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaa
acaaaaaafgafbaaaabaaaaaaegiccaaaaaaaaaaaakaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaaaaaaaaaajaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaalaaaaaakgakbaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhccabaaaahaaaaaaegiccaaaaaaaaaaaamaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaa
aaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaa
ajaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaajaaaaaakgakbaaaabaaaaaa
mgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaa
adaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaa
akbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
adaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaa
dgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(uv_24.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(uv_24.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_23);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_22 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_22) >= tmpvar_32.y));
  nylerp_21 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_20.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_20.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_19 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_8 * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_7.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_7.xyz = (tmpvar_42.xyz * tmpvar_52);
  lowp float tmpvar_53;
  tmpvar_53 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (color_7.w * clamp ((_InvFade * (tmpvar_54 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_55;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(uv_24.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(uv_24.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_23);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_22 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_22) >= tmpvar_32.y));
  nylerp_21 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_20.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_20.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_19 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_8 * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_7.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_7.xyz = (tmpvar_42.xyz * tmpvar_52);
  lowp float tmpvar_53;
  tmpvar_53 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (color_7.w * clamp ((_InvFade * (tmpvar_54 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_55;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 403
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 500
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 493
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 402
uniform highp mat4 _LightMatrix0;
#line 413
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 426
#line 434
#line 448
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 481
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 485
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 489
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 514
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 514
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 518
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 522
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 526
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 531
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 403
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 500
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 493
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 402
uniform highp mat4 _LightMatrix0;
#line 413
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 426
#line 434
#line 448
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 481
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 485
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 489
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 514
#line 376
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 378
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 364
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 366
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    #line 370
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    #line 374
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 533
lowp vec4 frag( in v2f IN ) {
    #line 535
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 539
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 543
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 547
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 551
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    #line 555
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    #line 559
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform vec4 _LightPositionRange;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  vec4 o_6;
  vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_13.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_13.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_12);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  vec3 p_24;
  p_24 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = (main_1 * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale), tmpvar_20.xy, tmpvar_20.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_24, p_24))), 0.0, 1.0))));
  float tmpvar_26;
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  vec3 p_28;
  p_28 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_29;
  p_29 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_28, p_28)) - (_RimDistSub * sqrt(dot (p_29, p_29))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_LightPositionRange]
Matrix 8 [_Object2World]
Matrix 12 [_MainRotation]
Matrix 16 [_DetailRotation]
Matrix 20 [_LightMatrix0]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c28, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
mov r0.x, c8.w
mov r1.w, r0
dp4 r1.y, v0, c5
mov r0.z, c10.w
mov r0.y, c9.w
add r4.xyz, r2, -r0
dp3 r1.x, r4, r4
rsq r1.z, r1.x
dp4 r1.x, v0, c4
mul r3.xyz, r1.xyww, c28.x
mul r3.y, r3, c25.x
mul o5.xyz, r1.z, r4
dp4 r1.z, v0, c6
mov o0, r1
mad o9.xy, r3.z, c26.zwzw, r3
add r3.xyz, -r2, c24
dp3 r2.w, r3, r3
rsq r2.w, r2.w
mov o2.xyz, r0
dp4 r0.x, v0, c2
dp4 r1.w, v0, c15
dp4 r1.z, v0, c14
dp4 r1.x, v0, c12
dp4 r1.y, v0, c13
dp4 o3.w, -r1, c19
dp4 o3.z, -r1, c18
dp4 o3.y, -r1, c17
dp4 o3.x, -r1, c16
mov o4, -r1
mov r1.xyz, r2
dp4 r1.w, v0, c11
mul o6.xyz, r2.w, r3
dp4 o7.z, r1, c22
dp4 o7.y, r1, c21
dp4 o7.x, r1, c20
mov o1.xyz, r2
add o8.xyz, r2, -c27
mov o9.z, -r0.x
mov o9.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 208 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 144 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 47 instructions, 4 temp regs, 0 temp arrays:
// ALU 41 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecednjjgpnijiglcjnfmmikiocmopaabbgmhabaaaaaalmaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahaiaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcaaahaaaaeaaaabaa
maabaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaadhccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaadaaaaaa
apaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaa
aaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
adaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaaj
pcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaagaaaaaa
dcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaa
acaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaadaaaaaaapaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaiaebaaaaaa
abaaaaaaegiccaaaabaaaaaaaeaaaaaaaaaaaaajhccabaaaaiaaaaaaegacbaaa
abaaaaaaegiccaiaebaaaaaaacaaaaaaabaaaaaabaaaaaahecaabaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahhccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaa
diaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaa
acaaaaaafgafbaaaabaaaaaaegiccaaaaaaaaaaaakaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaaaaaaaaaajaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaalaaaaaakgakbaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhccabaaaahaaaaaaegiccaaaaaaaaaaaamaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaa
aaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaa
ajaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaajaaaaaakgakbaaaabaaaaaa
mgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaa
adaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaa
akbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
adaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaa
dgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(uv_24.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(uv_24.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_23);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_22 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_22) >= tmpvar_32.y));
  nylerp_21 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_20.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_20.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_19 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_8 * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_7.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_7.xyz = (tmpvar_42.xyz * tmpvar_52);
  lowp float tmpvar_53;
  tmpvar_53 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (color_7.w * clamp ((_InvFade * (tmpvar_54 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_55;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(uv_24.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(uv_24.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_23);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_22 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_22) >= tmpvar_32.y));
  nylerp_21 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_20.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_20.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_19 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_8 * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_7.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_7.xyz = (tmpvar_42.xyz * tmpvar_52);
  lowp float tmpvar_53;
  tmpvar_53 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (color_7.w * clamp ((_InvFade * (tmpvar_54 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_55;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 404
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 501
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 494
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 402
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 414
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 427
#line 435
#line 449
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 482
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 486
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 490
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 515
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 515
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 519
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 523
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 527
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 532
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 404
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 501
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 494
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 382
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 402
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 414
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 427
#line 435
#line 449
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 482
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 486
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
#line 490
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 515
#line 376
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 378
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 364
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 366
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    #line 370
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    #line 374
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 534
lowp vec4 frag( in v2f IN ) {
    #line 536
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 540
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 544
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 548
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 552
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    #line 556
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    #line 560
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 30
//   d3d9 - ALU: 148 to 152, TEX: 6 to 7
//   d3d11 - ALU: 122 to 128, TEX: 0 to 1, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Float 4 [_FalloffPow]
Float 5 [_FalloffScale]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_DistFade]
Float 10 [_DistFadeVert]
Float 11 [_RimDist]
Float 12 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 148 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c13.y, c13.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c13.y, c13.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c17.y
abs r0.z, r1.y
mul r2.xy, r0, c6.x
add r0.y, -r0.z, c13
mad r0.x, r0.z, c13.z, c13.w
mad r0.x, r0, r0.z, c14
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c14.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.w, r1.y, c13.x, c13.y
mul r0.z, r0.w, r0.y
mad r1.y, -r0.z, c14.z, r0
mad r1.w, r0, c14, r1.y
dp3 r0.x, v3, v3
rsq r0.x, r0.x
mul r0.xyz, r0.x, v3
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c15.x
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c15.y, c15
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c15.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c17.x
mul r1.x, r2.z, c17
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c13.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c16
mad r3.y, r3.x, r4, c16
rcp r3.x, r3.z
mul r3.z, r3.x, c7.x
mul_sat r3.z, r3, c14
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c13.y
mad r3.y, r3, r4, c16.z
mul r3.y, r3, r4.x
add r1.y, -r3, c16.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c13.z, c13.w
mad r1.y, r1, r1.x, c14.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c14.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c14.w
cmp r0.y, r0, c13.x, c13
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c14.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c14.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c15.x
mad r3.z, r1.x, c17.x, c17.y
mov r1.xyz, v4
dp3_sat r1.x, v5, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c5.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c17
mul r0.z, r0, c17.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c4.x
mul_pp r1, r1, r2
mul r0.w, -r3.x, c10.x
add_sat r2.x, r0.w, c13.y
mul_sat r0.w, r3.x, c9.x
mad r0.w, -r0, r2.x, c13.y
mov r2.y, r0.x
dp4 r0.y, c2, c2
add r2.w, r2.y, -r0
add r2.xyz, -v1, c1
rsq r0.x, r0.y
mul r0.xyz, r0.x, c2
dp3_sat r0.x, v4, r0
add_pp r3.x, r0, c17.z
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c12.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c17.w
mov r0.x, c8
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c11
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 304 // 292 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 128 instructions, 5 temp regs, 0 temp arrays:
// ALU 115 float, 0 int, 7 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedjcgjbgmmgfpfcmcccojflcnaknlgafbmabaaaaaahabbaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcaibaaaaaeaaaaaaaacaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadiaaaaaidcaabaaaabaaaaaa
egaabaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaa
adaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaa
abaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaah
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
bacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
aaaaaaajhcaabaaaacaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaa
baaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaf
mcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaia
ebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaaj
bcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaa
aaaaaaaaanaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaa
aaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Float 4 [_FalloffPow]
Float 5 [_FalloffScale]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_DistFade]
Float 10 [_DistFadeVert]
Float 11 [_RimDist]
Float 12 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 148 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c13.y, c13.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c13.y, c13.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c17.y
abs r0.z, r1.y
mul r2.xy, r0, c6.x
add r0.y, -r0.z, c13
mad r0.x, r0.z, c13.z, c13.w
mad r0.x, r0, r0.z, c14
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c14.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.w, r1.y, c13.x, c13.y
mul r0.z, r0.w, r0.y
mad r1.y, -r0.z, c14.z, r0
mad r1.w, r0, c14, r1.y
dp3 r0.x, v3, v3
rsq r0.x, r0.x
mul r0.xyz, r0.x, v3
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c15.x
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c15.y, c15
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c15.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c17.x
mul r1.x, r2.z, c17
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c13.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c16
mad r3.y, r3.x, r4, c16
rcp r3.x, r3.z
mul r3.z, r3.x, c7.x
mul_sat r3.z, r3, c14
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c13.y
mad r3.y, r3, r4, c16.z
mul r3.y, r3, r4.x
add r1.y, -r3, c16.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c13.z, c13.w
mad r1.y, r1, r1.x, c14.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c14.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c14.w
cmp r0.y, r0, c13.x, c13
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c14.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c14.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c15.x
mad r3.z, r1.x, c17.x, c17.y
mov r1.xyz, v4
dp3_sat r1.x, v5, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c5.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c17
mul r0.z, r0, c17.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c4.x
mul_pp r1, r1, r2
mul r0.w, -r3.x, c10.x
add_sat r2.x, r0.w, c13.y
mul_sat r0.w, r3.x, c9.x
mad r0.w, -r0, r2.x, c13.y
mov r2.y, r0.x
dp4_pp r0.y, c2, c2
add r2.w, r2.y, -r0
add r2.xyz, -v1, c1
rsq_pp r0.x, r0.y
mul_pp r0.xyz, r0.x, c2
dp3_sat r0.x, v4, r0
add_pp r3.x, r0, c17.z
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c12.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c17.w
mov r0.x, c8
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c11
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
ConstBuffer "$Globals" 240 // 228 used size, 16 vars
Vector 144 [_LightColor0] 4
Float 192 [_FalloffPow]
Float 196 [_FalloffScale]
Float 200 [_DetailScale]
Float 204 [_DetailDist]
Float 208 [_MinLight]
Float 212 [_DistFade]
Float 216 [_DistFadeVert]
Float 220 [_RimDist]
Float 224 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 128 instructions, 5 temp regs, 0 temp arrays:
// ALU 115 float, 0 int, 7 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedkehgbagigmkgnlomdbiclmjdbafloljnabaaaaaafibbaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaneaaaaaaaiaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcaibaaaaaeaaaaaaaacaeaaaafjaaaaaeegiocaaa
aaaaaaaaapaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaa
acaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
jgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaaf
mcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaa
aaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaadaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaa
aaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaa
pgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaia
mbaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaa
egacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaa
bkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaa
abaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaa
jgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaa
bgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaa
dkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaa
abaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaa
abaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadiaaaaai
dcaabaaaabaaaaaaegaabaaaabaaaaaakgikcaaaaaaaaaaaamaaaaaadcaaaaak
ecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaa
akaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaia
ebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaa
acaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaa
amaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaa
egaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdo
apaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaa
abaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaa
apcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaaamaaaaaa
dcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaaanaaaaaa
dccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaaanaaaaaaakaabaaa
adaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaa
afaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaa
amaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaaamaaaaaabjaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
bkaabaaaabaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaaacaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaia
ebaaaaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
acaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaa
abaaaaaaakiacaiaebaaaaaaaaaaaaaaaoaaaaaadkaabaaaabaaaaaackaabaaa
abaaaaaadicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaa
anaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaah
icaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkiacaaaaaaaaaaaajaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaa
ajaaaaaaagiacaaaaaaaaaaaanaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Float 4 [_FalloffPow]
Float 5 [_FalloffScale]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_DistFade]
Float 10 [_DistFadeVert]
Float 11 [_RimDist]
Float 12 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 148 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c13.y, c13.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c13.y, c13.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c17.y
abs r0.z, r1.y
mul r2.xy, r0, c6.x
add r0.y, -r0.z, c13
mad r0.x, r0.z, c13.z, c13.w
mad r0.x, r0, r0.z, c14
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c14.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.w, r1.y, c13.x, c13.y
mul r0.z, r0.w, r0.y
mad r1.y, -r0.z, c14.z, r0
mad r1.w, r0, c14, r1.y
dp3 r0.x, v3, v3
rsq r0.x, r0.x
mul r0.xyz, r0.x, v3
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c15.x
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c15.y, c15
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c15.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c17.x
mul r1.x, r2.z, c17
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c13.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c16
mad r3.y, r3.x, r4, c16
rcp r3.x, r3.z
mul r3.z, r3.x, c7.x
mul_sat r3.z, r3, c14
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c13.y
mad r3.y, r3, r4, c16.z
mul r3.y, r3, r4.x
add r1.y, -r3, c16.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c13.z, c13.w
mad r1.y, r1, r1.x, c14.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c14.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c14.w
cmp r0.y, r0, c13.x, c13
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c14.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c14.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c15.x
mad r3.z, r1.x, c17.x, c17.y
mov r1.xyz, v4
dp3_sat r1.x, v5, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c5.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c17
mul r0.z, r0, c17.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c4.x
mul_pp r1, r1, r2
mul r0.w, -r3.x, c10.x
add_sat r2.x, r0.w, c13.y
mul_sat r0.w, r3.x, c9.x
mad r0.w, -r0, r2.x, c13.y
mov r2.y, r0.x
dp4 r0.y, c2, c2
add r2.w, r2.y, -r0
add r2.xyz, -v1, c1
rsq r0.x, r0.y
mul r0.xyz, r0.x, c2
dp3_sat r0.x, v4, r0
add_pp r3.x, r0, c17.z
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c12.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c17.w
mov r0.x, c8
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c11
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 304 // 292 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 128 instructions, 5 temp regs, 0 temp arrays:
// ALU 115 float, 0 int, 7 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednkhohgjipfjfajicadaapknkjnocpboiabaaaaaahabbaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcaibaaaaaeaaaaaaaacaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadiaaaaaidcaabaaaabaaaaaa
egaabaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaa
adaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaa
abaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaah
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
bacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
aaaaaaajhcaabaaaacaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaa
baaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaf
mcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaia
ebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaaj
bcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaa
aaaaaaaaanaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaa
aaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Float 4 [_FalloffPow]
Float 5 [_FalloffScale]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_DistFade]
Float 10 [_DistFadeVert]
Float 11 [_RimDist]
Float 12 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 148 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c13.y, c13.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c13.y, c13.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c17.y
abs r0.z, r1.y
mul r2.xy, r0, c6.x
add r0.y, -r0.z, c13
mad r0.x, r0.z, c13.z, c13.w
mad r0.x, r0, r0.z, c14
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c14.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.w, r1.y, c13.x, c13.y
mul r0.z, r0.w, r0.y
mad r1.y, -r0.z, c14.z, r0
mad r1.w, r0, c14, r1.y
dp3 r0.x, v3, v3
rsq r0.x, r0.x
mul r0.xyz, r0.x, v3
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c15.x
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c15.y, c15
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c15.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c17.x
mul r1.x, r2.z, c17
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c13.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c16
mad r3.y, r3.x, r4, c16
rcp r3.x, r3.z
mul r3.z, r3.x, c7.x
mul_sat r3.z, r3, c14
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c13.y
mad r3.y, r3, r4, c16.z
mul r3.y, r3, r4.x
add r1.y, -r3, c16.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c13.z, c13.w
mad r1.y, r1, r1.x, c14.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c14.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c14.w
cmp r0.y, r0, c13.x, c13
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c14.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c14.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c15.x
mad r3.z, r1.x, c17.x, c17.y
mov r1.xyz, v4
dp3_sat r1.x, v5, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c5.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c17
mul r0.z, r0, c17.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c4.x
mul_pp r1, r1, r2
mul r0.w, -r3.x, c10.x
add_sat r2.x, r0.w, c13.y
mul_sat r0.w, r3.x, c9.x
mad r0.w, -r0, r2.x, c13.y
mov r2.y, r0.x
dp4 r0.y, c2, c2
add r2.w, r2.y, -r0
add r2.xyz, -v1, c1
rsq r0.x, r0.y
mul r0.xyz, r0.x, c2
dp3_sat r0.x, v4, r0
add_pp r3.x, r0, c17.z
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c12.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c17.w
mov r0.x, c8
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c11
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 304 // 292 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 128 instructions, 5 temp regs, 0 temp arrays:
// ALU 115 float, 0 int, 7 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedjcgjbgmmgfpfcmcccojflcnaknlgafbmabaaaaaahabbaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcaibaaaaaeaaaaaaaacaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadiaaaaaidcaabaaaabaaaaaa
egaabaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaa
adaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaa
abaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaah
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
bacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
aaaaaaajhcaabaaaacaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaa
baaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaf
mcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaia
ebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaaj
bcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaa
aaaaaaaaanaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaa
aaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Float 4 [_FalloffPow]
Float 5 [_FalloffScale]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_DistFade]
Float 10 [_DistFadeVert]
Float 11 [_RimDist]
Float 12 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 148 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c13.y, c13.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c13.y, c13.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c17.y
abs r0.z, r1.y
mul r2.xy, r0, c6.x
add r0.y, -r0.z, c13
mad r0.x, r0.z, c13.z, c13.w
mad r0.x, r0, r0.z, c14
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c14.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.w, r1.y, c13.x, c13.y
mul r0.z, r0.w, r0.y
mad r1.y, -r0.z, c14.z, r0
mad r1.w, r0, c14, r1.y
dp3 r0.x, v3, v3
rsq r0.x, r0.x
mul r0.xyz, r0.x, v3
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c15.x
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c15.y, c15
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c15.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c17.x
mul r1.x, r2.z, c17
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c13.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c16
mad r3.y, r3.x, r4, c16
rcp r3.x, r3.z
mul r3.z, r3.x, c7.x
mul_sat r3.z, r3, c14
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c13.y
mad r3.y, r3, r4, c16.z
mul r3.y, r3, r4.x
add r1.y, -r3, c16.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c13.z, c13.w
mad r1.y, r1, r1.x, c14.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c14.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c14.w
cmp r0.y, r0, c13.x, c13
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c14.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c14.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c15.x
mad r3.z, r1.x, c17.x, c17.y
mov r1.xyz, v4
dp3_sat r1.x, v5, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c5.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c17
mul r0.z, r0, c17.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c4.x
mul_pp r1, r1, r2
mul r0.w, -r3.x, c10.x
add_sat r2.x, r0.w, c13.y
mul_sat r0.w, r3.x, c9.x
mad r0.w, -r0, r2.x, c13.y
mov r2.y, r0.x
dp4_pp r0.y, c2, c2
add r2.w, r2.y, -r0
add r2.xyz, -v1, c1
rsq_pp r0.x, r0.y
mul_pp r0.xyz, r0.x, c2
dp3_sat r0.x, v4, r0
add_pp r3.x, r0, c17.z
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c12.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c17.w
mov r0.x, c8
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c11
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 304 // 292 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 128 instructions, 5 temp regs, 0 temp arrays:
// ALU 115 float, 0 int, 7 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedidkdpllbghppgiakfgeoopehbidibmonabaaaaaahabbaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaadaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcaibaaaaaeaaaaaaaacaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadiaaaaaidcaabaaaabaaaaaa
egaabaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaa
adaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaa
abaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaah
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
bacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
aaaaaaajhcaabaaaacaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaa
baaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaf
mcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaia
ebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaaj
bcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaa
aaaaaaaaanaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaa
aaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Float 4 [_FalloffPow]
Float 5 [_FalloffScale]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_DistFade]
Float 10 [_DistFadeVert]
Float 11 [_RimDist]
Float 12 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 148 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c13.y, c13.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c13.y, c13.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c17.y
abs r0.z, r1.y
mul r2.xy, r0, c6.x
add r0.y, -r0.z, c13
mad r0.x, r0.z, c13.z, c13.w
mad r0.x, r0, r0.z, c14
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c14.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.w, r1.y, c13.x, c13.y
mul r0.z, r0.w, r0.y
mad r1.y, -r0.z, c14.z, r0
mad r1.w, r0, c14, r1.y
dp3 r0.x, v3, v3
rsq r0.x, r0.x
mul r0.xyz, r0.x, v3
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c15.x
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c15.y, c15
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c15.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c17.x
mul r1.x, r2.z, c17
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c13.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c16
mad r3.y, r3.x, r4, c16
rcp r3.x, r3.z
mul r3.z, r3.x, c7.x
mul_sat r3.z, r3, c14
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c13.y
mad r3.y, r3, r4, c16.z
mul r3.y, r3, r4.x
add r1.y, -r3, c16.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c13.z, c13.w
mad r1.y, r1, r1.x, c14.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c14.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c14.w
cmp r0.y, r0, c13.x, c13
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c14.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c14.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c15.x
mad r3.z, r1.x, c17.x, c17.y
mov r1.xyz, v4
dp3_sat r1.x, v5, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c5.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c17
mul r0.z, r0, c17.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c4.x
mul_pp r1, r1, r2
mul r0.w, -r3.x, c10.x
add_sat r2.x, r0.w, c13.y
mul_sat r0.w, r3.x, c9.x
mad r0.w, -r0, r2.x, c13.y
mov r2.y, r0.x
dp4 r0.y, c2, c2
add r2.w, r2.y, -r0
add r2.xyz, -v1, c1
rsq r0.x, r0.y
mul r0.xyz, r0.x, c2
dp3_sat r0.x, v4, r0
add_pp r3.x, r0, c17.z
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c12.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c17.w
mov r0.x, c8
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c11
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
ConstBuffer "$Globals" 304 // 292 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 128 instructions, 5 temp regs, 0 temp arrays:
// ALU 115 float, 0 int, 7 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfgnekhkhihlnoblmikhfgclkgjocngdiabaaaaaaiibbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcaibaaaaa
eaaaaaaaacaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaa
dgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaa
aeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaa
abaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
adaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaa
pgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaa
adaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaak
icaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaa
acaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaia
ibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaa
abaaaaaaagaabaaaabaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaa
kgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
keanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaa
aaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
acaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaa
acaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaa
ckaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaa
acaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaa
akaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaa
adaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaa
adaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaa
adaaaaaabkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaackiacaia
ebaaaaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaa
abaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaa
aaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaa
acaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahicaabaaa
abaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaa
kgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaa
bcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Float 4 [_FalloffPow]
Float 5 [_FalloffScale]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_DistFade]
Float 10 [_DistFadeVert]
Float 11 [_RimDist]
Float 12 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 148 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c13.y, c13.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c13.y, c13.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c17.y
abs r0.z, r1.y
mul r2.xy, r0, c6.x
add r0.y, -r0.z, c13
mad r0.x, r0.z, c13.z, c13.w
mad r0.x, r0, r0.z, c14
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c14.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.w, r1.y, c13.x, c13.y
mul r0.z, r0.w, r0.y
mad r1.y, -r0.z, c14.z, r0
mad r1.w, r0, c14, r1.y
dp3 r0.x, v3, v3
rsq r0.x, r0.x
mul r0.xyz, r0.x, v3
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c15.x
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c15.y, c15
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c15.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c17.x
mul r1.x, r2.z, c17
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c13.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c16
mad r3.y, r3.x, r4, c16
rcp r3.x, r3.z
mul r3.z, r3.x, c7.x
mul_sat r3.z, r3, c14
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c13.y
mad r3.y, r3, r4, c16.z
mul r3.y, r3, r4.x
add r1.y, -r3, c16.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c13.z, c13.w
mad r1.y, r1, r1.x, c14.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c14.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c14.w
cmp r0.y, r0, c13.x, c13
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c14.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c14.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c15.x
mad r3.z, r1.x, c17.x, c17.y
mov r1.xyz, v4
dp3_sat r1.x, v5, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c5.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c17
mul r0.z, r0, c17.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c4.x
mul_pp r1, r1, r2
mul r0.w, -r3.x, c10.x
add_sat r2.x, r0.w, c13.y
mul_sat r0.w, r3.x, c9.x
mad r0.w, -r0, r2.x, c13.y
mov r2.y, r0.x
dp4 r0.y, c2, c2
add r2.w, r2.y, -r0
add r2.xyz, -v1, c1
rsq r0.x, r0.y
mul r0.xyz, r0.x, c2
dp3_sat r0.x, v4, r0
add_pp r3.x, r0, c17.z
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c12.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c17.w
mov r0.x, c8
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c11
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 304 // 292 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 128 instructions, 5 temp regs, 0 temp arrays:
// ALU 115 float, 0 int, 7 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfgnekhkhihlnoblmikhfgclkgjocngdiabaaaaaaiibbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcaibaaaaa
eaaaaaaaacaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaa
dgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaa
aeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaa
abaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
adaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaa
pgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaa
adaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaak
icaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaa
acaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaia
ibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaa
abaaaaaaagaabaaaabaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaa
kgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
keanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaa
aaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
acaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaa
acaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaa
ckaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaa
acaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaa
akaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaa
adaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaa
adaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaa
adaaaaaabkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaackiacaia
ebaaaaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaa
abaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaa
aaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaa
acaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahicaabaaa
abaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaa
kgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaa
bcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Float 4 [_FalloffPow]
Float 5 [_FalloffScale]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_DistFade]
Float 10 [_DistFadeVert]
Float 11 [_RimDist]
Float 12 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 148 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c13.y, c13.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c13.y, c13.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c17.y
abs r0.z, r1.y
mul r2.xy, r0, c6.x
add r0.y, -r0.z, c13
mad r0.x, r0.z, c13.z, c13.w
mad r0.x, r0, r0.z, c14
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c14.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.w, r1.y, c13.x, c13.y
mul r0.z, r0.w, r0.y
mad r1.y, -r0.z, c14.z, r0
mad r1.w, r0, c14, r1.y
dp3 r0.x, v3, v3
rsq r0.x, r0.x
mul r0.xyz, r0.x, v3
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c15.x
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c15.y, c15
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c15.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c17.x
mul r1.x, r2.z, c17
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c13.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c16
mad r3.y, r3.x, r4, c16
rcp r3.x, r3.z
mul r3.z, r3.x, c7.x
mul_sat r3.z, r3, c14
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c13.y
mad r3.y, r3, r4, c16.z
mul r3.y, r3, r4.x
add r1.y, -r3, c16.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c13.z, c13.w
mad r1.y, r1, r1.x, c14.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c14.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c14.w
cmp r0.y, r0, c13.x, c13
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c14.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c14.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c15.x
mad r3.z, r1.x, c17.x, c17.y
mov r1.xyz, v4
dp3_sat r1.x, v5, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c5.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c17
mul r0.z, r0, c17.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c4.x
mul_pp r1, r1, r2
mul r0.w, -r3.x, c10.x
add_sat r2.x, r0.w, c13.y
mul_sat r0.w, r3.x, c9.x
mad r0.w, -r0, r2.x, c13.y
mov r2.y, r0.x
dp4_pp r0.y, c2, c2
add r2.w, r2.y, -r0
add r2.xyz, -v1, c1
rsq_pp r0.x, r0.y
mul_pp r0.xyz, r0.x, c2
dp3_sat r0.x, v4, r0
add_pp r3.x, r0, c17.z
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c12.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c17.w
mov r0.x, c8
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c11
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 304 // 292 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 128 instructions, 5 temp regs, 0 temp arrays:
// ALU 115 float, 0 int, 7 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednkhohgjipfjfajicadaapknkjnocpboiabaaaaaahabbaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcaibaaaaaeaaaaaaaacaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadiaaaaaidcaabaaaabaaaaaa
egaabaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaa
adaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaa
abaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaah
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
bacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
aaaaaaajhcaabaaaacaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaa
baaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaf
mcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaia
ebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaaj
bcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaa
aaaaaaaaanaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaa
aaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Float 4 [_FalloffPow]
Float 5 [_FalloffScale]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_DistFade]
Float 10 [_DistFadeVert]
Float 11 [_RimDist]
Float 12 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 148 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c13.y, c13.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c13.y, c13.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c17.y
abs r0.z, r1.y
mul r2.xy, r0, c6.x
add r0.y, -r0.z, c13
mad r0.x, r0.z, c13.z, c13.w
mad r0.x, r0, r0.z, c14
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c14.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.w, r1.y, c13.x, c13.y
mul r0.z, r0.w, r0.y
mad r1.y, -r0.z, c14.z, r0
mad r1.w, r0, c14, r1.y
dp3 r0.x, v3, v3
rsq r0.x, r0.x
mul r0.xyz, r0.x, v3
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c15.x
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c15.y, c15
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c15.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c17.x
mul r1.x, r2.z, c17
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c13.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c16
mad r3.y, r3.x, r4, c16
rcp r3.x, r3.z
mul r3.z, r3.x, c7.x
mul_sat r3.z, r3, c14
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c13.y
mad r3.y, r3, r4, c16.z
mul r3.y, r3, r4.x
add r1.y, -r3, c16.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c13.z, c13.w
mad r1.y, r1, r1.x, c14.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c14.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c14.w
cmp r0.y, r0, c13.x, c13
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c14.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c14.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c15.x
mad r3.z, r1.x, c17.x, c17.y
mov r1.xyz, v4
dp3_sat r1.x, v5, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c5.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c17
mul r0.z, r0, c17.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c4.x
mul_pp r1, r1, r2
mul r0.w, -r3.x, c10.x
add_sat r2.x, r0.w, c13.y
mul_sat r0.w, r3.x, c9.x
mad r0.w, -r0, r2.x, c13.y
mov r2.y, r0.x
dp4_pp r0.y, c2, c2
add r2.w, r2.y, -r0
add r2.xyz, -v1, c1
rsq_pp r0.x, r0.y
mul_pp r0.xyz, r0.x, c2
dp3_sat r0.x, v4, r0
add_pp r3.x, r0, c17.z
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c12.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c17.w
mov r0.x, c8
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c11
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 368 // 356 used size, 18 vars
Vector 272 [_LightColor0] 4
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_DistFade]
Float 344 [_DistFadeVert]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 128 instructions, 5 temp regs, 0 temp arrays:
// ALU 115 float, 0 int, 7 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedcnppgneloijclkepdgnodknpgfdjhghaabaaaaaaiibbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaadaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcaibaaaaa
eaaaaaaaacaeaaaafjaaaaaeegiocaaaaaaaaaaabhaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaa
dgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaa
aeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaa
abaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
adaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaa
pgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaa
adaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaak
icaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaa
acaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaia
ibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaa
abaaaaaaagaabaaaabaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaa
kgikcaaaaaaaaaaabeaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
keanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaa
aaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
acaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaa
acaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaa
ckaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaa
acaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaa
akaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaa
adaaaaaapgipcaaaaaaaaaaabeaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaa
adaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaa
adaaaaaabkiacaaaaaaaaaaabfaaaaaadccaaaalccaabaaaabaaaaaackiacaia
ebaaaaaaaaaaaaaabfaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaa
abaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaabkiacaaaaaaaaaaabeaaaaaacpaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaa
aaaaaaaabeaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaa
acaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahicaabaaa
abaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaa
kgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaa
bgaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaadkiacaaaaaaaaaaabfaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaabbaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaabbaaaaaaagiacaaaaaaaaaaabfaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Float 4 [_FalloffPow]
Float 5 [_FalloffScale]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_DistFade]
Float 10 [_DistFadeVert]
Float 11 [_RimDist]
Float 12 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 148 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c13.y, c13.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c13.y, c13.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c17.y
abs r0.z, r1.y
mul r2.xy, r0, c6.x
add r0.y, -r0.z, c13
mad r0.x, r0.z, c13.z, c13.w
mad r0.x, r0, r0.z, c14
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c14.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.w, r1.y, c13.x, c13.y
mul r0.z, r0.w, r0.y
mad r1.y, -r0.z, c14.z, r0
mad r1.w, r0, c14, r1.y
dp3 r0.x, v3, v3
rsq r0.x, r0.x
mul r0.xyz, r0.x, v3
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c15.x
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c15.y, c15
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c15.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c17.x
mul r1.x, r2.z, c17
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c13.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c16
mad r3.y, r3.x, r4, c16
rcp r3.x, r3.z
mul r3.z, r3.x, c7.x
mul_sat r3.z, r3, c14
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c13.y
mad r3.y, r3, r4, c16.z
mul r3.y, r3, r4.x
add r1.y, -r3, c16.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c13.z, c13.w
mad r1.y, r1, r1.x, c14.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c14.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c14.w
cmp r0.y, r0, c13.x, c13
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c14.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c14.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c15.x
mad r3.z, r1.x, c17.x, c17.y
mov r1.xyz, v4
dp3_sat r1.x, v5, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c5.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c17
mul r0.z, r0, c17.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c4.x
mul_pp r1, r1, r2
mul r0.w, -r3.x, c10.x
add_sat r2.x, r0.w, c13.y
mul_sat r0.w, r3.x, c9.x
mad r0.w, -r0, r2.x, c13.y
mov r2.y, r0.x
dp4 r0.y, c2, c2
add r2.w, r2.y, -r0
add r2.xyz, -v1, c1
rsq r0.x, r0.y
mul r0.xyz, r0.x, c2
dp3_sat r0.x, v4, r0
add_pp r3.x, r0, c17.z
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c12.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c17.w
mov r0.x, c8
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c11
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 304 // 292 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 128 instructions, 5 temp regs, 0 temp arrays:
// ALU 115 float, 0 int, 7 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfifanjcfpapjhpjpakcolfbecfcdaoifabaaaaaaiibbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcaibaaaaa
eaaaaaaaacaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaa
dgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaa
aeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaa
abaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
adaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaa
pgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaa
adaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaak
icaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaa
acaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaia
ibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaa
abaaaaaaagaabaaaabaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaa
kgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
keanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaa
aaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
acaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaa
acaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaa
ckaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaa
acaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaa
akaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaa
adaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaa
adaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaa
adaaaaaabkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaackiacaia
ebaaaaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaa
abaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaa
aaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaa
acaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahicaabaaa
abaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaa
kgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaa
bcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Float 4 [_FalloffPow]
Float 5 [_FalloffScale]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_DistFade]
Float 10 [_DistFadeVert]
Float 11 [_RimDist]
Float 12 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 148 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c13.y, c13.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c13.y, c13.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c17.y
abs r0.z, r1.y
mul r2.xy, r0, c6.x
add r0.y, -r0.z, c13
mad r0.x, r0.z, c13.z, c13.w
mad r0.x, r0, r0.z, c14
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c14.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.w, r1.y, c13.x, c13.y
mul r0.z, r0.w, r0.y
mad r1.y, -r0.z, c14.z, r0
mad r1.w, r0, c14, r1.y
dp3 r0.x, v3, v3
rsq r0.x, r0.x
mul r0.xyz, r0.x, v3
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c15.x
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c15.y, c15
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c15.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c17.x
mul r1.x, r2.z, c17
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c13.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c16
mad r3.y, r3.x, r4, c16
rcp r3.x, r3.z
mul r3.z, r3.x, c7.x
mul_sat r3.z, r3, c14
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c13.y
mad r3.y, r3, r4, c16.z
mul r3.y, r3, r4.x
add r1.y, -r3, c16.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c13.z, c13.w
mad r1.y, r1, r1.x, c14.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c14.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c14.w
cmp r0.y, r0, c13.x, c13
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c14.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c14.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c15.x
mad r3.z, r1.x, c17.x, c17.y
mov r1.xyz, v4
dp3_sat r1.x, v5, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c5.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c17
mul r0.z, r0, c17.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c4.x
mul_pp r1, r1, r2
mul r0.w, -r3.x, c10.x
add_sat r2.x, r0.w, c13.y
mul_sat r0.w, r3.x, c9.x
mad r0.w, -r0, r2.x, c13.y
mov r2.y, r0.x
dp4 r0.y, c2, c2
add r2.w, r2.y, -r0
add r2.xyz, -v1, c1
rsq r0.x, r0.y
mul r0.xyz, r0.x, c2
dp3_sat r0.x, v4, r0
add_pp r3.x, r0, c17.z
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c12.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c17.w
mov r0.x, c8
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c11
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 304 // 292 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 128 instructions, 5 temp regs, 0 temp arrays:
// ALU 115 float, 0 int, 7 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfifanjcfpapjhpjpakcolfbecfcdaoifabaaaaaaiibbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcaibaaaaa
eaaaaaaaacaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaa
dgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaa
aeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaa
abaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
adaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaa
pgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaa
adaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaak
icaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaa
acaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaia
ibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaa
abaaaaaaagaabaaaabaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaa
kgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
keanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaa
aaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
acaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaa
acaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaa
ckaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaa
acaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaa
akaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaa
adaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaa
adaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaa
adaaaaaabkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaackiacaia
ebaaaaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaa
abaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaa
aaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaa
acaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahicaabaaa
abaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaa
kgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaa
bcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Float 4 [_FalloffPow]
Float 5 [_FalloffScale]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_DistFade]
Float 10 [_DistFadeVert]
Float 11 [_RimDist]
Float 12 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 148 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c13.y, c13.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c13.y, c13.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c17.y
abs r0.z, r1.y
mul r2.xy, r0, c6.x
add r0.y, -r0.z, c13
mad r0.x, r0.z, c13.z, c13.w
mad r0.x, r0, r0.z, c14
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c14.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.w, r1.y, c13.x, c13.y
mul r0.z, r0.w, r0.y
mad r1.y, -r0.z, c14.z, r0
mad r1.w, r0, c14, r1.y
dp3 r0.x, v3, v3
rsq r0.x, r0.x
mul r0.xyz, r0.x, v3
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c15.x
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c15.y, c15
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c15.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c17.x
mul r1.x, r2.z, c17
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c13.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c16
mad r3.y, r3.x, r4, c16
rcp r3.x, r3.z
mul r3.z, r3.x, c7.x
mul_sat r3.z, r3, c14
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c13.y
mad r3.y, r3, r4, c16.z
mul r3.y, r3, r4.x
add r1.y, -r3, c16.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c13.z, c13.w
mad r1.y, r1, r1.x, c14.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c14.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c14.w
cmp r0.y, r0, c13.x, c13
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c14.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c14.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c15.x
mad r3.z, r1.x, c17.x, c17.y
mov r1.xyz, v4
dp3_sat r1.x, v5, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c5.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c17
mul r0.z, r0, c17.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c4.x
mul_pp r1, r1, r2
mul r0.w, -r3.x, c10.x
add_sat r2.x, r0.w, c13.y
mul_sat r0.w, r3.x, c9.x
mad r0.w, -r0, r2.x, c13.y
mov r2.y, r0.x
dp4 r0.y, c2, c2
add r2.w, r2.y, -r0
add r2.xyz, -v1, c1
rsq r0.x, r0.y
mul r0.xyz, r0.x, c2
dp3_sat r0.x, v4, r0
add_pp r3.x, r0, c17.z
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c12.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c17.w
mov r0.x, c8
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c11
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 368 // 356 used size, 18 vars
Vector 272 [_LightColor0] 4
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_DistFade]
Float 344 [_DistFadeVert]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 128 instructions, 5 temp regs, 0 temp arrays:
// ALU 115 float, 0 int, 7 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhbhfefodbcbhhnonhecdccdgjidcoblbabaaaaaaiibbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcaibaaaaa
eaaaaaaaacaeaaaafjaaaaaeegiocaaaaaaaaaaabhaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaa
dgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaa
aeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaa
abaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
adaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaa
pgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaa
adaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaak
icaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaa
acaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaia
ibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaa
abaaaaaaagaabaaaabaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaa
kgikcaaaaaaaaaaabeaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
keanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaa
aaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
acaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaa
acaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaa
ckaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaa
acaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaa
akaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaa
adaaaaaapgipcaaaaaaaaaaabeaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaa
adaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaa
adaaaaaabkiacaaaaaaaaaaabfaaaaaadccaaaalccaabaaaabaaaaaackiacaia
ebaaaaaaaaaaaaaabfaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaa
abaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaabkiacaaaaaaaaaaabeaaaaaacpaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaa
aaaaaaaabeaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaa
acaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahicaabaaa
abaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaa
kgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaa
bgaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaadkiacaaaaaaaaaaabfaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaabbaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaabbaaaaaaagiacaaaaaaaaaaabfaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Float 4 [_FalloffPow]
Float 5 [_FalloffScale]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_DistFade]
Float 10 [_DistFadeVert]
Float 11 [_RimDist]
Float 12 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 148 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c13.y, c13.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c13.y, c13.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c17.y
abs r0.z, r1.y
mul r2.xy, r0, c6.x
add r0.y, -r0.z, c13
mad r0.x, r0.z, c13.z, c13.w
mad r0.x, r0, r0.z, c14
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c14.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.w, r1.y, c13.x, c13.y
mul r0.z, r0.w, r0.y
mad r1.y, -r0.z, c14.z, r0
mad r1.w, r0, c14, r1.y
dp3 r0.x, v3, v3
rsq r0.x, r0.x
mul r0.xyz, r0.x, v3
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c15.x
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c15.y, c15
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c15.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c17.x
mul r1.x, r2.z, c17
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c13.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c16
mad r3.y, r3.x, r4, c16
rcp r3.x, r3.z
mul r3.z, r3.x, c7.x
mul_sat r3.z, r3, c14
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c13.y
mad r3.y, r3, r4, c16.z
mul r3.y, r3, r4.x
add r1.y, -r3, c16.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c13.z, c13.w
mad r1.y, r1, r1.x, c14.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c14.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c14.w
cmp r0.y, r0, c13.x, c13
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c14.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c14.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c15.x
mad r3.z, r1.x, c17.x, c17.y
mov r1.xyz, v4
dp3_sat r1.x, v5, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c5.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c17
mul r0.z, r0, c17.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c4.x
mul_pp r1, r1, r2
mul r0.w, -r3.x, c10.x
add_sat r2.x, r0.w, c13.y
mul_sat r0.w, r3.x, c9.x
mad r0.w, -r0, r2.x, c13.y
mov r2.y, r0.x
dp4 r0.y, c2, c2
add r2.w, r2.y, -r0
add r2.xyz, -v1, c1
rsq r0.x, r0.y
mul r0.xyz, r0.x, c2
dp3_sat r0.x, v4, r0
add_pp r3.x, r0, c17.z
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c12.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c17.w
mov r0.x, c8
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c11
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 368 // 356 used size, 18 vars
Vector 272 [_LightColor0] 4
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_DistFade]
Float 344 [_DistFadeVert]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 128 instructions, 5 temp regs, 0 temp arrays:
// ALU 115 float, 0 int, 7 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhbhfefodbcbhhnonhecdccdgjidcoblbabaaaaaaiibbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcaibaaaaa
eaaaaaaaacaeaaaafjaaaaaeegiocaaaaaaaaaaabhaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaa
dgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaa
aeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaa
abaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
adaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaa
pgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaa
adaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaak
icaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaa
acaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaia
ibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaa
abaaaaaaagaabaaaabaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaa
kgikcaaaaaaaaaaabeaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
keanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaa
aaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
acaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaa
acaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaa
ckaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaa
acaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaa
akaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaa
adaaaaaapgipcaaaaaaaaaaabeaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaa
adaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaa
adaaaaaabkiacaaaaaaaaaaabfaaaaaadccaaaalccaabaaaabaaaaaackiacaia
ebaaaaaaaaaaaaaabfaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaa
abaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaabkiacaaaaaaaaaaabeaaaaaacpaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaa
aaaaaaaabeaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaa
acaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahicaabaaa
abaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaa
kgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaa
bgaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaadkiacaaaaaaaaaaabfaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaabbaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaabbaaaaaaagiacaaaaaaaaaaabfaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Float 4 [_FalloffPow]
Float 5 [_FalloffScale]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_DistFade]
Float 10 [_DistFadeVert]
Float 11 [_RimDist]
Float 12 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 148 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c13.y, c13.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c13.y, c13.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c17.y
abs r0.z, r1.y
mul r2.xy, r0, c6.x
add r0.y, -r0.z, c13
mad r0.x, r0.z, c13.z, c13.w
mad r0.x, r0, r0.z, c14
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c14.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.w, r1.y, c13.x, c13.y
mul r0.z, r0.w, r0.y
mad r1.y, -r0.z, c14.z, r0
mad r1.w, r0, c14, r1.y
dp3 r0.x, v3, v3
rsq r0.x, r0.x
mul r0.xyz, r0.x, v3
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c15.x
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c15.y, c15
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c15.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c17.x
mul r1.x, r2.z, c17
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c13.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c16
mad r3.y, r3.x, r4, c16
rcp r3.x, r3.z
mul r3.z, r3.x, c7.x
mul_sat r3.z, r3, c14
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c13.y
mad r3.y, r3, r4, c16.z
mul r3.y, r3, r4.x
add r1.y, -r3, c16.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c13.z, c13.w
mad r1.y, r1, r1.x, c14.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c14.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c14.w
cmp r0.y, r0, c13.x, c13
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c14.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c14.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c15.x
mad r3.z, r1.x, c17.x, c17.y
mov r1.xyz, v4
dp3_sat r1.x, v5, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c5.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c17
mul r0.z, r0, c17.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c4.x
mul_pp r1, r1, r2
mul r0.w, -r3.x, c10.x
add_sat r2.x, r0.w, c13.y
mul_sat r0.w, r3.x, c9.x
mad r0.w, -r0, r2.x, c13.y
mov r2.y, r0.x
dp4 r0.y, c2, c2
add r2.w, r2.y, -r0
add r2.xyz, -v1, c1
rsq r0.x, r0.y
mul r0.xyz, r0.x, c2
dp3_sat r0.x, v4, r0
add_pp r3.x, r0, c17.z
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c12.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c17.w
mov r0.x, c8
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c11
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 304 // 292 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 128 instructions, 5 temp regs, 0 temp arrays:
// ALU 115 float, 0 int, 7 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfifanjcfpapjhpjpakcolfbecfcdaoifabaaaaaaiibbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcaibaaaaa
eaaaaaaaacaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaa
dgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaa
aeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaa
abaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
adaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaa
pgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaa
adaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaak
icaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaa
acaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaia
ibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaa
abaaaaaaagaabaaaabaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaa
kgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
keanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaa
aaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
acaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaa
acaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaa
ckaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaa
acaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaa
akaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaa
adaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaa
adaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaa
adaaaaaabkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaackiacaia
ebaaaaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaa
abaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaa
aaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaa
acaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahicaabaaa
abaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaa
kgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaa
bcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Float 4 [_FalloffPow]
Float 5 [_FalloffScale]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_DistFade]
Float 10 [_DistFadeVert]
Float 11 [_RimDist]
Float 12 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 148 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c13.y, c13.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c13.y, c13.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c17.y
abs r0.z, r1.y
mul r2.xy, r0, c6.x
add r0.y, -r0.z, c13
mad r0.x, r0.z, c13.z, c13.w
mad r0.x, r0, r0.z, c14
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c14.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.w, r1.y, c13.x, c13.y
mul r0.z, r0.w, r0.y
mad r1.y, -r0.z, c14.z, r0
mad r1.w, r0, c14, r1.y
dp3 r0.x, v3, v3
rsq r0.x, r0.x
mul r0.xyz, r0.x, v3
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c15.x
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c15.y, c15
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c15.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c17.x
mul r1.x, r2.z, c17
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c13.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c16
mad r3.y, r3.x, r4, c16
rcp r3.x, r3.z
mul r3.z, r3.x, c7.x
mul_sat r3.z, r3, c14
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c13.y
mad r3.y, r3, r4, c16.z
mul r3.y, r3, r4.x
add r1.y, -r3, c16.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c13.z, c13.w
mad r1.y, r1, r1.x, c14.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c14.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c14.w
cmp r0.y, r0, c13.x, c13
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c14.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c14.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c15.x
mad r3.z, r1.x, c17.x, c17.y
mov r1.xyz, v4
dp3_sat r1.x, v5, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c5.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c17
mul r0.z, r0, c17.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c4.x
mul_pp r1, r1, r2
mul r0.w, -r3.x, c10.x
add_sat r2.x, r0.w, c13.y
mul_sat r0.w, r3.x, c9.x
mad r0.w, -r0, r2.x, c13.y
mov r2.y, r0.x
dp4 r0.y, c2, c2
add r2.w, r2.y, -r0
add r2.xyz, -v1, c1
rsq r0.x, r0.y
mul r0.xyz, r0.x, c2
dp3_sat r0.x, v4, r0
add_pp r3.x, r0, c17.z
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c12.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c17.w
mov r0.x, c8
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c11
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 304 // 292 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 128 instructions, 5 temp regs, 0 temp arrays:
// ALU 115 float, 0 int, 7 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfifanjcfpapjhpjpakcolfbecfcdaoifabaaaaaaiibbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcaibaaaaa
eaaaaaaaacaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaa
dgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaa
aeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaa
abaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
adaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaa
pgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaa
adaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaak
icaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaa
acaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaia
ibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaa
abaaaaaaagaabaaaabaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaa
kgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
keanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaa
aaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
acaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaa
acaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaa
ckaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaa
acaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaa
akaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaa
adaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaa
adaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaa
adaaaaaabkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaackiacaia
ebaaaaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaa
abaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaa
aaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaa
acaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahicaabaaa
abaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaa
kgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaa
bcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 152 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c15, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r0.w, r1.z, -r1.x
add r2.xyz, r1.zxyw, -r1
cmp r0.w, r0, c15.x, c15.y
mad r2.xyz, r0.w, r2, r1
add r0.w, r2.x, -r1.y
add r2.xyz, r2, -r1.yxzw
cmp r0.w, r0, c15.x, c15.y
mad r1.xyz, r0.w, r2, r1.yxzw
dsy r2.xy, r0.xzzw
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c15.x
mad r1.z, r0.w, c15, c15.w
mad r1.z, r1, r0.w, c16.x
mul_pp r1.xy, r1, c19.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c16.y
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c15.y, c15.x
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c16, r1
mad r0.w, r0, c16, r1.z
dp3 r0.y, v3, v3
rsq r0.y, r0.y
mul r3.xyz, r0.y, v3
abs r4.x, r3.z
abs r3.w, r3.x
max r0.y, r3.w, r4.x
mul r1.z, r0.w, c17.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c17.y, c17.z
mul r1.xy, r1, c7.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.x, r2, r2
rsq r0.z, r0.z
mad r2.w, r2, r4.z, c17
mad r2.y, r2.w, r4.z, c18.x
rsq r2.x, r2.x
rsq r0.x, r0.x
rcp r2.w, r2.x
mad r2.y, r2, r4.z, c18
mad r2.x, r2.y, r4.z, c18.z
mul r2.y, r2.w, c8.x
mul r2.x, r2, r4.y
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c19.x
mul r0.x, r1.z, c19
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c15.x
mul_sat r2.y, r2, c16.z
mad_pp r0, r2.y, r1, r0
abs r1.y, r3
add r1.x, r3.w, -r4
add r1.z, -r2.x, c18.w
cmp r1.x, -r1, r2, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c15.x
mad r1.z, r1.y, c15, c15.w
mad r1.z, r1, r1.y, c16.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c16
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c15, c15.x
mul r1.w, r1.y, r1.z
add r2.x, -r1, c16.w
mad r1.z, -r1.w, c16, r1
cmp r1.w, r3.z, r1.x, r2.x
mad r1.x, r1.y, c16.w, r1.z
mul r1.z, r1.x, c17.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.zw, r3.xyxz
mad r1.x, r1.y, c19, c19.y
mov r2.xyz, v4
mul r3.zw, r3, r3
add r3.x, r3.z, r3.w
rsq r3.x, r3.x
mov r1.y, r1.z
dsx r3.y, r1.z
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rcp r3.z, r3.x
mul r3.x, r1.z, c19
mul r1.z, r3, c19.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1, r1, r0
dp3_sat r2.x, v5, r2
mul r3.x, r2, c6
add r2.xyz, -v1, c1
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r0.w, r2, r2
rsq r0.y, r0.w
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.x, -r0, c13, r0.y
pow_sat r0, r3.x, c5.x
mul r0.y, -r2.w, c11.x
add_sat r0.z, r0.y, c15.x
mul_sat r0.y, r2.w, c10.x
mad r0.y, -r0, r0.z, c15.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2, c12
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c9
texldp r3.x, v6, s2
dp3_sat r2.x, v4, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c19.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c14.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c19.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 304 // 296 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 135 instructions, 5 temp regs, 0 temp arrays:
// ALU 121 float, 0 int, 7 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfkbkhkbfnglpopfpjaiajjcpjfhejgkgabaaaaaaiibcaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefccabbaaaaeaaaaaaaeiaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
jgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaaf
mcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaa
aaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaadaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaa
aaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaa
pgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaia
mbaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaa
egacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaa
bkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaa
abaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaa
jgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaa
bgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaa
dkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaa
abaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaa
abaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadiaaaaai
dcaabaaaabaaaaaaegaabaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadcaaaaak
ecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaa
akaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaia
ebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaa
acaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaa
amaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaa
egaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdo
apaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaa
abaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaa
apcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaabaaaaaaa
dcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaabbaaaaaa
dccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaa
adaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaa
afaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaa
baaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
bkaabaaaabaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaaacaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaia
ebaaaaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
acaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaa
abaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaa
abaaaaaadicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaa
bbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaa
abaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 152 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c15, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r0.w, r1.z, -r1.x
add r2.xyz, r1.zxyw, -r1
cmp r0.w, r0, c15.x, c15.y
mad r2.xyz, r0.w, r2, r1
add r0.w, r2.x, -r1.y
add r2.xyz, r2, -r1.yxzw
cmp r0.w, r0, c15.x, c15.y
mad r1.xyz, r0.w, r2, r1.yxzw
dsy r2.xy, r0.xzzw
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c15.x
mad r1.z, r0.w, c15, c15.w
mad r1.z, r1, r0.w, c16.x
mul_pp r1.xy, r1, c19.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c16.y
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c15.y, c15.x
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c16, r1
mad r0.w, r0, c16, r1.z
dp3 r0.y, v3, v3
rsq r0.y, r0.y
mul r3.xyz, r0.y, v3
abs r4.x, r3.z
abs r3.w, r3.x
max r0.y, r3.w, r4.x
mul r1.z, r0.w, c17.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c17.y, c17.z
mul r1.xy, r1, c7.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.x, r2, r2
rsq r0.z, r0.z
mad r2.w, r2, r4.z, c17
mad r2.y, r2.w, r4.z, c18.x
rsq r2.x, r2.x
rsq r0.x, r0.x
rcp r2.w, r2.x
mad r2.y, r2, r4.z, c18
mad r2.x, r2.y, r4.z, c18.z
mul r2.y, r2.w, c8.x
mul r2.x, r2, r4.y
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c19.x
mul r0.x, r1.z, c19
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c15.x
mul_sat r2.y, r2, c16.z
mad_pp r0, r2.y, r1, r0
abs r1.y, r3
add r1.x, r3.w, -r4
add r1.z, -r2.x, c18.w
cmp r1.x, -r1, r2, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c15.x
mad r1.z, r1.y, c15, c15.w
mad r1.z, r1, r1.y, c16.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c16
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c15, c15.x
mul r1.w, r1.y, r1.z
add r2.x, -r1, c16.w
mad r1.z, -r1.w, c16, r1
cmp r1.w, r3.z, r1.x, r2.x
mad r1.x, r1.y, c16.w, r1.z
mul r1.z, r1.x, c17.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.zw, r3.xyxz
mad r1.x, r1.y, c19, c19.y
mov r2.xyz, v4
mul r3.zw, r3, r3
add r3.x, r3.z, r3.w
rsq r3.x, r3.x
mov r1.y, r1.z
dsx r3.y, r1.z
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rcp r3.z, r3.x
mul r3.x, r1.z, c19
mul r1.z, r3, c19.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1, r1, r0
dp3_sat r2.x, v5, r2
mul r3.x, r2, c6
add r2.xyz, -v1, c1
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r0.w, r2, r2
rsq r0.y, r0.w
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.x, -r0, c13, r0.y
pow_sat r0, r3.x, c5.x
mul r0.y, -r2.w, c11.x
add_sat r0.z, r0.y, c15.x
mul_sat r0.y, r2.w, c10.x
mad r0.y, -r0, r0.z, c15.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2, c12
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4_pp r0.y, c3, c3
rsq_pp r1.w, r0.y
mul_pp r2.xyz, r1.w, c3
mov r0.x, c9
texldp r3.x, v6, s2
dp3_sat r2.x, v4, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c19.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c14.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c19.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
ConstBuffer "$Globals" 240 // 232 used size, 16 vars
Vector 144 [_LightColor0] 4
Float 192 [_FalloffPow]
Float 196 [_FalloffScale]
Float 200 [_DetailScale]
Float 204 [_DetailDist]
Float 208 [_MinLight]
Float 212 [_DistFade]
Float 216 [_DistFadeVert]
Float 220 [_RimDist]
Float 224 [_RimDistSub]
Float 228 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 135 instructions, 5 temp regs, 0 temp arrays:
// ALU 121 float, 0 int, 7 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedcfefaedjbakjiglgofhmckdfpapeihdmabaaaaaahabcaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaneaaaaaaaiaaaaaaaaaaaaaaadaaaaaaahaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefccabbaaaaeaaaaaaaeiaeaaaafjaaaaaeegiocaaa
aaaaaaaaapaaaaaafjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaa
acaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaaahaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaa
deaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaa
abaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaai
dcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaa
ckaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaa
akaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
iedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaa
aaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
abaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaaj
ecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaa
diaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaaf
ccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaa
acaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaa
aaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaa
egaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
bcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaa
aaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaa
aagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadgaaaaafecaabaaa
abaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
pcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaa
adaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaia
ibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaia
ibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaa
aeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaa
egaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaa
egacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaia
mbaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaa
dkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaai
icaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaa
abaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaa
diaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadp
aaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaa
abaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaakgikcaaaaaaaaaaa
amaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaai
icaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaa
abaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaa
acaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaa
acaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaa
amaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaa
fganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaah
bcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaa
acaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaa
abeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
adaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaa
egbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaa
adaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaa
akaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaa
aaaaaaaaamaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaa
acaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaa
egaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaabkiacaaa
aaaaaaaaanaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaa
anaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaa
agaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaa
bkiacaaaaaaaaaaaamaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
diaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaaamaaaaaa
bjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
acaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegbcbaaa
abaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaa
dcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaaaoaaaaaadkaabaaa
abaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaa
dkiacaaaaaaaaaaaanaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaahaaaaaa
pgbpbaaaahaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaa
ahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaa
aaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaaahaaaaaa
dicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaaaoaaaaaa
diaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaa
aaaaaaaaajaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaaagiacaaa
aaaaaaaaanaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 152 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c15, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r0.w, r1.z, -r1.x
add r2.xyz, r1.zxyw, -r1
cmp r0.w, r0, c15.x, c15.y
mad r2.xyz, r0.w, r2, r1
add r0.w, r2.x, -r1.y
add r2.xyz, r2, -r1.yxzw
cmp r0.w, r0, c15.x, c15.y
mad r1.xyz, r0.w, r2, r1.yxzw
dsy r2.xy, r0.xzzw
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c15.x
mad r1.z, r0.w, c15, c15.w
mad r1.z, r1, r0.w, c16.x
mul_pp r1.xy, r1, c19.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c16.y
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c15.y, c15.x
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c16, r1
mad r0.w, r0, c16, r1.z
dp3 r0.y, v3, v3
rsq r0.y, r0.y
mul r3.xyz, r0.y, v3
abs r4.x, r3.z
abs r3.w, r3.x
max r0.y, r3.w, r4.x
mul r1.z, r0.w, c17.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c17.y, c17.z
mul r1.xy, r1, c7.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.x, r2, r2
rsq r0.z, r0.z
mad r2.w, r2, r4.z, c17
mad r2.y, r2.w, r4.z, c18.x
rsq r2.x, r2.x
rsq r0.x, r0.x
rcp r2.w, r2.x
mad r2.y, r2, r4.z, c18
mad r2.x, r2.y, r4.z, c18.z
mul r2.y, r2.w, c8.x
mul r2.x, r2, r4.y
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c19.x
mul r0.x, r1.z, c19
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c15.x
mul_sat r2.y, r2, c16.z
mad_pp r0, r2.y, r1, r0
abs r1.y, r3
add r1.x, r3.w, -r4
add r1.z, -r2.x, c18.w
cmp r1.x, -r1, r2, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c15.x
mad r1.z, r1.y, c15, c15.w
mad r1.z, r1, r1.y, c16.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c16
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c15, c15.x
mul r1.w, r1.y, r1.z
add r2.x, -r1, c16.w
mad r1.z, -r1.w, c16, r1
cmp r1.w, r3.z, r1.x, r2.x
mad r1.x, r1.y, c16.w, r1.z
mul r1.z, r1.x, c17.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.zw, r3.xyxz
mad r1.x, r1.y, c19, c19.y
mov r2.xyz, v4
mul r3.zw, r3, r3
add r3.x, r3.z, r3.w
rsq r3.x, r3.x
mov r1.y, r1.z
dsx r3.y, r1.z
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rcp r3.z, r3.x
mul r3.x, r1.z, c19
mul r1.z, r3, c19.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1, r1, r0
dp3_sat r2.x, v5, r2
mul r3.x, r2, c6
add r2.xyz, -v1, c1
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r0.w, r2, r2
rsq r0.y, r0.w
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.x, -r0, c13, r0.y
pow_sat r0, r3.x, c5.x
mul r0.y, -r2.w, c11.x
add_sat r0.z, r0.y, c15.x
mul_sat r0.y, r2.w, c10.x
mad r0.y, -r0, r0.z, c15.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2, c12
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c9
texldp r3.x, v6, s2
dp3_sat r2.x, v4, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c19.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c14.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c19.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 304 // 296 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 135 instructions, 5 temp regs, 0 temp arrays:
// ALU 121 float, 0 int, 7 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhijaklbajljifojnipndbbdeknhlpeedabaaaaaaiibcaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefccabbaaaaeaaaaaaaeiaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
jgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaaf
mcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaa
aaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaadaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaa
aaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaa
pgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaia
mbaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaa
egacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaa
bkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaa
abaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaa
jgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaa
bgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaa
dkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaa
abaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaa
abaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadiaaaaai
dcaabaaaabaaaaaaegaabaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadcaaaaak
ecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaa
akaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaia
ebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaa
acaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaa
amaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaa
egaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdo
apaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaa
abaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaa
apcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaabaaaaaaa
dcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaabbaaaaaa
dccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaa
adaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaa
afaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaa
baaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
bkaabaaaabaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaaacaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaia
ebaaaaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
acaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaa
abaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaa
abaaaaaadicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaa
bbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaa
abaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 152 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c15, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r0.w, r1.z, -r1.x
add r2.xyz, r1.zxyw, -r1
cmp r0.w, r0, c15.x, c15.y
mad r2.xyz, r0.w, r2, r1
add r0.w, r2.x, -r1.y
add r2.xyz, r2, -r1.yxzw
cmp r0.w, r0, c15.x, c15.y
mad r1.xyz, r0.w, r2, r1.yxzw
dsy r2.xy, r0.xzzw
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c15.x
mad r1.z, r0.w, c15, c15.w
mad r1.z, r1, r0.w, c16.x
mul_pp r1.xy, r1, c19.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c16.y
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c15.y, c15.x
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c16, r1
mad r0.w, r0, c16, r1.z
dp3 r0.y, v3, v3
rsq r0.y, r0.y
mul r3.xyz, r0.y, v3
abs r4.x, r3.z
abs r3.w, r3.x
max r0.y, r3.w, r4.x
mul r1.z, r0.w, c17.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c17.y, c17.z
mul r1.xy, r1, c7.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.x, r2, r2
rsq r0.z, r0.z
mad r2.w, r2, r4.z, c17
mad r2.y, r2.w, r4.z, c18.x
rsq r2.x, r2.x
rsq r0.x, r0.x
rcp r2.w, r2.x
mad r2.y, r2, r4.z, c18
mad r2.x, r2.y, r4.z, c18.z
mul r2.y, r2.w, c8.x
mul r2.x, r2, r4.y
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c19.x
mul r0.x, r1.z, c19
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c15.x
mul_sat r2.y, r2, c16.z
mad_pp r0, r2.y, r1, r0
abs r1.y, r3
add r1.x, r3.w, -r4
add r1.z, -r2.x, c18.w
cmp r1.x, -r1, r2, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c15.x
mad r1.z, r1.y, c15, c15.w
mad r1.z, r1, r1.y, c16.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c16
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c15, c15.x
mul r1.w, r1.y, r1.z
add r2.x, -r1, c16.w
mad r1.z, -r1.w, c16, r1
cmp r1.w, r3.z, r1.x, r2.x
mad r1.x, r1.y, c16.w, r1.z
mul r1.z, r1.x, c17.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.zw, r3.xyxz
mad r1.x, r1.y, c19, c19.y
mov r2.xyz, v4
mul r3.zw, r3, r3
add r3.x, r3.z, r3.w
rsq r3.x, r3.x
mov r1.y, r1.z
dsx r3.y, r1.z
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rcp r3.z, r3.x
mul r3.x, r1.z, c19
mul r1.z, r3, c19.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1, r1, r0
dp3_sat r2.x, v5, r2
mul r3.x, r2, c6
add r2.xyz, -v1, c1
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r0.w, r2, r2
rsq r0.y, r0.w
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.x, -r0, c13, r0.y
pow_sat r0, r3.x, c5.x
mul r0.y, -r2.w, c11.x
add_sat r0.z, r0.y, c15.x
mul_sat r0.y, r2.w, c10.x
mad r0.y, -r0, r0.z, c15.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2, c12
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c9
texldp r3.x, v6, s2
dp3_sat r2.x, v4, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c19.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c14.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c19.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 304 // 296 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 135 instructions, 5 temp regs, 0 temp arrays:
// ALU 121 float, 0 int, 7 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfkbkhkbfnglpopfpjaiajjcpjfhejgkgabaaaaaaiibcaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefccabbaaaaeaaaaaaaeiaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
jgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaaf
mcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaa
aaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaadaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaa
aaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaa
pgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaia
mbaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaa
egacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaa
bkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaa
abaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaa
jgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaa
bgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaa
dkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaa
abaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaa
abaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadiaaaaai
dcaabaaaabaaaaaaegaabaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadcaaaaak
ecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaa
akaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaia
ebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaa
acaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaa
amaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaa
egaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdo
apaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaa
abaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaa
apcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaabaaaaaaa
dcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaabbaaaaaa
dccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaa
adaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaa
afaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaa
baaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
bkaabaaaabaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaaacaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaia
ebaaaaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
acaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaa
abaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaa
abaaaaaadicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaa
bbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaa
abaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 152 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c15, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r0.w, r1.z, -r1.x
add r2.xyz, r1.zxyw, -r1
cmp r0.w, r0, c15.x, c15.y
mad r2.xyz, r0.w, r2, r1
add r0.w, r2.x, -r1.y
add r2.xyz, r2, -r1.yxzw
cmp r0.w, r0, c15.x, c15.y
mad r1.xyz, r0.w, r2, r1.yxzw
dsy r2.xy, r0.xzzw
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c15.x
mad r1.z, r0.w, c15, c15.w
mad r1.z, r1, r0.w, c16.x
mul_pp r1.xy, r1, c19.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c16.y
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c15.y, c15.x
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c16, r1
mad r0.w, r0, c16, r1.z
dp3 r0.y, v3, v3
rsq r0.y, r0.y
mul r3.xyz, r0.y, v3
abs r4.x, r3.z
abs r3.w, r3.x
max r0.y, r3.w, r4.x
mul r1.z, r0.w, c17.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c17.y, c17.z
mul r1.xy, r1, c7.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.x, r2, r2
rsq r0.z, r0.z
mad r2.w, r2, r4.z, c17
mad r2.y, r2.w, r4.z, c18.x
rsq r2.x, r2.x
rsq r0.x, r0.x
rcp r2.w, r2.x
mad r2.y, r2, r4.z, c18
mad r2.x, r2.y, r4.z, c18.z
mul r2.y, r2.w, c8.x
mul r2.x, r2, r4.y
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c19.x
mul r0.x, r1.z, c19
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c15.x
mul_sat r2.y, r2, c16.z
mad_pp r0, r2.y, r1, r0
abs r1.y, r3
add r1.x, r3.w, -r4
add r1.z, -r2.x, c18.w
cmp r1.x, -r1, r2, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c15.x
mad r1.z, r1.y, c15, c15.w
mad r1.z, r1, r1.y, c16.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c16
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c15, c15.x
mul r1.w, r1.y, r1.z
add r2.x, -r1, c16.w
mad r1.z, -r1.w, c16, r1
cmp r1.w, r3.z, r1.x, r2.x
mad r1.x, r1.y, c16.w, r1.z
mul r1.z, r1.x, c17.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.zw, r3.xyxz
mad r1.x, r1.y, c19, c19.y
mov r2.xyz, v4
mul r3.zw, r3, r3
add r3.x, r3.z, r3.w
rsq r3.x, r3.x
mov r1.y, r1.z
dsx r3.y, r1.z
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rcp r3.z, r3.x
mul r3.x, r1.z, c19
mul r1.z, r3, c19.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1, r1, r0
dp3_sat r2.x, v5, r2
mul r3.x, r2, c6
add r2.xyz, -v1, c1
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r0.w, r2, r2
rsq r0.y, r0.w
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.x, -r0, c13, r0.y
pow_sat r0, r3.x, c5.x
mul r0.y, -r2.w, c11.x
add_sat r0.z, r0.y, c15.x
mul_sat r0.y, r2.w, c10.x
mad r0.y, -r0, r0.z, c15.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2, c12
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4_pp r0.y, c3, c3
rsq_pp r1.w, r0.y
mul_pp r2.xyz, r1.w, c3
mov r0.x, c9
texldp r3.x, v6, s2
dp3_sat r2.x, v4, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c19.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c14.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c19.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 304 // 296 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 135 instructions, 5 temp regs, 0 temp arrays:
// ALU 121 float, 0 int, 7 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedinccamjheklfdjhfdapbiodhmjdcejcnabaaaaaaiibcaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaadaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefccabbaaaaeaaaaaaaeiaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
jgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaaf
mcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaa
aaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaadaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaa
aaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaa
pgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaia
mbaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaa
egacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaa
bkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaa
abaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaa
jgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaa
bgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaa
dkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaa
abaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaa
abaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadiaaaaai
dcaabaaaabaaaaaaegaabaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadcaaaaak
ecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaa
akaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaia
ebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaa
acaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaa
amaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaa
egaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdo
apaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaa
abaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaa
apcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaabaaaaaaa
dcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaabbaaaaaa
dccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaa
adaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaa
afaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaa
baaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
bkaabaaaabaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaaacaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaia
ebaaaaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
acaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaa
abaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaa
abaaaaaadicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaa
bbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaa
abaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 152 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c15, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r0.w, r1.z, -r1.x
add r2.xyz, r1.zxyw, -r1
cmp r0.w, r0, c15.x, c15.y
mad r2.xyz, r0.w, r2, r1
add r0.w, r2.x, -r1.y
add r2.xyz, r2, -r1.yxzw
cmp r0.w, r0, c15.x, c15.y
mad r1.xyz, r0.w, r2, r1.yxzw
dsy r2.xy, r0.xzzw
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c15.x
mad r1.z, r0.w, c15, c15.w
mad r1.z, r1, r0.w, c16.x
mul_pp r1.xy, r1, c19.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c16.y
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c15.y, c15.x
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c16, r1
mad r0.w, r0, c16, r1.z
dp3 r0.y, v3, v3
rsq r0.y, r0.y
mul r3.xyz, r0.y, v3
abs r4.x, r3.z
abs r3.w, r3.x
max r0.y, r3.w, r4.x
mul r1.z, r0.w, c17.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c17.y, c17.z
mul r1.xy, r1, c7.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.x, r2, r2
rsq r0.z, r0.z
mad r2.w, r2, r4.z, c17
mad r2.y, r2.w, r4.z, c18.x
rsq r2.x, r2.x
rsq r0.x, r0.x
rcp r2.w, r2.x
mad r2.y, r2, r4.z, c18
mad r2.x, r2.y, r4.z, c18.z
mul r2.y, r2.w, c8.x
mul r2.x, r2, r4.y
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c19.x
mul r0.x, r1.z, c19
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c15.x
mul_sat r2.y, r2, c16.z
mad_pp r0, r2.y, r1, r0
abs r1.y, r3
add r1.x, r3.w, -r4
add r1.z, -r2.x, c18.w
cmp r1.x, -r1, r2, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c15.x
mad r1.z, r1.y, c15, c15.w
mad r1.z, r1, r1.y, c16.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c16
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c15, c15.x
mul r1.w, r1.y, r1.z
add r2.x, -r1, c16.w
mad r1.z, -r1.w, c16, r1
cmp r1.w, r3.z, r1.x, r2.x
mad r1.x, r1.y, c16.w, r1.z
mul r1.z, r1.x, c17.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.zw, r3.xyxz
mad r1.x, r1.y, c19, c19.y
mov r2.xyz, v4
mul r3.zw, r3, r3
add r3.x, r3.z, r3.w
rsq r3.x, r3.x
mov r1.y, r1.z
dsx r3.y, r1.z
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rcp r3.z, r3.x
mul r3.x, r1.z, c19
mul r1.z, r3, c19.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1, r1, r0
dp3_sat r2.x, v5, r2
mul r3.x, r2, c6
add r2.xyz, -v1, c1
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r0.w, r2, r2
rsq r0.y, r0.w
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.x, -r0, c13, r0.y
pow_sat r0, r3.x, c5.x
mul r0.y, -r2.w, c11.x
add_sat r0.z, r0.y, c15.x
mul_sat r0.y, r2.w, c10.x
mad r0.y, -r0, r0.z, c15.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2, c12
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c9
texldp r3.x, v6, s2
dp3_sat r2.x, v4, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c19.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c14.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c19.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
ConstBuffer "$Globals" 304 // 296 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 135 instructions, 5 temp regs, 0 temp arrays:
// ALU 121 float, 0 int, 7 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedbidfjhbncfocbopkigfjbcplfnbjigcoabaaaaaakabcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefccabbaaaa
eaaaaaaaeiaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadiaaaaaidcaabaaaabaaaaaa
egaabaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaa
adaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaa
abaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaah
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
bacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
aaaaaaajhcaabaaaacaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaa
baaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaf
mcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaia
ebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaaj
bcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaah
dcaabaaaabaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaal
bcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaa
abaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaackbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaabkiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaa
diaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 152 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c15, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r0.w, r1.z, -r1.x
add r2.xyz, r1.zxyw, -r1
cmp r0.w, r0, c15.x, c15.y
mad r2.xyz, r0.w, r2, r1
add r0.w, r2.x, -r1.y
add r2.xyz, r2, -r1.yxzw
cmp r0.w, r0, c15.x, c15.y
mad r1.xyz, r0.w, r2, r1.yxzw
dsy r2.xy, r0.xzzw
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c15.x
mad r1.z, r0.w, c15, c15.w
mad r1.z, r1, r0.w, c16.x
mul_pp r1.xy, r1, c19.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c16.y
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c15.y, c15.x
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c16, r1
mad r0.w, r0, c16, r1.z
dp3 r0.y, v3, v3
rsq r0.y, r0.y
mul r3.xyz, r0.y, v3
abs r4.x, r3.z
abs r3.w, r3.x
max r0.y, r3.w, r4.x
mul r1.z, r0.w, c17.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c17.y, c17.z
mul r1.xy, r1, c7.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.x, r2, r2
rsq r0.z, r0.z
mad r2.w, r2, r4.z, c17
mad r2.y, r2.w, r4.z, c18.x
rsq r2.x, r2.x
rsq r0.x, r0.x
rcp r2.w, r2.x
mad r2.y, r2, r4.z, c18
mad r2.x, r2.y, r4.z, c18.z
mul r2.y, r2.w, c8.x
mul r2.x, r2, r4.y
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c19.x
mul r0.x, r1.z, c19
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c15.x
mul_sat r2.y, r2, c16.z
mad_pp r0, r2.y, r1, r0
abs r1.y, r3
add r1.x, r3.w, -r4
add r1.z, -r2.x, c18.w
cmp r1.x, -r1, r2, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c15.x
mad r1.z, r1.y, c15, c15.w
mad r1.z, r1, r1.y, c16.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c16
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c15, c15.x
mul r1.w, r1.y, r1.z
add r2.x, -r1, c16.w
mad r1.z, -r1.w, c16, r1
cmp r1.w, r3.z, r1.x, r2.x
mad r1.x, r1.y, c16.w, r1.z
mul r1.z, r1.x, c17.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.zw, r3.xyxz
mad r1.x, r1.y, c19, c19.y
mov r2.xyz, v4
mul r3.zw, r3, r3
add r3.x, r3.z, r3.w
rsq r3.x, r3.x
mov r1.y, r1.z
dsx r3.y, r1.z
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rcp r3.z, r3.x
mul r3.x, r1.z, c19
mul r1.z, r3, c19.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1, r1, r0
dp3_sat r2.x, v5, r2
mul r3.x, r2, c6
add r2.xyz, -v1, c1
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r0.w, r2, r2
rsq r0.y, r0.w
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.x, -r0, c13, r0.y
pow_sat r0, r3.x, c5.x
mul r0.y, -r2.w, c11.x
add_sat r0.z, r0.y, c15.x
mul_sat r0.y, r2.w, c10.x
mad r0.y, -r0, r0.z, c15.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2, c12
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c9
texldp r3.x, v6, s2
dp3_sat r2.x, v4, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c19.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c14.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c19.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 304 // 296 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 135 instructions, 5 temp regs, 0 temp arrays:
// ALU 121 float, 0 int, 7 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedbidfjhbncfocbopkigfjbcplfnbjigcoabaaaaaakabcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefccabbaaaa
eaaaaaaaeiaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadiaaaaaidcaabaaaabaaaaaa
egaabaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaa
adaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaa
abaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaah
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
bacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
aaaaaaajhcaabaaaacaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaa
baaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaf
mcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaia
ebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaaj
bcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaah
dcaabaaaabaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaal
bcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaa
abaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaackbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaabkiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaa
diaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 152 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c15, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r0.w, r1.z, -r1.x
add r2.xyz, r1.zxyw, -r1
cmp r0.w, r0, c15.x, c15.y
mad r2.xyz, r0.w, r2, r1
add r0.w, r2.x, -r1.y
add r2.xyz, r2, -r1.yxzw
cmp r0.w, r0, c15.x, c15.y
mad r1.xyz, r0.w, r2, r1.yxzw
dsy r2.xy, r0.xzzw
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c15.x
mad r1.z, r0.w, c15, c15.w
mad r1.z, r1, r0.w, c16.x
mul_pp r1.xy, r1, c19.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c16.y
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c15.y, c15.x
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c16, r1
mad r0.w, r0, c16, r1.z
dp3 r0.y, v3, v3
rsq r0.y, r0.y
mul r3.xyz, r0.y, v3
abs r4.x, r3.z
abs r3.w, r3.x
max r0.y, r3.w, r4.x
mul r1.z, r0.w, c17.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c17.y, c17.z
mul r1.xy, r1, c7.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.x, r2, r2
rsq r0.z, r0.z
mad r2.w, r2, r4.z, c17
mad r2.y, r2.w, r4.z, c18.x
rsq r2.x, r2.x
rsq r0.x, r0.x
rcp r2.w, r2.x
mad r2.y, r2, r4.z, c18
mad r2.x, r2.y, r4.z, c18.z
mul r2.y, r2.w, c8.x
mul r2.x, r2, r4.y
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c19.x
mul r0.x, r1.z, c19
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c15.x
mul_sat r2.y, r2, c16.z
mad_pp r0, r2.y, r1, r0
abs r1.y, r3
add r1.x, r3.w, -r4
add r1.z, -r2.x, c18.w
cmp r1.x, -r1, r2, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c15.x
mad r1.z, r1.y, c15, c15.w
mad r1.z, r1, r1.y, c16.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c16
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c15, c15.x
mul r1.w, r1.y, r1.z
add r2.x, -r1, c16.w
mad r1.z, -r1.w, c16, r1
cmp r1.w, r3.z, r1.x, r2.x
mad r1.x, r1.y, c16.w, r1.z
mul r1.z, r1.x, c17.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.zw, r3.xyxz
mad r1.x, r1.y, c19, c19.y
mov r2.xyz, v4
mul r3.zw, r3, r3
add r3.x, r3.z, r3.w
rsq r3.x, r3.x
mov r1.y, r1.z
dsx r3.y, r1.z
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rcp r3.z, r3.x
mul r3.x, r1.z, c19
mul r1.z, r3, c19.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1, r1, r0
dp3_sat r2.x, v5, r2
mul r3.x, r2, c6
add r2.xyz, -v1, c1
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r0.w, r2, r2
rsq r0.y, r0.w
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.x, -r0, c13, r0.y
pow_sat r0, r3.x, c5.x
mul r0.y, -r2.w, c11.x
add_sat r0.z, r0.y, c15.x
mul_sat r0.y, r2.w, c10.x
mad r0.y, -r0, r0.z, c15.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2, c12
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4_pp r0.y, c3, c3
rsq_pp r1.w, r0.y
mul_pp r2.xyz, r1.w, c3
mov r0.x, c9
texldp r3.x, v6, s2
dp3_sat r2.x, v4, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c19.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c14.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c19.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 304 // 296 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 135 instructions, 5 temp regs, 0 temp arrays:
// ALU 121 float, 0 int, 7 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhijaklbajljifojnipndbbdeknhlpeedabaaaaaaiibcaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefccabbaaaaeaaaaaaaeiaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
jgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaaf
mcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaa
aaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaadaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaa
aaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaa
pgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaia
mbaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaa
egacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaa
bkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaa
abaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaa
jgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaa
bgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaa
dkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaa
abaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaa
abaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadiaaaaai
dcaabaaaabaaaaaaegaabaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadcaaaaak
ecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaa
akaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaia
ebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaa
acaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaa
amaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaa
egaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdo
apaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaa
abaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaa
apcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaabaaaaaaa
dcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaabbaaaaaa
dccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaa
adaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaa
afaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaa
baaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
bkaabaaaabaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaaacaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaia
ebaaaaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
acaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaa
abaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaa
abaaaaaadicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaa
bbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaa
abaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 152 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c15, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r0.w, r1.z, -r1.x
add r2.xyz, r1.zxyw, -r1
cmp r0.w, r0, c15.x, c15.y
mad r2.xyz, r0.w, r2, r1
add r0.w, r2.x, -r1.y
add r2.xyz, r2, -r1.yxzw
cmp r0.w, r0, c15.x, c15.y
mad r1.xyz, r0.w, r2, r1.yxzw
dsy r2.xy, r0.xzzw
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c15.x
mad r1.z, r0.w, c15, c15.w
mad r1.z, r1, r0.w, c16.x
mul_pp r1.xy, r1, c19.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c16.y
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c15.y, c15.x
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c16, r1
mad r0.w, r0, c16, r1.z
dp3 r0.y, v3, v3
rsq r0.y, r0.y
mul r3.xyz, r0.y, v3
abs r4.x, r3.z
abs r3.w, r3.x
max r0.y, r3.w, r4.x
mul r1.z, r0.w, c17.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c17.y, c17.z
mul r1.xy, r1, c7.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.x, r2, r2
rsq r0.z, r0.z
mad r2.w, r2, r4.z, c17
mad r2.y, r2.w, r4.z, c18.x
rsq r2.x, r2.x
rsq r0.x, r0.x
rcp r2.w, r2.x
mad r2.y, r2, r4.z, c18
mad r2.x, r2.y, r4.z, c18.z
mul r2.y, r2.w, c8.x
mul r2.x, r2, r4.y
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c19.x
mul r0.x, r1.z, c19
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c15.x
mul_sat r2.y, r2, c16.z
mad_pp r0, r2.y, r1, r0
abs r1.y, r3
add r1.x, r3.w, -r4
add r1.z, -r2.x, c18.w
cmp r1.x, -r1, r2, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c15.x
mad r1.z, r1.y, c15, c15.w
mad r1.z, r1, r1.y, c16.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c16
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c15, c15.x
mul r1.w, r1.y, r1.z
add r2.x, -r1, c16.w
mad r1.z, -r1.w, c16, r1
cmp r1.w, r3.z, r1.x, r2.x
mad r1.x, r1.y, c16.w, r1.z
mul r1.z, r1.x, c17.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.zw, r3.xyxz
mad r1.x, r1.y, c19, c19.y
mov r2.xyz, v4
mul r3.zw, r3, r3
add r3.x, r3.z, r3.w
rsq r3.x, r3.x
mov r1.y, r1.z
dsx r3.y, r1.z
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rcp r3.z, r3.x
mul r3.x, r1.z, c19
mul r1.z, r3, c19.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1, r1, r0
dp3_sat r2.x, v5, r2
mul r3.x, r2, c6
add r2.xyz, -v1, c1
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r0.w, r2, r2
rsq r0.y, r0.w
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.x, -r0, c13, r0.y
pow_sat r0, r3.x, c5.x
mul r0.y, -r2.w, c11.x
add_sat r0.z, r0.y, c15.x
mul_sat r0.y, r2.w, c10.x
mad r0.y, -r0, r0.z, c15.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2, c12
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4_pp r0.y, c3, c3
rsq_pp r1.w, r0.y
mul_pp r2.xyz, r1.w, c3
mov r0.x, c9
texldp r3.x, v6, s2
dp3_sat r2.x, v4, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c19.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c14.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c19.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 368 // 360 used size, 18 vars
Vector 272 [_LightColor0] 4
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_DistFade]
Float 344 [_DistFadeVert]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
Float 356 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 135 instructions, 5 temp regs, 0 temp arrays:
// ALU 121 float, 0 int, 7 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefieceddipnplbikcfkjacaalgfnpgfliihphgiabaaaaaakabcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaadaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefccabbaaaa
eaaaaaaaeiaeaaaafjaaaaaeegiocaaaaaaaaaaabhaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadiaaaaaidcaabaaaabaaaaaa
egaabaaaabaaaaaakgikcaaaaaaaaaaabeaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaa
adaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaabeaaaaaadcaaaaajpcaabaaa
abaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaah
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaabfaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabfaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
bacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabeaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaaakiacaaaaaaaaaaabeaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
aaaaaaajhcaabaaaacaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaa
baaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaf
mcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaia
ebaaaaaaaaaaaaaabgaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabfaaaaaadcaaaaaj
bcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaah
dcaabaaaabaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaal
bcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaa
abaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaackbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaabkiacaaaaaaaaaaabgaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaabbaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaabbaaaaaaagiacaaaaaaaaaaabfaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaa
diaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 152 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c15, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r0.w, r1.z, -r1.x
add r2.xyz, r1.zxyw, -r1
cmp r0.w, r0, c15.x, c15.y
mad r2.xyz, r0.w, r2, r1
add r0.w, r2.x, -r1.y
add r2.xyz, r2, -r1.yxzw
cmp r0.w, r0, c15.x, c15.y
mad r1.xyz, r0.w, r2, r1.yxzw
dsy r2.xy, r0.xzzw
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c15.x
mad r1.z, r0.w, c15, c15.w
mad r1.z, r1, r0.w, c16.x
mul_pp r1.xy, r1, c19.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c16.y
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c15.y, c15.x
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c16, r1
mad r0.w, r0, c16, r1.z
dp3 r0.y, v3, v3
rsq r0.y, r0.y
mul r3.xyz, r0.y, v3
abs r4.x, r3.z
abs r3.w, r3.x
max r0.y, r3.w, r4.x
mul r1.z, r0.w, c17.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c17.y, c17.z
mul r1.xy, r1, c7.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.x, r2, r2
rsq r0.z, r0.z
mad r2.w, r2, r4.z, c17
mad r2.y, r2.w, r4.z, c18.x
rsq r2.x, r2.x
rsq r0.x, r0.x
rcp r2.w, r2.x
mad r2.y, r2, r4.z, c18
mad r2.x, r2.y, r4.z, c18.z
mul r2.y, r2.w, c8.x
mul r2.x, r2, r4.y
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c19.x
mul r0.x, r1.z, c19
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c15.x
mul_sat r2.y, r2, c16.z
mad_pp r0, r2.y, r1, r0
abs r1.y, r3
add r1.x, r3.w, -r4
add r1.z, -r2.x, c18.w
cmp r1.x, -r1, r2, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c15.x
mad r1.z, r1.y, c15, c15.w
mad r1.z, r1, r1.y, c16.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c16
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c15, c15.x
mul r1.w, r1.y, r1.z
add r2.x, -r1, c16.w
mad r1.z, -r1.w, c16, r1
cmp r1.w, r3.z, r1.x, r2.x
mad r1.x, r1.y, c16.w, r1.z
mul r1.z, r1.x, c17.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.zw, r3.xyxz
mad r1.x, r1.y, c19, c19.y
mov r2.xyz, v4
mul r3.zw, r3, r3
add r3.x, r3.z, r3.w
rsq r3.x, r3.x
mov r1.y, r1.z
dsx r3.y, r1.z
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rcp r3.z, r3.x
mul r3.x, r1.z, c19
mul r1.z, r3, c19.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1, r1, r0
dp3_sat r2.x, v5, r2
mul r3.x, r2, c6
add r2.xyz, -v1, c1
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r0.w, r2, r2
rsq r0.y, r0.w
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.x, -r0, c13, r0.y
pow_sat r0, r3.x, c5.x
mul r0.y, -r2.w, c11.x
add_sat r0.z, r0.y, c15.x
mul_sat r0.y, r2.w, c10.x
mad r0.y, -r0, r0.z, c15.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2, c12
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c9
texldp r3.x, v6, s2
dp3_sat r2.x, v4, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c19.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c14.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c19.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 304 // 296 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 135 instructions, 5 temp regs, 0 temp arrays:
// ALU 121 float, 0 int, 7 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednhilmhpdnfccokgpbchbcejlfopneeaiabaaaaaakabcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefccabbaaaa
eaaaaaaaeiaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadiaaaaaidcaabaaaabaaaaaa
egaabaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaa
adaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaa
abaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaah
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
bacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
aaaaaaajhcaabaaaacaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaa
baaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaf
mcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaia
ebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaaj
bcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaah
dcaabaaaabaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaal
bcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaa
abaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaackbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaabkiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaa
diaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 152 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c15, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r0.w, r1.z, -r1.x
add r2.xyz, r1.zxyw, -r1
cmp r0.w, r0, c15.x, c15.y
mad r2.xyz, r0.w, r2, r1
add r0.w, r2.x, -r1.y
add r2.xyz, r2, -r1.yxzw
cmp r0.w, r0, c15.x, c15.y
mad r1.xyz, r0.w, r2, r1.yxzw
dsy r2.xy, r0.xzzw
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c15.x
mad r1.z, r0.w, c15, c15.w
mad r1.z, r1, r0.w, c16.x
mul_pp r1.xy, r1, c19.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c16.y
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c15.y, c15.x
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c16, r1
mad r0.w, r0, c16, r1.z
dp3 r0.y, v3, v3
rsq r0.y, r0.y
mul r3.xyz, r0.y, v3
abs r4.x, r3.z
abs r3.w, r3.x
max r0.y, r3.w, r4.x
mul r1.z, r0.w, c17.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c17.y, c17.z
mul r1.xy, r1, c7.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.x, r2, r2
rsq r0.z, r0.z
mad r2.w, r2, r4.z, c17
mad r2.y, r2.w, r4.z, c18.x
rsq r2.x, r2.x
rsq r0.x, r0.x
rcp r2.w, r2.x
mad r2.y, r2, r4.z, c18
mad r2.x, r2.y, r4.z, c18.z
mul r2.y, r2.w, c8.x
mul r2.x, r2, r4.y
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c19.x
mul r0.x, r1.z, c19
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c15.x
mul_sat r2.y, r2, c16.z
mad_pp r0, r2.y, r1, r0
abs r1.y, r3
add r1.x, r3.w, -r4
add r1.z, -r2.x, c18.w
cmp r1.x, -r1, r2, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c15.x
mad r1.z, r1.y, c15, c15.w
mad r1.z, r1, r1.y, c16.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c16
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c15, c15.x
mul r1.w, r1.y, r1.z
add r2.x, -r1, c16.w
mad r1.z, -r1.w, c16, r1
cmp r1.w, r3.z, r1.x, r2.x
mad r1.x, r1.y, c16.w, r1.z
mul r1.z, r1.x, c17.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.zw, r3.xyxz
mad r1.x, r1.y, c19, c19.y
mov r2.xyz, v4
mul r3.zw, r3, r3
add r3.x, r3.z, r3.w
rsq r3.x, r3.x
mov r1.y, r1.z
dsx r3.y, r1.z
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rcp r3.z, r3.x
mul r3.x, r1.z, c19
mul r1.z, r3, c19.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1, r1, r0
dp3_sat r2.x, v5, r2
mul r3.x, r2, c6
add r2.xyz, -v1, c1
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r0.w, r2, r2
rsq r0.y, r0.w
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.x, -r0, c13, r0.y
pow_sat r0, r3.x, c5.x
mul r0.y, -r2.w, c11.x
add_sat r0.z, r0.y, c15.x
mul_sat r0.y, r2.w, c10.x
mad r0.y, -r0, r0.z, c15.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2, c12
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c9
texldp r3.x, v6, s2
dp3_sat r2.x, v4, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c19.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c14.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c19.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 304 // 296 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 135 instructions, 5 temp regs, 0 temp arrays:
// ALU 121 float, 0 int, 7 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednhilmhpdnfccokgpbchbcejlfopneeaiabaaaaaakabcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefccabbaaaa
eaaaaaaaeiaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadiaaaaaidcaabaaaabaaaaaa
egaabaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaa
adaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaa
abaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaah
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
bacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
aaaaaaajhcaabaaaacaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaa
baaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaf
mcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaia
ebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaaj
bcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaah
dcaabaaaabaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaal
bcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaa
abaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaackbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaabkiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaa
diaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 152 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c15, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r0.w, r1.z, -r1.x
add r2.xyz, r1.zxyw, -r1
cmp r0.w, r0, c15.x, c15.y
mad r2.xyz, r0.w, r2, r1
add r0.w, r2.x, -r1.y
add r2.xyz, r2, -r1.yxzw
cmp r0.w, r0, c15.x, c15.y
mad r1.xyz, r0.w, r2, r1.yxzw
dsy r2.xy, r0.xzzw
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c15.x
mad r1.z, r0.w, c15, c15.w
mad r1.z, r1, r0.w, c16.x
mul_pp r1.xy, r1, c19.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c16.y
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c15.y, c15.x
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c16, r1
mad r0.w, r0, c16, r1.z
dp3 r0.y, v3, v3
rsq r0.y, r0.y
mul r3.xyz, r0.y, v3
abs r4.x, r3.z
abs r3.w, r3.x
max r0.y, r3.w, r4.x
mul r1.z, r0.w, c17.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c17.y, c17.z
mul r1.xy, r1, c7.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.x, r2, r2
rsq r0.z, r0.z
mad r2.w, r2, r4.z, c17
mad r2.y, r2.w, r4.z, c18.x
rsq r2.x, r2.x
rsq r0.x, r0.x
rcp r2.w, r2.x
mad r2.y, r2, r4.z, c18
mad r2.x, r2.y, r4.z, c18.z
mul r2.y, r2.w, c8.x
mul r2.x, r2, r4.y
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c19.x
mul r0.x, r1.z, c19
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c15.x
mul_sat r2.y, r2, c16.z
mad_pp r0, r2.y, r1, r0
abs r1.y, r3
add r1.x, r3.w, -r4
add r1.z, -r2.x, c18.w
cmp r1.x, -r1, r2, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c15.x
mad r1.z, r1.y, c15, c15.w
mad r1.z, r1, r1.y, c16.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c16
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c15, c15.x
mul r1.w, r1.y, r1.z
add r2.x, -r1, c16.w
mad r1.z, -r1.w, c16, r1
cmp r1.w, r3.z, r1.x, r2.x
mad r1.x, r1.y, c16.w, r1.z
mul r1.z, r1.x, c17.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.zw, r3.xyxz
mad r1.x, r1.y, c19, c19.y
mov r2.xyz, v4
mul r3.zw, r3, r3
add r3.x, r3.z, r3.w
rsq r3.x, r3.x
mov r1.y, r1.z
dsx r3.y, r1.z
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rcp r3.z, r3.x
mul r3.x, r1.z, c19
mul r1.z, r3, c19.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1, r1, r0
dp3_sat r2.x, v5, r2
mul r3.x, r2, c6
add r2.xyz, -v1, c1
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r0.w, r2, r2
rsq r0.y, r0.w
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.x, -r0, c13, r0.y
pow_sat r0, r3.x, c5.x
mul r0.y, -r2.w, c11.x
add_sat r0.z, r0.y, c15.x
mul_sat r0.y, r2.w, c10.x
mad r0.y, -r0, r0.z, c15.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2, c12
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c9
texldp r3.x, v6, s2
dp3_sat r2.x, v4, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c19.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c14.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c19.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 368 // 360 used size, 18 vars
Vector 272 [_LightColor0] 4
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_DistFade]
Float 344 [_DistFadeVert]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
Float 356 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 135 instructions, 5 temp regs, 0 temp arrays:
// ALU 121 float, 0 int, 7 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedpnjphnphkpchlakoplolnnnmjgilcpdlabaaaaaakabcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefccabbaaaa
eaaaaaaaeiaeaaaafjaaaaaeegiocaaaaaaaaaaabhaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadiaaaaaidcaabaaaabaaaaaa
egaabaaaabaaaaaakgikcaaaaaaaaaaabeaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaa
adaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaabeaaaaaadcaaaaajpcaabaaa
abaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaah
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaabfaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabfaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
bacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabeaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaaakiacaaaaaaaaaaabeaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
aaaaaaajhcaabaaaacaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaa
baaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaf
mcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaia
ebaaaaaaaaaaaaaabgaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabfaaaaaadcaaaaaj
bcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaah
dcaabaaaabaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaal
bcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaa
abaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaackbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaabkiacaaaaaaaaaaabgaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaabbaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaabbaaaaaaagiacaaaaaaaaaaabfaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaa
diaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 152 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c15, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r0.w, r1.z, -r1.x
add r2.xyz, r1.zxyw, -r1
cmp r0.w, r0, c15.x, c15.y
mad r2.xyz, r0.w, r2, r1
add r0.w, r2.x, -r1.y
add r2.xyz, r2, -r1.yxzw
cmp r0.w, r0, c15.x, c15.y
mad r1.xyz, r0.w, r2, r1.yxzw
dsy r2.xy, r0.xzzw
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c15.x
mad r1.z, r0.w, c15, c15.w
mad r1.z, r1, r0.w, c16.x
mul_pp r1.xy, r1, c19.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c16.y
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c15.y, c15.x
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c16, r1
mad r0.w, r0, c16, r1.z
dp3 r0.y, v3, v3
rsq r0.y, r0.y
mul r3.xyz, r0.y, v3
abs r4.x, r3.z
abs r3.w, r3.x
max r0.y, r3.w, r4.x
mul r1.z, r0.w, c17.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c17.y, c17.z
mul r1.xy, r1, c7.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.x, r2, r2
rsq r0.z, r0.z
mad r2.w, r2, r4.z, c17
mad r2.y, r2.w, r4.z, c18.x
rsq r2.x, r2.x
rsq r0.x, r0.x
rcp r2.w, r2.x
mad r2.y, r2, r4.z, c18
mad r2.x, r2.y, r4.z, c18.z
mul r2.y, r2.w, c8.x
mul r2.x, r2, r4.y
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c19.x
mul r0.x, r1.z, c19
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c15.x
mul_sat r2.y, r2, c16.z
mad_pp r0, r2.y, r1, r0
abs r1.y, r3
add r1.x, r3.w, -r4
add r1.z, -r2.x, c18.w
cmp r1.x, -r1, r2, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c15.x
mad r1.z, r1.y, c15, c15.w
mad r1.z, r1, r1.y, c16.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c16
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c15, c15.x
mul r1.w, r1.y, r1.z
add r2.x, -r1, c16.w
mad r1.z, -r1.w, c16, r1
cmp r1.w, r3.z, r1.x, r2.x
mad r1.x, r1.y, c16.w, r1.z
mul r1.z, r1.x, c17.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.zw, r3.xyxz
mad r1.x, r1.y, c19, c19.y
mov r2.xyz, v4
mul r3.zw, r3, r3
add r3.x, r3.z, r3.w
rsq r3.x, r3.x
mov r1.y, r1.z
dsx r3.y, r1.z
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rcp r3.z, r3.x
mul r3.x, r1.z, c19
mul r1.z, r3, c19.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1, r1, r0
dp3_sat r2.x, v5, r2
mul r3.x, r2, c6
add r2.xyz, -v1, c1
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r0.w, r2, r2
rsq r0.y, r0.w
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.x, -r0, c13, r0.y
pow_sat r0, r3.x, c5.x
mul r0.y, -r2.w, c11.x
add_sat r0.z, r0.y, c15.x
mul_sat r0.y, r2.w, c10.x
mad r0.y, -r0, r0.z, c15.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2, c12
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c9
texldp r3.x, v6, s2
dp3_sat r2.x, v4, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c19.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c14.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c19.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 368 // 360 used size, 18 vars
Vector 272 [_LightColor0] 4
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_DistFade]
Float 344 [_DistFadeVert]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
Float 356 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 135 instructions, 5 temp regs, 0 temp arrays:
// ALU 121 float, 0 int, 7 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedpnjphnphkpchlakoplolnnnmjgilcpdlabaaaaaakabcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefccabbaaaa
eaaaaaaaeiaeaaaafjaaaaaeegiocaaaaaaaaaaabhaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadiaaaaaidcaabaaaabaaaaaa
egaabaaaabaaaaaakgikcaaaaaaaaaaabeaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaa
adaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaabeaaaaaadcaaaaajpcaabaaa
abaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaah
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaabfaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabfaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
bacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabeaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaaakiacaaaaaaaaaaabeaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
aaaaaaajhcaabaaaacaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaa
baaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaf
mcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaia
ebaaaaaaaaaaaaaabgaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabfaaaaaadcaaaaaj
bcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaah
dcaabaaaabaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaal
bcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaa
abaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaackbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaabkiacaaaaaaaaaaabgaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaabbaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaabbaaaaaaagiacaaaaaaaaaaabfaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaa
diaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 152 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c15, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r0.w, r1.z, -r1.x
add r2.xyz, r1.zxyw, -r1
cmp r0.w, r0, c15.x, c15.y
mad r2.xyz, r0.w, r2, r1
add r0.w, r2.x, -r1.y
add r2.xyz, r2, -r1.yxzw
cmp r0.w, r0, c15.x, c15.y
mad r1.xyz, r0.w, r2, r1.yxzw
dsy r2.xy, r0.xzzw
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c15.x
mad r1.z, r0.w, c15, c15.w
mad r1.z, r1, r0.w, c16.x
mul_pp r1.xy, r1, c19.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c16.y
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c15.y, c15.x
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c16, r1
mad r0.w, r0, c16, r1.z
dp3 r0.y, v3, v3
rsq r0.y, r0.y
mul r3.xyz, r0.y, v3
abs r4.x, r3.z
abs r3.w, r3.x
max r0.y, r3.w, r4.x
mul r1.z, r0.w, c17.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c17.y, c17.z
mul r1.xy, r1, c7.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.x, r2, r2
rsq r0.z, r0.z
mad r2.w, r2, r4.z, c17
mad r2.y, r2.w, r4.z, c18.x
rsq r2.x, r2.x
rsq r0.x, r0.x
rcp r2.w, r2.x
mad r2.y, r2, r4.z, c18
mad r2.x, r2.y, r4.z, c18.z
mul r2.y, r2.w, c8.x
mul r2.x, r2, r4.y
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c19.x
mul r0.x, r1.z, c19
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c15.x
mul_sat r2.y, r2, c16.z
mad_pp r0, r2.y, r1, r0
abs r1.y, r3
add r1.x, r3.w, -r4
add r1.z, -r2.x, c18.w
cmp r1.x, -r1, r2, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c15.x
mad r1.z, r1.y, c15, c15.w
mad r1.z, r1, r1.y, c16.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c16
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c15, c15.x
mul r1.w, r1.y, r1.z
add r2.x, -r1, c16.w
mad r1.z, -r1.w, c16, r1
cmp r1.w, r3.z, r1.x, r2.x
mad r1.x, r1.y, c16.w, r1.z
mul r1.z, r1.x, c17.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.zw, r3.xyxz
mad r1.x, r1.y, c19, c19.y
mov r2.xyz, v4
mul r3.zw, r3, r3
add r3.x, r3.z, r3.w
rsq r3.x, r3.x
mov r1.y, r1.z
dsx r3.y, r1.z
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rcp r3.z, r3.x
mul r3.x, r1.z, c19
mul r1.z, r3, c19.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1, r1, r0
dp3_sat r2.x, v5, r2
mul r3.x, r2, c6
add r2.xyz, -v1, c1
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r0.w, r2, r2
rsq r0.y, r0.w
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.x, -r0, c13, r0.y
pow_sat r0, r3.x, c5.x
mul r0.y, -r2.w, c11.x
add_sat r0.z, r0.y, c15.x
mul_sat r0.y, r2.w, c10.x
mad r0.y, -r0, r0.z, c15.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2, c12
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c9
texldp r3.x, v6, s2
dp3_sat r2.x, v4, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c19.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c14.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c19.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 304 // 296 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 135 instructions, 5 temp regs, 0 temp arrays:
// ALU 121 float, 0 int, 7 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednhilmhpdnfccokgpbchbcejlfopneeaiabaaaaaakabcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefccabbaaaa
eaaaaaaaeiaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadiaaaaaidcaabaaaabaaaaaa
egaabaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaa
adaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaa
abaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaah
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
bacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
aaaaaaajhcaabaaaacaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaa
baaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaf
mcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaia
ebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaaj
bcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaah
dcaabaaaabaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaal
bcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaa
abaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaackbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaabkiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaa
diaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 152 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c15, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r0.w, r1.z, -r1.x
add r2.xyz, r1.zxyw, -r1
cmp r0.w, r0, c15.x, c15.y
mad r2.xyz, r0.w, r2, r1
add r0.w, r2.x, -r1.y
add r2.xyz, r2, -r1.yxzw
cmp r0.w, r0, c15.x, c15.y
mad r1.xyz, r0.w, r2, r1.yxzw
dsy r2.xy, r0.xzzw
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c15.x
mad r1.z, r0.w, c15, c15.w
mad r1.z, r1, r0.w, c16.x
mul_pp r1.xy, r1, c19.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c16.y
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c15.y, c15.x
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c16, r1
mad r0.w, r0, c16, r1.z
dp3 r0.y, v3, v3
rsq r0.y, r0.y
mul r3.xyz, r0.y, v3
abs r4.x, r3.z
abs r3.w, r3.x
max r0.y, r3.w, r4.x
mul r1.z, r0.w, c17.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c17.y, c17.z
mul r1.xy, r1, c7.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.x, r2, r2
rsq r0.z, r0.z
mad r2.w, r2, r4.z, c17
mad r2.y, r2.w, r4.z, c18.x
rsq r2.x, r2.x
rsq r0.x, r0.x
rcp r2.w, r2.x
mad r2.y, r2, r4.z, c18
mad r2.x, r2.y, r4.z, c18.z
mul r2.y, r2.w, c8.x
mul r2.x, r2, r4.y
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c19.x
mul r0.x, r1.z, c19
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c15.x
mul_sat r2.y, r2, c16.z
mad_pp r0, r2.y, r1, r0
abs r1.y, r3
add r1.x, r3.w, -r4
add r1.z, -r2.x, c18.w
cmp r1.x, -r1, r2, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c15.x
mad r1.z, r1.y, c15, c15.w
mad r1.z, r1, r1.y, c16.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c16
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c15, c15.x
mul r1.w, r1.y, r1.z
add r2.x, -r1, c16.w
mad r1.z, -r1.w, c16, r1
cmp r1.w, r3.z, r1.x, r2.x
mad r1.x, r1.y, c16.w, r1.z
mul r1.z, r1.x, c17.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.zw, r3.xyxz
mad r1.x, r1.y, c19, c19.y
mov r2.xyz, v4
mul r3.zw, r3, r3
add r3.x, r3.z, r3.w
rsq r3.x, r3.x
mov r1.y, r1.z
dsx r3.y, r1.z
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rcp r3.z, r3.x
mul r3.x, r1.z, c19
mul r1.z, r3, c19.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1, r1, r0
dp3_sat r2.x, v5, r2
mul r3.x, r2, c6
add r2.xyz, -v1, c1
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r0.w, r2, r2
rsq r0.y, r0.w
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.x, -r0, c13, r0.y
pow_sat r0, r3.x, c5.x
mul r0.y, -r2.w, c11.x
add_sat r0.z, r0.y, c15.x
mul_sat r0.y, r2.w, c10.x
mad r0.y, -r0, r0.z, c15.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2, c12
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c9
texldp r3.x, v6, s2
dp3_sat r2.x, v4, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c19.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c14.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c19.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 304 // 296 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 135 instructions, 5 temp regs, 0 temp arrays:
// ALU 121 float, 0 int, 7 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednhilmhpdnfccokgpbchbcejlfopneeaiabaaaaaakabcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefccabbaaaa
eaaaaaaaeiaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadiaaaaaidcaabaaaabaaaaaa
egaabaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaa
adaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaa
abaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaah
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
bacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
aaaaaaajhcaabaaaacaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaa
baaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaf
mcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaia
ebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaaj
bcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaah
dcaabaaaabaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaal
bcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaa
abaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaackbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaabkiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaa
diaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

}

#LINE 141

	
		}
		
	} 
	
}
}

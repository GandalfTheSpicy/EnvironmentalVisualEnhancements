Shader "EVE/Cloud" {
	Properties {
		_Color ("Color Tint", Color) = (1,1,1,1)
		_MainTex ("Main (RGB)", 2D) = "white" {}
		_DetailTex ("Detail (RGB)", 2D) = "white" {}
		_FalloffPow ("Falloff Power", Range(0,3)) = 2
		_FalloffScale ("Falloff Scale", Range(0,20)) = 3
		_DetailScale ("Detail Scale", Range(0,1000)) = 100
		_DetailDist ("Detail Distance", Range(0,1)) = 0.00875
		_MinLight ("Minimum Light", Range(0,1)) = .5
		_FadeDist ("Fade Distance", Range(0,100)) = 10
		_FadeScale ("Fade Scale", Range(0,1)) = .002
		_RimDist ("Rim Distance", Range(0,1)) = 1
		_RimDistSub ("Rim Distance Sub", Range(0,2)) = 1.01
		_InvFade ("Soft Particles Factor", Range(0.01,3.0)) = .01
	}

Category {
	
	Tags { "Queue"="Transparent" "IgnoreProjector"="True" "RenderType"="Transparent" }
	Blend SrcAlpha OneMinusSrcAlpha
	Fog { Mode Global}
	AlphaTest Greater 0
	ColorMask RGB
	Cull Off Lighting On ZWrite Off
	
SubShader {
	Pass {

		Lighting On
		Tags { "LightMode"="ForwardBase"}
		
		Program "vp" {
// Vertex combos: 30
//   d3d9 - ALU: 29 to 47
//   d3d11 - ALU: 24 to 44, TEX: 0 to 0, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2).xyz;
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_1.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_1.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4.xyz);
  vec2 uv_12;
  float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    float s_15;
    float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_3);
  float tmpvar_21;
  tmpvar_21 = clamp (floor(((1.0 + tmpvar_20.x) - tmpvar_20.z)), 0.0, 1.0);
  vec3 tmpvar_22;
  tmpvar_22 = mix (mix (tmpvar_20.zxy, tmpvar_20, vec3(tmpvar_21)), tmpvar_20.yxz, vec3(clamp (floor(((1.0 + tmpvar_20.y) - mix (tmpvar_20.z, tmpvar_20.x, tmpvar_21))), 0.0, 1.0)));
  vec3 p_23;
  p_23 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DGradARB (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_22.zy) / abs(tmpvar_22.x)) * _DetailScale), tmpvar_10.xy, tmpvar_10.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_23, p_23))), 0.0, 1.0))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_26;
  p_26 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_24.w, mix (clamp (((_FadeScale * sqrt(dot (p_25, p_25))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_26, p_26)) - (_RimDistSub * sqrt(dot (p_27, p_27))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_24.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r2.z, v0, c6
dp4 r2.y, v0, c5
dp4 r2.x, v0, c4
add r3.xyz, -r2, c16
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r0.xyz, r2, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o5, -r0
mul o6.xyz, r1.w, r3
mov o1.xyz, r2
mov o2.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 144 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedjppmbmbklfpljlagjlbjmbdinjibimfcabaaaaaaoaafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
dmaeaaaaeaaaabaaapabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaa
apaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
adaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaj
pcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaagaaaaaa
dcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadgaaaaagpccabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaa
aeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_10.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_10.y);
  mediump vec4 tex_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_22;
  highp float r_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float y_over_x_24;
    y_over_x_24 = (tmpvar_21.x / tmpvar_21.z);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * r_23));
  uv_22.y = (0.31831 * (1.5708 - (sign(tmpvar_21.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_21.y))) * (1.5708 + (abs(tmpvar_21.y) * (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (abs(tmpvar_21.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(uv_22.y);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(uv_22.y);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_22, tmpvar_29.xy, tmpvar_29.zw);
  tex_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_12);
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_31.x) - tmpvar_31.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_31.zxy, tmpvar_31, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_31.y) - mix (tmpvar_31.z, tmpvar_31.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (detailCoords_8, tmpvar_31.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_8.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_8.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_19.xy, tmpvar_19.zw);
  detail_6 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_20 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_45;
  tmpvar_45 = mix (0.0, tmpvar_41.w, mix (clamp (((_FadeScale * sqrt(dot (p_42, p_42))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_43, p_43)) - (_RimDistSub * sqrt(dot (p_44, p_44))))), 0.0, 1.0)));
  color_11.w = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_50;
  tmpvar_50 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_49)), 0.0, 1.0);
  color_11.xyz = (tmpvar_41.xyz * tmpvar_50);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_10.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_10.y);
  mediump vec4 tex_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_22;
  highp float r_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float y_over_x_24;
    y_over_x_24 = (tmpvar_21.x / tmpvar_21.z);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * r_23));
  uv_22.y = (0.31831 * (1.5708 - (sign(tmpvar_21.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_21.y))) * (1.5708 + (abs(tmpvar_21.y) * (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (abs(tmpvar_21.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(uv_22.y);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(uv_22.y);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_22, tmpvar_29.xy, tmpvar_29.zw);
  tex_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_12);
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_31.x) - tmpvar_31.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_31.zxy, tmpvar_31, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_31.y) - mix (tmpvar_31.z, tmpvar_31.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (detailCoords_8, tmpvar_31.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_8.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_8.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_19.xy, tmpvar_19.zw);
  detail_6 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_20 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_45;
  tmpvar_45 = mix (0.0, tmpvar_41.w, mix (clamp (((_FadeScale * sqrt(dot (p_42, p_42))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_43, p_43)) - (_RimDistSub * sqrt(dot (p_44, p_44))))), 0.0, 1.0)));
  color_11.w = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_50;
  tmpvar_50 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_49)), 0.0, 1.0);
  color_11.xyz = (tmpvar_41.xyz * tmpvar_50);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 353
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 450
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 443
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 363
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 376
#line 384
#line 398
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 431
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 435
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 439
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 463
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 463
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 467
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 471
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objNormal);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 475
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec4(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 353
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 450
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 443
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 363
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 376
#line 384
#line 398
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 431
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 435
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 439
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 463
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 477
lowp vec4 frag( in v2f IN ) {
    #line 479
    mediump vec4 color;
    highp vec3 objNrm = vec3( normalize(IN.objDetail));
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 483
    uv.y = (0.31831 * acos(objNrm.y));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objNormal));
    objNrm = abs(objNrm);
    #line 487
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    #line 491
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * _DetailScale), uvdd.xy, uvdd.zw);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 495
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 499
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 503
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 507
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec4(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_2.xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = normalize((tmpvar_2.xyz - tmpvar_3));
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2).xyz;
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_1.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_1.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4.xyz);
  vec2 uv_12;
  float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    float s_15;
    float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_3);
  float tmpvar_21;
  tmpvar_21 = clamp (floor(((1.0 + tmpvar_20.x) - tmpvar_20.z)), 0.0, 1.0);
  vec3 tmpvar_22;
  tmpvar_22 = mix (mix (tmpvar_20.zxy, tmpvar_20, vec3(tmpvar_21)), tmpvar_20.yxz, vec3(clamp (floor(((1.0 + tmpvar_20.y) - mix (tmpvar_20.z, tmpvar_20.x, tmpvar_21))), 0.0, 1.0)));
  vec3 p_23;
  p_23 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DGradARB (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_22.zy) / abs(tmpvar_22.x)) * _DetailScale), tmpvar_10.xy, tmpvar_10.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_23, p_23))), 0.0, 1.0))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_26;
  p_26 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_24.w, mix (clamp (((_FadeScale * sqrt(dot (p_25, p_25))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_26, p_26)) - (_RimDistSub * sqrt(dot (p_27, p_27))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_24.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r2.z, v0, c6
dp4 r2.y, v0, c5
dp4 r2.x, v0, c4
add r3.xyz, -r2, c16
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r0.xyz, r2, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o5, -r0
mul o6.xyz, r1.w, r3
mov o1.xyz, r2
mov o2.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 240 // 144 used size, 16 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedofmjgpkfhbmmjdhckdinpjcmciaaiobkabaaaaaamiafaaaaadaaaaaa
cmaaaaaajmaaaaaaieabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaneaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaneaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaneaaaaaaaiaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcdmaeaaaaeaaaabaaapabaaaafjaaaaaeegiocaaaaaaaaaaa
ajaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
dgaaaaafhccabaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaa
egiccaaaacaaaaaaapaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
abaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaadaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaaagaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaafaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaaahaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaafaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2.xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = normalize((tmpvar_2.xyz - tmpvar_3));
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_10.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_10.y);
  mediump vec4 tex_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_22;
  highp float r_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float y_over_x_24;
    y_over_x_24 = (tmpvar_21.x / tmpvar_21.z);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * r_23));
  uv_22.y = (0.31831 * (1.5708 - (sign(tmpvar_21.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_21.y))) * (1.5708 + (abs(tmpvar_21.y) * (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (abs(tmpvar_21.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(uv_22.y);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(uv_22.y);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_22, tmpvar_29.xy, tmpvar_29.zw);
  tex_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_12);
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_31.x) - tmpvar_31.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_31.zxy, tmpvar_31, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_31.y) - mix (tmpvar_31.z, tmpvar_31.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (detailCoords_8, tmpvar_31.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_8.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_8.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_19.xy, tmpvar_19.zw);
  detail_6 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_20 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_45;
  tmpvar_45 = mix (0.0, tmpvar_41.w, mix (clamp (((_FadeScale * sqrt(dot (p_42, p_42))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_43, p_43)) - (_RimDistSub * sqrt(dot (p_44, p_44))))), 0.0, 1.0)));
  color_11.w = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_46;
  lowp vec3 tmpvar_47;
  tmpvar_47 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_50;
  tmpvar_50 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_49)), 0.0, 1.0);
  color_11.xyz = (tmpvar_41.xyz * tmpvar_50);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2.xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = normalize((tmpvar_2.xyz - tmpvar_3));
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_10.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_10.y);
  mediump vec4 tex_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_22;
  highp float r_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float y_over_x_24;
    y_over_x_24 = (tmpvar_21.x / tmpvar_21.z);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * r_23));
  uv_22.y = (0.31831 * (1.5708 - (sign(tmpvar_21.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_21.y))) * (1.5708 + (abs(tmpvar_21.y) * (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (abs(tmpvar_21.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(uv_22.y);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(uv_22.y);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_22, tmpvar_29.xy, tmpvar_29.zw);
  tex_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_12);
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_31.x) - tmpvar_31.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_31.zxy, tmpvar_31, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_31.y) - mix (tmpvar_31.z, tmpvar_31.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (detailCoords_8, tmpvar_31.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_8.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_8.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_19.xy, tmpvar_19.zw);
  detail_6 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_20 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_45;
  tmpvar_45 = mix (0.0, tmpvar_41.w, mix (clamp (((_FadeScale * sqrt(dot (p_42, p_42))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_43, p_43)) - (_RimDistSub * sqrt(dot (p_44, p_44))))), 0.0, 1.0)));
  color_11.w = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_46;
  lowp vec3 tmpvar_47;
  tmpvar_47 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_50;
  tmpvar_50 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_49)), 0.0, 1.0);
  color_11.xyz = (tmpvar_41.xyz * tmpvar_50);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 351
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 448
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec4 projPos;
};
#line 441
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 361
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 374
#line 382
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 429
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 433
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 437
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 460
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 460
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 464
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 468
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objNormal);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 472
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec4(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 351
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 448
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec4 projPos;
};
#line 441
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 361
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 374
#line 382
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 429
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 433
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 437
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 460
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 474
lowp vec4 frag( in v2f IN ) {
    #line 476
    mediump vec4 color;
    highp vec3 objNrm = vec3( normalize(IN.objDetail));
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 480
    uv.y = (0.31831 * acos(objNrm.y));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objNormal));
    objNrm = abs(objNrm);
    #line 484
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    #line 488
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * _DetailScale), uvdd.xy, uvdd.zw);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 492
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 496
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 500
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 504
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec4(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2).xyz;
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_1.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_1.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4.xyz);
  vec2 uv_12;
  float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    float s_15;
    float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_3);
  float tmpvar_21;
  tmpvar_21 = clamp (floor(((1.0 + tmpvar_20.x) - tmpvar_20.z)), 0.0, 1.0);
  vec3 tmpvar_22;
  tmpvar_22 = mix (mix (tmpvar_20.zxy, tmpvar_20, vec3(tmpvar_21)), tmpvar_20.yxz, vec3(clamp (floor(((1.0 + tmpvar_20.y) - mix (tmpvar_20.z, tmpvar_20.x, tmpvar_21))), 0.0, 1.0)));
  vec3 p_23;
  p_23 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DGradARB (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_22.zy) / abs(tmpvar_22.x)) * _DetailScale), tmpvar_10.xy, tmpvar_10.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_23, p_23))), 0.0, 1.0))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_26;
  p_26 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_24.w, mix (clamp (((_FadeScale * sqrt(dot (p_25, p_25))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_26, p_26)) - (_RimDistSub * sqrt(dot (p_27, p_27))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_24.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r2.z, v0, c6
dp4 r2.y, v0, c5
dp4 r2.x, v0, c4
add r3.xyz, -r2, c16
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r0.xyz, r2, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o5, -r0
mul o6.xyz, r1.w, r3
mov o1.xyz, r2
mov o2.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 144 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbbidkpnpegkcdhjlifmdimbfdfnojdpjabaaaaaaoaafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
dmaeaaaaeaaaabaaapabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaa
apaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
adaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaj
pcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaagaaaaaa
dcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadgaaaaagpccabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaa
aeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_10.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_10.y);
  mediump vec4 tex_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_22;
  highp float r_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float y_over_x_24;
    y_over_x_24 = (tmpvar_21.x / tmpvar_21.z);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * r_23));
  uv_22.y = (0.31831 * (1.5708 - (sign(tmpvar_21.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_21.y))) * (1.5708 + (abs(tmpvar_21.y) * (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (abs(tmpvar_21.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(uv_22.y);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(uv_22.y);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_22, tmpvar_29.xy, tmpvar_29.zw);
  tex_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_12);
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_31.x) - tmpvar_31.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_31.zxy, tmpvar_31, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_31.y) - mix (tmpvar_31.z, tmpvar_31.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (detailCoords_8, tmpvar_31.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_8.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_8.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_19.xy, tmpvar_19.zw);
  detail_6 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_20 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_45;
  tmpvar_45 = mix (0.0, tmpvar_41.w, mix (clamp (((_FadeScale * sqrt(dot (p_42, p_42))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_43, p_43)) - (_RimDistSub * sqrt(dot (p_44, p_44))))), 0.0, 1.0)));
  color_11.w = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_50;
  tmpvar_50 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_49)), 0.0, 1.0);
  color_11.xyz = (tmpvar_41.xyz * tmpvar_50);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_10.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_10.y);
  mediump vec4 tex_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_22;
  highp float r_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float y_over_x_24;
    y_over_x_24 = (tmpvar_21.x / tmpvar_21.z);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * r_23));
  uv_22.y = (0.31831 * (1.5708 - (sign(tmpvar_21.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_21.y))) * (1.5708 + (abs(tmpvar_21.y) * (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (abs(tmpvar_21.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(uv_22.y);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(uv_22.y);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_22, tmpvar_29.xy, tmpvar_29.zw);
  tex_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_12);
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_31.x) - tmpvar_31.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_31.zxy, tmpvar_31, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_31.y) - mix (tmpvar_31.z, tmpvar_31.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (detailCoords_8, tmpvar_31.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_8.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_8.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_19.xy, tmpvar_19.zw);
  detail_6 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_20 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_45;
  tmpvar_45 = mix (0.0, tmpvar_41.w, mix (clamp (((_FadeScale * sqrt(dot (p_42, p_42))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_43, p_43)) - (_RimDistSub * sqrt(dot (p_44, p_44))))), 0.0, 1.0)));
  color_11.w = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_50;
  tmpvar_50 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_49)), 0.0, 1.0);
  color_11.xyz = (tmpvar_41.xyz * tmpvar_50);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 362
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 459
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 projPos;
};
#line 452
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 353
uniform sampler2D _LightTextureB0;
#line 358
#line 372
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 385
#line 393
#line 407
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 440
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 444
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 448
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 472
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 472
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 476
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 480
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objNormal);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 484
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec4(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 362
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 459
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 projPos;
};
#line 452
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 353
uniform sampler2D _LightTextureB0;
#line 358
#line 372
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 385
#line 393
#line 407
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 440
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 444
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 448
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 472
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 486
lowp vec4 frag( in v2f IN ) {
    #line 488
    mediump vec4 color;
    highp vec3 objNrm = vec3( normalize(IN.objDetail));
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 492
    uv.y = (0.31831 * acos(objNrm.y));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objNormal));
    objNrm = abs(objNrm);
    #line 496
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    #line 500
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * _DetailScale), uvdd.xy, uvdd.zw);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 504
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 508
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 512
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 516
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec4(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2).xyz;
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_1.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_1.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4.xyz);
  vec2 uv_12;
  float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    float s_15;
    float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_3);
  float tmpvar_21;
  tmpvar_21 = clamp (floor(((1.0 + tmpvar_20.x) - tmpvar_20.z)), 0.0, 1.0);
  vec3 tmpvar_22;
  tmpvar_22 = mix (mix (tmpvar_20.zxy, tmpvar_20, vec3(tmpvar_21)), tmpvar_20.yxz, vec3(clamp (floor(((1.0 + tmpvar_20.y) - mix (tmpvar_20.z, tmpvar_20.x, tmpvar_21))), 0.0, 1.0)));
  vec3 p_23;
  p_23 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DGradARB (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_22.zy) / abs(tmpvar_22.x)) * _DetailScale), tmpvar_10.xy, tmpvar_10.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_23, p_23))), 0.0, 1.0))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_26;
  p_26 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_24.w, mix (clamp (((_FadeScale * sqrt(dot (p_25, p_25))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_26, p_26)) - (_RimDistSub * sqrt(dot (p_27, p_27))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_24.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r2.z, v0, c6
dp4 r2.y, v0, c5
dp4 r2.x, v0, c4
add r3.xyz, -r2, c16
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r0.xyz, r2, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o5, -r0
mul o6.xyz, r1.w, r3
mov o1.xyz, r2
mov o2.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 144 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedjppmbmbklfpljlagjlbjmbdinjibimfcabaaaaaaoaafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
dmaeaaaaeaaaabaaapabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaa
apaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
adaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaj
pcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaagaaaaaa
dcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadgaaaaagpccabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaa
aeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_10.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_10.y);
  mediump vec4 tex_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_22;
  highp float r_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float y_over_x_24;
    y_over_x_24 = (tmpvar_21.x / tmpvar_21.z);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * r_23));
  uv_22.y = (0.31831 * (1.5708 - (sign(tmpvar_21.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_21.y))) * (1.5708 + (abs(tmpvar_21.y) * (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (abs(tmpvar_21.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(uv_22.y);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(uv_22.y);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_22, tmpvar_29.xy, tmpvar_29.zw);
  tex_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_12);
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_31.x) - tmpvar_31.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_31.zxy, tmpvar_31, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_31.y) - mix (tmpvar_31.z, tmpvar_31.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (detailCoords_8, tmpvar_31.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_8.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_8.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_19.xy, tmpvar_19.zw);
  detail_6 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_20 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_45;
  tmpvar_45 = mix (0.0, tmpvar_41.w, mix (clamp (((_FadeScale * sqrt(dot (p_42, p_42))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_43, p_43)) - (_RimDistSub * sqrt(dot (p_44, p_44))))), 0.0, 1.0)));
  color_11.w = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_50;
  tmpvar_50 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_49)), 0.0, 1.0);
  color_11.xyz = (tmpvar_41.xyz * tmpvar_50);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_10.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_10.y);
  mediump vec4 tex_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_22;
  highp float r_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float y_over_x_24;
    y_over_x_24 = (tmpvar_21.x / tmpvar_21.z);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * r_23));
  uv_22.y = (0.31831 * (1.5708 - (sign(tmpvar_21.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_21.y))) * (1.5708 + (abs(tmpvar_21.y) * (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (abs(tmpvar_21.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(uv_22.y);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(uv_22.y);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_22, tmpvar_29.xy, tmpvar_29.zw);
  tex_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_12);
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_31.x) - tmpvar_31.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_31.zxy, tmpvar_31, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_31.y) - mix (tmpvar_31.z, tmpvar_31.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (detailCoords_8, tmpvar_31.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_8.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_8.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_19.xy, tmpvar_19.zw);
  detail_6 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_20 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_45;
  tmpvar_45 = mix (0.0, tmpvar_41.w, mix (clamp (((_FadeScale * sqrt(dot (p_42, p_42))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_43, p_43)) - (_RimDistSub * sqrt(dot (p_44, p_44))))), 0.0, 1.0)));
  color_11.w = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_50;
  tmpvar_50 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_49)), 0.0, 1.0);
  color_11.xyz = (tmpvar_41.xyz * tmpvar_50);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 354
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 451
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 444
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 353
uniform sampler2D _LightTextureB0;
#line 364
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 377
#line 385
#line 399
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 432
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 436
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 440
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 464
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 464
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 468
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 472
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objNormal);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 476
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec4(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 354
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 451
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 444
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 353
uniform sampler2D _LightTextureB0;
#line 364
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 377
#line 385
#line 399
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 432
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 436
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 440
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 464
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 478
lowp vec4 frag( in v2f IN ) {
    #line 480
    mediump vec4 color;
    highp vec3 objNrm = vec3( normalize(IN.objDetail));
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 484
    uv.y = (0.31831 * acos(objNrm.y));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objNormal));
    objNrm = abs(objNrm);
    #line 488
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    #line 492
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * _DetailScale), uvdd.xy, uvdd.zw);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 496
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 500
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 504
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 508
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec4(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2).xyz;
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_1.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_1.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4.xyz);
  vec2 uv_12;
  float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    float s_15;
    float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_3);
  float tmpvar_21;
  tmpvar_21 = clamp (floor(((1.0 + tmpvar_20.x) - tmpvar_20.z)), 0.0, 1.0);
  vec3 tmpvar_22;
  tmpvar_22 = mix (mix (tmpvar_20.zxy, tmpvar_20, vec3(tmpvar_21)), tmpvar_20.yxz, vec3(clamp (floor(((1.0 + tmpvar_20.y) - mix (tmpvar_20.z, tmpvar_20.x, tmpvar_21))), 0.0, 1.0)));
  vec3 p_23;
  p_23 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DGradARB (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_22.zy) / abs(tmpvar_22.x)) * _DetailScale), tmpvar_10.xy, tmpvar_10.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_23, p_23))), 0.0, 1.0))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_26;
  p_26 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_24.w, mix (clamp (((_FadeScale * sqrt(dot (p_25, p_25))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_26, p_26)) - (_RimDistSub * sqrt(dot (p_27, p_27))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_24.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r2.z, v0, c6
dp4 r2.y, v0, c5
dp4 r2.x, v0, c4
add r3.xyz, -r2, c16
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r0.xyz, r2, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o5, -r0
mul o6.xyz, r1.w, r3
mov o1.xyz, r2
mov o2.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 144 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedncnmgpcjfpjmmoennakamojnkeijcabgabaaaaaaoaafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaadapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
dmaeaaaaeaaaabaaapabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaa
apaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
adaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaj
pcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaagaaaaaa
dcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadgaaaaagpccabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaa
aeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_10.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_10.y);
  mediump vec4 tex_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_22;
  highp float r_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float y_over_x_24;
    y_over_x_24 = (tmpvar_21.x / tmpvar_21.z);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * r_23));
  uv_22.y = (0.31831 * (1.5708 - (sign(tmpvar_21.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_21.y))) * (1.5708 + (abs(tmpvar_21.y) * (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (abs(tmpvar_21.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(uv_22.y);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(uv_22.y);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_22, tmpvar_29.xy, tmpvar_29.zw);
  tex_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_12);
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_31.x) - tmpvar_31.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_31.zxy, tmpvar_31, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_31.y) - mix (tmpvar_31.z, tmpvar_31.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (detailCoords_8, tmpvar_31.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_8.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_8.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_19.xy, tmpvar_19.zw);
  detail_6 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_20 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_45;
  tmpvar_45 = mix (0.0, tmpvar_41.w, mix (clamp (((_FadeScale * sqrt(dot (p_42, p_42))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_43, p_43)) - (_RimDistSub * sqrt(dot (p_44, p_44))))), 0.0, 1.0)));
  color_11.w = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_46;
  lowp vec3 tmpvar_47;
  tmpvar_47 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_50;
  tmpvar_50 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_49)), 0.0, 1.0);
  color_11.xyz = (tmpvar_41.xyz * tmpvar_50);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_10.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_10.y);
  mediump vec4 tex_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_22;
  highp float r_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float y_over_x_24;
    y_over_x_24 = (tmpvar_21.x / tmpvar_21.z);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * r_23));
  uv_22.y = (0.31831 * (1.5708 - (sign(tmpvar_21.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_21.y))) * (1.5708 + (abs(tmpvar_21.y) * (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (abs(tmpvar_21.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(uv_22.y);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(uv_22.y);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_22, tmpvar_29.xy, tmpvar_29.zw);
  tex_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_12);
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_31.x) - tmpvar_31.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_31.zxy, tmpvar_31, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_31.y) - mix (tmpvar_31.z, tmpvar_31.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (detailCoords_8, tmpvar_31.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_8.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_8.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_19.xy, tmpvar_19.zw);
  detail_6 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_20 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_45;
  tmpvar_45 = mix (0.0, tmpvar_41.w, mix (clamp (((_FadeScale * sqrt(dot (p_42, p_42))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_43, p_43)) - (_RimDistSub * sqrt(dot (p_44, p_44))))), 0.0, 1.0)));
  color_11.w = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_46;
  lowp vec3 tmpvar_47;
  tmpvar_47 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_50;
  tmpvar_50 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_49)), 0.0, 1.0);
  color_11.xyz = (tmpvar_41.xyz * tmpvar_50);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 353
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 450
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 projPos;
};
#line 443
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 363
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 376
#line 384
#line 398
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 431
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 435
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 439
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 463
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 463
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 467
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 471
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objNormal);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 475
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec4(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 353
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 450
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 projPos;
};
#line 443
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 363
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 376
#line 384
#line 398
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 431
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 435
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 439
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 463
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 477
lowp vec4 frag( in v2f IN ) {
    #line 479
    mediump vec4 color;
    highp vec3 objNrm = vec3( normalize(IN.objDetail));
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 483
    uv.y = (0.31831 * acos(objNrm.y));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objNormal));
    objNrm = abs(objNrm);
    #line 487
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    #line 491
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * _DetailScale), uvdd.xy, uvdd.zw);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 495
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 499
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 503
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 507
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec4(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2).xyz;
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_1.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_1.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4.xyz);
  vec2 uv_12;
  float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    float s_15;
    float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_3);
  float tmpvar_21;
  tmpvar_21 = clamp (floor(((1.0 + tmpvar_20.x) - tmpvar_20.z)), 0.0, 1.0);
  vec3 tmpvar_22;
  tmpvar_22 = mix (mix (tmpvar_20.zxy, tmpvar_20, vec3(tmpvar_21)), tmpvar_20.yxz, vec3(clamp (floor(((1.0 + tmpvar_20.y) - mix (tmpvar_20.z, tmpvar_20.x, tmpvar_21))), 0.0, 1.0)));
  vec3 p_23;
  p_23 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DGradARB (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_22.zy) / abs(tmpvar_22.x)) * _DetailScale), tmpvar_10.xy, tmpvar_10.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_23, p_23))), 0.0, 1.0))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_26;
  p_26 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_24.w, mix (clamp (((_FadeScale * sqrt(dot (p_25, p_25))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_26, p_26)) - (_RimDistSub * sqrt(dot (p_27, p_27))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_24.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r2.z, v0, c6
dp4 r2.y, v0, c5
dp4 r2.x, v0, c4
add r3.xyz, -r2, c16
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r0.xyz, r2, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o5, -r0
mul o6.xyz, r1.w, r3
mov o1.xyz, r2
mov o2.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 144 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedjckfedlhfeiomahmhadiphmiejgclocfabaaaaaapiafaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcdmaeaaaaeaaaabaa
apabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaa
gfaaaaadpccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
aeaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaa
fgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaagaaaaaadcaaaaalpcaabaaa
acaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaia
ebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaa
aaaaaaaaaiaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaag
pccabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
agaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_10.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_10.y);
  mediump vec4 tex_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_22;
  highp float r_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float y_over_x_24;
    y_over_x_24 = (tmpvar_21.x / tmpvar_21.z);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * r_23));
  uv_22.y = (0.31831 * (1.5708 - (sign(tmpvar_21.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_21.y))) * (1.5708 + (abs(tmpvar_21.y) * (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (abs(tmpvar_21.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(uv_22.y);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(uv_22.y);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_22, tmpvar_29.xy, tmpvar_29.zw);
  tex_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_12);
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_31.x) - tmpvar_31.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_31.zxy, tmpvar_31, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_31.y) - mix (tmpvar_31.z, tmpvar_31.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (detailCoords_8, tmpvar_31.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_8.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_8.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_19.xy, tmpvar_19.zw);
  detail_6 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_20 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_45;
  tmpvar_45 = mix (0.0, tmpvar_41.w, mix (clamp (((_FadeScale * sqrt(dot (p_42, p_42))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_43, p_43)) - (_RimDistSub * sqrt(dot (p_44, p_44))))), 0.0, 1.0)));
  color_11.w = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_50;
  tmpvar_50 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_49)), 0.0, 1.0);
  color_11.xyz = (tmpvar_41.xyz * tmpvar_50);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_10.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_10.y);
  mediump vec4 tex_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_22;
  highp float r_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float y_over_x_24;
    y_over_x_24 = (tmpvar_21.x / tmpvar_21.z);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * r_23));
  uv_22.y = (0.31831 * (1.5708 - (sign(tmpvar_21.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_21.y))) * (1.5708 + (abs(tmpvar_21.y) * (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (abs(tmpvar_21.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(uv_22.y);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(uv_22.y);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_22, tmpvar_29.xy, tmpvar_29.zw);
  tex_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_12);
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_31.x) - tmpvar_31.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_31.zxy, tmpvar_31, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_31.y) - mix (tmpvar_31.z, tmpvar_31.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (detailCoords_8, tmpvar_31.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_8.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_8.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_19.xy, tmpvar_19.zw);
  detail_6 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_20 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_45;
  tmpvar_45 = mix (0.0, tmpvar_41.w, mix (clamp (((_FadeScale * sqrt(dot (p_42, p_42))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_43, p_43)) - (_RimDistSub * sqrt(dot (p_44, p_44))))), 0.0, 1.0)));
  color_11.w = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_50;
  tmpvar_50 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_49)), 0.0, 1.0);
  color_11.xyz = (tmpvar_41.xyz * tmpvar_50);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 368
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 465
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 458
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 358
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 378
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 391
#line 399
#line 413
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 446
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 450
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 454
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 479
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 479
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 483
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 487
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objNormal);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 491
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec4(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 368
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 465
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 458
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 358
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 378
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 391
#line 399
#line 413
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 446
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 450
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 454
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 479
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 493
lowp vec4 frag( in v2f IN ) {
    #line 495
    mediump vec4 color;
    highp vec3 objNrm = vec3( normalize(IN.objDetail));
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 499
    uv.y = (0.31831 * acos(objNrm.y));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objNormal));
    objNrm = abs(objNrm);
    #line 503
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    #line 507
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * _DetailScale), uvdd.xy, uvdd.zw);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 511
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 515
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 519
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 523
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec4(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2).xyz;
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_1.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_1.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4.xyz);
  vec2 uv_12;
  float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    float s_15;
    float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_3);
  float tmpvar_21;
  tmpvar_21 = clamp (floor(((1.0 + tmpvar_20.x) - tmpvar_20.z)), 0.0, 1.0);
  vec3 tmpvar_22;
  tmpvar_22 = mix (mix (tmpvar_20.zxy, tmpvar_20, vec3(tmpvar_21)), tmpvar_20.yxz, vec3(clamp (floor(((1.0 + tmpvar_20.y) - mix (tmpvar_20.z, tmpvar_20.x, tmpvar_21))), 0.0, 1.0)));
  vec3 p_23;
  p_23 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DGradARB (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_22.zy) / abs(tmpvar_22.x)) * _DetailScale), tmpvar_10.xy, tmpvar_10.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_23, p_23))), 0.0, 1.0))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_26;
  p_26 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_24.w, mix (clamp (((_FadeScale * sqrt(dot (p_25, p_25))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_26, p_26)) - (_RimDistSub * sqrt(dot (p_27, p_27))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_24.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r2.z, v0, c6
dp4 r2.y, v0, c5
dp4 r2.x, v0, c4
add r3.xyz, -r2, c16
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r0.xyz, r2, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o5, -r0
mul o6.xyz, r1.w, r3
mov o1.xyz, r2
mov o2.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 144 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedjckfedlhfeiomahmhadiphmiejgclocfabaaaaaapiafaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcdmaeaaaaeaaaabaa
apabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaa
gfaaaaadpccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
aeaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaa
fgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaagaaaaaadcaaaaalpcaabaaa
acaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaia
ebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaa
aaaaaaaaaiaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaag
pccabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
agaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_10.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_10.y);
  mediump vec4 tex_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_22;
  highp float r_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float y_over_x_24;
    y_over_x_24 = (tmpvar_21.x / tmpvar_21.z);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * r_23));
  uv_22.y = (0.31831 * (1.5708 - (sign(tmpvar_21.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_21.y))) * (1.5708 + (abs(tmpvar_21.y) * (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (abs(tmpvar_21.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(uv_22.y);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(uv_22.y);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_22, tmpvar_29.xy, tmpvar_29.zw);
  tex_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_12);
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_31.x) - tmpvar_31.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_31.zxy, tmpvar_31, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_31.y) - mix (tmpvar_31.z, tmpvar_31.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (detailCoords_8, tmpvar_31.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_8.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_8.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_19.xy, tmpvar_19.zw);
  detail_6 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_20 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_45;
  tmpvar_45 = mix (0.0, tmpvar_41.w, mix (clamp (((_FadeScale * sqrt(dot (p_42, p_42))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_43, p_43)) - (_RimDistSub * sqrt(dot (p_44, p_44))))), 0.0, 1.0)));
  color_11.w = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_50;
  tmpvar_50 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_49)), 0.0, 1.0);
  color_11.xyz = (tmpvar_41.xyz * tmpvar_50);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 369
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 466
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 459
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 358
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 379
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 392
#line 400
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 447
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 451
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 455
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 480
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 480
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 484
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 488
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objNormal);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 492
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec4(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 369
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 466
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 459
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 358
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 379
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 392
#line 400
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 447
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 451
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 455
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 480
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 494
lowp vec4 frag( in v2f IN ) {
    #line 496
    mediump vec4 color;
    highp vec3 objNrm = vec3( normalize(IN.objDetail));
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 500
    uv.y = (0.31831 * acos(objNrm.y));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objNormal));
    objNrm = abs(objNrm);
    #line 504
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    #line 508
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * _DetailScale), uvdd.xy, uvdd.zw);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 512
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 516
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 520
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 524
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec4(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2).xyz;
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_1.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_1.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4.xyz);
  vec2 uv_12;
  float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    float s_15;
    float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_3);
  float tmpvar_21;
  tmpvar_21 = clamp (floor(((1.0 + tmpvar_20.x) - tmpvar_20.z)), 0.0, 1.0);
  vec3 tmpvar_22;
  tmpvar_22 = mix (mix (tmpvar_20.zxy, tmpvar_20, vec3(tmpvar_21)), tmpvar_20.yxz, vec3(clamp (floor(((1.0 + tmpvar_20.y) - mix (tmpvar_20.z, tmpvar_20.x, tmpvar_21))), 0.0, 1.0)));
  vec3 p_23;
  p_23 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DGradARB (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_22.zy) / abs(tmpvar_22.x)) * _DetailScale), tmpvar_10.xy, tmpvar_10.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_23, p_23))), 0.0, 1.0))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_26;
  p_26 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_24.w, mix (clamp (((_FadeScale * sqrt(dot (p_25, p_25))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_26, p_26)) - (_RimDistSub * sqrt(dot (p_27, p_27))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_24.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r2.z, v0, c6
dp4 r2.y, v0, c5
dp4 r2.x, v0, c4
add r3.xyz, -r2, c16
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r0.xyz, r2, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o5, -r0
mul o6.xyz, r1.w, r3
mov o1.xyz, r2
mov o2.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 144 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbbidkpnpegkcdhjlifmdimbfdfnojdpjabaaaaaaoaafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
dmaeaaaaeaaaabaaapabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaa
apaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
adaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaj
pcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaagaaaaaa
dcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadgaaaaagpccabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaa
aeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_10.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_10.y);
  mediump vec4 tex_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_22;
  highp float r_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float y_over_x_24;
    y_over_x_24 = (tmpvar_21.x / tmpvar_21.z);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * r_23));
  uv_22.y = (0.31831 * (1.5708 - (sign(tmpvar_21.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_21.y))) * (1.5708 + (abs(tmpvar_21.y) * (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (abs(tmpvar_21.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(uv_22.y);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(uv_22.y);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_22, tmpvar_29.xy, tmpvar_29.zw);
  tex_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_12);
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_31.x) - tmpvar_31.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_31.zxy, tmpvar_31, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_31.y) - mix (tmpvar_31.z, tmpvar_31.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (detailCoords_8, tmpvar_31.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_8.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_8.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_19.xy, tmpvar_19.zw);
  detail_6 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_20 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_45;
  tmpvar_45 = mix (0.0, tmpvar_41.w, mix (clamp (((_FadeScale * sqrt(dot (p_42, p_42))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_43, p_43)) - (_RimDistSub * sqrt(dot (p_44, p_44))))), 0.0, 1.0)));
  color_11.w = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_46;
  lowp vec3 tmpvar_47;
  tmpvar_47 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_50;
  tmpvar_50 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_49)), 0.0, 1.0);
  color_11.xyz = (tmpvar_41.xyz * tmpvar_50);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_10.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_10.y);
  mediump vec4 tex_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_22;
  highp float r_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float y_over_x_24;
    y_over_x_24 = (tmpvar_21.x / tmpvar_21.z);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * r_23));
  uv_22.y = (0.31831 * (1.5708 - (sign(tmpvar_21.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_21.y))) * (1.5708 + (abs(tmpvar_21.y) * (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (abs(tmpvar_21.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(uv_22.y);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(uv_22.y);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_22, tmpvar_29.xy, tmpvar_29.zw);
  tex_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_12);
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_31.x) - tmpvar_31.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_31.zxy, tmpvar_31, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_31.y) - mix (tmpvar_31.z, tmpvar_31.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (detailCoords_8, tmpvar_31.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_8.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_8.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_19.xy, tmpvar_19.zw);
  detail_6 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_20 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_45;
  tmpvar_45 = mix (0.0, tmpvar_41.w, mix (clamp (((_FadeScale * sqrt(dot (p_42, p_42))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_43, p_43)) - (_RimDistSub * sqrt(dot (p_44, p_44))))), 0.0, 1.0)));
  color_11.w = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_46;
  lowp vec3 tmpvar_47;
  tmpvar_47 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_50;
  tmpvar_50 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_49)), 0.0, 1.0);
  color_11.xyz = (tmpvar_41.xyz * tmpvar_50);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 359
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 456
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 449
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 353
#line 369
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 382
#line 390
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 437
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 441
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 445
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 469
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 469
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 473
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 477
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objNormal);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 481
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec4(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 359
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 456
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 449
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 353
#line 369
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 382
#line 390
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 437
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 441
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 445
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 469
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 483
lowp vec4 frag( in v2f IN ) {
    #line 485
    mediump vec4 color;
    highp vec3 objNrm = vec3( normalize(IN.objDetail));
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 489
    uv.y = (0.31831 * acos(objNrm.y));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objNormal));
    objNrm = abs(objNrm);
    #line 493
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    #line 497
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * _DetailScale), uvdd.xy, uvdd.zw);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 501
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 505
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 509
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 513
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec4(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2).xyz;
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_1.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_1.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4.xyz);
  vec2 uv_12;
  float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    float s_15;
    float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_3);
  float tmpvar_21;
  tmpvar_21 = clamp (floor(((1.0 + tmpvar_20.x) - tmpvar_20.z)), 0.0, 1.0);
  vec3 tmpvar_22;
  tmpvar_22 = mix (mix (tmpvar_20.zxy, tmpvar_20, vec3(tmpvar_21)), tmpvar_20.yxz, vec3(clamp (floor(((1.0 + tmpvar_20.y) - mix (tmpvar_20.z, tmpvar_20.x, tmpvar_21))), 0.0, 1.0)));
  vec3 p_23;
  p_23 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DGradARB (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_22.zy) / abs(tmpvar_22.x)) * _DetailScale), tmpvar_10.xy, tmpvar_10.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_23, p_23))), 0.0, 1.0))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_26;
  p_26 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_24.w, mix (clamp (((_FadeScale * sqrt(dot (p_25, p_25))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_26, p_26)) - (_RimDistSub * sqrt(dot (p_27, p_27))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_24.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r2.z, v0, c6
dp4 r2.y, v0, c5
dp4 r2.x, v0, c4
add r3.xyz, -r2, c16
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r0.xyz, r2, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o5, -r0
mul o6.xyz, r1.w, r3
mov o1.xyz, r2
mov o2.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 368 // 144 used size, 18 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkhjmbgkcjphdiaidpiabdhlgbhonenohabaaaaaapiafaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaadapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcdmaeaaaaeaaaabaa
apabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaa
gfaaaaadpccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
aeaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaa
fgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaagaaaaaadcaaaaalpcaabaaa
acaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaia
ebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaa
aaaaaaaaaiaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaag
pccabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
agaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_10.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_10.y);
  mediump vec4 tex_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_22;
  highp float r_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float y_over_x_24;
    y_over_x_24 = (tmpvar_21.x / tmpvar_21.z);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * r_23));
  uv_22.y = (0.31831 * (1.5708 - (sign(tmpvar_21.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_21.y))) * (1.5708 + (abs(tmpvar_21.y) * (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (abs(tmpvar_21.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(uv_22.y);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(uv_22.y);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_22, tmpvar_29.xy, tmpvar_29.zw);
  tex_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_12);
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_31.x) - tmpvar_31.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_31.zxy, tmpvar_31, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_31.y) - mix (tmpvar_31.z, tmpvar_31.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (detailCoords_8, tmpvar_31.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_8.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_8.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_19.xy, tmpvar_19.zw);
  detail_6 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_20 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_45;
  tmpvar_45 = mix (0.0, tmpvar_41.w, mix (clamp (((_FadeScale * sqrt(dot (p_42, p_42))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_43, p_43)) - (_RimDistSub * sqrt(dot (p_44, p_44))))), 0.0, 1.0)));
  color_11.w = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_46;
  lowp vec3 tmpvar_47;
  tmpvar_47 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_50;
  tmpvar_50 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_49)), 0.0, 1.0);
  color_11.xyz = (tmpvar_41.xyz * tmpvar_50);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_10.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_10.y);
  mediump vec4 tex_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_22;
  highp float r_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float y_over_x_24;
    y_over_x_24 = (tmpvar_21.x / tmpvar_21.z);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * r_23));
  uv_22.y = (0.31831 * (1.5708 - (sign(tmpvar_21.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_21.y))) * (1.5708 + (abs(tmpvar_21.y) * (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (abs(tmpvar_21.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(uv_22.y);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(uv_22.y);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_22, tmpvar_29.xy, tmpvar_29.zw);
  tex_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_12);
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_31.x) - tmpvar_31.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_31.zxy, tmpvar_31, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_31.y) - mix (tmpvar_31.z, tmpvar_31.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (detailCoords_8, tmpvar_31.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_8.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_8.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_19.xy, tmpvar_19.zw);
  detail_6 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_20 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_45;
  tmpvar_45 = mix (0.0, tmpvar_41.w, mix (clamp (((_FadeScale * sqrt(dot (p_42, p_42))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_43, p_43)) - (_RimDistSub * sqrt(dot (p_44, p_44))))), 0.0, 1.0)));
  color_11.w = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_46;
  lowp vec3 tmpvar_47;
  tmpvar_47 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_50;
  tmpvar_50 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_49)), 0.0, 1.0);
  color_11.xyz = (tmpvar_41.xyz * tmpvar_50);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 361
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 458
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 451
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 353
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 371
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 384
#line 392
#line 406
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 439
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 443
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 447
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 472
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 472
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 476
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 480
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objNormal);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 484
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec4(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 361
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 458
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 451
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 353
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 371
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 384
#line 392
#line 406
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 439
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 443
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 447
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 472
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 486
lowp vec4 frag( in v2f IN ) {
    #line 488
    mediump vec4 color;
    highp vec3 objNrm = vec3( normalize(IN.objDetail));
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 492
    uv.y = (0.31831 * acos(objNrm.y));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objNormal));
    objNrm = abs(objNrm);
    #line 496
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    #line 500
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * _DetailScale), uvdd.xy, uvdd.zw);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 504
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 508
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 512
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 516
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec4(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2).xyz;
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_1.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_1.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4.xyz);
  vec2 uv_12;
  float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    float s_15;
    float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_3);
  float tmpvar_21;
  tmpvar_21 = clamp (floor(((1.0 + tmpvar_20.x) - tmpvar_20.z)), 0.0, 1.0);
  vec3 tmpvar_22;
  tmpvar_22 = mix (mix (tmpvar_20.zxy, tmpvar_20, vec3(tmpvar_21)), tmpvar_20.yxz, vec3(clamp (floor(((1.0 + tmpvar_20.y) - mix (tmpvar_20.z, tmpvar_20.x, tmpvar_21))), 0.0, 1.0)));
  vec3 p_23;
  p_23 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DGradARB (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_22.zy) / abs(tmpvar_22.x)) * _DetailScale), tmpvar_10.xy, tmpvar_10.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_23, p_23))), 0.0, 1.0))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_26;
  p_26 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_24.w, mix (clamp (((_FadeScale * sqrt(dot (p_25, p_25))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_26, p_26)) - (_RimDistSub * sqrt(dot (p_27, p_27))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_24.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r2.z, v0, c6
dp4 r2.y, v0, c5
dp4 r2.x, v0, c4
add r3.xyz, -r2, c16
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r0.xyz, r2, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o5, -r0
mul o6.xyz, r1.w, r3
mov o1.xyz, r2
mov o2.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 144 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedpcpjkehhgjdhdagpmieeliadmcfkbibjabaaaaaapiafaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcdmaeaaaaeaaaabaa
apabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaa
gfaaaaadpccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
aeaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaa
fgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaagaaaaaadcaaaaalpcaabaaa
acaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaia
ebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaa
aaaaaaaaaiaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaag
pccabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
agaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_10.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_10.y);
  mediump vec4 tex_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_22;
  highp float r_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float y_over_x_24;
    y_over_x_24 = (tmpvar_21.x / tmpvar_21.z);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * r_23));
  uv_22.y = (0.31831 * (1.5708 - (sign(tmpvar_21.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_21.y))) * (1.5708 + (abs(tmpvar_21.y) * (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (abs(tmpvar_21.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(uv_22.y);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(uv_22.y);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_22, tmpvar_29.xy, tmpvar_29.zw);
  tex_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_12);
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_31.x) - tmpvar_31.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_31.zxy, tmpvar_31, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_31.y) - mix (tmpvar_31.z, tmpvar_31.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (detailCoords_8, tmpvar_31.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_8.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_8.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_19.xy, tmpvar_19.zw);
  detail_6 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_20 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_45;
  tmpvar_45 = mix (0.0, tmpvar_41.w, mix (clamp (((_FadeScale * sqrt(dot (p_42, p_42))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_43, p_43)) - (_RimDistSub * sqrt(dot (p_44, p_44))))), 0.0, 1.0)));
  color_11.w = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_50;
  tmpvar_50 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_49)), 0.0, 1.0);
  color_11.xyz = (tmpvar_41.xyz * tmpvar_50);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_10.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_10.y);
  mediump vec4 tex_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_22;
  highp float r_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float y_over_x_24;
    y_over_x_24 = (tmpvar_21.x / tmpvar_21.z);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * r_23));
  uv_22.y = (0.31831 * (1.5708 - (sign(tmpvar_21.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_21.y))) * (1.5708 + (abs(tmpvar_21.y) * (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (abs(tmpvar_21.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(uv_22.y);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(uv_22.y);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_22, tmpvar_29.xy, tmpvar_29.zw);
  tex_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_12);
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_31.x) - tmpvar_31.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_31.zxy, tmpvar_31, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_31.y) - mix (tmpvar_31.z, tmpvar_31.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (detailCoords_8, tmpvar_31.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_8.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_8.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_19.xy, tmpvar_19.zw);
  detail_6 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_20 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_45;
  tmpvar_45 = mix (0.0, tmpvar_41.w, mix (clamp (((_FadeScale * sqrt(dot (p_42, p_42))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_43, p_43)) - (_RimDistSub * sqrt(dot (p_44, p_44))))), 0.0, 1.0)));
  color_11.w = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_50;
  tmpvar_50 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_49)), 0.0, 1.0);
  color_11.xyz = (tmpvar_41.xyz * tmpvar_50);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 366
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 463
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 456
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform samplerCube _ShadowMapTexture;
#line 364
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 376
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 389
#line 397
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 444
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 448
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 452
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 477
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 477
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 481
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 485
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objNormal);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 489
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec4(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 366
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 463
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 456
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform samplerCube _ShadowMapTexture;
#line 364
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 376
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 389
#line 397
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 444
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 448
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 452
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 477
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 491
lowp vec4 frag( in v2f IN ) {
    #line 493
    mediump vec4 color;
    highp vec3 objNrm = vec3( normalize(IN.objDetail));
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 497
    uv.y = (0.31831 * acos(objNrm.y));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objNormal));
    objNrm = abs(objNrm);
    #line 501
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    #line 505
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * _DetailScale), uvdd.xy, uvdd.zw);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 509
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 513
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 517
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 521
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec4(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2).xyz;
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_1.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_1.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4.xyz);
  vec2 uv_12;
  float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    float s_15;
    float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_3);
  float tmpvar_21;
  tmpvar_21 = clamp (floor(((1.0 + tmpvar_20.x) - tmpvar_20.z)), 0.0, 1.0);
  vec3 tmpvar_22;
  tmpvar_22 = mix (mix (tmpvar_20.zxy, tmpvar_20, vec3(tmpvar_21)), tmpvar_20.yxz, vec3(clamp (floor(((1.0 + tmpvar_20.y) - mix (tmpvar_20.z, tmpvar_20.x, tmpvar_21))), 0.0, 1.0)));
  vec3 p_23;
  p_23 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DGradARB (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_22.zy) / abs(tmpvar_22.x)) * _DetailScale), tmpvar_10.xy, tmpvar_10.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_23, p_23))), 0.0, 1.0))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_26;
  p_26 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_24.w, mix (clamp (((_FadeScale * sqrt(dot (p_25, p_25))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_26, p_26)) - (_RimDistSub * sqrt(dot (p_27, p_27))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_24.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r2.z, v0, c6
dp4 r2.y, v0, c5
dp4 r2.x, v0, c4
add r3.xyz, -r2, c16
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r0.xyz, r2, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o5, -r0
mul o6.xyz, r1.w, r3
mov o1.xyz, r2
mov o2.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 144 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedpcpjkehhgjdhdagpmieeliadmcfkbibjabaaaaaapiafaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcdmaeaaaaeaaaabaa
apabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaa
gfaaaaadpccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
aeaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaa
fgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaagaaaaaadcaaaaalpcaabaaa
acaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaia
ebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaa
aaaaaaaaaiaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaag
pccabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
agaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_10.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_10.y);
  mediump vec4 tex_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_22;
  highp float r_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float y_over_x_24;
    y_over_x_24 = (tmpvar_21.x / tmpvar_21.z);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * r_23));
  uv_22.y = (0.31831 * (1.5708 - (sign(tmpvar_21.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_21.y))) * (1.5708 + (abs(tmpvar_21.y) * (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (abs(tmpvar_21.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(uv_22.y);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(uv_22.y);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_22, tmpvar_29.xy, tmpvar_29.zw);
  tex_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_12);
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_31.x) - tmpvar_31.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_31.zxy, tmpvar_31, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_31.y) - mix (tmpvar_31.z, tmpvar_31.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (detailCoords_8, tmpvar_31.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_8.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_8.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_19.xy, tmpvar_19.zw);
  detail_6 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_20 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_45;
  tmpvar_45 = mix (0.0, tmpvar_41.w, mix (clamp (((_FadeScale * sqrt(dot (p_42, p_42))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_43, p_43)) - (_RimDistSub * sqrt(dot (p_44, p_44))))), 0.0, 1.0)));
  color_11.w = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_50;
  tmpvar_50 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_49)), 0.0, 1.0);
  color_11.xyz = (tmpvar_41.xyz * tmpvar_50);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_10.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_10.y);
  mediump vec4 tex_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_22;
  highp float r_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float y_over_x_24;
    y_over_x_24 = (tmpvar_21.x / tmpvar_21.z);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * r_23));
  uv_22.y = (0.31831 * (1.5708 - (sign(tmpvar_21.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_21.y))) * (1.5708 + (abs(tmpvar_21.y) * (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (abs(tmpvar_21.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(uv_22.y);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(uv_22.y);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_22, tmpvar_29.xy, tmpvar_29.zw);
  tex_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_12);
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_31.x) - tmpvar_31.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_31.zxy, tmpvar_31, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_31.y) - mix (tmpvar_31.z, tmpvar_31.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (detailCoords_8, tmpvar_31.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_8.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_8.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_19.xy, tmpvar_19.zw);
  detail_6 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_20 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_45;
  tmpvar_45 = mix (0.0, tmpvar_41.w, mix (clamp (((_FadeScale * sqrt(dot (p_42, p_42))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_43, p_43)) - (_RimDistSub * sqrt(dot (p_44, p_44))))), 0.0, 1.0)));
  color_11.w = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_50;
  tmpvar_50 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_49)), 0.0, 1.0);
  color_11.xyz = (tmpvar_41.xyz * tmpvar_50);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 367
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 464
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 457
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform samplerCube _ShadowMapTexture;
#line 364
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 377
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 390
#line 398
#line 412
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 445
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 449
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 453
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 478
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 478
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 482
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 486
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objNormal);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 490
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec4(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 367
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 464
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 457
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform samplerCube _ShadowMapTexture;
#line 364
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 377
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 390
#line 398
#line 412
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 445
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 449
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 453
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 478
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 492
lowp vec4 frag( in v2f IN ) {
    #line 494
    mediump vec4 color;
    highp vec3 objNrm = vec3( normalize(IN.objDetail));
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 498
    uv.y = (0.31831 * acos(objNrm.y));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objNormal));
    objNrm = abs(objNrm);
    #line 502
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    #line 506
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * _DetailScale), uvdd.xy, uvdd.zw);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 510
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 514
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 518
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 522
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec4(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2).xyz;
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_1.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_1.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4.xyz);
  vec2 uv_12;
  float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    float s_15;
    float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_3);
  float tmpvar_21;
  tmpvar_21 = clamp (floor(((1.0 + tmpvar_20.x) - tmpvar_20.z)), 0.0, 1.0);
  vec3 tmpvar_22;
  tmpvar_22 = mix (mix (tmpvar_20.zxy, tmpvar_20, vec3(tmpvar_21)), tmpvar_20.yxz, vec3(clamp (floor(((1.0 + tmpvar_20.y) - mix (tmpvar_20.z, tmpvar_20.x, tmpvar_21))), 0.0, 1.0)));
  vec3 p_23;
  p_23 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DGradARB (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_22.zy) / abs(tmpvar_22.x)) * _DetailScale), tmpvar_10.xy, tmpvar_10.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_23, p_23))), 0.0, 1.0))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_26;
  p_26 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_24.w, mix (clamp (((_FadeScale * sqrt(dot (p_25, p_25))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_26, p_26)) - (_RimDistSub * sqrt(dot (p_27, p_27))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_24.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r2.z, v0, c6
dp4 r2.y, v0, c5
dp4 r2.x, v0, c4
add r3.xyz, -r2, c16
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r0.xyz, r2, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o5, -r0
mul o6.xyz, r1.w, r3
mov o1.xyz, r2
mov o2.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 368 // 144 used size, 18 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedjckfedlhfeiomahmhadiphmiejgclocfabaaaaaapiafaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcdmaeaaaaeaaaabaa
apabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaa
gfaaaaadpccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
aeaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaa
fgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaagaaaaaadcaaaaalpcaabaaa
acaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaia
ebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaa
aaaaaaaaaiaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaag
pccabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
agaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_10.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_10.y);
  mediump vec4 tex_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_22;
  highp float r_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float y_over_x_24;
    y_over_x_24 = (tmpvar_21.x / tmpvar_21.z);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * r_23));
  uv_22.y = (0.31831 * (1.5708 - (sign(tmpvar_21.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_21.y))) * (1.5708 + (abs(tmpvar_21.y) * (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (abs(tmpvar_21.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(uv_22.y);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(uv_22.y);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_22, tmpvar_29.xy, tmpvar_29.zw);
  tex_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_12);
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_31.x) - tmpvar_31.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_31.zxy, tmpvar_31, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_31.y) - mix (tmpvar_31.z, tmpvar_31.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (detailCoords_8, tmpvar_31.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_8.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_8.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_19.xy, tmpvar_19.zw);
  detail_6 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_20 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_45;
  tmpvar_45 = mix (0.0, tmpvar_41.w, mix (clamp (((_FadeScale * sqrt(dot (p_42, p_42))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_43, p_43)) - (_RimDistSub * sqrt(dot (p_44, p_44))))), 0.0, 1.0)));
  color_11.w = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_50;
  tmpvar_50 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_49)), 0.0, 1.0);
  color_11.xyz = (tmpvar_41.xyz * tmpvar_50);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_10.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_10.y);
  mediump vec4 tex_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_22;
  highp float r_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float y_over_x_24;
    y_over_x_24 = (tmpvar_21.x / tmpvar_21.z);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * r_23));
  uv_22.y = (0.31831 * (1.5708 - (sign(tmpvar_21.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_21.y))) * (1.5708 + (abs(tmpvar_21.y) * (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (abs(tmpvar_21.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(uv_22.y);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(uv_22.y);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_22, tmpvar_29.xy, tmpvar_29.zw);
  tex_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_12);
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_31.x) - tmpvar_31.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_31.zxy, tmpvar_31, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_31.y) - mix (tmpvar_31.z, tmpvar_31.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (detailCoords_8, tmpvar_31.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_8.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_8.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_19.xy, tmpvar_19.zw);
  detail_6 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_20 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_45;
  tmpvar_45 = mix (0.0, tmpvar_41.w, mix (clamp (((_FadeScale * sqrt(dot (p_42, p_42))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_43, p_43)) - (_RimDistSub * sqrt(dot (p_44, p_44))))), 0.0, 1.0)));
  color_11.w = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_50;
  tmpvar_50 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_49)), 0.0, 1.0);
  color_11.xyz = (tmpvar_41.xyz * tmpvar_50);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 376
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 473
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 466
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
#line 353
#line 365
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 386
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 399
#line 407
#line 421
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 454
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 458
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 462
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 487
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 487
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 491
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 495
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objNormal);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 499
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec4(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 376
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 473
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 466
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
#line 353
#line 365
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 386
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 399
#line 407
#line 421
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 454
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 458
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 462
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 487
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 501
lowp vec4 frag( in v2f IN ) {
    #line 503
    mediump vec4 color;
    highp vec3 objNrm = vec3( normalize(IN.objDetail));
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 507
    uv.y = (0.31831 * acos(objNrm.y));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objNormal));
    objNrm = abs(objNrm);
    #line 511
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    #line 515
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * _DetailScale), uvdd.xy, uvdd.zw);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 519
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 523
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 527
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 531
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec4(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2).xyz;
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_1.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_1.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4.xyz);
  vec2 uv_12;
  float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    float s_15;
    float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_3);
  float tmpvar_21;
  tmpvar_21 = clamp (floor(((1.0 + tmpvar_20.x) - tmpvar_20.z)), 0.0, 1.0);
  vec3 tmpvar_22;
  tmpvar_22 = mix (mix (tmpvar_20.zxy, tmpvar_20, vec3(tmpvar_21)), tmpvar_20.yxz, vec3(clamp (floor(((1.0 + tmpvar_20.y) - mix (tmpvar_20.z, tmpvar_20.x, tmpvar_21))), 0.0, 1.0)));
  vec3 p_23;
  p_23 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DGradARB (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_22.zy) / abs(tmpvar_22.x)) * _DetailScale), tmpvar_10.xy, tmpvar_10.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_23, p_23))), 0.0, 1.0))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_26;
  p_26 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_24.w, mix (clamp (((_FadeScale * sqrt(dot (p_25, p_25))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_26, p_26)) - (_RimDistSub * sqrt(dot (p_27, p_27))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_24.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r2.z, v0, c6
dp4 r2.y, v0, c5
dp4 r2.x, v0, c4
add r3.xyz, -r2, c16
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r0.xyz, r2, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o5, -r0
mul o6.xyz, r1.w, r3
mov o1.xyz, r2
mov o2.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 368 // 144 used size, 18 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedjckfedlhfeiomahmhadiphmiejgclocfabaaaaaapiafaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcdmaeaaaaeaaaabaa
apabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaa
gfaaaaadpccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
aeaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaa
fgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaagaaaaaadcaaaaalpcaabaaa
acaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaia
ebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaa
aaaaaaaaaiaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaag
pccabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
agaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_10.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_10.y);
  mediump vec4 tex_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_22;
  highp float r_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float y_over_x_24;
    y_over_x_24 = (tmpvar_21.x / tmpvar_21.z);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * r_23));
  uv_22.y = (0.31831 * (1.5708 - (sign(tmpvar_21.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_21.y))) * (1.5708 + (abs(tmpvar_21.y) * (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (abs(tmpvar_21.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(uv_22.y);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(uv_22.y);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_22, tmpvar_29.xy, tmpvar_29.zw);
  tex_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_12);
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_31.x) - tmpvar_31.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_31.zxy, tmpvar_31, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_31.y) - mix (tmpvar_31.z, tmpvar_31.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (detailCoords_8, tmpvar_31.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_8.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_8.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_19.xy, tmpvar_19.zw);
  detail_6 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_20 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_45;
  tmpvar_45 = mix (0.0, tmpvar_41.w, mix (clamp (((_FadeScale * sqrt(dot (p_42, p_42))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_43, p_43)) - (_RimDistSub * sqrt(dot (p_44, p_44))))), 0.0, 1.0)));
  color_11.w = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_50;
  tmpvar_50 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_49)), 0.0, 1.0);
  color_11.xyz = (tmpvar_41.xyz * tmpvar_50);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 376
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 473
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 466
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
#line 353
#line 365
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 386
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 399
#line 407
#line 421
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 454
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 458
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 462
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 487
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 487
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 491
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 495
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objNormal);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 499
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec4(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 376
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 473
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 466
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
#line 353
#line 365
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 386
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 399
#line 407
#line 421
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 454
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 458
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 462
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 487
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 501
lowp vec4 frag( in v2f IN ) {
    #line 503
    mediump vec4 color;
    highp vec3 objNrm = vec3( normalize(IN.objDetail));
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 507
    uv.y = (0.31831 * acos(objNrm.y));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objNormal));
    objNrm = abs(objNrm);
    #line 511
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    #line 515
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * _DetailScale), uvdd.xy, uvdd.zw);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 519
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 523
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 527
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 531
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec4(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2).xyz;
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_1.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_1.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4.xyz);
  vec2 uv_12;
  float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    float s_15;
    float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_3);
  float tmpvar_21;
  tmpvar_21 = clamp (floor(((1.0 + tmpvar_20.x) - tmpvar_20.z)), 0.0, 1.0);
  vec3 tmpvar_22;
  tmpvar_22 = mix (mix (tmpvar_20.zxy, tmpvar_20, vec3(tmpvar_21)), tmpvar_20.yxz, vec3(clamp (floor(((1.0 + tmpvar_20.y) - mix (tmpvar_20.z, tmpvar_20.x, tmpvar_21))), 0.0, 1.0)));
  vec3 p_23;
  p_23 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DGradARB (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_22.zy) / abs(tmpvar_22.x)) * _DetailScale), tmpvar_10.xy, tmpvar_10.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_23, p_23))), 0.0, 1.0))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_26;
  p_26 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_24.w, mix (clamp (((_FadeScale * sqrt(dot (p_25, p_25))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_26, p_26)) - (_RimDistSub * sqrt(dot (p_27, p_27))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_24.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r2.z, v0, c6
dp4 r2.y, v0, c5
dp4 r2.x, v0, c4
add r3.xyz, -r2, c16
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r0.xyz, r2, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o5, -r0
mul o6.xyz, r1.w, r3
mov o1.xyz, r2
mov o2.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 144 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedpcpjkehhgjdhdagpmieeliadmcfkbibjabaaaaaapiafaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcdmaeaaaaeaaaabaa
apabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaa
gfaaaaadpccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
aeaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaa
fgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaagaaaaaadcaaaaalpcaabaaa
acaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaia
ebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaa
aaaaaaaaaiaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaag
pccabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
agaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_10.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_10.y);
  mediump vec4 tex_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_22;
  highp float r_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float y_over_x_24;
    y_over_x_24 = (tmpvar_21.x / tmpvar_21.z);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * r_23));
  uv_22.y = (0.31831 * (1.5708 - (sign(tmpvar_21.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_21.y))) * (1.5708 + (abs(tmpvar_21.y) * (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (abs(tmpvar_21.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(uv_22.y);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(uv_22.y);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_22, tmpvar_29.xy, tmpvar_29.zw);
  tex_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_12);
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_31.x) - tmpvar_31.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_31.zxy, tmpvar_31, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_31.y) - mix (tmpvar_31.z, tmpvar_31.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (detailCoords_8, tmpvar_31.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_8.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_8.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_19.xy, tmpvar_19.zw);
  detail_6 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_20 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_45;
  tmpvar_45 = mix (0.0, tmpvar_41.w, mix (clamp (((_FadeScale * sqrt(dot (p_42, p_42))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_43, p_43)) - (_RimDistSub * sqrt(dot (p_44, p_44))))), 0.0, 1.0)));
  color_11.w = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_50;
  tmpvar_50 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_49)), 0.0, 1.0);
  color_11.xyz = (tmpvar_41.xyz * tmpvar_50);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_10.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_10.y);
  mediump vec4 tex_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_22;
  highp float r_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float y_over_x_24;
    y_over_x_24 = (tmpvar_21.x / tmpvar_21.z);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * r_23));
  uv_22.y = (0.31831 * (1.5708 - (sign(tmpvar_21.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_21.y))) * (1.5708 + (abs(tmpvar_21.y) * (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (abs(tmpvar_21.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(uv_22.y);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(uv_22.y);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_22, tmpvar_29.xy, tmpvar_29.zw);
  tex_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_12);
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_31.x) - tmpvar_31.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_31.zxy, tmpvar_31, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_31.y) - mix (tmpvar_31.z, tmpvar_31.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (detailCoords_8, tmpvar_31.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_8.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_8.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_19.xy, tmpvar_19.zw);
  detail_6 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_20 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_45;
  tmpvar_45 = mix (0.0, tmpvar_41.w, mix (clamp (((_FadeScale * sqrt(dot (p_42, p_42))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_43, p_43)) - (_RimDistSub * sqrt(dot (p_44, p_44))))), 0.0, 1.0)));
  color_11.w = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_50;
  tmpvar_50 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_49)), 0.0, 1.0);
  color_11.xyz = (tmpvar_41.xyz * tmpvar_50);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 372
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 469
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 462
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 371
uniform highp mat4 _LightMatrix0;
#line 382
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 395
#line 403
#line 417
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 450
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 454
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 458
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 483
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 483
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 487
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 491
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objNormal);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 495
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec4(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 372
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 469
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 462
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 371
uniform highp mat4 _LightMatrix0;
#line 382
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 395
#line 403
#line 417
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 450
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 454
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 458
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 483
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 497
lowp vec4 frag( in v2f IN ) {
    #line 499
    mediump vec4 color;
    highp vec3 objNrm = vec3( normalize(IN.objDetail));
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 503
    uv.y = (0.31831 * acos(objNrm.y));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objNormal));
    objNrm = abs(objNrm);
    #line 507
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    #line 511
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * _DetailScale), uvdd.xy, uvdd.zw);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 515
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 519
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 523
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 527
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec4(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2).xyz;
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_1.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_1.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4.xyz);
  vec2 uv_12;
  float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    float s_15;
    float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_3);
  float tmpvar_21;
  tmpvar_21 = clamp (floor(((1.0 + tmpvar_20.x) - tmpvar_20.z)), 0.0, 1.0);
  vec3 tmpvar_22;
  tmpvar_22 = mix (mix (tmpvar_20.zxy, tmpvar_20, vec3(tmpvar_21)), tmpvar_20.yxz, vec3(clamp (floor(((1.0 + tmpvar_20.y) - mix (tmpvar_20.z, tmpvar_20.x, tmpvar_21))), 0.0, 1.0)));
  vec3 p_23;
  p_23 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DGradARB (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_22.zy) / abs(tmpvar_22.x)) * _DetailScale), tmpvar_10.xy, tmpvar_10.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_23, p_23))), 0.0, 1.0))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_26;
  p_26 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_24.w, mix (clamp (((_FadeScale * sqrt(dot (p_25, p_25))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_26, p_26)) - (_RimDistSub * sqrt(dot (p_27, p_27))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_24.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r2.z, v0, c6
dp4 r2.y, v0, c5
dp4 r2.x, v0, c4
add r3.xyz, -r2, c16
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r0.xyz, r2, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o5, -r0
mul o6.xyz, r1.w, r3
mov o1.xyz, r2
mov o2.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 144 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedpcpjkehhgjdhdagpmieeliadmcfkbibjabaaaaaapiafaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcdmaeaaaaeaaaabaa
apabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaa
gfaaaaadpccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
aeaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaa
fgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaagaaaaaadcaaaaalpcaabaaa
acaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaia
ebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaa
aaaaaaaaaiaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaag
pccabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
agaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_10.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_10.y);
  mediump vec4 tex_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_22;
  highp float r_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float y_over_x_24;
    y_over_x_24 = (tmpvar_21.x / tmpvar_21.z);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * r_23));
  uv_22.y = (0.31831 * (1.5708 - (sign(tmpvar_21.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_21.y))) * (1.5708 + (abs(tmpvar_21.y) * (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (abs(tmpvar_21.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(uv_22.y);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(uv_22.y);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_22, tmpvar_29.xy, tmpvar_29.zw);
  tex_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_12);
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_31.x) - tmpvar_31.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_31.zxy, tmpvar_31, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_31.y) - mix (tmpvar_31.z, tmpvar_31.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (detailCoords_8, tmpvar_31.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_8.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_8.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_19.xy, tmpvar_19.zw);
  detail_6 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_20 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_45;
  tmpvar_45 = mix (0.0, tmpvar_41.w, mix (clamp (((_FadeScale * sqrt(dot (p_42, p_42))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_43, p_43)) - (_RimDistSub * sqrt(dot (p_44, p_44))))), 0.0, 1.0)));
  color_11.w = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_50;
  tmpvar_50 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_49)), 0.0, 1.0);
  color_11.xyz = (tmpvar_41.xyz * tmpvar_50);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_6);
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_10.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_10.y);
  mediump vec4 tex_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_22;
  highp float r_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float y_over_x_24;
    y_over_x_24 = (tmpvar_21.x / tmpvar_21.z);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * r_23));
  uv_22.y = (0.31831 * (1.5708 - (sign(tmpvar_21.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_21.y))) * (1.5708 + (abs(tmpvar_21.y) * (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (abs(tmpvar_21.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(uv_22.y);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(uv_22.y);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_22, tmpvar_29.xy, tmpvar_29.zw);
  tex_20 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = abs(tmpvar_12);
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_31.x) - tmpvar_31.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_31.zxy, tmpvar_31, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_31.y) - mix (tmpvar_31.z, tmpvar_31.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (detailCoords_8, tmpvar_31.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = abs(detailCoords_8.x);
  highp vec2 coord_37;
  coord_37 = (((0.5 * detailCoords_8.zy) / tmpvar_36) * _DetailScale);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_DetailTex, coord_37, tmpvar_19.xy, tmpvar_19.zw);
  detail_6 = tmpvar_38;
  highp vec3 p_39;
  p_39 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_39, p_39))), 0.0, 1.0);
  detailLevel_5 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (tex_20 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_45;
  tmpvar_45 = mix (0.0, tmpvar_41.w, mix (clamp (((_FadeScale * sqrt(dot (p_42, p_42))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_43, p_43)) - (_RimDistSub * sqrt(dot (p_44, p_44))))), 0.0, 1.0)));
  color_11.w = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_50;
  tmpvar_50 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_49)), 0.0, 1.0);
  color_11.xyz = (tmpvar_41.xyz * tmpvar_50);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 373
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 470
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 463
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 371
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 383
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 396
#line 404
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 451
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 455
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 459
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 484
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 484
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 488
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 492
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objNormal);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 496
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec4(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 373
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 470
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 463
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 371
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 383
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 396
#line 404
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 451
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 455
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 459
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 484
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 498
lowp vec4 frag( in v2f IN ) {
    #line 500
    mediump vec4 color;
    highp vec3 objNrm = vec3( normalize(IN.objDetail));
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 504
    uv.y = (0.31831 * acos(objNrm.y));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objNormal));
    objNrm = abs(objNrm);
    #line 508
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    #line 512
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * _DetailScale), uvdd.xy, uvdd.zw);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 516
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 520
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 524
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 528
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec4(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  vec4 o_6;
  vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2).xyz;
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_1.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_1.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4.xyz);
  vec2 uv_12;
  float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    float s_15;
    float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_3);
  float tmpvar_21;
  tmpvar_21 = clamp (floor(((1.0 + tmpvar_20.x) - tmpvar_20.z)), 0.0, 1.0);
  vec3 tmpvar_22;
  tmpvar_22 = mix (mix (tmpvar_20.zxy, tmpvar_20, vec3(tmpvar_21)), tmpvar_20.yxz, vec3(clamp (floor(((1.0 + tmpvar_20.y) - mix (tmpvar_20.z, tmpvar_20.x, tmpvar_21))), 0.0, 1.0)));
  vec3 p_23;
  p_23 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DGradARB (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_22.zy) / abs(tmpvar_22.x)) * _DetailScale), tmpvar_10.xy, tmpvar_10.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_23, p_23))), 0.0, 1.0))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_26;
  p_26 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_24.w, mix (clamp (((_FadeScale * sqrt(dot (p_25, p_25))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_26, p_26)) - (_RimDistSub * sqrt(dot (p_27, p_27))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_24.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_MainRotation]
Matrix 16 [_DetailRotation]
Matrix 20 [_LightMatrix0]
"vs_3_0
; 42 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c27, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
mov r1.w, r0
dp4 r1.y, v0, c5
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r4.xyz, r2, -r0
dp3 r1.x, r4, r4
rsq r1.z, r1.x
dp4 r1.x, v0, c4
mul r3.xyz, r1.xyww, c27.x
mul r3.y, r3, c25.x
mul o4.xyz, r1.z, r4
dp4 r1.z, v0, c6
mov o0, r1
mad o8.xy, r3.z, c26.zwzw, r3
add r3.xyz, -r2, c24
dp3 r2.w, r3, r3
rsq r2.w, r2.w
dp4 r1.w, v0, c15
dp4 r1.z, v0, c14
dp4 r1.x, v0, c12
dp4 r1.y, v0, c13
dp4 o3.w, -r1, c19
dp4 o3.z, -r1, c18
dp4 o3.y, -r1, c17
dp4 o3.x, -r1, c16
mov o5, -r1
mov r1.xyz, r2
dp4 r1.w, v0, c11
dp4 o7.z, r1, c22
dp4 o7.y, r1, c21
dp4 o7.x, r1, c20
dp4 r1.x, v0, c2
mul o6.xyz, r2.w, r3
mov o1.xyz, r2
mov o2.xyz, r0
mov o8.z, -r1.x
mov o8.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 208 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 144 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 46 instructions, 4 temp regs, 0 temp arrays:
// ALU 40 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedjgeddjgdjlhakdjefohhpbfgohpdlebiabaaaaaageaiaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
maagaaaaeaaaabaalaabaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaadhccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaa
acaaaaaaegiccaaaacaaaaaaapaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaa
aaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaabaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaa
acaaaaaaegiocaaaaaaaaaaaadaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaa
egaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaa
egiocaaaaaaaaaaaagaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaa
afaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaa
adaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaia
ebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaafaaaaaaegaobaia
ebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaia
ebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaiaebaaaaaa
abaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaaeaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaaaaaaaaaaakaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaajaaaaaaagaabaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaalaaaaaa
kgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaaahaaaaaaegiccaaa
aaaaaaaaamaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaa
aaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaa
abaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadp
dgaaaaaficcabaaaaiaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaaiaaaaaa
kgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaa
aaaaaaaackiacaaaacaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaacaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaahaaaaaadkbabaaaaaaaaaaa
akaabaaaaaaaaaaadgaaaaageccabaaaaiaaaaaaakaabaiaebaaaaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_11.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_11.y);
  mediump vec4 tex_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_23, tmpvar_30.xy, tmpvar_30.zw);
  tex_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_13);
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_32.x) - tmpvar_32.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_32.zxy, tmpvar_32, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_32.y) - mix (tmpvar_32.z, tmpvar_32.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (detailCoords_9, tmpvar_32.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_9.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_9.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_20.xy, tmpvar_20.zw);
  detail_7 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_21 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_42.w, mix (clamp (((_FadeScale * sqrt(dot (p_43, p_43))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_12.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_12.xyz = (tmpvar_42.xyz * tmpvar_51);
  lowp float tmpvar_52;
  tmpvar_52 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (color_12.w * clamp ((_InvFade * (tmpvar_53 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_54;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_11.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_11.y);
  mediump vec4 tex_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_23, tmpvar_30.xy, tmpvar_30.zw);
  tex_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_13);
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_32.x) - tmpvar_32.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_32.zxy, tmpvar_32, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_32.y) - mix (tmpvar_32.z, tmpvar_32.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (detailCoords_9, tmpvar_32.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_9.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_9.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_20.xy, tmpvar_20.zw);
  detail_7 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_21 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_42.w, mix (clamp (((_FadeScale * sqrt(dot (p_43, p_43))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_12.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_12.xyz = (tmpvar_42.xyz * tmpvar_51);
  lowp float tmpvar_52;
  tmpvar_52 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (color_12.w * clamp ((_InvFade * (tmpvar_53 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_54;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 353
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 450
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 443
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 363
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 376
#line 384
#line 398
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 431
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 435
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 439
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 463
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 463
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 467
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 471
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objNormal);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 475
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 479
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec4(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 353
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 450
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 443
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 363
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 376
#line 384
#line 398
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 431
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 435
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 439
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 463
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 481
lowp vec4 frag( in v2f IN ) {
    #line 483
    mediump vec4 color;
    highp vec3 objNrm = vec3( normalize(IN.objDetail));
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 487
    uv.y = (0.31831 * acos(objNrm.y));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objNormal));
    objNrm = abs(objNrm);
    #line 491
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    #line 495
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * _DetailScale), uvdd.xy, uvdd.zw);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 499
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 503
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 507
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 511
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 515
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec4(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  vec4 o_6;
  vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2).xyz;
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_1.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_1.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4.xyz);
  vec2 uv_12;
  float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    float s_15;
    float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_3);
  float tmpvar_21;
  tmpvar_21 = clamp (floor(((1.0 + tmpvar_20.x) - tmpvar_20.z)), 0.0, 1.0);
  vec3 tmpvar_22;
  tmpvar_22 = mix (mix (tmpvar_20.zxy, tmpvar_20, vec3(tmpvar_21)), tmpvar_20.yxz, vec3(clamp (floor(((1.0 + tmpvar_20.y) - mix (tmpvar_20.z, tmpvar_20.x, tmpvar_21))), 0.0, 1.0)));
  vec3 p_23;
  p_23 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DGradARB (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_22.zy) / abs(tmpvar_22.x)) * _DetailScale), tmpvar_10.xy, tmpvar_10.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_23, p_23))), 0.0, 1.0))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_26;
  p_26 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_24.w, mix (clamp (((_FadeScale * sqrt(dot (p_25, p_25))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_26, p_26)) - (_RimDistSub * sqrt(dot (p_27, p_27))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_24.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_ProjectionParams]
Vector 22 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_MainRotation]
Matrix 16 [_DetailRotation]
"vs_3_0
; 37 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord8 o7
def c23, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
mov r1.w, r0
dp4 r1.y, v0, c5
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r4.xyz, r2, -r0
dp3 r1.x, r4, r4
rsq r1.z, r1.x
dp4 r1.x, v0, c4
mul r3.xyz, r1.xyww, c23.x
mul r3.y, r3, c21.x
mul o4.xyz, r1.z, r4
dp4 r1.z, v0, c6
mov o0, r1
mad o7.xy, r3.z, c22.zwzw, r3
add r3.xyz, -r2, c20
dp3 r2.w, r3, r3
rsq r2.w, r2.w
dp4 r1.x, v0, c12
dp4 r1.w, v0, c15
dp4 r1.z, v0, c14
dp4 r1.y, v0, c13
dp4 o3.w, -r1, c19
dp4 o3.z, -r1, c18
dp4 o3.y, -r1, c17
dp4 o3.x, -r1, c16
mov o5, -r1
dp4 r1.x, v0, c2
mul o6.xyz, r2.w, r3
mov o1.xyz, r2
mov o2.xyz, r0
mov o7.z, -r1.x
mov o7.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 240 // 144 used size, 16 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 38 instructions, 4 temp regs, 0 temp arrays:
// ALU 32 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedjfboohcajnhbpggbojkfbjjoiicgnlgoabaaaaaabaahaaaaadaaaaaa
cmaaaaaajmaaaaaaieabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaneaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaneaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaneaaaaaaaiaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcieafaaaaeaaaabaagbabaaaafjaaaaaeegiocaaaaaaaaaaa
ajaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaagiaaaaacaeaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaa
dgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaaacaaaaaa
egiccaaaacaaaaaaapaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
abaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaadaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaaegaobaaa
acaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaa
aaaaaaaaagaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaafaaaaaa
agaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaa
egiocaaaaaaaaaaaahaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaa
acaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaafaaaaaaegaobaiaebaaaaaa
acaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
hccabaaaaeaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaa
afaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaaahaaaaaadkaabaaaaaaaaaaa
aaaaaaahdccabaaaahaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaai
bcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaacaaaaaaafaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaacaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaagaaaaaackbabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaa
ahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaahaaaaaa
akaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_11.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_11.y);
  mediump vec4 tex_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_23, tmpvar_30.xy, tmpvar_30.zw);
  tex_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_13);
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_32.x) - tmpvar_32.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_32.zxy, tmpvar_32, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_32.y) - mix (tmpvar_32.z, tmpvar_32.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (detailCoords_9, tmpvar_32.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_9.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_9.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_20.xy, tmpvar_20.zw);
  detail_7 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_21 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_42.w, mix (clamp (((_FadeScale * sqrt(dot (p_43, p_43))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_12.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_12.xyz = (tmpvar_42.xyz * tmpvar_51);
  lowp float tmpvar_52;
  tmpvar_52 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (color_12.w * clamp ((_InvFade * (tmpvar_53 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_54;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_11.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_11.y);
  mediump vec4 tex_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_23, tmpvar_30.xy, tmpvar_30.zw);
  tex_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_13);
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_32.x) - tmpvar_32.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_32.zxy, tmpvar_32, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_32.y) - mix (tmpvar_32.z, tmpvar_32.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (detailCoords_9, tmpvar_32.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_9.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_9.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_20.xy, tmpvar_20.zw);
  detail_7 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_21 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_42.w, mix (clamp (((_FadeScale * sqrt(dot (p_43, p_43))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_12.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_12.xyz = (tmpvar_42.xyz * tmpvar_51);
  lowp float tmpvar_52;
  tmpvar_52 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (color_12.w * clamp ((_InvFade * (tmpvar_53 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_54;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 351
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 448
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec4 projPos;
};
#line 441
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 361
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 374
#line 382
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 429
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 433
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 437
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 460
#line 477
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 460
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 464
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 468
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objNormal);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 472
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec4(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 351
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 448
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec4 projPos;
};
#line 441
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 361
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 374
#line 382
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 429
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 433
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 437
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 460
#line 477
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 477
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 objNrm = vec3( normalize(IN.objDetail));
    #line 481
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    uv.y = (0.31831 * acos(objNrm.y));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    #line 485
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objNormal));
    objNrm = abs(objNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    #line 489
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * _DetailScale), uvdd.xy, uvdd.zw);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 493
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 497
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 501
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 505
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    #line 509
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    #line 513
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec4(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  vec4 o_6;
  vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2).xyz;
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_1.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_1.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4.xyz);
  vec2 uv_12;
  float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    float s_15;
    float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_3);
  float tmpvar_21;
  tmpvar_21 = clamp (floor(((1.0 + tmpvar_20.x) - tmpvar_20.z)), 0.0, 1.0);
  vec3 tmpvar_22;
  tmpvar_22 = mix (mix (tmpvar_20.zxy, tmpvar_20, vec3(tmpvar_21)), tmpvar_20.yxz, vec3(clamp (floor(((1.0 + tmpvar_20.y) - mix (tmpvar_20.z, tmpvar_20.x, tmpvar_21))), 0.0, 1.0)));
  vec3 p_23;
  p_23 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DGradARB (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_22.zy) / abs(tmpvar_22.x)) * _DetailScale), tmpvar_10.xy, tmpvar_10.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_23, p_23))), 0.0, 1.0))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_26;
  p_26 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_24.w, mix (clamp (((_FadeScale * sqrt(dot (p_25, p_25))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_26, p_26)) - (_RimDistSub * sqrt(dot (p_27, p_27))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_24.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_MainRotation]
Matrix 16 [_DetailRotation]
Matrix 20 [_LightMatrix0]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c27, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
mov r1.w, r0
dp4 r1.y, v0, c5
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r4.xyz, r2, -r0
dp3 r1.x, r4, r4
rsq r1.z, r1.x
dp4 r1.x, v0, c4
mul r3.xyz, r1.xyww, c27.x
mul r3.y, r3, c25.x
mul o4.xyz, r1.z, r4
dp4 r1.z, v0, c6
mov o0, r1
mad o8.xy, r3.z, c26.zwzw, r3
add r3.xyz, -r2, c24
dp3 r2.w, r3, r3
rsq r2.w, r2.w
dp4 r1.w, v0, c15
dp4 r1.z, v0, c14
dp4 r1.x, v0, c12
dp4 r1.y, v0, c13
dp4 o3.w, -r1, c19
dp4 o3.z, -r1, c18
dp4 o3.y, -r1, c17
dp4 o3.x, -r1, c16
mov o5, -r1
mov r1.xyz, r2
dp4 r1.w, v0, c11
dp4 o7.w, r1, c23
dp4 o7.z, r1, c22
dp4 o7.y, r1, c21
dp4 o7.x, r1, c20
dp4 r1.x, v0, c2
mul o6.xyz, r2.w, r3
mov o1.xyz, r2
mov o2.xyz, r0
mov o8.z, -r1.x
mov o8.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 208 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 144 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 46 instructions, 4 temp regs, 0 temp arrays:
// ALU 40 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddcbmdmekgkomgbpcfnpjnfjlbipbjcfnabaaaaaageaiaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
maagaaaaeaaaabaalaabaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaa
acaaaaaaegiccaaaacaaaaaaapaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaa
aaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaabaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaa
acaaaaaaegiocaaaaaaaaaaaadaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaa
egaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaa
egiocaaaaaaaaaaaagaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaa
afaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaa
adaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaia
ebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaafaaaaaaegaobaia
ebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaia
ebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaiaebaaaaaa
abaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaaeaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaipcaabaaaacaaaaaafgafbaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaaabaaaaaa
egaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaa
kgakbaaaabaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaahaaaaaaegiocaaa
aaaaaaaaamaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaaiccaabaaa
aaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaa
abaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadp
dgaaaaaficcabaaaaiaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaaiaaaaaa
kgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaa
aaaaaaaackiacaaaacaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaacaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaahaaaaaadkbabaaaaaaaaaaa
akaabaaaaaaaaaaadgaaaaageccabaaaaiaaaaaaakaabaiaebaaaaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_11.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_11.y);
  mediump vec4 tex_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_23, tmpvar_30.xy, tmpvar_30.zw);
  tex_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_13);
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_32.x) - tmpvar_32.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_32.zxy, tmpvar_32, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_32.y) - mix (tmpvar_32.z, tmpvar_32.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (detailCoords_9, tmpvar_32.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_9.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_9.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_20.xy, tmpvar_20.zw);
  detail_7 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_21 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_42.w, mix (clamp (((_FadeScale * sqrt(dot (p_43, p_43))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_12.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_12.xyz = (tmpvar_42.xyz * tmpvar_51);
  lowp float tmpvar_52;
  tmpvar_52 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (color_12.w * clamp ((_InvFade * (tmpvar_53 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_54;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_11.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_11.y);
  mediump vec4 tex_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_23, tmpvar_30.xy, tmpvar_30.zw);
  tex_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_13);
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_32.x) - tmpvar_32.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_32.zxy, tmpvar_32, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_32.y) - mix (tmpvar_32.z, tmpvar_32.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (detailCoords_9, tmpvar_32.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_9.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_9.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_20.xy, tmpvar_20.zw);
  detail_7 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_21 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_42.w, mix (clamp (((_FadeScale * sqrt(dot (p_43, p_43))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_12.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_12.xyz = (tmpvar_42.xyz * tmpvar_51);
  lowp float tmpvar_52;
  tmpvar_52 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (color_12.w * clamp ((_InvFade * (tmpvar_53 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_54;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 362
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 459
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 projPos;
};
#line 452
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 353
uniform sampler2D _LightTextureB0;
#line 358
#line 372
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 385
#line 393
#line 407
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 440
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 444
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 448
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 472
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 472
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 476
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 480
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objNormal);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 484
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 488
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec4(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 362
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 459
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 projPos;
};
#line 452
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 353
uniform sampler2D _LightTextureB0;
#line 358
#line 372
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 385
#line 393
#line 407
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 440
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 444
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 448
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 472
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 490
lowp vec4 frag( in v2f IN ) {
    #line 492
    mediump vec4 color;
    highp vec3 objNrm = vec3( normalize(IN.objDetail));
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 496
    uv.y = (0.31831 * acos(objNrm.y));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objNormal));
    objNrm = abs(objNrm);
    #line 500
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    #line 504
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * _DetailScale), uvdd.xy, uvdd.zw);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 508
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 512
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 516
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 520
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 524
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec4(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  vec4 o_6;
  vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2).xyz;
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_1.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_1.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4.xyz);
  vec2 uv_12;
  float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    float s_15;
    float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_3);
  float tmpvar_21;
  tmpvar_21 = clamp (floor(((1.0 + tmpvar_20.x) - tmpvar_20.z)), 0.0, 1.0);
  vec3 tmpvar_22;
  tmpvar_22 = mix (mix (tmpvar_20.zxy, tmpvar_20, vec3(tmpvar_21)), tmpvar_20.yxz, vec3(clamp (floor(((1.0 + tmpvar_20.y) - mix (tmpvar_20.z, tmpvar_20.x, tmpvar_21))), 0.0, 1.0)));
  vec3 p_23;
  p_23 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DGradARB (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_22.zy) / abs(tmpvar_22.x)) * _DetailScale), tmpvar_10.xy, tmpvar_10.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_23, p_23))), 0.0, 1.0))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_26;
  p_26 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_24.w, mix (clamp (((_FadeScale * sqrt(dot (p_25, p_25))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_26, p_26)) - (_RimDistSub * sqrt(dot (p_27, p_27))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_24.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_MainRotation]
Matrix 16 [_DetailRotation]
Matrix 20 [_LightMatrix0]
"vs_3_0
; 42 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c27, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
mov r1.w, r0
dp4 r1.y, v0, c5
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r4.xyz, r2, -r0
dp3 r1.x, r4, r4
rsq r1.z, r1.x
dp4 r1.x, v0, c4
mul r3.xyz, r1.xyww, c27.x
mul r3.y, r3, c25.x
mul o4.xyz, r1.z, r4
dp4 r1.z, v0, c6
mov o0, r1
mad o8.xy, r3.z, c26.zwzw, r3
add r3.xyz, -r2, c24
dp3 r2.w, r3, r3
rsq r2.w, r2.w
dp4 r1.w, v0, c15
dp4 r1.z, v0, c14
dp4 r1.x, v0, c12
dp4 r1.y, v0, c13
dp4 o3.w, -r1, c19
dp4 o3.z, -r1, c18
dp4 o3.y, -r1, c17
dp4 o3.x, -r1, c16
mov o5, -r1
mov r1.xyz, r2
dp4 r1.w, v0, c11
dp4 o7.z, r1, c22
dp4 o7.y, r1, c21
dp4 o7.x, r1, c20
dp4 r1.x, v0, c2
mul o6.xyz, r2.w, r3
mov o1.xyz, r2
mov o2.xyz, r0
mov o8.z, -r1.x
mov o8.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 208 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 144 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 46 instructions, 4 temp regs, 0 temp arrays:
// ALU 40 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedjgeddjgdjlhakdjefohhpbfgohpdlebiabaaaaaageaiaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
maagaaaaeaaaabaalaabaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaadhccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaa
acaaaaaaegiccaaaacaaaaaaapaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaa
aaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaabaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaa
acaaaaaaegiocaaaaaaaaaaaadaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaa
egaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaa
egiocaaaaaaaaaaaagaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaa
afaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaa
adaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaia
ebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaafaaaaaaegaobaia
ebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaia
ebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaiaebaaaaaa
abaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaaeaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaaaaaaaaaaakaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaajaaaaaaagaabaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaalaaaaaa
kgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaaahaaaaaaegiccaaa
aaaaaaaaamaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaa
aaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaa
abaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadp
dgaaaaaficcabaaaaiaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaaiaaaaaa
kgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaa
aaaaaaaackiacaaaacaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaacaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaahaaaaaadkbabaaaaaaaaaaa
akaabaaaaaaaaaaadgaaaaageccabaaaaiaaaaaaakaabaiaebaaaaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_11.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_11.y);
  mediump vec4 tex_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_23, tmpvar_30.xy, tmpvar_30.zw);
  tex_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_13);
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_32.x) - tmpvar_32.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_32.zxy, tmpvar_32, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_32.y) - mix (tmpvar_32.z, tmpvar_32.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (detailCoords_9, tmpvar_32.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_9.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_9.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_20.xy, tmpvar_20.zw);
  detail_7 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_21 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_42.w, mix (clamp (((_FadeScale * sqrt(dot (p_43, p_43))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_12.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_12.xyz = (tmpvar_42.xyz * tmpvar_51);
  lowp float tmpvar_52;
  tmpvar_52 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (color_12.w * clamp ((_InvFade * (tmpvar_53 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_54;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_11.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_11.y);
  mediump vec4 tex_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_23, tmpvar_30.xy, tmpvar_30.zw);
  tex_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_13);
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_32.x) - tmpvar_32.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_32.zxy, tmpvar_32, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_32.y) - mix (tmpvar_32.z, tmpvar_32.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (detailCoords_9, tmpvar_32.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_9.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_9.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_20.xy, tmpvar_20.zw);
  detail_7 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_21 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_42.w, mix (clamp (((_FadeScale * sqrt(dot (p_43, p_43))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_12.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_12.xyz = (tmpvar_42.xyz * tmpvar_51);
  lowp float tmpvar_52;
  tmpvar_52 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (color_12.w * clamp ((_InvFade * (tmpvar_53 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_54;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 354
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 451
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 444
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 353
uniform sampler2D _LightTextureB0;
#line 364
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 377
#line 385
#line 399
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 432
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 436
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 440
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 464
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 464
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 468
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 472
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objNormal);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 476
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 480
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec4(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 354
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 451
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 444
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 353
uniform sampler2D _LightTextureB0;
#line 364
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 377
#line 385
#line 399
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 432
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 436
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 440
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 464
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 482
lowp vec4 frag( in v2f IN ) {
    #line 484
    mediump vec4 color;
    highp vec3 objNrm = vec3( normalize(IN.objDetail));
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 488
    uv.y = (0.31831 * acos(objNrm.y));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objNormal));
    objNrm = abs(objNrm);
    #line 492
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    #line 496
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * _DetailScale), uvdd.xy, uvdd.zw);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 500
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 504
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 508
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 512
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 516
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec4(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  vec4 o_6;
  vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2).xyz;
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_1.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_1.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4.xyz);
  vec2 uv_12;
  float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    float s_15;
    float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_3);
  float tmpvar_21;
  tmpvar_21 = clamp (floor(((1.0 + tmpvar_20.x) - tmpvar_20.z)), 0.0, 1.0);
  vec3 tmpvar_22;
  tmpvar_22 = mix (mix (tmpvar_20.zxy, tmpvar_20, vec3(tmpvar_21)), tmpvar_20.yxz, vec3(clamp (floor(((1.0 + tmpvar_20.y) - mix (tmpvar_20.z, tmpvar_20.x, tmpvar_21))), 0.0, 1.0)));
  vec3 p_23;
  p_23 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DGradARB (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_22.zy) / abs(tmpvar_22.x)) * _DetailScale), tmpvar_10.xy, tmpvar_10.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_23, p_23))), 0.0, 1.0))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_26;
  p_26 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_24.w, mix (clamp (((_FadeScale * sqrt(dot (p_25, p_25))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_26, p_26)) - (_RimDistSub * sqrt(dot (p_27, p_27))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_24.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_MainRotation]
Matrix 16 [_DetailRotation]
Matrix 20 [_LightMatrix0]
"vs_3_0
; 41 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c27, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
mov r1.w, r0
dp4 r1.y, v0, c5
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r4.xyz, r2, -r0
dp3 r1.x, r4, r4
rsq r1.z, r1.x
dp4 r1.x, v0, c4
mul r3.xyz, r1.xyww, c27.x
mul r3.y, r3, c25.x
mul o4.xyz, r1.z, r4
dp4 r1.z, v0, c6
mov o0, r1
mad o8.xy, r3.z, c26.zwzw, r3
add r3.xyz, -r2, c24
dp3 r2.w, r3, r3
rsq r2.w, r2.w
dp4 r1.w, v0, c15
dp4 r1.z, v0, c14
dp4 r1.x, v0, c12
dp4 r1.y, v0, c13
dp4 o3.w, -r1, c19
dp4 o3.z, -r1, c18
dp4 o3.y, -r1, c17
dp4 o3.x, -r1, c16
mov o5, -r1
mov r1.xyz, r2
dp4 r1.w, v0, c11
dp4 o7.y, r1, c21
dp4 o7.x, r1, c20
dp4 r1.x, v0, c2
mul o6.xyz, r2.w, r3
mov o1.xyz, r2
mov o2.xyz, r0
mov o8.z, -r1.x
mov o8.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 208 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 144 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 46 instructions, 4 temp regs, 0 temp arrays:
// ALU 40 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedinincjdgcbgodleheifjiccaepjaeglkabaaaaaageaiaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaadamaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
maagaaaaeaaaabaalaabaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaaddccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaa
acaaaaaaegiccaaaacaaaaaaapaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaa
aaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaabaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaa
acaaaaaaegiocaaaaaaaaaaaadaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaa
egaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaa
egiocaaaaaaaaaaaagaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaa
afaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaa
adaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaia
ebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaafaaaaaaegaobaia
ebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaia
ebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaiaebaaaaaa
abaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaaeaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaidcaabaaaacaaaaaafgafbaaaabaaaaaaegiacaaaaaaaaaaaakaaaaaa
dcaaaaakdcaabaaaabaaaaaaegiacaaaaaaaaaaaajaaaaaaagaabaaaabaaaaaa
egaabaaaacaaaaaadcaaaaakdcaabaaaabaaaaaaegiacaaaaaaaaaaaalaaaaaa
kgakbaaaabaaaaaaegaabaaaabaaaaaadcaaaaakdccabaaaahaaaaaaegiacaaa
aaaaaaaaamaaaaaapgapbaaaabaaaaaaegaabaaaabaaaaaadiaaaaaiccaabaaa
aaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaa
abaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadp
dgaaaaaficcabaaaaiaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaaiaaaaaa
kgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaa
aaaaaaaackiacaaaacaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaacaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaahaaaaaadkbabaaaaaaaaaaa
akaabaaaaaaaaaaadgaaaaageccabaaaaiaaaaaaakaabaiaebaaaaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_11.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_11.y);
  mediump vec4 tex_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_23, tmpvar_30.xy, tmpvar_30.zw);
  tex_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_13);
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_32.x) - tmpvar_32.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_32.zxy, tmpvar_32, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_32.y) - mix (tmpvar_32.z, tmpvar_32.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (detailCoords_9, tmpvar_32.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_9.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_9.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_20.xy, tmpvar_20.zw);
  detail_7 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_21 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_42.w, mix (clamp (((_FadeScale * sqrt(dot (p_43, p_43))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_12.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_12.xyz = (tmpvar_42.xyz * tmpvar_51);
  lowp float tmpvar_52;
  tmpvar_52 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (color_12.w * clamp ((_InvFade * (tmpvar_53 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_54;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_11.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_11.y);
  mediump vec4 tex_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_23, tmpvar_30.xy, tmpvar_30.zw);
  tex_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_13);
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_32.x) - tmpvar_32.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_32.zxy, tmpvar_32, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_32.y) - mix (tmpvar_32.z, tmpvar_32.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (detailCoords_9, tmpvar_32.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_9.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_9.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_20.xy, tmpvar_20.zw);
  detail_7 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_21 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_42.w, mix (clamp (((_FadeScale * sqrt(dot (p_43, p_43))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_12.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_12.xyz = (tmpvar_42.xyz * tmpvar_51);
  lowp float tmpvar_52;
  tmpvar_52 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (color_12.w * clamp ((_InvFade * (tmpvar_53 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_54;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 353
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 450
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 projPos;
};
#line 443
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 363
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 376
#line 384
#line 398
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 431
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 435
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 439
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 463
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 463
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 467
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 471
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objNormal);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 475
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 479
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec4(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 353
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 450
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 projPos;
};
#line 443
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 363
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 376
#line 384
#line 398
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 431
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 435
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 439
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 463
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 481
lowp vec4 frag( in v2f IN ) {
    #line 483
    mediump vec4 color;
    highp vec3 objNrm = vec3( normalize(IN.objDetail));
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 487
    uv.y = (0.31831 * acos(objNrm.y));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objNormal));
    objNrm = abs(objNrm);
    #line 491
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    #line 495
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * _DetailScale), uvdd.xy, uvdd.zw);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 499
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 503
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 507
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 511
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 515
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec4(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform mat4 unity_World2Shadow[4];
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  vec4 o_6;
  vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2).xyz;
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_1.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_1.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4.xyz);
  vec2 uv_12;
  float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    float s_15;
    float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_3);
  float tmpvar_21;
  tmpvar_21 = clamp (floor(((1.0 + tmpvar_20.x) - tmpvar_20.z)), 0.0, 1.0);
  vec3 tmpvar_22;
  tmpvar_22 = mix (mix (tmpvar_20.zxy, tmpvar_20, vec3(tmpvar_21)), tmpvar_20.yxz, vec3(clamp (floor(((1.0 + tmpvar_20.y) - mix (tmpvar_20.z, tmpvar_20.x, tmpvar_21))), 0.0, 1.0)));
  vec3 p_23;
  p_23 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DGradARB (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_22.zy) / abs(tmpvar_22.x)) * _DetailScale), tmpvar_10.xy, tmpvar_10.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_23, p_23))), 0.0, 1.0))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_26;
  p_26 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_24.w, mix (clamp (((_FadeScale * sqrt(dot (p_25, p_25))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_26, p_26)) - (_RimDistSub * sqrt(dot (p_27, p_27))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_24.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 28 [_WorldSpaceCameraPos]
Vector 29 [_ProjectionParams]
Vector 30 [_ScreenParams]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Matrix 24 [_LightMatrix0]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c31, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c14
dp4 r2.y, v0, c13
dp4 r2.x, v0, c12
mov r1.w, r0
dp4 r1.y, v0, c5
mov r0.z, c14.w
mov r0.x, c12.w
mov r0.y, c13.w
add r4.xyz, r2, -r0
dp3 r1.x, r4, r4
rsq r1.z, r1.x
dp4 r1.x, v0, c4
mul r3.xyz, r1.xyww, c31.x
mul r3.y, r3, c29.x
mul o4.xyz, r1.z, r4
dp4 r1.z, v0, c6
mov o0, r1
mad o9.xy, r3.z, c30.zwzw, r3
add r3.xyz, -r2, c28
dp3 r2.w, r3, r3
rsq r2.w, r2.w
dp4 r1.w, v0, c19
dp4 r1.z, v0, c18
dp4 r1.x, v0, c16
dp4 r1.y, v0, c17
dp4 o3.w, -r1, c23
dp4 o3.z, -r1, c22
dp4 o3.y, -r1, c21
dp4 o3.x, -r1, c20
mov o5, -r1
mov r1.xyz, r2
dp4 r1.w, v0, c15
dp4 o7.w, r1, c27
dp4 o7.z, r1, c26
dp4 o7.y, r1, c25
dp4 o7.x, r1, c24
dp4 o8.w, r1, c11
dp4 o8.z, r1, c10
dp4 o8.y, r1, c9
dp4 o8.x, r1, c8
dp4 r1.x, v0, c2
mul o6.xyz, r2.w, r3
mov o1.xyz, r2
mov o2.xyz, r0
mov o9.z, -r1.x
mov o9.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 208 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 144 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 50 instructions, 4 temp regs, 0 temp arrays:
// ALU 44 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddpbniplodfefcfjmbakdcdhojhghmncaabaaaaaadaajaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcheahaaaaeaaaabaa
nnabaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaamaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaadaaaaaa
apaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaa
aaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
adaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaaj
pcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaagaaaaaa
dcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaa
acaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadgaaaaagpccabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaadaaaaaaapaaaaaa
aaaaaaajhcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaaeaaaaaa
kgakbaaaaaaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaabaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaacaaaaaa
fgafbaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaajaaaaaaagaabaaaabaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaaabaaaaaaegaobaaa
acaaaaaadcaaaaakpccabaaaahaaaaaaegiocaaaaaaaaaaaamaaaaaapgapbaaa
abaaaaaaegaobaaaacaaaaaadiaaaaaipcaabaaaacaaaaaafgafbaaaabaaaaaa
egiocaaaacaaaaaaajaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaacaaaaaa
aiaaaaaaagaabaaaabaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaacaaaaaaakaaaaaakgakbaaaabaaaaaaegaobaaaacaaaaaadcaaaaak
pccabaaaaiaaaaaaegiocaaaacaaaaaaalaaaaaapgapbaaaabaaaaaaegaobaaa
acaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaa
afaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaaajaaaaaadkaabaaaaaaaaaaa
aaaaaaahdccabaaaajaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaai
bcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
ahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaa
akaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_11.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_11.y);
  mediump vec4 tex_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_23, tmpvar_30.xy, tmpvar_30.zw);
  tex_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_13);
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_32.x) - tmpvar_32.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_32.zxy, tmpvar_32, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_32.y) - mix (tmpvar_32.z, tmpvar_32.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (detailCoords_9, tmpvar_32.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_9.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_9.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_20.xy, tmpvar_20.zw);
  detail_7 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_21 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_42.w, mix (clamp (((_FadeScale * sqrt(dot (p_43, p_43))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_12.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_12.xyz = (tmpvar_42.xyz * tmpvar_51);
  lowp float tmpvar_52;
  tmpvar_52 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (color_12.w * clamp ((_InvFade * (tmpvar_53 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_54;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_11.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_11.y);
  mediump vec4 tex_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_23, tmpvar_30.xy, tmpvar_30.zw);
  tex_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_13);
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_32.x) - tmpvar_32.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_32.zxy, tmpvar_32, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_32.y) - mix (tmpvar_32.z, tmpvar_32.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (detailCoords_9, tmpvar_32.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_9.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_9.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_20.xy, tmpvar_20.zw);
  detail_7 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_21 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_42.w, mix (clamp (((_FadeScale * sqrt(dot (p_43, p_43))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_12.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_12.xyz = (tmpvar_42.xyz * tmpvar_51);
  lowp float tmpvar_52;
  tmpvar_52 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (color_12.w * clamp ((_InvFade * (tmpvar_53 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_54;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 368
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 465
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 458
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 358
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 378
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 391
#line 399
#line 413
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 446
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 450
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 454
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 479
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 479
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 483
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 487
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objNormal);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 491
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 496
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec4(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 368
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 465
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 458
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 358
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 378
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 391
#line 399
#line 413
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 446
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 450
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 454
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 479
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 498
lowp vec4 frag( in v2f IN ) {
    #line 500
    mediump vec4 color;
    highp vec3 objNrm = vec3( normalize(IN.objDetail));
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 504
    uv.y = (0.31831 * acos(objNrm.y));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objNormal));
    objNrm = abs(objNrm);
    #line 508
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    #line 512
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * _DetailScale), uvdd.xy, uvdd.zw);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 516
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 520
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 524
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 528
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 532
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec4(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform mat4 unity_World2Shadow[4];
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  vec4 o_6;
  vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2).xyz;
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_1.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_1.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4.xyz);
  vec2 uv_12;
  float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    float s_15;
    float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_3);
  float tmpvar_21;
  tmpvar_21 = clamp (floor(((1.0 + tmpvar_20.x) - tmpvar_20.z)), 0.0, 1.0);
  vec3 tmpvar_22;
  tmpvar_22 = mix (mix (tmpvar_20.zxy, tmpvar_20, vec3(tmpvar_21)), tmpvar_20.yxz, vec3(clamp (floor(((1.0 + tmpvar_20.y) - mix (tmpvar_20.z, tmpvar_20.x, tmpvar_21))), 0.0, 1.0)));
  vec3 p_23;
  p_23 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DGradARB (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_22.zy) / abs(tmpvar_22.x)) * _DetailScale), tmpvar_10.xy, tmpvar_10.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_23, p_23))), 0.0, 1.0))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_26;
  p_26 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_24.w, mix (clamp (((_FadeScale * sqrt(dot (p_25, p_25))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_26, p_26)) - (_RimDistSub * sqrt(dot (p_27, p_27))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_24.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 28 [_WorldSpaceCameraPos]
Vector 29 [_ProjectionParams]
Vector 30 [_ScreenParams]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Matrix 24 [_LightMatrix0]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c31, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c14
dp4 r2.y, v0, c13
dp4 r2.x, v0, c12
mov r1.w, r0
dp4 r1.y, v0, c5
mov r0.z, c14.w
mov r0.x, c12.w
mov r0.y, c13.w
add r4.xyz, r2, -r0
dp3 r1.x, r4, r4
rsq r1.z, r1.x
dp4 r1.x, v0, c4
mul r3.xyz, r1.xyww, c31.x
mul r3.y, r3, c29.x
mul o4.xyz, r1.z, r4
dp4 r1.z, v0, c6
mov o0, r1
mad o9.xy, r3.z, c30.zwzw, r3
add r3.xyz, -r2, c28
dp3 r2.w, r3, r3
rsq r2.w, r2.w
dp4 r1.w, v0, c19
dp4 r1.z, v0, c18
dp4 r1.x, v0, c16
dp4 r1.y, v0, c17
dp4 o3.w, -r1, c23
dp4 o3.z, -r1, c22
dp4 o3.y, -r1, c21
dp4 o3.x, -r1, c20
mov o5, -r1
mov r1.xyz, r2
dp4 r1.w, v0, c15
dp4 o7.w, r1, c27
dp4 o7.z, r1, c26
dp4 o7.y, r1, c25
dp4 o7.x, r1, c24
dp4 o8.w, r1, c11
dp4 o8.z, r1, c10
dp4 o8.y, r1, c9
dp4 o8.x, r1, c8
dp4 r1.x, v0, c2
mul o6.xyz, r2.w, r3
mov o1.xyz, r2
mov o2.xyz, r0
mov o9.z, -r1.x
mov o9.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 208 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 144 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 50 instructions, 4 temp regs, 0 temp arrays:
// ALU 44 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddpbniplodfefcfjmbakdcdhojhghmncaabaaaaaadaajaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcheahaaaaeaaaabaa
nnabaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaamaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaadaaaaaa
apaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaa
aaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
adaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaaj
pcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaagaaaaaa
dcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaa
acaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadgaaaaagpccabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaadaaaaaaapaaaaaa
aaaaaaajhcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaaeaaaaaa
kgakbaaaaaaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaabaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaacaaaaaa
fgafbaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaajaaaaaaagaabaaaabaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaaabaaaaaaegaobaaa
acaaaaaadcaaaaakpccabaaaahaaaaaaegiocaaaaaaaaaaaamaaaaaapgapbaaa
abaaaaaaegaobaaaacaaaaaadiaaaaaipcaabaaaacaaaaaafgafbaaaabaaaaaa
egiocaaaacaaaaaaajaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaacaaaaaa
aiaaaaaaagaabaaaabaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaacaaaaaaakaaaaaakgakbaaaabaaaaaaegaobaaaacaaaaaadcaaaaak
pccabaaaaiaaaaaaegiocaaaacaaaaaaalaaaaaapgapbaaaabaaaaaaegaobaaa
acaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaa
afaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaaajaaaaaadkaabaaaaaaaaaaa
aaaaaaahdccabaaaajaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaai
bcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
ahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaa
akaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_11.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_11.y);
  mediump vec4 tex_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_23, tmpvar_30.xy, tmpvar_30.zw);
  tex_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_13);
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_32.x) - tmpvar_32.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_32.zxy, tmpvar_32, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_32.y) - mix (tmpvar_32.z, tmpvar_32.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (detailCoords_9, tmpvar_32.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_9.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_9.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_20.xy, tmpvar_20.zw);
  detail_7 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_21 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_42.w, mix (clamp (((_FadeScale * sqrt(dot (p_43, p_43))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_12.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_12.xyz = (tmpvar_42.xyz * tmpvar_51);
  lowp float tmpvar_52;
  tmpvar_52 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (color_12.w * clamp ((_InvFade * (tmpvar_53 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_54;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 369
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 466
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 459
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 358
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 379
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 392
#line 400
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 447
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 451
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 455
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 480
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 480
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 484
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 488
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objNormal);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 492
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 497
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec4(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 369
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 466
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 459
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 358
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 379
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 392
#line 400
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 447
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 451
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 455
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 480
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 499
lowp vec4 frag( in v2f IN ) {
    #line 501
    mediump vec4 color;
    highp vec3 objNrm = vec3( normalize(IN.objDetail));
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 505
    uv.y = (0.31831 * acos(objNrm.y));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objNormal));
    objNrm = abs(objNrm);
    #line 509
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    #line 513
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * _DetailScale), uvdd.xy, uvdd.zw);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 517
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 521
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 525
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 529
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 533
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec4(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  vec4 o_6;
  vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  vec4 o_9;
  vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_2 * 0.5);
  vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = o_9;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2).xyz;
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_1.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_1.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4.xyz);
  vec2 uv_12;
  float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    float s_15;
    float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_3);
  float tmpvar_21;
  tmpvar_21 = clamp (floor(((1.0 + tmpvar_20.x) - tmpvar_20.z)), 0.0, 1.0);
  vec3 tmpvar_22;
  tmpvar_22 = mix (mix (tmpvar_20.zxy, tmpvar_20, vec3(tmpvar_21)), tmpvar_20.yxz, vec3(clamp (floor(((1.0 + tmpvar_20.y) - mix (tmpvar_20.z, tmpvar_20.x, tmpvar_21))), 0.0, 1.0)));
  vec3 p_23;
  p_23 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DGradARB (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_22.zy) / abs(tmpvar_22.x)) * _DetailScale), tmpvar_10.xy, tmpvar_10.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_23, p_23))), 0.0, 1.0))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_26;
  p_26 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_24.w, mix (clamp (((_FadeScale * sqrt(dot (p_25, p_25))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_26, p_26)) - (_RimDistSub * sqrt(dot (p_27, p_27))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_24.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_ProjectionParams]
Vector 22 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_MainRotation]
Matrix 16 [_DetailRotation]
"vs_3_0
; 40 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c23, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r2.w, v0, c7
mov r1.w, r2
dp4 r3.z, v0, c10
dp4 r3.y, v0, c9
dp4 r3.x, v0, c8
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.z, v0, c6
mov r2.z, c10.w
mov r2.x, c8.w
mov r2.y, c9.w
add r4.xyz, r3, -r2
dp3 r0.x, r4, r4
rsq r0.w, r0.x
mul r0.xyz, r1.xyww, c23.x
mul r0.y, r0, c21.x
mad r0.xy, r0.z, c22.zwzw, r0
mul o4.xyz, r0.w, r4
mov r0.zw, r1
mov o7, r0
mov o8.xy, r0
mov o0, r1
add r1.xyz, -r3, c20
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 r0.x, v0, c12
dp4 r0.w, v0, c15
dp4 r0.z, v0, c14
dp4 r0.y, v0, c13
dp4 o3.w, -r0, c19
dp4 o3.z, -r0, c18
dp4 o3.y, -r0, c17
dp4 o3.x, -r0, c16
mov o5, -r0
dp4 r0.x, v0, c2
mul o6.xyz, r1.w, r1
mov o1.xyz, r3
mov o2.xyz, r2
mov o8.z, -r0.x
mov o8.w, r2
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 144 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 40 instructions, 4 temp regs, 0 temp arrays:
// ALU 33 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedcnlejnhoejmllaoenomjpeiokenhefcdabaaaaaageahaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
maafaaaaeaaaabaahaabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaa
acaaaaaaegiccaaaacaaaaaaapaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaa
aaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaabaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaa
acaaaaaaegiocaaaaaaaaaaaadaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaa
egaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaa
egiocaaaaaaaaaaaagaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaa
afaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaa
adaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaia
ebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaafaaaaaaegaobaia
ebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaia
ebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaiaebaaaaaa
abaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhccabaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaabaaaaaa
egacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaabkaabaaaaaaaaaaaakiacaaa
abaaaaaaafaaaaaadiaaaaahicaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaaadpdiaaaaakfcaabaaaabaaaaaaagadbaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaaaaaaaaaadpaaaaaaaaaaaaaaahdcaabaaaaaaaaaaakgakbaaaabaaaaaa
mgaabaaaabaaaaaadgaaaaafpccabaaaahaaaaaaegaobaaaaaaaaaaadgaaaaaf
lccabaaaaiaaaaaaegambaaaaaaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaa
aaaaaaaackiacaaaacaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaacaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaahaaaaaadkbabaaaaaaaaaaa
akaabaaaaaaaaaaadgaaaaageccabaaaaiaaaaaaakaabaiaebaaaaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_11.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_11.y);
  mediump vec4 tex_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_23, tmpvar_30.xy, tmpvar_30.zw);
  tex_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_13);
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_32.x) - tmpvar_32.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_32.zxy, tmpvar_32, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_32.y) - mix (tmpvar_32.z, tmpvar_32.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (detailCoords_9, tmpvar_32.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_9.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_9.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_20.xy, tmpvar_20.zw);
  detail_7 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_21 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_42.w, mix (clamp (((_FadeScale * sqrt(dot (p_43, p_43))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_12.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_12.xyz = (tmpvar_42.xyz * tmpvar_51);
  lowp float tmpvar_52;
  tmpvar_52 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (color_12.w * clamp ((_InvFade * (tmpvar_53 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_54;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = o_9;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_11.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_11.y);
  mediump vec4 tex_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_23, tmpvar_30.xy, tmpvar_30.zw);
  tex_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_13);
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_32.x) - tmpvar_32.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_32.zxy, tmpvar_32, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_32.y) - mix (tmpvar_32.z, tmpvar_32.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (detailCoords_9, tmpvar_32.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_9.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_9.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_20.xy, tmpvar_20.zw);
  detail_7 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_21 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_42.w, mix (clamp (((_FadeScale * sqrt(dot (p_43, p_43))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_12.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_12.xyz = (tmpvar_42.xyz * tmpvar_51);
  lowp float tmpvar_52;
  tmpvar_52 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (color_12.w * clamp ((_InvFade * (tmpvar_53 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_54;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 359
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 456
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 449
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 353
#line 369
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 382
#line 390
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 437
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 441
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 445
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 469
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 469
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 473
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 477
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objNormal);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 481
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 485
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec4(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 359
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 456
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 449
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 353
#line 369
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 382
#line 390
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 437
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 441
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 445
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 469
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 487
lowp vec4 frag( in v2f IN ) {
    #line 489
    mediump vec4 color;
    highp vec3 objNrm = vec3( normalize(IN.objDetail));
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 493
    uv.y = (0.31831 * acos(objNrm.y));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objNormal));
    objNrm = abs(objNrm);
    #line 497
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    #line 501
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * _DetailScale), uvdd.xy, uvdd.zw);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 505
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 509
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 513
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 517
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 521
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec4(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  vec4 o_6;
  vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  vec4 o_9;
  vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_2 * 0.5);
  vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD7 = o_9;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2).xyz;
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_1.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_1.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4.xyz);
  vec2 uv_12;
  float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    float s_15;
    float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_3);
  float tmpvar_21;
  tmpvar_21 = clamp (floor(((1.0 + tmpvar_20.x) - tmpvar_20.z)), 0.0, 1.0);
  vec3 tmpvar_22;
  tmpvar_22 = mix (mix (tmpvar_20.zxy, tmpvar_20, vec3(tmpvar_21)), tmpvar_20.yxz, vec3(clamp (floor(((1.0 + tmpvar_20.y) - mix (tmpvar_20.z, tmpvar_20.x, tmpvar_21))), 0.0, 1.0)));
  vec3 p_23;
  p_23 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DGradARB (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_22.zy) / abs(tmpvar_22.x)) * _DetailScale), tmpvar_10.xy, tmpvar_10.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_23, p_23))), 0.0, 1.0))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_26;
  p_26 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_24.w, mix (clamp (((_FadeScale * sqrt(dot (p_25, p_25))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_26, p_26)) - (_RimDistSub * sqrt(dot (p_27, p_27))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_24.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_MainRotation]
Matrix 16 [_DetailRotation]
Matrix 20 [_LightMatrix0]
"vs_3_0
; 44 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c27, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r2.w, v0, c7
dp4 r3.z, v0, c10
dp4 r3.y, v0, c9
dp4 r3.x, v0, c8
mov r1.w, r2
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.z, v0, c6
mov r2.z, c10.w
mov r2.x, c8.w
mov r2.y, c9.w
add r4.xyz, r3, -r2
dp3 r0.x, r4, r4
rsq r0.w, r0.x
mul r0.xyz, r1.xyww, c27.x
mul r0.y, r0, c25.x
mad r0.xy, r0.z, c26.zwzw, r0
mul o4.xyz, r0.w, r4
mov r0.zw, r1
mov o8, r0
mov o9.xy, r0
mov o0, r1
add r1.xyz, -r3, c24
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 r0.w, v0, c15
dp4 r0.z, v0, c14
dp4 r0.x, v0, c12
dp4 r0.y, v0, c13
dp4 o3.w, -r0, c19
dp4 o3.z, -r0, c18
dp4 o3.y, -r0, c17
dp4 o3.x, -r0, c16
mov o5, -r0
mov r0.xyz, r3
dp4 r0.w, v0, c11
dp4 o7.y, r0, c21
dp4 o7.x, r0, c20
dp4 r0.x, v0, c2
mul o6.xyz, r1.w, r1
mov o1.xyz, r3
mov o2.xyz, r2
mov o9.z, -r0.x
mov o9.w, r2
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 368 // 272 used size, 18 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 208 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 48 instructions, 4 temp regs, 0 temp arrays:
// ALU 41 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedplpiokfkbpmhbmefepmgideffmbakfebabaaaaaaliaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaadamaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcpmagaaaaeaaaabaa
lpabaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaa
gfaaaaadpccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagfaaaaaddccabaaa
ahaaaaaagfaaaaadpccabaaaaiaaaaaagfaaaaadpccabaaaajaaaaaagiaaaaac
aeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaaf
pccabaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaa
aaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaabaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaadgaaaaag
hccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaadiaaaaaipcaabaaaacaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaabaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaadaaaaaakgbkbaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaaeaaaaaapgbpbaaa
aaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaa
acaaaaaaegiocaaaaaaaaaaaagaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaa
aaaaaaaaafaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaiaaaaaa
pgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaafaaaaaa
egaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaa
egiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaa
baaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaa
abaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaidcaabaaaacaaaaaafgafbaaaabaaaaaaegiacaaaaaaaaaaa
aoaaaaaadcaaaaakdcaabaaaabaaaaaaegiacaaaaaaaaaaaanaaaaaaagaabaaa
abaaaaaaegaabaaaacaaaaaadcaaaaakdcaabaaaabaaaaaaegiacaaaaaaaaaaa
apaaaaaakgakbaaaabaaaaaaegaabaaaabaaaaaadcaaaaakdccabaaaahaaaaaa
egiacaaaaaaaaaaabaaaaaaapgapbaaaabaaaaaaegaabaaaabaaaaaadiaaaaai
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaah
icaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaadpdiaaaaakfcaabaaa
abaaaaaaagadbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaaaa
aaaaaaahdcaabaaaaaaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadgaaaaaf
pccabaaaaiaaaaaaegaobaaaaaaaaaaadgaaaaaflccabaaaajaaaaaaegambaaa
aaaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaacaaaaaa
afaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaaeaaaaaaakbabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaa
agaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaacaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaag
eccabaaaajaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_11.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_11.y);
  mediump vec4 tex_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_23, tmpvar_30.xy, tmpvar_30.zw);
  tex_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_13);
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_32.x) - tmpvar_32.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_32.zxy, tmpvar_32, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_32.y) - mix (tmpvar_32.z, tmpvar_32.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (detailCoords_9, tmpvar_32.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_9.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_9.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_20.xy, tmpvar_20.zw);
  detail_7 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_21 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_42.w, mix (clamp (((_FadeScale * sqrt(dot (p_43, p_43))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_12.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_12.xyz = (tmpvar_42.xyz * tmpvar_51);
  lowp float tmpvar_52;
  tmpvar_52 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (color_12.w * clamp ((_InvFade * (tmpvar_53 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_54;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD7 = o_9;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_11.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_11.y);
  mediump vec4 tex_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_23, tmpvar_30.xy, tmpvar_30.zw);
  tex_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_13);
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_32.x) - tmpvar_32.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_32.zxy, tmpvar_32, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_32.y) - mix (tmpvar_32.z, tmpvar_32.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (detailCoords_9, tmpvar_32.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_9.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_9.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_20.xy, tmpvar_20.zw);
  detail_7 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_21 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_42.w, mix (clamp (((_FadeScale * sqrt(dot (p_43, p_43))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_12.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_12.xyz = (tmpvar_42.xyz * tmpvar_51);
  lowp float tmpvar_52;
  tmpvar_52 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (color_12.w * clamp ((_InvFade * (tmpvar_53 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_54;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 361
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 458
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 451
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 353
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 371
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 384
#line 392
#line 406
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 439
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 443
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 447
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 472
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 472
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 476
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 480
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objNormal);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 484
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 489
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec4(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 361
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 458
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 451
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 353
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 371
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 384
#line 392
#line 406
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 439
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 443
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 447
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 472
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 491
lowp vec4 frag( in v2f IN ) {
    #line 493
    mediump vec4 color;
    highp vec3 objNrm = vec3( normalize(IN.objDetail));
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 497
    uv.y = (0.31831 * acos(objNrm.y));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objNormal));
    objNrm = abs(objNrm);
    #line 501
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    #line 505
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * _DetailScale), uvdd.xy, uvdd.zw);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 509
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 513
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 517
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 521
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 525
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec4(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform vec4 _LightPositionRange;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  vec4 o_6;
  vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2).xyz;
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_1.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_1.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4.xyz);
  vec2 uv_12;
  float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    float s_15;
    float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_3);
  float tmpvar_21;
  tmpvar_21 = clamp (floor(((1.0 + tmpvar_20.x) - tmpvar_20.z)), 0.0, 1.0);
  vec3 tmpvar_22;
  tmpvar_22 = mix (mix (tmpvar_20.zxy, tmpvar_20, vec3(tmpvar_21)), tmpvar_20.yxz, vec3(clamp (floor(((1.0 + tmpvar_20.y) - mix (tmpvar_20.z, tmpvar_20.x, tmpvar_21))), 0.0, 1.0)));
  vec3 p_23;
  p_23 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DGradARB (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_22.zy) / abs(tmpvar_22.x)) * _DetailScale), tmpvar_10.xy, tmpvar_10.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_23, p_23))), 0.0, 1.0))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_26;
  p_26 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_24.w, mix (clamp (((_FadeScale * sqrt(dot (p_25, p_25))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_26, p_26)) - (_RimDistSub * sqrt(dot (p_27, p_27))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_24.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_LightPositionRange]
Matrix 8 [_Object2World]
Matrix 12 [_MainRotation]
Matrix 16 [_DetailRotation]
Matrix 20 [_LightMatrix0]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c28, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
mov r0.x, c8.w
mov r1.w, r0
dp4 r1.y, v0, c5
mov r0.z, c10.w
mov r0.y, c9.w
add r4.xyz, r2, -r0
dp3 r1.x, r4, r4
rsq r1.z, r1.x
dp4 r1.x, v0, c4
mul r3.xyz, r1.xyww, c28.x
mul r3.y, r3, c25.x
mul o4.xyz, r1.z, r4
dp4 r1.z, v0, c6
mov o0, r1
mad o9.xy, r3.z, c26.zwzw, r3
add r3.xyz, -r2, c24
dp3 r2.w, r3, r3
rsq r2.w, r2.w
mov o2.xyz, r0
dp4 r0.x, v0, c2
dp4 r1.w, v0, c15
dp4 r1.z, v0, c14
dp4 r1.x, v0, c12
dp4 r1.y, v0, c13
dp4 o3.w, -r1, c19
dp4 o3.z, -r1, c18
dp4 o3.y, -r1, c17
dp4 o3.x, -r1, c16
mov o5, -r1
mov r1.xyz, r2
dp4 r1.w, v0, c11
mul o6.xyz, r2.w, r3
dp4 o7.z, r1, c22
dp4 o7.y, r1, c21
dp4 o7.x, r1, c20
mov o1.xyz, r2
add o8.xyz, r2, -c27
mov o9.z, -r0.x
mov o9.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 208 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 144 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 47 instructions, 4 temp regs, 0 temp arrays:
// ALU 41 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddnolklbibcbbbpcbefnoglppcmcgoamcabaaaaaalmaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahaiaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcaaahaaaaeaaaabaa
maabaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaadhccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaadaaaaaa
apaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaa
aaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
adaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaaj
pcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaagaaaaaa
dcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaa
acaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadgaaaaagpccabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaadaaaaaaapaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaaeaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaiaebaaaaaa
abaaaaaaegiccaaaabaaaaaaaeaaaaaaaaaaaaajhccabaaaaiaaaaaaegacbaaa
abaaaaaaegiccaiaebaaaaaaacaaaaaaabaaaaaabaaaaaahecaabaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahhccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaa
diaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaa
acaaaaaafgafbaaaabaaaaaaegiccaaaaaaaaaaaakaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaaaaaaaaaajaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaalaaaaaakgakbaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhccabaaaahaaaaaaegiccaaaaaaaaaaaamaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaa
aaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaa
ajaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaajaaaaaakgakbaaaabaaaaaa
mgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaa
adaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaa
akbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
adaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaa
dgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_11.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_11.y);
  mediump vec4 tex_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_23, tmpvar_30.xy, tmpvar_30.zw);
  tex_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_13);
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_32.x) - tmpvar_32.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_32.zxy, tmpvar_32, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_32.y) - mix (tmpvar_32.z, tmpvar_32.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (detailCoords_9, tmpvar_32.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_9.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_9.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_20.xy, tmpvar_20.zw);
  detail_7 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_21 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_42.w, mix (clamp (((_FadeScale * sqrt(dot (p_43, p_43))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_12.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_12.xyz = (tmpvar_42.xyz * tmpvar_51);
  lowp float tmpvar_52;
  tmpvar_52 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (color_12.w * clamp ((_InvFade * (tmpvar_53 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_54;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_11.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_11.y);
  mediump vec4 tex_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_23, tmpvar_30.xy, tmpvar_30.zw);
  tex_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_13);
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_32.x) - tmpvar_32.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_32.zxy, tmpvar_32, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_32.y) - mix (tmpvar_32.z, tmpvar_32.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (detailCoords_9, tmpvar_32.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_9.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_9.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_20.xy, tmpvar_20.zw);
  detail_7 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_21 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_42.w, mix (clamp (((_FadeScale * sqrt(dot (p_43, p_43))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_12.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_12.xyz = (tmpvar_42.xyz * tmpvar_51);
  lowp float tmpvar_52;
  tmpvar_52 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (color_12.w * clamp ((_InvFade * (tmpvar_53 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_54;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 366
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 463
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 456
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform samplerCube _ShadowMapTexture;
#line 364
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 376
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 389
#line 397
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 444
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 448
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 452
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 477
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 477
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 481
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 485
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objNormal);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 489
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 494
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec4(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 366
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 463
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 456
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform samplerCube _ShadowMapTexture;
#line 364
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 376
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 389
#line 397
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 444
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 448
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 452
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 477
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 496
lowp vec4 frag( in v2f IN ) {
    #line 498
    mediump vec4 color;
    highp vec3 objNrm = vec3( normalize(IN.objDetail));
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 502
    uv.y = (0.31831 * acos(objNrm.y));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objNormal));
    objNrm = abs(objNrm);
    #line 506
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    #line 510
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * _DetailScale), uvdd.xy, uvdd.zw);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 514
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 518
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 522
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 526
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 530
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec4(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform vec4 _LightPositionRange;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  vec4 o_6;
  vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2).xyz;
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_1.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_1.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4.xyz);
  vec2 uv_12;
  float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    float s_15;
    float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_3);
  float tmpvar_21;
  tmpvar_21 = clamp (floor(((1.0 + tmpvar_20.x) - tmpvar_20.z)), 0.0, 1.0);
  vec3 tmpvar_22;
  tmpvar_22 = mix (mix (tmpvar_20.zxy, tmpvar_20, vec3(tmpvar_21)), tmpvar_20.yxz, vec3(clamp (floor(((1.0 + tmpvar_20.y) - mix (tmpvar_20.z, tmpvar_20.x, tmpvar_21))), 0.0, 1.0)));
  vec3 p_23;
  p_23 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DGradARB (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_22.zy) / abs(tmpvar_22.x)) * _DetailScale), tmpvar_10.xy, tmpvar_10.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_23, p_23))), 0.0, 1.0))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_26;
  p_26 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_24.w, mix (clamp (((_FadeScale * sqrt(dot (p_25, p_25))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_26, p_26)) - (_RimDistSub * sqrt(dot (p_27, p_27))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_24.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_LightPositionRange]
Matrix 8 [_Object2World]
Matrix 12 [_MainRotation]
Matrix 16 [_DetailRotation]
Matrix 20 [_LightMatrix0]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c28, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
mov r0.x, c8.w
mov r1.w, r0
dp4 r1.y, v0, c5
mov r0.z, c10.w
mov r0.y, c9.w
add r4.xyz, r2, -r0
dp3 r1.x, r4, r4
rsq r1.z, r1.x
dp4 r1.x, v0, c4
mul r3.xyz, r1.xyww, c28.x
mul r3.y, r3, c25.x
mul o4.xyz, r1.z, r4
dp4 r1.z, v0, c6
mov o0, r1
mad o9.xy, r3.z, c26.zwzw, r3
add r3.xyz, -r2, c24
dp3 r2.w, r3, r3
rsq r2.w, r2.w
mov o2.xyz, r0
dp4 r0.x, v0, c2
dp4 r1.w, v0, c15
dp4 r1.z, v0, c14
dp4 r1.x, v0, c12
dp4 r1.y, v0, c13
dp4 o3.w, -r1, c19
dp4 o3.z, -r1, c18
dp4 o3.y, -r1, c17
dp4 o3.x, -r1, c16
mov o5, -r1
mov r1.xyz, r2
dp4 r1.w, v0, c11
mul o6.xyz, r2.w, r3
dp4 o7.z, r1, c22
dp4 o7.y, r1, c21
dp4 o7.x, r1, c20
mov o1.xyz, r2
add o8.xyz, r2, -c27
mov o9.z, -r0.x
mov o9.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 208 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 144 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 47 instructions, 4 temp regs, 0 temp arrays:
// ALU 41 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddnolklbibcbbbpcbefnoglppcmcgoamcabaaaaaalmaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahaiaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcaaahaaaaeaaaabaa
maabaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaadhccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaadaaaaaa
apaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaa
aaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
adaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaaj
pcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaagaaaaaa
dcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaa
acaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadgaaaaagpccabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaadaaaaaaapaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaaeaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaiaebaaaaaa
abaaaaaaegiccaaaabaaaaaaaeaaaaaaaaaaaaajhccabaaaaiaaaaaaegacbaaa
abaaaaaaegiccaiaebaaaaaaacaaaaaaabaaaaaabaaaaaahecaabaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahhccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaa
diaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaa
acaaaaaafgafbaaaabaaaaaaegiccaaaaaaaaaaaakaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaaaaaaaaaajaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaalaaaaaakgakbaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhccabaaaahaaaaaaegiccaaaaaaaaaaaamaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaa
aaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaa
ajaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaajaaaaaakgakbaaaabaaaaaa
mgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaa
adaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaa
akbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
adaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaa
dgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_11.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_11.y);
  mediump vec4 tex_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_23, tmpvar_30.xy, tmpvar_30.zw);
  tex_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_13);
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_32.x) - tmpvar_32.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_32.zxy, tmpvar_32, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_32.y) - mix (tmpvar_32.z, tmpvar_32.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (detailCoords_9, tmpvar_32.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_9.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_9.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_20.xy, tmpvar_20.zw);
  detail_7 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_21 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_42.w, mix (clamp (((_FadeScale * sqrt(dot (p_43, p_43))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_12.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_12.xyz = (tmpvar_42.xyz * tmpvar_51);
  lowp float tmpvar_52;
  tmpvar_52 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (color_12.w * clamp ((_InvFade * (tmpvar_53 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_54;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_11.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_11.y);
  mediump vec4 tex_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_23, tmpvar_30.xy, tmpvar_30.zw);
  tex_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_13);
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_32.x) - tmpvar_32.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_32.zxy, tmpvar_32, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_32.y) - mix (tmpvar_32.z, tmpvar_32.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (detailCoords_9, tmpvar_32.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_9.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_9.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_20.xy, tmpvar_20.zw);
  detail_7 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_21 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_42.w, mix (clamp (((_FadeScale * sqrt(dot (p_43, p_43))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_12.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_12.xyz = (tmpvar_42.xyz * tmpvar_51);
  lowp float tmpvar_52;
  tmpvar_52 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (color_12.w * clamp ((_InvFade * (tmpvar_53 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_54;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 367
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 464
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 457
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform samplerCube _ShadowMapTexture;
#line 364
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 377
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 390
#line 398
#line 412
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 445
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 449
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 453
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 478
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 478
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 482
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 486
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objNormal);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 490
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 495
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec4(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 367
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 464
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 457
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform samplerCube _ShadowMapTexture;
#line 364
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 377
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 390
#line 398
#line 412
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 445
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 449
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 453
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 478
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 497
lowp vec4 frag( in v2f IN ) {
    #line 499
    mediump vec4 color;
    highp vec3 objNrm = vec3( normalize(IN.objDetail));
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 503
    uv.y = (0.31831 * acos(objNrm.y));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objNormal));
    objNrm = abs(objNrm);
    #line 507
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    #line 511
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * _DetailScale), uvdd.xy, uvdd.zw);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 515
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 519
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 523
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 527
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 531
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec4(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform mat4 unity_World2Shadow[4];
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  vec4 o_6;
  vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2).xyz;
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_1.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_1.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4.xyz);
  vec2 uv_12;
  float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    float s_15;
    float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_3);
  float tmpvar_21;
  tmpvar_21 = clamp (floor(((1.0 + tmpvar_20.x) - tmpvar_20.z)), 0.0, 1.0);
  vec3 tmpvar_22;
  tmpvar_22 = mix (mix (tmpvar_20.zxy, tmpvar_20, vec3(tmpvar_21)), tmpvar_20.yxz, vec3(clamp (floor(((1.0 + tmpvar_20.y) - mix (tmpvar_20.z, tmpvar_20.x, tmpvar_21))), 0.0, 1.0)));
  vec3 p_23;
  p_23 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DGradARB (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_22.zy) / abs(tmpvar_22.x)) * _DetailScale), tmpvar_10.xy, tmpvar_10.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_23, p_23))), 0.0, 1.0))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_26;
  p_26 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_24.w, mix (clamp (((_FadeScale * sqrt(dot (p_25, p_25))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_26, p_26)) - (_RimDistSub * sqrt(dot (p_27, p_27))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_24.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 28 [_WorldSpaceCameraPos]
Vector 29 [_ProjectionParams]
Vector 30 [_ScreenParams]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Matrix 24 [_LightMatrix0]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c31, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c14
dp4 r2.y, v0, c13
dp4 r2.x, v0, c12
mov r1.w, r0
dp4 r1.y, v0, c5
mov r0.z, c14.w
mov r0.x, c12.w
mov r0.y, c13.w
add r4.xyz, r2, -r0
dp3 r1.x, r4, r4
rsq r1.z, r1.x
dp4 r1.x, v0, c4
mul r3.xyz, r1.xyww, c31.x
mul r3.y, r3, c29.x
mul o4.xyz, r1.z, r4
dp4 r1.z, v0, c6
mov o0, r1
mad o9.xy, r3.z, c30.zwzw, r3
add r3.xyz, -r2, c28
dp3 r2.w, r3, r3
rsq r2.w, r2.w
dp4 r1.w, v0, c19
dp4 r1.z, v0, c18
dp4 r1.x, v0, c16
dp4 r1.y, v0, c17
dp4 o3.w, -r1, c23
dp4 o3.z, -r1, c22
dp4 o3.y, -r1, c21
dp4 o3.x, -r1, c20
mov o5, -r1
mov r1.xyz, r2
dp4 r1.w, v0, c15
dp4 o7.w, r1, c27
dp4 o7.z, r1, c26
dp4 o7.y, r1, c25
dp4 o7.x, r1, c24
dp4 o8.w, r1, c11
dp4 o8.z, r1, c10
dp4 o8.y, r1, c9
dp4 o8.x, r1, c8
dp4 r1.x, v0, c2
mul o6.xyz, r2.w, r3
mov o1.xyz, r2
mov o2.xyz, r0
mov o9.z, -r1.x
mov o9.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 368 // 272 used size, 18 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 208 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 50 instructions, 4 temp regs, 0 temp arrays:
// ALU 44 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhpcfgbeifnlckhkldpdgakgldfbndilbabaaaaaadaajaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcheahaaaaeaaaabaa
nnabaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaamaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaadaaaaaa
apaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaa
aaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
adaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaaj
pcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaagaaaaaa
dcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaa
acaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadgaaaaagpccabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaadaaaaaaapaaaaaa
aaaaaaajhcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaaeaaaaaa
kgakbaaaaaaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaabaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaacaaaaaa
fgafbaaaabaaaaaaegiocaaaaaaaaaaaaoaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaanaaaaaaagaabaaaabaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaapaaaaaakgakbaaaabaaaaaaegaobaaa
acaaaaaadcaaaaakpccabaaaahaaaaaaegiocaaaaaaaaaaabaaaaaaapgapbaaa
abaaaaaaegaobaaaacaaaaaadiaaaaaipcaabaaaacaaaaaafgafbaaaabaaaaaa
egiocaaaacaaaaaaajaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaacaaaaaa
aiaaaaaaagaabaaaabaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaacaaaaaaakaaaaaakgakbaaaabaaaaaaegaobaaaacaaaaaadcaaaaak
pccabaaaaiaaaaaaegiocaaaacaaaaaaalaaaaaapgapbaaaabaaaaaaegaobaaa
acaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaa
afaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaaajaaaaaadkaabaaaaaaaaaaa
aaaaaaahdccabaaaajaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaai
bcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
ahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaa
akaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_11.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_11.y);
  mediump vec4 tex_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_23, tmpvar_30.xy, tmpvar_30.zw);
  tex_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_13);
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_32.x) - tmpvar_32.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_32.zxy, tmpvar_32, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_32.y) - mix (tmpvar_32.z, tmpvar_32.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (detailCoords_9, tmpvar_32.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_9.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_9.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_20.xy, tmpvar_20.zw);
  detail_7 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_21 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_42.w, mix (clamp (((_FadeScale * sqrt(dot (p_43, p_43))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_12.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_12.xyz = (tmpvar_42.xyz * tmpvar_51);
  lowp float tmpvar_52;
  tmpvar_52 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (color_12.w * clamp ((_InvFade * (tmpvar_53 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_54;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_11.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_11.y);
  mediump vec4 tex_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_23, tmpvar_30.xy, tmpvar_30.zw);
  tex_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_13);
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_32.x) - tmpvar_32.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_32.zxy, tmpvar_32, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_32.y) - mix (tmpvar_32.z, tmpvar_32.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (detailCoords_9, tmpvar_32.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_9.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_9.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_20.xy, tmpvar_20.zw);
  detail_7 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_21 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_42.w, mix (clamp (((_FadeScale * sqrt(dot (p_43, p_43))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_12.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_12.xyz = (tmpvar_42.xyz * tmpvar_51);
  lowp float tmpvar_52;
  tmpvar_52 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (color_12.w * clamp ((_InvFade * (tmpvar_53 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_54;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 376
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 473
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 466
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
#line 353
#line 365
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 386
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 399
#line 407
#line 421
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 454
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 458
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 462
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 487
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 487
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 491
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 495
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objNormal);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 499
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 504
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec4(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 376
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 473
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 466
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
#line 353
#line 365
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 386
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 399
#line 407
#line 421
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 454
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 458
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 462
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 487
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 506
lowp vec4 frag( in v2f IN ) {
    #line 508
    mediump vec4 color;
    highp vec3 objNrm = vec3( normalize(IN.objDetail));
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 512
    uv.y = (0.31831 * acos(objNrm.y));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objNormal));
    objNrm = abs(objNrm);
    #line 516
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    #line 520
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * _DetailScale), uvdd.xy, uvdd.zw);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 524
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 528
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 532
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 536
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 540
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec4(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform mat4 unity_World2Shadow[4];
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  vec4 o_6;
  vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2).xyz;
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_1.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_1.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4.xyz);
  vec2 uv_12;
  float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    float s_15;
    float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_3);
  float tmpvar_21;
  tmpvar_21 = clamp (floor(((1.0 + tmpvar_20.x) - tmpvar_20.z)), 0.0, 1.0);
  vec3 tmpvar_22;
  tmpvar_22 = mix (mix (tmpvar_20.zxy, tmpvar_20, vec3(tmpvar_21)), tmpvar_20.yxz, vec3(clamp (floor(((1.0 + tmpvar_20.y) - mix (tmpvar_20.z, tmpvar_20.x, tmpvar_21))), 0.0, 1.0)));
  vec3 p_23;
  p_23 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DGradARB (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_22.zy) / abs(tmpvar_22.x)) * _DetailScale), tmpvar_10.xy, tmpvar_10.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_23, p_23))), 0.0, 1.0))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_26;
  p_26 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_24.w, mix (clamp (((_FadeScale * sqrt(dot (p_25, p_25))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_26, p_26)) - (_RimDistSub * sqrt(dot (p_27, p_27))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_24.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 28 [_WorldSpaceCameraPos]
Vector 29 [_ProjectionParams]
Vector 30 [_ScreenParams]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Matrix 24 [_LightMatrix0]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c31, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c14
dp4 r2.y, v0, c13
dp4 r2.x, v0, c12
mov r1.w, r0
dp4 r1.y, v0, c5
mov r0.z, c14.w
mov r0.x, c12.w
mov r0.y, c13.w
add r4.xyz, r2, -r0
dp3 r1.x, r4, r4
rsq r1.z, r1.x
dp4 r1.x, v0, c4
mul r3.xyz, r1.xyww, c31.x
mul r3.y, r3, c29.x
mul o4.xyz, r1.z, r4
dp4 r1.z, v0, c6
mov o0, r1
mad o9.xy, r3.z, c30.zwzw, r3
add r3.xyz, -r2, c28
dp3 r2.w, r3, r3
rsq r2.w, r2.w
dp4 r1.w, v0, c19
dp4 r1.z, v0, c18
dp4 r1.x, v0, c16
dp4 r1.y, v0, c17
dp4 o3.w, -r1, c23
dp4 o3.z, -r1, c22
dp4 o3.y, -r1, c21
dp4 o3.x, -r1, c20
mov o5, -r1
mov r1.xyz, r2
dp4 r1.w, v0, c15
dp4 o7.w, r1, c27
dp4 o7.z, r1, c26
dp4 o7.y, r1, c25
dp4 o7.x, r1, c24
dp4 o8.w, r1, c11
dp4 o8.z, r1, c10
dp4 o8.y, r1, c9
dp4 o8.x, r1, c8
dp4 r1.x, v0, c2
mul o6.xyz, r2.w, r3
mov o1.xyz, r2
mov o2.xyz, r0
mov o9.z, -r1.x
mov o9.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 368 // 272 used size, 18 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 208 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 50 instructions, 4 temp regs, 0 temp arrays:
// ALU 44 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhpcfgbeifnlckhkldpdgakgldfbndilbabaaaaaadaajaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcheahaaaaeaaaabaa
nnabaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaamaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaadaaaaaa
apaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaa
aaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
adaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaaj
pcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaagaaaaaa
dcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaa
acaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadgaaaaagpccabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaadaaaaaaapaaaaaa
aaaaaaajhcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaaeaaaaaa
kgakbaaaaaaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaabaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaacaaaaaa
fgafbaaaabaaaaaaegiocaaaaaaaaaaaaoaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaanaaaaaaagaabaaaabaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaapaaaaaakgakbaaaabaaaaaaegaobaaa
acaaaaaadcaaaaakpccabaaaahaaaaaaegiocaaaaaaaaaaabaaaaaaapgapbaaa
abaaaaaaegaobaaaacaaaaaadiaaaaaipcaabaaaacaaaaaafgafbaaaabaaaaaa
egiocaaaacaaaaaaajaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaacaaaaaa
aiaaaaaaagaabaaaabaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaacaaaaaaakaaaaaakgakbaaaabaaaaaaegaobaaaacaaaaaadcaaaaak
pccabaaaaiaaaaaaegiocaaaacaaaaaaalaaaaaapgapbaaaabaaaaaaegaobaaa
acaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaa
afaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaaajaaaaaadkaabaaaaaaaaaaa
aaaaaaahdccabaaaajaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaai
bcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
ahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaa
akaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_11.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_11.y);
  mediump vec4 tex_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_23, tmpvar_30.xy, tmpvar_30.zw);
  tex_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_13);
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_32.x) - tmpvar_32.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_32.zxy, tmpvar_32, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_32.y) - mix (tmpvar_32.z, tmpvar_32.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (detailCoords_9, tmpvar_32.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_9.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_9.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_20.xy, tmpvar_20.zw);
  detail_7 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_21 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_42.w, mix (clamp (((_FadeScale * sqrt(dot (p_43, p_43))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_12.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_12.xyz = (tmpvar_42.xyz * tmpvar_51);
  lowp float tmpvar_52;
  tmpvar_52 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (color_12.w * clamp ((_InvFade * (tmpvar_53 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_54;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 376
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 473
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 466
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
#line 353
#line 365
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 386
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 399
#line 407
#line 421
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 454
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 458
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 462
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 487
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 487
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 491
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 495
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objNormal);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 499
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 504
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec4(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 376
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 473
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 466
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
#line 353
#line 365
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 386
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 399
#line 407
#line 421
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 454
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 458
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 462
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 487
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 506
lowp vec4 frag( in v2f IN ) {
    #line 508
    mediump vec4 color;
    highp vec3 objNrm = vec3( normalize(IN.objDetail));
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 512
    uv.y = (0.31831 * acos(objNrm.y));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objNormal));
    objNrm = abs(objNrm);
    #line 516
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    #line 520
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * _DetailScale), uvdd.xy, uvdd.zw);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 524
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 528
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 532
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 536
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 540
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec4(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform vec4 _LightPositionRange;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  vec4 o_6;
  vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2).xyz;
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_1.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_1.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4.xyz);
  vec2 uv_12;
  float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    float s_15;
    float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_3);
  float tmpvar_21;
  tmpvar_21 = clamp (floor(((1.0 + tmpvar_20.x) - tmpvar_20.z)), 0.0, 1.0);
  vec3 tmpvar_22;
  tmpvar_22 = mix (mix (tmpvar_20.zxy, tmpvar_20, vec3(tmpvar_21)), tmpvar_20.yxz, vec3(clamp (floor(((1.0 + tmpvar_20.y) - mix (tmpvar_20.z, tmpvar_20.x, tmpvar_21))), 0.0, 1.0)));
  vec3 p_23;
  p_23 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DGradARB (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_22.zy) / abs(tmpvar_22.x)) * _DetailScale), tmpvar_10.xy, tmpvar_10.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_23, p_23))), 0.0, 1.0))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_26;
  p_26 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_24.w, mix (clamp (((_FadeScale * sqrt(dot (p_25, p_25))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_26, p_26)) - (_RimDistSub * sqrt(dot (p_27, p_27))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_24.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_LightPositionRange]
Matrix 8 [_Object2World]
Matrix 12 [_MainRotation]
Matrix 16 [_DetailRotation]
Matrix 20 [_LightMatrix0]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c28, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
mov r0.x, c8.w
mov r1.w, r0
dp4 r1.y, v0, c5
mov r0.z, c10.w
mov r0.y, c9.w
add r4.xyz, r2, -r0
dp3 r1.x, r4, r4
rsq r1.z, r1.x
dp4 r1.x, v0, c4
mul r3.xyz, r1.xyww, c28.x
mul r3.y, r3, c25.x
mul o4.xyz, r1.z, r4
dp4 r1.z, v0, c6
mov o0, r1
mad o9.xy, r3.z, c26.zwzw, r3
add r3.xyz, -r2, c24
dp3 r2.w, r3, r3
rsq r2.w, r2.w
mov o2.xyz, r0
dp4 r0.x, v0, c2
dp4 r1.w, v0, c15
dp4 r1.z, v0, c14
dp4 r1.x, v0, c12
dp4 r1.y, v0, c13
dp4 o3.w, -r1, c19
dp4 o3.z, -r1, c18
dp4 o3.y, -r1, c17
dp4 o3.x, -r1, c16
mov o5, -r1
mov r1.xyz, r2
dp4 r1.w, v0, c11
mul o6.xyz, r2.w, r3
dp4 o7.z, r1, c22
dp4 o7.y, r1, c21
dp4 o7.x, r1, c20
mov o1.xyz, r2
add o8.xyz, r2, -c27
mov o9.z, -r0.x
mov o9.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 208 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 144 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 47 instructions, 4 temp regs, 0 temp arrays:
// ALU 41 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddnolklbibcbbbpcbefnoglppcmcgoamcabaaaaaalmaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahaiaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcaaahaaaaeaaaabaa
maabaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaadhccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaadaaaaaa
apaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaa
aaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
adaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaaj
pcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaagaaaaaa
dcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaa
acaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadgaaaaagpccabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaadaaaaaaapaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaaeaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaiaebaaaaaa
abaaaaaaegiccaaaabaaaaaaaeaaaaaaaaaaaaajhccabaaaaiaaaaaaegacbaaa
abaaaaaaegiccaiaebaaaaaaacaaaaaaabaaaaaabaaaaaahecaabaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahhccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaa
diaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaa
acaaaaaafgafbaaaabaaaaaaegiccaaaaaaaaaaaakaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaaaaaaaaaajaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaalaaaaaakgakbaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhccabaaaahaaaaaaegiccaaaaaaaaaaaamaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaa
aaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaa
ajaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaajaaaaaakgakbaaaabaaaaaa
mgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaa
adaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaa
akbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
adaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaa
dgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_11.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_11.y);
  mediump vec4 tex_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_23, tmpvar_30.xy, tmpvar_30.zw);
  tex_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_13);
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_32.x) - tmpvar_32.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_32.zxy, tmpvar_32, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_32.y) - mix (tmpvar_32.z, tmpvar_32.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (detailCoords_9, tmpvar_32.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_9.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_9.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_20.xy, tmpvar_20.zw);
  detail_7 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_21 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_42.w, mix (clamp (((_FadeScale * sqrt(dot (p_43, p_43))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_12.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_12.xyz = (tmpvar_42.xyz * tmpvar_51);
  lowp float tmpvar_52;
  tmpvar_52 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (color_12.w * clamp ((_InvFade * (tmpvar_53 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_54;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_11.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_11.y);
  mediump vec4 tex_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_23, tmpvar_30.xy, tmpvar_30.zw);
  tex_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_13);
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_32.x) - tmpvar_32.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_32.zxy, tmpvar_32, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_32.y) - mix (tmpvar_32.z, tmpvar_32.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (detailCoords_9, tmpvar_32.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_9.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_9.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_20.xy, tmpvar_20.zw);
  detail_7 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_21 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_42.w, mix (clamp (((_FadeScale * sqrt(dot (p_43, p_43))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_12.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_12.xyz = (tmpvar_42.xyz * tmpvar_51);
  lowp float tmpvar_52;
  tmpvar_52 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (color_12.w * clamp ((_InvFade * (tmpvar_53 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_54;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 372
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 469
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 462
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 371
uniform highp mat4 _LightMatrix0;
#line 382
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 395
#line 403
#line 417
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 450
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 454
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 458
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 483
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 483
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 487
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 491
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objNormal);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 495
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 500
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec4(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 372
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 469
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 462
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 371
uniform highp mat4 _LightMatrix0;
#line 382
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 395
#line 403
#line 417
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 450
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 454
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 458
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 483
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 502
lowp vec4 frag( in v2f IN ) {
    #line 504
    mediump vec4 color;
    highp vec3 objNrm = vec3( normalize(IN.objDetail));
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 508
    uv.y = (0.31831 * acos(objNrm.y));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objNormal));
    objNrm = abs(objNrm);
    #line 512
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    #line 516
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * _DetailScale), uvdd.xy, uvdd.zw);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 520
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 524
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 528
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 532
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 536
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec4(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform vec4 _LightPositionRange;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  vec4 o_6;
  vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2).xyz;
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_1.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_1.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4.xyz);
  vec2 uv_12;
  float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    float s_15;
    float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_3);
  float tmpvar_21;
  tmpvar_21 = clamp (floor(((1.0 + tmpvar_20.x) - tmpvar_20.z)), 0.0, 1.0);
  vec3 tmpvar_22;
  tmpvar_22 = mix (mix (tmpvar_20.zxy, tmpvar_20, vec3(tmpvar_21)), tmpvar_20.yxz, vec3(clamp (floor(((1.0 + tmpvar_20.y) - mix (tmpvar_20.z, tmpvar_20.x, tmpvar_21))), 0.0, 1.0)));
  vec3 p_23;
  p_23 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DGradARB (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_22.zy) / abs(tmpvar_22.x)) * _DetailScale), tmpvar_10.xy, tmpvar_10.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_23, p_23))), 0.0, 1.0))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_26;
  p_26 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_24.w, mix (clamp (((_FadeScale * sqrt(dot (p_25, p_25))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_26, p_26)) - (_RimDistSub * sqrt(dot (p_27, p_27))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_24.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_LightPositionRange]
Matrix 8 [_Object2World]
Matrix 12 [_MainRotation]
Matrix 16 [_DetailRotation]
Matrix 20 [_LightMatrix0]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c28, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
mov r0.x, c8.w
mov r1.w, r0
dp4 r1.y, v0, c5
mov r0.z, c10.w
mov r0.y, c9.w
add r4.xyz, r2, -r0
dp3 r1.x, r4, r4
rsq r1.z, r1.x
dp4 r1.x, v0, c4
mul r3.xyz, r1.xyww, c28.x
mul r3.y, r3, c25.x
mul o4.xyz, r1.z, r4
dp4 r1.z, v0, c6
mov o0, r1
mad o9.xy, r3.z, c26.zwzw, r3
add r3.xyz, -r2, c24
dp3 r2.w, r3, r3
rsq r2.w, r2.w
mov o2.xyz, r0
dp4 r0.x, v0, c2
dp4 r1.w, v0, c15
dp4 r1.z, v0, c14
dp4 r1.x, v0, c12
dp4 r1.y, v0, c13
dp4 o3.w, -r1, c19
dp4 o3.z, -r1, c18
dp4 o3.y, -r1, c17
dp4 o3.x, -r1, c16
mov o5, -r1
mov r1.xyz, r2
dp4 r1.w, v0, c11
mul o6.xyz, r2.w, r3
dp4 o7.z, r1, c22
dp4 o7.y, r1, c21
dp4 o7.x, r1, c20
mov o1.xyz, r2
add o8.xyz, r2, -c27
mov o9.z, -r0.x
mov o9.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 304 // 208 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 144 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 47 instructions, 4 temp regs, 0 temp arrays:
// ALU 41 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddnolklbibcbbbpcbefnoglppcmcgoamcabaaaaaalmaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahaiaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcaaahaaaaeaaaabaa
maabaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaadhccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaadaaaaaa
apaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaabaaaaaaagbabaaa
aaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
adaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaaj
pcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaagaaaaaa
dcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaa
acaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadgaaaaagpccabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaadaaaaaaapaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaaeaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaiaebaaaaaa
abaaaaaaegiccaaaabaaaaaaaeaaaaaaaaaaaaajhccabaaaaiaaaaaaegacbaaa
abaaaaaaegiccaiaebaaaaaaacaaaaaaabaaaaaabaaaaaahecaabaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahhccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaa
diaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaa
acaaaaaafgafbaaaabaaaaaaegiccaaaaaaaaaaaakaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaaaaaaaaaajaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaalaaaaaakgakbaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhccabaaaahaaaaaaegiccaaaaaaaaaaaamaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaa
aaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaa
ajaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaajaaaaaakgakbaaaabaaaaaa
mgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaa
adaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaa
akbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
adaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaa
dgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_11.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_11.y);
  mediump vec4 tex_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_23, tmpvar_30.xy, tmpvar_30.zw);
  tex_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_13);
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_32.x) - tmpvar_32.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_32.zxy, tmpvar_32, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_32.y) - mix (tmpvar_32.z, tmpvar_32.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (detailCoords_9, tmpvar_32.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_9.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_9.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_20.xy, tmpvar_20.zw);
  detail_7 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_21 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_42.w, mix (clamp (((_FadeScale * sqrt(dot (p_43, p_43))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_12.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_12.xyz = (tmpvar_42.xyz * tmpvar_51);
  lowp float tmpvar_52;
  tmpvar_52 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (color_12.w * clamp ((_InvFade * (tmpvar_53 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_54;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_6.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD2).xyz;
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(uv_11.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(uv_11.y);
  mediump vec4 tex_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD4.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(uv_23.y);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(uv_23.y);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_23, tmpvar_30.xy, tmpvar_30.zw);
  tex_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_13);
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_32.x) - tmpvar_32.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (tmpvar_32.zxy, tmpvar_32, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_32.y) - mix (tmpvar_32.z, tmpvar_32.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (detailCoords_9, tmpvar_32.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_9.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_9.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_20.xy, tmpvar_20.zw);
  detail_7 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tex_21 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_46;
  tmpvar_46 = mix (0.0, tmpvar_42.w, mix (clamp (((_FadeScale * sqrt(dot (p_43, p_43))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_44, p_44)) - (_RimDistSub * sqrt(dot (p_45, p_45))))), 0.0, 1.0)));
  color_12.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  color_12.xyz = (tmpvar_42.xyz * tmpvar_51);
  lowp float tmpvar_52;
  tmpvar_52 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = (color_12.w * clamp ((_InvFade * (tmpvar_53 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_54;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 373
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 470
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 463
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 371
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 383
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 396
#line 404
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 451
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 455
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 459
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 484
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 484
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 488
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 492
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objNormal);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 496
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 501
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec4(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 373
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 470
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp vec4 objDetail;
    highp vec3 worldNormal;
    highp vec4 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 463
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 371
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 383
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 396
#line 404
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 451
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
#line 455
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _FadeDist;
uniform highp float _FadeScale;
#line 459
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 484
#line 317
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    #line 319
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 323
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 326
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 328
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 332
    return uv;
}
#line 343
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 345
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    #line 349
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 503
lowp vec4 frag( in v2f IN ) {
    #line 505
    mediump vec4 color;
    highp vec3 objNrm = vec3( normalize(IN.objDetail));
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 509
    uv.y = (0.31831 * acos(objNrm.y));
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objNormal));
    objNrm = abs(objNrm);
    #line 513
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    #line 517
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * _DetailScale), uvdd.xy, uvdd.zw);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 521
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 525
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 529
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 533
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 537
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec4(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 30
//   d3d9 - ALU: 148 to 153, TEX: 6 to 7
//   d3d11 - ALU: 119 to 125, TEX: 0 to 1, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Float 4 [_FalloffPow]
Float 5 [_FalloffScale]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_FadeDist]
Float 10 [_FadeScale]
Float 11 [_RimDist]
Float 12 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 148 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c13, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c14, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp4 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c13.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
dsy r3.xy, r0.xzzw
add r0.w, r0, c13.y
frc r1.w, r0
add_sat r0.w, r0, -r1
add_pp r1.xyz, r1.yxzw, -r2
mad_pp r1.xyz, r0.w, r1, r2
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c13.y
mad r1.z, r0.w, c14.x, c14.y
mad r1.z, r1, r0.w, c13.w
mul_pp r1.xy, r1, c17.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c14.z
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c13.x, c13.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c14.w, r1
mad r0.w, r0, c13.z, r1.z
dp3 r0.y, v4, v4
rsq r0.y, r0.y
mul r2.xyz, r0.y, v4
abs r3.w, r2.x
abs r4.x, r2.z
mul r1.z, r0.w, c15.x
max r0.y, r3.w, r4.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c15.y, c15.z
mad r2.w, r2, r4.z, c15
mul r1.xy, r1, c6.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.x, r3, r3
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c17.x
mul r0.x, r1.z, c17
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c13.y
rsq r3.y, r3.x
mad r2.w, r2, r4.z, c16.x
mad r3.x, r2.w, r4.z, c16.y
rcp r2.w, r3.y
mad r3.x, r3, r4.z, c16.z
mul r3.y, r2.w, c7.x
mul_sat r3.y, r3, c14.w
mad_pp r0, r3.y, r1, r0
abs r1.y, r2
mul r3.x, r3, r4.y
add r1.x, r3.w, -r4
add r1.z, -r3.x, c16.w
cmp r1.x, -r1, r3, r1.z
dsx r3.xy, r2.xzzw
add r1.w, -r1.y, c13.y
mad r1.z, r1.y, c14.x, c14.y
mad r1.z, r1, r1.y, c13.w
rsq r1.w, r1.w
dsy r3.zw, r2.xyxz
mad r1.y, r1.z, r1, c14.z
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r2, c13.x, c13
mul r1.w, r1.y, r1.z
add r2.y, -r1.x, c13.z
mad r1.z, -r1.w, c14.w, r1
cmp r1.w, r2.z, r1.x, r2.y
mad r1.x, r1.y, c13.z, r1.z
cmp r1.y, r2.x, r1.w, -r1.w
mul r1.x, r1, c15
mad r1.z, r1.y, c17.x, c17.y
dsx r2.y, r1.x
mov r1.w, r1.x
dsy r1.y, r1.x
mul r3.xy, r3, r3
add r1.x, r3, r3.y
mul r3.xy, r3.zwzw, r3.zwzw
add r2.x, r3, r3.y
rsq r1.x, r1.x
rsq r2.z, r2.x
rcp r1.x, r1.x
mul r2.x, r1, c17
rcp r1.x, r2.z
dp4 r2.z, c2, c2
mul r1.x, r1, c17
texldd r1, r1.zwzw, s0, r2, r1
mul_pp r0, r1, r0
mov r1.xyz, v3
dp3_sat r3.x, v5, r1
mul r3.w, r3.x, c5.x
rsq r2.z, r2.z
mul r2.xyz, r2.z, c2
dp3_sat r1.w, v3, r2
add_pp r1.w, r1, c17.z
mul_pp r1.y, r1.w, c3.w
mul_pp_sat r1.w, r1.y, c17
mov r1.x, c8
add r1.xyz, c3, r1.x
mad_sat r2.xyz, r1, r1.w, c0
add r3.xyz, -v1, c1
mov r1.xyz, v0
add r1.xyz, v1, -r1
dp3 r1.x, r1, r1
dp3 r1.w, r3, r3
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r3.x, -r1, c12, r1.y
pow_sat r1, r3.w, c4.x
mul r1.y, r2.w, c10.x
add_sat r1.y, r1, -c9.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r3, c11
mad r1.x, r1, r1.z, r1.y
mul_pp oC0.xyz, r0, r2
mul_pp oC0.w, r0, r1.x
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 304 // 292 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_FadeDist]
Float 280 [_FadeScale]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 123 instructions, 5 temp regs, 0 temp arrays:
// ALU 114 float, 0 int, 5 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedlpgegodoliigmelooncfhidmbifbnpbbabaaaaaapabaaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefciiapaaaaeaaaaaaaocadaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadpcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaafaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaabbaaaaahbcaabaaaabaaaaaaegbobaaaadaaaaaaegbobaaa
adaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahpcaabaaa
abaaaaaaagaabaaaabaaaaaabgbjbaaaadaaaaaaaaaaaaaldcaabaaaacaaaaaa
jgafbaiaibaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaa
aaaaaaaibcaabaaaacaaaaaadkaabaiambaaaaaaabaaaaaaakaabaaaacaaaaaa
ebcaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaaaaaaaajecaabaaaacaaaaaa
dkaabaiambaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaadcaaaaakecaabaaa
acaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaa
aaaaaaaiccaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaabkaabaaaacaaaaaa
ebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajhcaabaaaadaaaaaa
hgaobaiambaaaaaaabaaaaaajgahbaiaibaaaaaaabaaaaaadcaaaaakncaabaaa
acaaaaaaagaabaaaacaaaaaaagajbaaaadaaaaaapgajbaiaibaaaaaaabaaaaaa
aaaaaaajhcaabaaaadaaaaaaggalbaiaibaaaaaaabaaaaaaigadbaiaebaaaaaa
acaaaaaadcaaaaajhcaabaaaacaaaaaafgafbaaaacaaaaaaegacbaaaadaaaaaa
igadbaaaacaaaaaadiaaaaakgcaabaaaacaaaaaakgajbaaaacaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaacaaaaaajgafbaaa
acaaaaaaagaabaaaacaaaaaadiaaaaaidcaabaaaacaaaaaaegaabaaaacaaaaaa
kgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaacaaaaaaakaabaiaibaaaaaa
abaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaacaaaaaackaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
keanmjdpaaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaaabaaaaaaabeaaaaa
aaaaiadpelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaa
acaaaaaaakaabaaaabaaaaaackaabaaaacaaaaaadcaaaaajicaabaaaacaaaaaa
dkaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaacaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaa
akaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaaakaabaaaabaaaaaaalaaaaaf
fcaabaaaabaaaaaafgahbaaaabaaaaaaamaaaaafkcaabaaaabaaaaaafganbaaa
abaaaaaaapaaaaahccaabaaaabaaaaaangafbaaaabaaaaaangafbaaaabaaaaaa
elaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaaeaaaaaa
bkaabaaaabaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaabaaaaaaigaabaaa
abaaaaaaigaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaa
adaaaaaapgipcaaaaaaaaaaabaaaaaaadccaaaambcaabaaaadaaaaaackiacaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaabkiacaiaebaaaaaaaaaaaaaabbaaaaaa
dcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
bacaaaahbcaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaaeaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaaabaaaaaa
aaaaaaajocaabaaaabaaaaaaagbjbaaaacaaaaaaagijcaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaa
aaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaa
baaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaf
gcaabaaaabaaaaaafgagbaaaabaaaaaadcaaaaalccaabaaaabaaaaaaakiacaia
ebaaaaaaaaaaaaaabcaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadicaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaaj
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaadaaaaaa
diaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaa
aaaaaaaaanaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaa
aaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Float 4 [_FalloffPow]
Float 5 [_FalloffScale]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_FadeDist]
Float 10 [_FadeScale]
Float 11 [_RimDist]
Float 12 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 148 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c13, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c14, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp4 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c13.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
dsy r3.xy, r0.xzzw
add r0.w, r0, c13.y
frc r1.w, r0
add_sat r0.w, r0, -r1
add_pp r1.xyz, r1.yxzw, -r2
mad_pp r1.xyz, r0.w, r1, r2
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c13.y
mad r1.z, r0.w, c14.x, c14.y
mad r1.z, r1, r0.w, c13.w
mul_pp r1.xy, r1, c17.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c14.z
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c13.x, c13.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c14.w, r1
mad r0.w, r0, c13.z, r1.z
dp3 r0.y, v4, v4
rsq r0.y, r0.y
mul r2.xyz, r0.y, v4
abs r3.w, r2.x
abs r4.x, r2.z
mul r1.z, r0.w, c15.x
max r0.y, r3.w, r4.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c15.y, c15.z
mad r2.w, r2, r4.z, c15
mul r1.xy, r1, c6.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.x, r3, r3
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c17.x
mul r0.x, r1.z, c17
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c13.y
rsq r3.y, r3.x
mad r2.w, r2, r4.z, c16.x
mad r3.x, r2.w, r4.z, c16.y
rcp r2.w, r3.y
mad r3.x, r3, r4.z, c16.z
mul r3.y, r2.w, c7.x
mul_sat r3.y, r3, c14.w
mad_pp r0, r3.y, r1, r0
abs r1.y, r2
mul r3.x, r3, r4.y
add r1.x, r3.w, -r4
add r1.z, -r3.x, c16.w
cmp r1.x, -r1, r3, r1.z
dsx r3.xy, r2.xzzw
add r1.w, -r1.y, c13.y
mad r1.z, r1.y, c14.x, c14.y
mad r1.z, r1, r1.y, c13.w
rsq r1.w, r1.w
dsy r3.zw, r2.xyxz
mad r1.y, r1.z, r1, c14.z
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r2, c13.x, c13
mul r1.w, r1.y, r1.z
add r2.y, -r1.x, c13.z
mad r1.z, -r1.w, c14.w, r1
cmp r1.w, r2.z, r1.x, r2.y
mad r1.x, r1.y, c13.z, r1.z
cmp r1.y, r2.x, r1.w, -r1.w
mul r1.x, r1, c15
mad r1.z, r1.y, c17.x, c17.y
dsx r2.y, r1.x
mov r1.w, r1.x
dsy r1.y, r1.x
mul r3.xy, r3, r3
add r1.x, r3, r3.y
mul r3.xy, r3.zwzw, r3.zwzw
add r2.x, r3, r3.y
rsq r1.x, r1.x
rsq r2.z, r2.x
rcp r1.x, r1.x
mul r2.x, r1, c17
rcp r1.x, r2.z
dp4_pp r2.z, c2, c2
mul r1.x, r1, c17
texldd r1, r1.zwzw, s0, r2, r1
mul_pp r0, r1, r0
mov r1.xyz, v3
dp3_sat r3.x, v5, r1
mul r3.w, r3.x, c5.x
rsq_pp r2.z, r2.z
mul_pp r2.xyz, r2.z, c2
dp3_sat r1.w, v3, r2
add_pp r1.w, r1, c17.z
mul_pp r1.y, r1.w, c3.w
mul_pp_sat r1.w, r1.y, c17
mov r1.x, c8
add r1.xyz, c3, r1.x
mad_sat r2.xyz, r1, r1.w, c0
add r3.xyz, -v1, c1
mov r1.xyz, v0
add r1.xyz, v1, -r1
dp3 r1.x, r1, r1
dp3 r1.w, r3, r3
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r3.x, -r1, c12, r1.y
pow_sat r1, r3.w, c4.x
mul r1.y, r2.w, c10.x
add_sat r1.y, r1, -c9.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r3, c11
mad r1.x, r1, r1.z, r1.y
mul_pp oC0.xyz, r0, r2
mul_pp oC0.w, r0, r1.x
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
ConstBuffer "$Globals" 240 // 228 used size, 16 vars
Vector 144 [_LightColor0] 4
Float 192 [_FalloffPow]
Float 196 [_FalloffScale]
Float 200 [_DetailScale]
Float 204 [_DetailDist]
Float 208 [_MinLight]
Float 212 [_FadeDist]
Float 216 [_FadeScale]
Float 220 [_RimDist]
Float 224 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 123 instructions, 5 temp regs, 0 temp arrays:
// ALU 114 float, 0 int, 5 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedddjlimopdgbgdhpdcmnhloaoiecphmmaabaaaaaanibaaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaneaaaaaaaiaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefciiapaaaaeaaaaaaaocadaaaafjaaaaaeegiocaaa
aaaaaaaaapaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaa
acaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadpcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaafaaaaaa
egbcbaaaafaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaafaaaaaadeaaaaajicaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
jgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaaf
mcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaa
aaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaadaaaaaabbaaaaahbcaabaaaabaaaaaaegbobaaa
adaaaaaaegbobaaaadaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahpcaabaaaabaaaaaaagaabaaaabaaaaaabgbjbaaaadaaaaaaaaaaaaal
dcaabaaaacaaaaaajgafbaiaibaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaaaaaaaaaaaaaaaaaaaaibcaabaaaacaaaaaadkaabaiambaaaaaaabaaaaaa
akaabaaaacaaaaaaebcaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaaaaaaaaj
ecaabaaaacaaaaaadkaabaiambaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaa
dcaaaaakecaabaaaacaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaadkaabaia
ibaaaaaaabaaaaaaaaaaaaaiccaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
bkaabaaaacaaaaaaebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaaj
hcaabaaaadaaaaaahgaobaiambaaaaaaabaaaaaajgahbaiaibaaaaaaabaaaaaa
dcaaaaakncaabaaaacaaaaaaagaabaaaacaaaaaaagajbaaaadaaaaaapgajbaia
ibaaaaaaabaaaaaaaaaaaaajhcaabaaaadaaaaaaggalbaiaibaaaaaaabaaaaaa
igadbaiaebaaaaaaacaaaaaadcaaaaajhcaabaaaacaaaaaafgafbaaaacaaaaaa
egacbaaaadaaaaaaigadbaaaacaaaaaadiaaaaakgcaabaaaacaaaaaakgajbaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
acaaaaaajgafbaaaacaaaaaaagaabaaaacaaaaaadiaaaaaidcaabaaaacaaaaaa
egaabaaaacaaaaaakgikcaaaaaaaaaaaamaaaaaadcaaaaakecaabaaaacaaaaaa
akaabaiaibaaaaaaabaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaacaaaaaackaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaacaaaaaackaabaaaacaaaaaaakaabaiaibaaaaaa
abaaaaaaabeaaaaakeanmjdpaaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaa
abaaaaaaabeaaaaaaaaaiadpelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahicaabaaaacaaaaaaakaabaaaabaaaaaackaabaaaacaaaaaadcaaaaaj
icaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
abaaaaahecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaaj
bcaabaaaabaaaaaackaabaaaacaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaaf
ccaabaaaadaaaaaaakaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaaakaabaaa
abaaaaaaalaaaaaffcaabaaaabaaaaaafgahbaaaabaaaaaaamaaaaafkcaabaaa
abaaaaaafganbaaaabaaaaaaapaaaaahccaabaaaabaaaaaangafbaaaabaaaaaa
ngafbaaaabaaaaaaelaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaah
bcaabaaaaeaaaaaabkaabaaaabaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaa
abaaaaaaigaabaaaabaaaaaaigaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaa
adaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaaamaaaaaadccaaaambcaabaaa
adaaaaaackiacaaaaaaaaaaaanaaaaaaakaabaaaadaaaaaabkiacaiaebaaaaaa
aaaaaaaaanaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaa
acaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaa
egaobaaaabaaaaaabacaaaahbcaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaa
aeaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaa
amaaaaaacpaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakiacaaaaaaaaaaaamaaaaaabjaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaiadpaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaa
akaabaaaabaaaaaaaaaaaaajocaabaaaabaaaaaaagbjbaaaacaaaaaaagijcaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaa
jgahbaaaabaaaaaaaaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaia
ebaaaaaaacaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
acaaaaaaelaaaaafgcaabaaaabaaaaaafgagbaaaabaaaaaadcaaaaalccaabaaa
abaaaaaaakiacaiaebaaaaaaaaaaaaaaaoaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaadicaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaadkiacaaaaaaaaaaa
anaaaaaadcaaaaajbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaaaadaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaah
icaabaaaaaaaaaaaegbcbaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkiacaaaaaaaaaaaajaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaa
ajaaaaaaagiacaaaaaaaaaaaanaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Float 4 [_FalloffPow]
Float 5 [_FalloffScale]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_FadeDist]
Float 10 [_FadeScale]
Float 11 [_RimDist]
Float 12 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 148 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c13, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c14, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp4 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c13.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
dsy r3.xy, r0.xzzw
add r0.w, r0, c13.y
frc r1.w, r0
add_sat r0.w, r0, -r1
add_pp r1.xyz, r1.yxzw, -r2
mad_pp r1.xyz, r0.w, r1, r2
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c13.y
mad r1.z, r0.w, c14.x, c14.y
mad r1.z, r1, r0.w, c13.w
mul_pp r1.xy, r1, c17.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c14.z
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c13.x, c13.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c14.w, r1
mad r0.w, r0, c13.z, r1.z
dp3 r0.y, v4, v4
rsq r0.y, r0.y
mul r2.xyz, r0.y, v4
abs r3.w, r2.x
abs r4.x, r2.z
mul r1.z, r0.w, c15.x
max r0.y, r3.w, r4.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c15.y, c15.z
mad r2.w, r2, r4.z, c15
mul r1.xy, r1, c6.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.x, r3, r3
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c17.x
mul r0.x, r1.z, c17
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c13.y
rsq r3.y, r3.x
mad r2.w, r2, r4.z, c16.x
mad r3.x, r2.w, r4.z, c16.y
rcp r2.w, r3.y
mad r3.x, r3, r4.z, c16.z
mul r3.y, r2.w, c7.x
mul_sat r3.y, r3, c14.w
mad_pp r0, r3.y, r1, r0
abs r1.y, r2
mul r3.x, r3, r4.y
add r1.x, r3.w, -r4
add r1.z, -r3.x, c16.w
cmp r1.x, -r1, r3, r1.z
dsx r3.xy, r2.xzzw
add r1.w, -r1.y, c13.y
mad r1.z, r1.y, c14.x, c14.y
mad r1.z, r1, r1.y, c13.w
rsq r1.w, r1.w
dsy r3.zw, r2.xyxz
mad r1.y, r1.z, r1, c14.z
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r2, c13.x, c13
mul r1.w, r1.y, r1.z
add r2.y, -r1.x, c13.z
mad r1.z, -r1.w, c14.w, r1
cmp r1.w, r2.z, r1.x, r2.y
mad r1.x, r1.y, c13.z, r1.z
cmp r1.y, r2.x, r1.w, -r1.w
mul r1.x, r1, c15
mad r1.z, r1.y, c17.x, c17.y
dsx r2.y, r1.x
mov r1.w, r1.x
dsy r1.y, r1.x
mul r3.xy, r3, r3
add r1.x, r3, r3.y
mul r3.xy, r3.zwzw, r3.zwzw
add r2.x, r3, r3.y
rsq r1.x, r1.x
rsq r2.z, r2.x
rcp r1.x, r1.x
mul r2.x, r1, c17
rcp r1.x, r2.z
dp4 r2.z, c2, c2
mul r1.x, r1, c17
texldd r1, r1.zwzw, s0, r2, r1
mul_pp r0, r1, r0
mov r1.xyz, v3
dp3_sat r3.x, v5, r1
mul r3.w, r3.x, c5.x
rsq r2.z, r2.z
mul r2.xyz, r2.z, c2
dp3_sat r1.w, v3, r2
add_pp r1.w, r1, c17.z
mul_pp r1.y, r1.w, c3.w
mul_pp_sat r1.w, r1.y, c17
mov r1.x, c8
add r1.xyz, c3, r1.x
mad_sat r2.xyz, r1, r1.w, c0
add r3.xyz, -v1, c1
mov r1.xyz, v0
add r1.xyz, v1, -r1
dp3 r1.x, r1, r1
dp3 r1.w, r3, r3
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r3.x, -r1, c12, r1.y
pow_sat r1, r3.w, c4.x
mul r1.y, r2.w, c10.x
add_sat r1.y, r1, -c9.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r3, c11
mad r1.x, r1, r1.z, r1.y
mul_pp oC0.xyz, r0, r2
mul_pp oC0.w, r0, r1.x
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 304 // 292 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_FadeDist]
Float 280 [_FadeScale]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 123 instructions, 5 temp regs, 0 temp arrays:
// ALU 114 float, 0 int, 5 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedgmhnkngfjjeinfdkicpgckndaabeokbeabaaaaaapabaaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefciiapaaaaeaaaaaaaocadaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadpcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaafaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaabbaaaaahbcaabaaaabaaaaaaegbobaaaadaaaaaaegbobaaa
adaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahpcaabaaa
abaaaaaaagaabaaaabaaaaaabgbjbaaaadaaaaaaaaaaaaaldcaabaaaacaaaaaa
jgafbaiaibaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaa
aaaaaaaibcaabaaaacaaaaaadkaabaiambaaaaaaabaaaaaaakaabaaaacaaaaaa
ebcaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaaaaaaaajecaabaaaacaaaaaa
dkaabaiambaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaadcaaaaakecaabaaa
acaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaa
aaaaaaaiccaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaabkaabaaaacaaaaaa
ebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajhcaabaaaadaaaaaa
hgaobaiambaaaaaaabaaaaaajgahbaiaibaaaaaaabaaaaaadcaaaaakncaabaaa
acaaaaaaagaabaaaacaaaaaaagajbaaaadaaaaaapgajbaiaibaaaaaaabaaaaaa
aaaaaaajhcaabaaaadaaaaaaggalbaiaibaaaaaaabaaaaaaigadbaiaebaaaaaa
acaaaaaadcaaaaajhcaabaaaacaaaaaafgafbaaaacaaaaaaegacbaaaadaaaaaa
igadbaaaacaaaaaadiaaaaakgcaabaaaacaaaaaakgajbaaaacaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaacaaaaaajgafbaaa
acaaaaaaagaabaaaacaaaaaadiaaaaaidcaabaaaacaaaaaaegaabaaaacaaaaaa
kgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaacaaaaaaakaabaiaibaaaaaa
abaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaacaaaaaackaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
keanmjdpaaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaaabaaaaaaabeaaaaa
aaaaiadpelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaa
acaaaaaaakaabaaaabaaaaaackaabaaaacaaaaaadcaaaaajicaabaaaacaaaaaa
dkaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaacaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaa
akaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaaakaabaaaabaaaaaaalaaaaaf
fcaabaaaabaaaaaafgahbaaaabaaaaaaamaaaaafkcaabaaaabaaaaaafganbaaa
abaaaaaaapaaaaahccaabaaaabaaaaaangafbaaaabaaaaaangafbaaaabaaaaaa
elaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaaeaaaaaa
bkaabaaaabaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaabaaaaaaigaabaaa
abaaaaaaigaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaa
adaaaaaapgipcaaaaaaaaaaabaaaaaaadccaaaambcaabaaaadaaaaaackiacaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaabkiacaiaebaaaaaaaaaaaaaabbaaaaaa
dcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
bacaaaahbcaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaaeaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaaabaaaaaa
aaaaaaajocaabaaaabaaaaaaagbjbaaaacaaaaaaagijcaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaa
aaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaa
baaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaf
gcaabaaaabaaaaaafgagbaaaabaaaaaadcaaaaalccaabaaaabaaaaaaakiacaia
ebaaaaaaaaaaaaaabcaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadicaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaaj
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaadaaaaaa
diaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaa
aaaaaaaaanaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaa
aaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Float 4 [_FalloffPow]
Float 5 [_FalloffScale]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_FadeDist]
Float 10 [_FadeScale]
Float 11 [_RimDist]
Float 12 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 148 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c13, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c14, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp4 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c13.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
dsy r3.xy, r0.xzzw
add r0.w, r0, c13.y
frc r1.w, r0
add_sat r0.w, r0, -r1
add_pp r1.xyz, r1.yxzw, -r2
mad_pp r1.xyz, r0.w, r1, r2
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c13.y
mad r1.z, r0.w, c14.x, c14.y
mad r1.z, r1, r0.w, c13.w
mul_pp r1.xy, r1, c17.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c14.z
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c13.x, c13.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c14.w, r1
mad r0.w, r0, c13.z, r1.z
dp3 r0.y, v4, v4
rsq r0.y, r0.y
mul r2.xyz, r0.y, v4
abs r3.w, r2.x
abs r4.x, r2.z
mul r1.z, r0.w, c15.x
max r0.y, r3.w, r4.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c15.y, c15.z
mad r2.w, r2, r4.z, c15
mul r1.xy, r1, c6.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.x, r3, r3
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c17.x
mul r0.x, r1.z, c17
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c13.y
rsq r3.y, r3.x
mad r2.w, r2, r4.z, c16.x
mad r3.x, r2.w, r4.z, c16.y
rcp r2.w, r3.y
mad r3.x, r3, r4.z, c16.z
mul r3.y, r2.w, c7.x
mul_sat r3.y, r3, c14.w
mad_pp r0, r3.y, r1, r0
abs r1.y, r2
mul r3.x, r3, r4.y
add r1.x, r3.w, -r4
add r1.z, -r3.x, c16.w
cmp r1.x, -r1, r3, r1.z
dsx r3.xy, r2.xzzw
add r1.w, -r1.y, c13.y
mad r1.z, r1.y, c14.x, c14.y
mad r1.z, r1, r1.y, c13.w
rsq r1.w, r1.w
dsy r3.zw, r2.xyxz
mad r1.y, r1.z, r1, c14.z
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r2, c13.x, c13
mul r1.w, r1.y, r1.z
add r2.y, -r1.x, c13.z
mad r1.z, -r1.w, c14.w, r1
cmp r1.w, r2.z, r1.x, r2.y
mad r1.x, r1.y, c13.z, r1.z
cmp r1.y, r2.x, r1.w, -r1.w
mul r1.x, r1, c15
mad r1.z, r1.y, c17.x, c17.y
dsx r2.y, r1.x
mov r1.w, r1.x
dsy r1.y, r1.x
mul r3.xy, r3, r3
add r1.x, r3, r3.y
mul r3.xy, r3.zwzw, r3.zwzw
add r2.x, r3, r3.y
rsq r1.x, r1.x
rsq r2.z, r2.x
rcp r1.x, r1.x
mul r2.x, r1, c17
rcp r1.x, r2.z
dp4 r2.z, c2, c2
mul r1.x, r1, c17
texldd r1, r1.zwzw, s0, r2, r1
mul_pp r0, r1, r0
mov r1.xyz, v3
dp3_sat r3.x, v5, r1
mul r3.w, r3.x, c5.x
rsq r2.z, r2.z
mul r2.xyz, r2.z, c2
dp3_sat r1.w, v3, r2
add_pp r1.w, r1, c17.z
mul_pp r1.y, r1.w, c3.w
mul_pp_sat r1.w, r1.y, c17
mov r1.x, c8
add r1.xyz, c3, r1.x
mad_sat r2.xyz, r1, r1.w, c0
add r3.xyz, -v1, c1
mov r1.xyz, v0
add r1.xyz, v1, -r1
dp3 r1.x, r1, r1
dp3 r1.w, r3, r3
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r3.x, -r1, c12, r1.y
pow_sat r1, r3.w, c4.x
mul r1.y, r2.w, c10.x
add_sat r1.y, r1, -c9.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r3, c11
mad r1.x, r1, r1.z, r1.y
mul_pp oC0.xyz, r0, r2
mul_pp oC0.w, r0, r1.x
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 304 // 292 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_FadeDist]
Float 280 [_FadeScale]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 123 instructions, 5 temp regs, 0 temp arrays:
// ALU 114 float, 0 int, 5 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedlpgegodoliigmelooncfhidmbifbnpbbabaaaaaapabaaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefciiapaaaaeaaaaaaaocadaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadpcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaafaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaabbaaaaahbcaabaaaabaaaaaaegbobaaaadaaaaaaegbobaaa
adaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahpcaabaaa
abaaaaaaagaabaaaabaaaaaabgbjbaaaadaaaaaaaaaaaaaldcaabaaaacaaaaaa
jgafbaiaibaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaa
aaaaaaaibcaabaaaacaaaaaadkaabaiambaaaaaaabaaaaaaakaabaaaacaaaaaa
ebcaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaaaaaaaajecaabaaaacaaaaaa
dkaabaiambaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaadcaaaaakecaabaaa
acaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaa
aaaaaaaiccaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaabkaabaaaacaaaaaa
ebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajhcaabaaaadaaaaaa
hgaobaiambaaaaaaabaaaaaajgahbaiaibaaaaaaabaaaaaadcaaaaakncaabaaa
acaaaaaaagaabaaaacaaaaaaagajbaaaadaaaaaapgajbaiaibaaaaaaabaaaaaa
aaaaaaajhcaabaaaadaaaaaaggalbaiaibaaaaaaabaaaaaaigadbaiaebaaaaaa
acaaaaaadcaaaaajhcaabaaaacaaaaaafgafbaaaacaaaaaaegacbaaaadaaaaaa
igadbaaaacaaaaaadiaaaaakgcaabaaaacaaaaaakgajbaaaacaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaacaaaaaajgafbaaa
acaaaaaaagaabaaaacaaaaaadiaaaaaidcaabaaaacaaaaaaegaabaaaacaaaaaa
kgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaacaaaaaaakaabaiaibaaaaaa
abaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaacaaaaaackaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
keanmjdpaaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaaabaaaaaaabeaaaaa
aaaaiadpelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaa
acaaaaaaakaabaaaabaaaaaackaabaaaacaaaaaadcaaaaajicaabaaaacaaaaaa
dkaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaacaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaa
akaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaaakaabaaaabaaaaaaalaaaaaf
fcaabaaaabaaaaaafgahbaaaabaaaaaaamaaaaafkcaabaaaabaaaaaafganbaaa
abaaaaaaapaaaaahccaabaaaabaaaaaangafbaaaabaaaaaangafbaaaabaaaaaa
elaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaaeaaaaaa
bkaabaaaabaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaabaaaaaaigaabaaa
abaaaaaaigaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaa
adaaaaaapgipcaaaaaaaaaaabaaaaaaadccaaaambcaabaaaadaaaaaackiacaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaabkiacaiaebaaaaaaaaaaaaaabbaaaaaa
dcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
bacaaaahbcaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaaeaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaaabaaaaaa
aaaaaaajocaabaaaabaaaaaaagbjbaaaacaaaaaaagijcaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaa
aaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaa
baaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaf
gcaabaaaabaaaaaafgagbaaaabaaaaaadcaaaaalccaabaaaabaaaaaaakiacaia
ebaaaaaaaaaaaaaabcaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadicaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaaj
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaadaaaaaa
diaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaa
aaaaaaaaanaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaa
aaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Float 4 [_FalloffPow]
Float 5 [_FalloffScale]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_FadeDist]
Float 10 [_FadeScale]
Float 11 [_RimDist]
Float 12 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 148 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c13, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c14, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp4 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c13.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
dsy r3.xy, r0.xzzw
add r0.w, r0, c13.y
frc r1.w, r0
add_sat r0.w, r0, -r1
add_pp r1.xyz, r1.yxzw, -r2
mad_pp r1.xyz, r0.w, r1, r2
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c13.y
mad r1.z, r0.w, c14.x, c14.y
mad r1.z, r1, r0.w, c13.w
mul_pp r1.xy, r1, c17.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c14.z
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c13.x, c13.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c14.w, r1
mad r0.w, r0, c13.z, r1.z
dp3 r0.y, v4, v4
rsq r0.y, r0.y
mul r2.xyz, r0.y, v4
abs r3.w, r2.x
abs r4.x, r2.z
mul r1.z, r0.w, c15.x
max r0.y, r3.w, r4.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c15.y, c15.z
mad r2.w, r2, r4.z, c15
mul r1.xy, r1, c6.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.x, r3, r3
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c17.x
mul r0.x, r1.z, c17
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c13.y
rsq r3.y, r3.x
mad r2.w, r2, r4.z, c16.x
mad r3.x, r2.w, r4.z, c16.y
rcp r2.w, r3.y
mad r3.x, r3, r4.z, c16.z
mul r3.y, r2.w, c7.x
mul_sat r3.y, r3, c14.w
mad_pp r0, r3.y, r1, r0
abs r1.y, r2
mul r3.x, r3, r4.y
add r1.x, r3.w, -r4
add r1.z, -r3.x, c16.w
cmp r1.x, -r1, r3, r1.z
dsx r3.xy, r2.xzzw
add r1.w, -r1.y, c13.y
mad r1.z, r1.y, c14.x, c14.y
mad r1.z, r1, r1.y, c13.w
rsq r1.w, r1.w
dsy r3.zw, r2.xyxz
mad r1.y, r1.z, r1, c14.z
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r2, c13.x, c13
mul r1.w, r1.y, r1.z
add r2.y, -r1.x, c13.z
mad r1.z, -r1.w, c14.w, r1
cmp r1.w, r2.z, r1.x, r2.y
mad r1.x, r1.y, c13.z, r1.z
cmp r1.y, r2.x, r1.w, -r1.w
mul r1.x, r1, c15
mad r1.z, r1.y, c17.x, c17.y
dsx r2.y, r1.x
mov r1.w, r1.x
dsy r1.y, r1.x
mul r3.xy, r3, r3
add r1.x, r3, r3.y
mul r3.xy, r3.zwzw, r3.zwzw
add r2.x, r3, r3.y
rsq r1.x, r1.x
rsq r2.z, r2.x
rcp r1.x, r1.x
mul r2.x, r1, c17
rcp r1.x, r2.z
dp4_pp r2.z, c2, c2
mul r1.x, r1, c17
texldd r1, r1.zwzw, s0, r2, r1
mul_pp r0, r1, r0
mov r1.xyz, v3
dp3_sat r3.x, v5, r1
mul r3.w, r3.x, c5.x
rsq_pp r2.z, r2.z
mul_pp r2.xyz, r2.z, c2
dp3_sat r1.w, v3, r2
add_pp r1.w, r1, c17.z
mul_pp r1.y, r1.w, c3.w
mul_pp_sat r1.w, r1.y, c17
mov r1.x, c8
add r1.xyz, c3, r1.x
mad_sat r2.xyz, r1, r1.w, c0
add r3.xyz, -v1, c1
mov r1.xyz, v0
add r1.xyz, v1, -r1
dp3 r1.x, r1, r1
dp3 r1.w, r3, r3
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r3.x, -r1, c12, r1.y
pow_sat r1, r3.w, c4.x
mul r1.y, r2.w, c10.x
add_sat r1.y, r1, -c9.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r3, c11
mad r1.x, r1, r1.z, r1.y
mul_pp oC0.xyz, r0, r2
mul_pp oC0.w, r0, r1.x
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 304 // 292 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_FadeDist]
Float 280 [_FadeScale]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 123 instructions, 5 temp regs, 0 temp arrays:
// ALU 114 float, 0 int, 5 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedempjfjfconpofcojgkpfekgponjefimmabaaaaaapabaaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaadaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefciiapaaaaeaaaaaaaocadaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadpcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaafaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaabbaaaaahbcaabaaaabaaaaaaegbobaaaadaaaaaaegbobaaa
adaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahpcaabaaa
abaaaaaaagaabaaaabaaaaaabgbjbaaaadaaaaaaaaaaaaaldcaabaaaacaaaaaa
jgafbaiaibaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaa
aaaaaaaibcaabaaaacaaaaaadkaabaiambaaaaaaabaaaaaaakaabaaaacaaaaaa
ebcaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaaaaaaaajecaabaaaacaaaaaa
dkaabaiambaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaadcaaaaakecaabaaa
acaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaa
aaaaaaaiccaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaabkaabaaaacaaaaaa
ebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajhcaabaaaadaaaaaa
hgaobaiambaaaaaaabaaaaaajgahbaiaibaaaaaaabaaaaaadcaaaaakncaabaaa
acaaaaaaagaabaaaacaaaaaaagajbaaaadaaaaaapgajbaiaibaaaaaaabaaaaaa
aaaaaaajhcaabaaaadaaaaaaggalbaiaibaaaaaaabaaaaaaigadbaiaebaaaaaa
acaaaaaadcaaaaajhcaabaaaacaaaaaafgafbaaaacaaaaaaegacbaaaadaaaaaa
igadbaaaacaaaaaadiaaaaakgcaabaaaacaaaaaakgajbaaaacaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaacaaaaaajgafbaaa
acaaaaaaagaabaaaacaaaaaadiaaaaaidcaabaaaacaaaaaaegaabaaaacaaaaaa
kgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaacaaaaaaakaabaiaibaaaaaa
abaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaacaaaaaackaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
keanmjdpaaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaaabaaaaaaabeaaaaa
aaaaiadpelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaa
acaaaaaaakaabaaaabaaaaaackaabaaaacaaaaaadcaaaaajicaabaaaacaaaaaa
dkaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaacaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaa
akaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaaakaabaaaabaaaaaaalaaaaaf
fcaabaaaabaaaaaafgahbaaaabaaaaaaamaaaaafkcaabaaaabaaaaaafganbaaa
abaaaaaaapaaaaahccaabaaaabaaaaaangafbaaaabaaaaaangafbaaaabaaaaaa
elaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaaeaaaaaa
bkaabaaaabaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaabaaaaaaigaabaaa
abaaaaaaigaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaa
adaaaaaapgipcaaaaaaaaaaabaaaaaaadccaaaambcaabaaaadaaaaaackiacaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaabkiacaiaebaaaaaaaaaaaaaabbaaaaaa
dcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
bacaaaahbcaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaaeaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaaabaaaaaa
aaaaaaajocaabaaaabaaaaaaagbjbaaaacaaaaaaagijcaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaa
aaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaa
baaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaf
gcaabaaaabaaaaaafgagbaaaabaaaaaadcaaaaalccaabaaaabaaaaaaakiacaia
ebaaaaaaaaaaaaaabcaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadicaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaaj
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaadaaaaaa
diaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaa
aaaaaaaaanaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaa
aaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Float 4 [_FalloffPow]
Float 5 [_FalloffScale]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_FadeDist]
Float 10 [_FadeScale]
Float 11 [_RimDist]
Float 12 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 148 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c13, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c14, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp4 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c13.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
dsy r3.xy, r0.xzzw
add r0.w, r0, c13.y
frc r1.w, r0
add_sat r0.w, r0, -r1
add_pp r1.xyz, r1.yxzw, -r2
mad_pp r1.xyz, r0.w, r1, r2
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c13.y
mad r1.z, r0.w, c14.x, c14.y
mad r1.z, r1, r0.w, c13.w
mul_pp r1.xy, r1, c17.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c14.z
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c13.x, c13.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c14.w, r1
mad r0.w, r0, c13.z, r1.z
dp3 r0.y, v4, v4
rsq r0.y, r0.y
mul r2.xyz, r0.y, v4
abs r3.w, r2.x
abs r4.x, r2.z
mul r1.z, r0.w, c15.x
max r0.y, r3.w, r4.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c15.y, c15.z
mad r2.w, r2, r4.z, c15
mul r1.xy, r1, c6.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.x, r3, r3
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c17.x
mul r0.x, r1.z, c17
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c13.y
rsq r3.y, r3.x
mad r2.w, r2, r4.z, c16.x
mad r3.x, r2.w, r4.z, c16.y
rcp r2.w, r3.y
mad r3.x, r3, r4.z, c16.z
mul r3.y, r2.w, c7.x
mul_sat r3.y, r3, c14.w
mad_pp r0, r3.y, r1, r0
abs r1.y, r2
mul r3.x, r3, r4.y
add r1.x, r3.w, -r4
add r1.z, -r3.x, c16.w
cmp r1.x, -r1, r3, r1.z
dsx r3.xy, r2.xzzw
add r1.w, -r1.y, c13.y
mad r1.z, r1.y, c14.x, c14.y
mad r1.z, r1, r1.y, c13.w
rsq r1.w, r1.w
dsy r3.zw, r2.xyxz
mad r1.y, r1.z, r1, c14.z
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r2, c13.x, c13
mul r1.w, r1.y, r1.z
add r2.y, -r1.x, c13.z
mad r1.z, -r1.w, c14.w, r1
cmp r1.w, r2.z, r1.x, r2.y
mad r1.x, r1.y, c13.z, r1.z
cmp r1.y, r2.x, r1.w, -r1.w
mul r1.x, r1, c15
mad r1.z, r1.y, c17.x, c17.y
dsx r2.y, r1.x
mov r1.w, r1.x
dsy r1.y, r1.x
mul r3.xy, r3, r3
add r1.x, r3, r3.y
mul r3.xy, r3.zwzw, r3.zwzw
add r2.x, r3, r3.y
rsq r1.x, r1.x
rsq r2.z, r2.x
rcp r1.x, r1.x
mul r2.x, r1, c17
rcp r1.x, r2.z
dp4 r2.z, c2, c2
mul r1.x, r1, c17
texldd r1, r1.zwzw, s0, r2, r1
mul_pp r0, r1, r0
mov r1.xyz, v3
dp3_sat r3.x, v5, r1
mul r3.w, r3.x, c5.x
rsq r2.z, r2.z
mul r2.xyz, r2.z, c2
dp3_sat r1.w, v3, r2
add_pp r1.w, r1, c17.z
mul_pp r1.y, r1.w, c3.w
mul_pp_sat r1.w, r1.y, c17
mov r1.x, c8
add r1.xyz, c3, r1.x
mad_sat r2.xyz, r1, r1.w, c0
add r3.xyz, -v1, c1
mov r1.xyz, v0
add r1.xyz, v1, -r1
dp3 r1.x, r1, r1
dp3 r1.w, r3, r3
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r3.x, -r1, c12, r1.y
pow_sat r1, r3.w, c4.x
mul r1.y, r2.w, c10.x
add_sat r1.y, r1, -c9.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r3, c11
mad r1.x, r1, r1.z, r1.y
mul_pp oC0.xyz, r0, r2
mul_pp oC0.w, r0, r1.x
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
ConstBuffer "$Globals" 304 // 292 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_FadeDist]
Float 280 [_FadeScale]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 123 instructions, 5 temp regs, 0 temp arrays:
// ALU 114 float, 0 int, 5 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedjfnkjhedcdnnbibklhbkjgjghmoffmfmabaaaaaaaibbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefciiapaaaa
eaaaaaaaocadaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadpcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaafaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
bbaaaaahbcaabaaaabaaaaaaegbobaaaadaaaaaaegbobaaaadaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahpcaabaaaabaaaaaaagaabaaa
abaaaaaabgbjbaaaadaaaaaaaaaaaaaldcaabaaaacaaaaaajgafbaiaibaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaaaaaaaaaibcaabaaa
acaaaaaadkaabaiambaaaaaaabaaaaaaakaabaaaacaaaaaaebcaaaafbcaabaaa
acaaaaaaakaabaaaacaaaaaaaaaaaaajecaabaaaacaaaaaadkaabaiambaaaaaa
abaaaaaabkaabaiaibaaaaaaabaaaaaadcaaaaakecaabaaaacaaaaaaakaabaaa
acaaaaaackaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaaaaaaaaaiccaabaaa
acaaaaaackaabaiaebaaaaaaacaaaaaabkaabaaaacaaaaaaebcaaaafccaabaaa
acaaaaaabkaabaaaacaaaaaaaaaaaaajhcaabaaaadaaaaaahgaobaiambaaaaaa
abaaaaaajgahbaiaibaaaaaaabaaaaaadcaaaaakncaabaaaacaaaaaaagaabaaa
acaaaaaaagajbaaaadaaaaaapgajbaiaibaaaaaaabaaaaaaaaaaaaajhcaabaaa
adaaaaaaggalbaiaibaaaaaaabaaaaaaigadbaiaebaaaaaaacaaaaaadcaaaaaj
hcaabaaaacaaaaaafgafbaaaacaaaaaaegacbaaaadaaaaaaigadbaaaacaaaaaa
diaaaaakgcaabaaaacaaaaaakgajbaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaadp
aaaaaadpaaaaaaaaaoaaaaahdcaabaaaacaaaaaajgafbaaaacaaaaaaagaabaaa
acaaaaaadiaaaaaidcaabaaaacaaaaaaegaabaaaacaaaaaakgikcaaaaaaaaaaa
baaaaaaadcaaaaakecaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakecaabaaaacaaaaaackaabaaaacaaaaaa
akaabaiaibaaaaaaabaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaakeanmjdpaaaaaaai
bcaabaaaabaaaaaaakaabaiambaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaacaaaaaaakaabaaa
abaaaaaackaabaaaacaaaaaadcaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaacaaaaaa
akaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaaakaabaaaabaaaaaa
amaaaaafccaabaaaaeaaaaaaakaabaaaabaaaaaaalaaaaaffcaabaaaabaaaaaa
fgahbaaaabaaaaaaamaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaapaaaaah
ccaabaaaabaaaaaangafbaaaabaaaaaangafbaaaabaaaaaaelaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaaeaaaaaabkaabaaaabaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaabaaaaaaigaabaaaabaaaaaaigaabaaa
abaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaa
egaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaa
egbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaa
adaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaa
akaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaa
aaaaaaaabaaaaaaadccaaaambcaabaaaadaaaaaackiacaaaaaaaaaaabbaaaaaa
akaabaaaadaaaaaabkiacaiaebaaaaaaaaaaaaaabbaaaaaadcaaaaajpcaabaaa
abaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaah
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaabacaaaahbcaabaaa
abaaaaaaegbcbaaaagaaaaaaegbcbaaaaeaaaaaadiaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakiacaaa
aaaaaaaabaaaaaaabjaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaibcaabaaa
abaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaaabaaaaaaaaaaaaajocaabaaa
abaaaaaaagbjbaaaacaaaaaaagijcaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaaaaaaaaaihcaabaaa
acaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahecaabaaa
abaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafgcaabaaaabaaaaaa
fgagbaaaabaaaaaadcaaaaalccaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaa
bcaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadicaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaadaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Float 4 [_FalloffPow]
Float 5 [_FalloffScale]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_FadeDist]
Float 10 [_FadeScale]
Float 11 [_RimDist]
Float 12 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 148 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c13, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c14, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp4 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c13.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
dsy r3.xy, r0.xzzw
add r0.w, r0, c13.y
frc r1.w, r0
add_sat r0.w, r0, -r1
add_pp r1.xyz, r1.yxzw, -r2
mad_pp r1.xyz, r0.w, r1, r2
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c13.y
mad r1.z, r0.w, c14.x, c14.y
mad r1.z, r1, r0.w, c13.w
mul_pp r1.xy, r1, c17.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c14.z
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c13.x, c13.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c14.w, r1
mad r0.w, r0, c13.z, r1.z
dp3 r0.y, v4, v4
rsq r0.y, r0.y
mul r2.xyz, r0.y, v4
abs r3.w, r2.x
abs r4.x, r2.z
mul r1.z, r0.w, c15.x
max r0.y, r3.w, r4.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c15.y, c15.z
mad r2.w, r2, r4.z, c15
mul r1.xy, r1, c6.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.x, r3, r3
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c17.x
mul r0.x, r1.z, c17
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c13.y
rsq r3.y, r3.x
mad r2.w, r2, r4.z, c16.x
mad r3.x, r2.w, r4.z, c16.y
rcp r2.w, r3.y
mad r3.x, r3, r4.z, c16.z
mul r3.y, r2.w, c7.x
mul_sat r3.y, r3, c14.w
mad_pp r0, r3.y, r1, r0
abs r1.y, r2
mul r3.x, r3, r4.y
add r1.x, r3.w, -r4
add r1.z, -r3.x, c16.w
cmp r1.x, -r1, r3, r1.z
dsx r3.xy, r2.xzzw
add r1.w, -r1.y, c13.y
mad r1.z, r1.y, c14.x, c14.y
mad r1.z, r1, r1.y, c13.w
rsq r1.w, r1.w
dsy r3.zw, r2.xyxz
mad r1.y, r1.z, r1, c14.z
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r2, c13.x, c13
mul r1.w, r1.y, r1.z
add r2.y, -r1.x, c13.z
mad r1.z, -r1.w, c14.w, r1
cmp r1.w, r2.z, r1.x, r2.y
mad r1.x, r1.y, c13.z, r1.z
cmp r1.y, r2.x, r1.w, -r1.w
mul r1.x, r1, c15
mad r1.z, r1.y, c17.x, c17.y
dsx r2.y, r1.x
mov r1.w, r1.x
dsy r1.y, r1.x
mul r3.xy, r3, r3
add r1.x, r3, r3.y
mul r3.xy, r3.zwzw, r3.zwzw
add r2.x, r3, r3.y
rsq r1.x, r1.x
rsq r2.z, r2.x
rcp r1.x, r1.x
mul r2.x, r1, c17
rcp r1.x, r2.z
dp4 r2.z, c2, c2
mul r1.x, r1, c17
texldd r1, r1.zwzw, s0, r2, r1
mul_pp r0, r1, r0
mov r1.xyz, v3
dp3_sat r3.x, v5, r1
mul r3.w, r3.x, c5.x
rsq r2.z, r2.z
mul r2.xyz, r2.z, c2
dp3_sat r1.w, v3, r2
add_pp r1.w, r1, c17.z
mul_pp r1.y, r1.w, c3.w
mul_pp_sat r1.w, r1.y, c17
mov r1.x, c8
add r1.xyz, c3, r1.x
mad_sat r2.xyz, r1, r1.w, c0
add r3.xyz, -v1, c1
mov r1.xyz, v0
add r1.xyz, v1, -r1
dp3 r1.x, r1, r1
dp3 r1.w, r3, r3
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r3.x, -r1, c12, r1.y
pow_sat r1, r3.w, c4.x
mul r1.y, r2.w, c10.x
add_sat r1.y, r1, -c9.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r3, c11
mad r1.x, r1, r1.z, r1.y
mul_pp oC0.xyz, r0, r2
mul_pp oC0.w, r0, r1.x
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 304 // 292 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_FadeDist]
Float 280 [_FadeScale]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 123 instructions, 5 temp regs, 0 temp arrays:
// ALU 114 float, 0 int, 5 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedjfnkjhedcdnnbibklhbkjgjghmoffmfmabaaaaaaaibbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefciiapaaaa
eaaaaaaaocadaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadpcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaafaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
bbaaaaahbcaabaaaabaaaaaaegbobaaaadaaaaaaegbobaaaadaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahpcaabaaaabaaaaaaagaabaaa
abaaaaaabgbjbaaaadaaaaaaaaaaaaaldcaabaaaacaaaaaajgafbaiaibaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaaaaaaaaaibcaabaaa
acaaaaaadkaabaiambaaaaaaabaaaaaaakaabaaaacaaaaaaebcaaaafbcaabaaa
acaaaaaaakaabaaaacaaaaaaaaaaaaajecaabaaaacaaaaaadkaabaiambaaaaaa
abaaaaaabkaabaiaibaaaaaaabaaaaaadcaaaaakecaabaaaacaaaaaaakaabaaa
acaaaaaackaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaaaaaaaaaiccaabaaa
acaaaaaackaabaiaebaaaaaaacaaaaaabkaabaaaacaaaaaaebcaaaafccaabaaa
acaaaaaabkaabaaaacaaaaaaaaaaaaajhcaabaaaadaaaaaahgaobaiambaaaaaa
abaaaaaajgahbaiaibaaaaaaabaaaaaadcaaaaakncaabaaaacaaaaaaagaabaaa
acaaaaaaagajbaaaadaaaaaapgajbaiaibaaaaaaabaaaaaaaaaaaaajhcaabaaa
adaaaaaaggalbaiaibaaaaaaabaaaaaaigadbaiaebaaaaaaacaaaaaadcaaaaaj
hcaabaaaacaaaaaafgafbaaaacaaaaaaegacbaaaadaaaaaaigadbaaaacaaaaaa
diaaaaakgcaabaaaacaaaaaakgajbaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaadp
aaaaaadpaaaaaaaaaoaaaaahdcaabaaaacaaaaaajgafbaaaacaaaaaaagaabaaa
acaaaaaadiaaaaaidcaabaaaacaaaaaaegaabaaaacaaaaaakgikcaaaaaaaaaaa
baaaaaaadcaaaaakecaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakecaabaaaacaaaaaackaabaaaacaaaaaa
akaabaiaibaaaaaaabaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaakeanmjdpaaaaaaai
bcaabaaaabaaaaaaakaabaiambaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaacaaaaaaakaabaaa
abaaaaaackaabaaaacaaaaaadcaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaacaaaaaa
akaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaaakaabaaaabaaaaaa
amaaaaafccaabaaaaeaaaaaaakaabaaaabaaaaaaalaaaaaffcaabaaaabaaaaaa
fgahbaaaabaaaaaaamaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaapaaaaah
ccaabaaaabaaaaaangafbaaaabaaaaaangafbaaaabaaaaaaelaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaaeaaaaaabkaabaaaabaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaabaaaaaaigaabaaaabaaaaaaigaabaaa
abaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaa
egaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaa
egbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaa
adaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaa
akaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaa
aaaaaaaabaaaaaaadccaaaambcaabaaaadaaaaaackiacaaaaaaaaaaabbaaaaaa
akaabaaaadaaaaaabkiacaiaebaaaaaaaaaaaaaabbaaaaaadcaaaaajpcaabaaa
abaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaah
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaabacaaaahbcaabaaa
abaaaaaaegbcbaaaagaaaaaaegbcbaaaaeaaaaaadiaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakiacaaa
aaaaaaaabaaaaaaabjaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaibcaabaaa
abaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaaabaaaaaaaaaaaaajocaabaaa
abaaaaaaagbjbaaaacaaaaaaagijcaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaaaaaaaaaihcaabaaa
acaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahecaabaaa
abaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafgcaabaaaabaaaaaa
fgagbaaaabaaaaaadcaaaaalccaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaa
bcaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadicaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaadaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Float 4 [_FalloffPow]
Float 5 [_FalloffScale]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_FadeDist]
Float 10 [_FadeScale]
Float 11 [_RimDist]
Float 12 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 148 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c13, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c14, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp4 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c13.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
dsy r3.xy, r0.xzzw
add r0.w, r0, c13.y
frc r1.w, r0
add_sat r0.w, r0, -r1
add_pp r1.xyz, r1.yxzw, -r2
mad_pp r1.xyz, r0.w, r1, r2
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c13.y
mad r1.z, r0.w, c14.x, c14.y
mad r1.z, r1, r0.w, c13.w
mul_pp r1.xy, r1, c17.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c14.z
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c13.x, c13.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c14.w, r1
mad r0.w, r0, c13.z, r1.z
dp3 r0.y, v4, v4
rsq r0.y, r0.y
mul r2.xyz, r0.y, v4
abs r3.w, r2.x
abs r4.x, r2.z
mul r1.z, r0.w, c15.x
max r0.y, r3.w, r4.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c15.y, c15.z
mad r2.w, r2, r4.z, c15
mul r1.xy, r1, c6.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.x, r3, r3
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c17.x
mul r0.x, r1.z, c17
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c13.y
rsq r3.y, r3.x
mad r2.w, r2, r4.z, c16.x
mad r3.x, r2.w, r4.z, c16.y
rcp r2.w, r3.y
mad r3.x, r3, r4.z, c16.z
mul r3.y, r2.w, c7.x
mul_sat r3.y, r3, c14.w
mad_pp r0, r3.y, r1, r0
abs r1.y, r2
mul r3.x, r3, r4.y
add r1.x, r3.w, -r4
add r1.z, -r3.x, c16.w
cmp r1.x, -r1, r3, r1.z
dsx r3.xy, r2.xzzw
add r1.w, -r1.y, c13.y
mad r1.z, r1.y, c14.x, c14.y
mad r1.z, r1, r1.y, c13.w
rsq r1.w, r1.w
dsy r3.zw, r2.xyxz
mad r1.y, r1.z, r1, c14.z
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r2, c13.x, c13
mul r1.w, r1.y, r1.z
add r2.y, -r1.x, c13.z
mad r1.z, -r1.w, c14.w, r1
cmp r1.w, r2.z, r1.x, r2.y
mad r1.x, r1.y, c13.z, r1.z
cmp r1.y, r2.x, r1.w, -r1.w
mul r1.x, r1, c15
mad r1.z, r1.y, c17.x, c17.y
dsx r2.y, r1.x
mov r1.w, r1.x
dsy r1.y, r1.x
mul r3.xy, r3, r3
add r1.x, r3, r3.y
mul r3.xy, r3.zwzw, r3.zwzw
add r2.x, r3, r3.y
rsq r1.x, r1.x
rsq r2.z, r2.x
rcp r1.x, r1.x
mul r2.x, r1, c17
rcp r1.x, r2.z
dp4_pp r2.z, c2, c2
mul r1.x, r1, c17
texldd r1, r1.zwzw, s0, r2, r1
mul_pp r0, r1, r0
mov r1.xyz, v3
dp3_sat r3.x, v5, r1
mul r3.w, r3.x, c5.x
rsq_pp r2.z, r2.z
mul_pp r2.xyz, r2.z, c2
dp3_sat r1.w, v3, r2
add_pp r1.w, r1, c17.z
mul_pp r1.y, r1.w, c3.w
mul_pp_sat r1.w, r1.y, c17
mov r1.x, c8
add r1.xyz, c3, r1.x
mad_sat r2.xyz, r1, r1.w, c0
add r3.xyz, -v1, c1
mov r1.xyz, v0
add r1.xyz, v1, -r1
dp3 r1.x, r1, r1
dp3 r1.w, r3, r3
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r3.x, -r1, c12, r1.y
pow_sat r1, r3.w, c4.x
mul r1.y, r2.w, c10.x
add_sat r1.y, r1, -c9.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r3, c11
mad r1.x, r1, r1.z, r1.y
mul_pp oC0.xyz, r0, r2
mul_pp oC0.w, r0, r1.x
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 304 // 292 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_FadeDist]
Float 280 [_FadeScale]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 123 instructions, 5 temp regs, 0 temp arrays:
// ALU 114 float, 0 int, 5 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedgmhnkngfjjeinfdkicpgckndaabeokbeabaaaaaapabaaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefciiapaaaaeaaaaaaaocadaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadpcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaafaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaabbaaaaahbcaabaaaabaaaaaaegbobaaaadaaaaaaegbobaaa
adaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahpcaabaaa
abaaaaaaagaabaaaabaaaaaabgbjbaaaadaaaaaaaaaaaaaldcaabaaaacaaaaaa
jgafbaiaibaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaa
aaaaaaaibcaabaaaacaaaaaadkaabaiambaaaaaaabaaaaaaakaabaaaacaaaaaa
ebcaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaaaaaaaajecaabaaaacaaaaaa
dkaabaiambaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaadcaaaaakecaabaaa
acaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaa
aaaaaaaiccaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaabkaabaaaacaaaaaa
ebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajhcaabaaaadaaaaaa
hgaobaiambaaaaaaabaaaaaajgahbaiaibaaaaaaabaaaaaadcaaaaakncaabaaa
acaaaaaaagaabaaaacaaaaaaagajbaaaadaaaaaapgajbaiaibaaaaaaabaaaaaa
aaaaaaajhcaabaaaadaaaaaaggalbaiaibaaaaaaabaaaaaaigadbaiaebaaaaaa
acaaaaaadcaaaaajhcaabaaaacaaaaaafgafbaaaacaaaaaaegacbaaaadaaaaaa
igadbaaaacaaaaaadiaaaaakgcaabaaaacaaaaaakgajbaaaacaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaacaaaaaajgafbaaa
acaaaaaaagaabaaaacaaaaaadiaaaaaidcaabaaaacaaaaaaegaabaaaacaaaaaa
kgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaacaaaaaaakaabaiaibaaaaaa
abaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaacaaaaaackaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
keanmjdpaaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaaabaaaaaaabeaaaaa
aaaaiadpelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaa
acaaaaaaakaabaaaabaaaaaackaabaaaacaaaaaadcaaaaajicaabaaaacaaaaaa
dkaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaacaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaa
akaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaaakaabaaaabaaaaaaalaaaaaf
fcaabaaaabaaaaaafgahbaaaabaaaaaaamaaaaafkcaabaaaabaaaaaafganbaaa
abaaaaaaapaaaaahccaabaaaabaaaaaangafbaaaabaaaaaangafbaaaabaaaaaa
elaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaaeaaaaaa
bkaabaaaabaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaabaaaaaaigaabaaa
abaaaaaaigaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaa
adaaaaaapgipcaaaaaaaaaaabaaaaaaadccaaaambcaabaaaadaaaaaackiacaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaabkiacaiaebaaaaaaaaaaaaaabbaaaaaa
dcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
bacaaaahbcaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaaeaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaaabaaaaaa
aaaaaaajocaabaaaabaaaaaaagbjbaaaacaaaaaaagijcaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaa
aaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaa
baaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaf
gcaabaaaabaaaaaafgagbaaaabaaaaaadcaaaaalccaabaaaabaaaaaaakiacaia
ebaaaaaaaaaaaaaabcaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadicaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaaj
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaadaaaaaa
diaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaa
aaaaaaaaanaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaa
aaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Float 4 [_FalloffPow]
Float 5 [_FalloffScale]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_FadeDist]
Float 10 [_FadeScale]
Float 11 [_RimDist]
Float 12 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 148 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c13, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c14, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp4 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c13.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
dsy r3.xy, r0.xzzw
add r0.w, r0, c13.y
frc r1.w, r0
add_sat r0.w, r0, -r1
add_pp r1.xyz, r1.yxzw, -r2
mad_pp r1.xyz, r0.w, r1, r2
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c13.y
mad r1.z, r0.w, c14.x, c14.y
mad r1.z, r1, r0.w, c13.w
mul_pp r1.xy, r1, c17.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c14.z
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c13.x, c13.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c14.w, r1
mad r0.w, r0, c13.z, r1.z
dp3 r0.y, v4, v4
rsq r0.y, r0.y
mul r2.xyz, r0.y, v4
abs r3.w, r2.x
abs r4.x, r2.z
mul r1.z, r0.w, c15.x
max r0.y, r3.w, r4.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c15.y, c15.z
mad r2.w, r2, r4.z, c15
mul r1.xy, r1, c6.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.x, r3, r3
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c17.x
mul r0.x, r1.z, c17
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c13.y
rsq r3.y, r3.x
mad r2.w, r2, r4.z, c16.x
mad r3.x, r2.w, r4.z, c16.y
rcp r2.w, r3.y
mad r3.x, r3, r4.z, c16.z
mul r3.y, r2.w, c7.x
mul_sat r3.y, r3, c14.w
mad_pp r0, r3.y, r1, r0
abs r1.y, r2
mul r3.x, r3, r4.y
add r1.x, r3.w, -r4
add r1.z, -r3.x, c16.w
cmp r1.x, -r1, r3, r1.z
dsx r3.xy, r2.xzzw
add r1.w, -r1.y, c13.y
mad r1.z, r1.y, c14.x, c14.y
mad r1.z, r1, r1.y, c13.w
rsq r1.w, r1.w
dsy r3.zw, r2.xyxz
mad r1.y, r1.z, r1, c14.z
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r2, c13.x, c13
mul r1.w, r1.y, r1.z
add r2.y, -r1.x, c13.z
mad r1.z, -r1.w, c14.w, r1
cmp r1.w, r2.z, r1.x, r2.y
mad r1.x, r1.y, c13.z, r1.z
cmp r1.y, r2.x, r1.w, -r1.w
mul r1.x, r1, c15
mad r1.z, r1.y, c17.x, c17.y
dsx r2.y, r1.x
mov r1.w, r1.x
dsy r1.y, r1.x
mul r3.xy, r3, r3
add r1.x, r3, r3.y
mul r3.xy, r3.zwzw, r3.zwzw
add r2.x, r3, r3.y
rsq r1.x, r1.x
rsq r2.z, r2.x
rcp r1.x, r1.x
mul r2.x, r1, c17
rcp r1.x, r2.z
dp4_pp r2.z, c2, c2
mul r1.x, r1, c17
texldd r1, r1.zwzw, s0, r2, r1
mul_pp r0, r1, r0
mov r1.xyz, v3
dp3_sat r3.x, v5, r1
mul r3.w, r3.x, c5.x
rsq_pp r2.z, r2.z
mul_pp r2.xyz, r2.z, c2
dp3_sat r1.w, v3, r2
add_pp r1.w, r1, c17.z
mul_pp r1.y, r1.w, c3.w
mul_pp_sat r1.w, r1.y, c17
mov r1.x, c8
add r1.xyz, c3, r1.x
mad_sat r2.xyz, r1, r1.w, c0
add r3.xyz, -v1, c1
mov r1.xyz, v0
add r1.xyz, v1, -r1
dp3 r1.x, r1, r1
dp3 r1.w, r3, r3
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r3.x, -r1, c12, r1.y
pow_sat r1, r3.w, c4.x
mul r1.y, r2.w, c10.x
add_sat r1.y, r1, -c9.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r3, c11
mad r1.x, r1, r1.z, r1.y
mul_pp oC0.xyz, r0, r2
mul_pp oC0.w, r0, r1.x
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 368 // 356 used size, 18 vars
Vector 272 [_LightColor0] 4
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_FadeDist]
Float 344 [_FadeScale]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 123 instructions, 5 temp regs, 0 temp arrays:
// ALU 114 float, 0 int, 5 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecediimbdaanlhckidooaadkkkiljcmcomhbabaaaaaaaibbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaadaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefciiapaaaa
eaaaaaaaocadaaaafjaaaaaeegiocaaaaaaaaaaabhaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadpcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaafaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
bbaaaaahbcaabaaaabaaaaaaegbobaaaadaaaaaaegbobaaaadaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahpcaabaaaabaaaaaaagaabaaa
abaaaaaabgbjbaaaadaaaaaaaaaaaaaldcaabaaaacaaaaaajgafbaiaibaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaaaaaaaaaibcaabaaa
acaaaaaadkaabaiambaaaaaaabaaaaaaakaabaaaacaaaaaaebcaaaafbcaabaaa
acaaaaaaakaabaaaacaaaaaaaaaaaaajecaabaaaacaaaaaadkaabaiambaaaaaa
abaaaaaabkaabaiaibaaaaaaabaaaaaadcaaaaakecaabaaaacaaaaaaakaabaaa
acaaaaaackaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaaaaaaaaaiccaabaaa
acaaaaaackaabaiaebaaaaaaacaaaaaabkaabaaaacaaaaaaebcaaaafccaabaaa
acaaaaaabkaabaaaacaaaaaaaaaaaaajhcaabaaaadaaaaaahgaobaiambaaaaaa
abaaaaaajgahbaiaibaaaaaaabaaaaaadcaaaaakncaabaaaacaaaaaaagaabaaa
acaaaaaaagajbaaaadaaaaaapgajbaiaibaaaaaaabaaaaaaaaaaaaajhcaabaaa
adaaaaaaggalbaiaibaaaaaaabaaaaaaigadbaiaebaaaaaaacaaaaaadcaaaaaj
hcaabaaaacaaaaaafgafbaaaacaaaaaaegacbaaaadaaaaaaigadbaaaacaaaaaa
diaaaaakgcaabaaaacaaaaaakgajbaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaadp
aaaaaadpaaaaaaaaaoaaaaahdcaabaaaacaaaaaajgafbaaaacaaaaaaagaabaaa
acaaaaaadiaaaaaidcaabaaaacaaaaaaegaabaaaacaaaaaakgikcaaaaaaaaaaa
beaaaaaadcaaaaakecaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakecaabaaaacaaaaaackaabaaaacaaaaaa
akaabaiaibaaaaaaabaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaakeanmjdpaaaaaaai
bcaabaaaabaaaaaaakaabaiambaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaacaaaaaaakaabaaa
abaaaaaackaabaaaacaaaaaadcaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaacaaaaaa
akaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaaakaabaaaabaaaaaa
amaaaaafccaabaaaaeaaaaaaakaabaaaabaaaaaaalaaaaaffcaabaaaabaaaaaa
fgahbaaaabaaaaaaamaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaapaaaaah
ccaabaaaabaaaaaangafbaaaabaaaaaangafbaaaabaaaaaaelaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaaeaaaaaabkaabaaaabaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaabaaaaaaigaabaaaabaaaaaaigaabaaa
abaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaa
egaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaa
egbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaa
adaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaa
akaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaa
aaaaaaaabeaaaaaadccaaaambcaabaaaadaaaaaackiacaaaaaaaaaaabfaaaaaa
akaabaaaadaaaaaabkiacaiaebaaaaaaaaaaaaaabfaaaaaadcaaaaajpcaabaaa
abaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaah
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaabacaaaahbcaabaaa
abaaaaaaegbcbaaaagaaaaaaegbcbaaaaeaaaaaadiaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaabkiacaaaaaaaaaaabeaaaaaacpaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakiacaaa
aaaaaaaabeaaaaaabjaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaibcaabaaa
abaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaaabaaaaaaaaaaaaajocaabaaa
abaaaaaaagbjbaaaacaaaaaaagijcaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaaaaaaaaaihcaabaaa
acaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahecaabaaa
abaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafgcaabaaaabaaaaaa
fgagbaaaabaaaaaadcaaaaalccaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaa
bgaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadicaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaadkiacaaaaaaaaaaabfaaaaaadcaaaaajbcaabaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaadaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaabbaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaabbaaaaaaagiacaaaaaaaaaaabfaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Float 4 [_FalloffPow]
Float 5 [_FalloffScale]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_FadeDist]
Float 10 [_FadeScale]
Float 11 [_RimDist]
Float 12 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 148 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c13, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c14, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp4 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c13.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
dsy r3.xy, r0.xzzw
add r0.w, r0, c13.y
frc r1.w, r0
add_sat r0.w, r0, -r1
add_pp r1.xyz, r1.yxzw, -r2
mad_pp r1.xyz, r0.w, r1, r2
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c13.y
mad r1.z, r0.w, c14.x, c14.y
mad r1.z, r1, r0.w, c13.w
mul_pp r1.xy, r1, c17.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c14.z
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c13.x, c13.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c14.w, r1
mad r0.w, r0, c13.z, r1.z
dp3 r0.y, v4, v4
rsq r0.y, r0.y
mul r2.xyz, r0.y, v4
abs r3.w, r2.x
abs r4.x, r2.z
mul r1.z, r0.w, c15.x
max r0.y, r3.w, r4.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c15.y, c15.z
mad r2.w, r2, r4.z, c15
mul r1.xy, r1, c6.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.x, r3, r3
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c17.x
mul r0.x, r1.z, c17
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c13.y
rsq r3.y, r3.x
mad r2.w, r2, r4.z, c16.x
mad r3.x, r2.w, r4.z, c16.y
rcp r2.w, r3.y
mad r3.x, r3, r4.z, c16.z
mul r3.y, r2.w, c7.x
mul_sat r3.y, r3, c14.w
mad_pp r0, r3.y, r1, r0
abs r1.y, r2
mul r3.x, r3, r4.y
add r1.x, r3.w, -r4
add r1.z, -r3.x, c16.w
cmp r1.x, -r1, r3, r1.z
dsx r3.xy, r2.xzzw
add r1.w, -r1.y, c13.y
mad r1.z, r1.y, c14.x, c14.y
mad r1.z, r1, r1.y, c13.w
rsq r1.w, r1.w
dsy r3.zw, r2.xyxz
mad r1.y, r1.z, r1, c14.z
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r2, c13.x, c13
mul r1.w, r1.y, r1.z
add r2.y, -r1.x, c13.z
mad r1.z, -r1.w, c14.w, r1
cmp r1.w, r2.z, r1.x, r2.y
mad r1.x, r1.y, c13.z, r1.z
cmp r1.y, r2.x, r1.w, -r1.w
mul r1.x, r1, c15
mad r1.z, r1.y, c17.x, c17.y
dsx r2.y, r1.x
mov r1.w, r1.x
dsy r1.y, r1.x
mul r3.xy, r3, r3
add r1.x, r3, r3.y
mul r3.xy, r3.zwzw, r3.zwzw
add r2.x, r3, r3.y
rsq r1.x, r1.x
rsq r2.z, r2.x
rcp r1.x, r1.x
mul r2.x, r1, c17
rcp r1.x, r2.z
dp4 r2.z, c2, c2
mul r1.x, r1, c17
texldd r1, r1.zwzw, s0, r2, r1
mul_pp r0, r1, r0
mov r1.xyz, v3
dp3_sat r3.x, v5, r1
mul r3.w, r3.x, c5.x
rsq r2.z, r2.z
mul r2.xyz, r2.z, c2
dp3_sat r1.w, v3, r2
add_pp r1.w, r1, c17.z
mul_pp r1.y, r1.w, c3.w
mul_pp_sat r1.w, r1.y, c17
mov r1.x, c8
add r1.xyz, c3, r1.x
mad_sat r2.xyz, r1, r1.w, c0
add r3.xyz, -v1, c1
mov r1.xyz, v0
add r1.xyz, v1, -r1
dp3 r1.x, r1, r1
dp3 r1.w, r3, r3
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r3.x, -r1, c12, r1.y
pow_sat r1, r3.w, c4.x
mul r1.y, r2.w, c10.x
add_sat r1.y, r1, -c9.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r3, c11
mad r1.x, r1, r1.z, r1.y
mul_pp oC0.xyz, r0, r2
mul_pp oC0.w, r0, r1.x
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 304 // 292 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_FadeDist]
Float 280 [_FadeScale]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 123 instructions, 5 temp regs, 0 temp arrays:
// ALU 114 float, 0 int, 5 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhcinaghdhfakdopfopgglakbpidogekpabaaaaaaaibbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefciiapaaaa
eaaaaaaaocadaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadpcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaafaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
bbaaaaahbcaabaaaabaaaaaaegbobaaaadaaaaaaegbobaaaadaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahpcaabaaaabaaaaaaagaabaaa
abaaaaaabgbjbaaaadaaaaaaaaaaaaaldcaabaaaacaaaaaajgafbaiaibaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaaaaaaaaaibcaabaaa
acaaaaaadkaabaiambaaaaaaabaaaaaaakaabaaaacaaaaaaebcaaaafbcaabaaa
acaaaaaaakaabaaaacaaaaaaaaaaaaajecaabaaaacaaaaaadkaabaiambaaaaaa
abaaaaaabkaabaiaibaaaaaaabaaaaaadcaaaaakecaabaaaacaaaaaaakaabaaa
acaaaaaackaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaaaaaaaaaiccaabaaa
acaaaaaackaabaiaebaaaaaaacaaaaaabkaabaaaacaaaaaaebcaaaafccaabaaa
acaaaaaabkaabaaaacaaaaaaaaaaaaajhcaabaaaadaaaaaahgaobaiambaaaaaa
abaaaaaajgahbaiaibaaaaaaabaaaaaadcaaaaakncaabaaaacaaaaaaagaabaaa
acaaaaaaagajbaaaadaaaaaapgajbaiaibaaaaaaabaaaaaaaaaaaaajhcaabaaa
adaaaaaaggalbaiaibaaaaaaabaaaaaaigadbaiaebaaaaaaacaaaaaadcaaaaaj
hcaabaaaacaaaaaafgafbaaaacaaaaaaegacbaaaadaaaaaaigadbaaaacaaaaaa
diaaaaakgcaabaaaacaaaaaakgajbaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaadp
aaaaaadpaaaaaaaaaoaaaaahdcaabaaaacaaaaaajgafbaaaacaaaaaaagaabaaa
acaaaaaadiaaaaaidcaabaaaacaaaaaaegaabaaaacaaaaaakgikcaaaaaaaaaaa
baaaaaaadcaaaaakecaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakecaabaaaacaaaaaackaabaaaacaaaaaa
akaabaiaibaaaaaaabaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaakeanmjdpaaaaaaai
bcaabaaaabaaaaaaakaabaiambaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaacaaaaaaakaabaaa
abaaaaaackaabaaaacaaaaaadcaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaacaaaaaa
akaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaaakaabaaaabaaaaaa
amaaaaafccaabaaaaeaaaaaaakaabaaaabaaaaaaalaaaaaffcaabaaaabaaaaaa
fgahbaaaabaaaaaaamaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaapaaaaah
ccaabaaaabaaaaaangafbaaaabaaaaaangafbaaaabaaaaaaelaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaaeaaaaaabkaabaaaabaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaabaaaaaaigaabaaaabaaaaaaigaabaaa
abaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaa
egaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaa
egbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaa
adaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaa
akaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaa
aaaaaaaabaaaaaaadccaaaambcaabaaaadaaaaaackiacaaaaaaaaaaabbaaaaaa
akaabaaaadaaaaaabkiacaiaebaaaaaaaaaaaaaabbaaaaaadcaaaaajpcaabaaa
abaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaah
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaabacaaaahbcaabaaa
abaaaaaaegbcbaaaagaaaaaaegbcbaaaaeaaaaaadiaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakiacaaa
aaaaaaaabaaaaaaabjaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaibcaabaaa
abaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaaabaaaaaaaaaaaaajocaabaaa
abaaaaaaagbjbaaaacaaaaaaagijcaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaaaaaaaaaihcaabaaa
acaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahecaabaaa
abaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafgcaabaaaabaaaaaa
fgagbaaaabaaaaaadcaaaaalccaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaa
bcaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadicaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaadaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Float 4 [_FalloffPow]
Float 5 [_FalloffScale]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_FadeDist]
Float 10 [_FadeScale]
Float 11 [_RimDist]
Float 12 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 148 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c13, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c14, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp4 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c13.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
dsy r3.xy, r0.xzzw
add r0.w, r0, c13.y
frc r1.w, r0
add_sat r0.w, r0, -r1
add_pp r1.xyz, r1.yxzw, -r2
mad_pp r1.xyz, r0.w, r1, r2
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c13.y
mad r1.z, r0.w, c14.x, c14.y
mad r1.z, r1, r0.w, c13.w
mul_pp r1.xy, r1, c17.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c14.z
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c13.x, c13.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c14.w, r1
mad r0.w, r0, c13.z, r1.z
dp3 r0.y, v4, v4
rsq r0.y, r0.y
mul r2.xyz, r0.y, v4
abs r3.w, r2.x
abs r4.x, r2.z
mul r1.z, r0.w, c15.x
max r0.y, r3.w, r4.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c15.y, c15.z
mad r2.w, r2, r4.z, c15
mul r1.xy, r1, c6.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.x, r3, r3
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c17.x
mul r0.x, r1.z, c17
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c13.y
rsq r3.y, r3.x
mad r2.w, r2, r4.z, c16.x
mad r3.x, r2.w, r4.z, c16.y
rcp r2.w, r3.y
mad r3.x, r3, r4.z, c16.z
mul r3.y, r2.w, c7.x
mul_sat r3.y, r3, c14.w
mad_pp r0, r3.y, r1, r0
abs r1.y, r2
mul r3.x, r3, r4.y
add r1.x, r3.w, -r4
add r1.z, -r3.x, c16.w
cmp r1.x, -r1, r3, r1.z
dsx r3.xy, r2.xzzw
add r1.w, -r1.y, c13.y
mad r1.z, r1.y, c14.x, c14.y
mad r1.z, r1, r1.y, c13.w
rsq r1.w, r1.w
dsy r3.zw, r2.xyxz
mad r1.y, r1.z, r1, c14.z
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r2, c13.x, c13
mul r1.w, r1.y, r1.z
add r2.y, -r1.x, c13.z
mad r1.z, -r1.w, c14.w, r1
cmp r1.w, r2.z, r1.x, r2.y
mad r1.x, r1.y, c13.z, r1.z
cmp r1.y, r2.x, r1.w, -r1.w
mul r1.x, r1, c15
mad r1.z, r1.y, c17.x, c17.y
dsx r2.y, r1.x
mov r1.w, r1.x
dsy r1.y, r1.x
mul r3.xy, r3, r3
add r1.x, r3, r3.y
mul r3.xy, r3.zwzw, r3.zwzw
add r2.x, r3, r3.y
rsq r1.x, r1.x
rsq r2.z, r2.x
rcp r1.x, r1.x
mul r2.x, r1, c17
rcp r1.x, r2.z
dp4 r2.z, c2, c2
mul r1.x, r1, c17
texldd r1, r1.zwzw, s0, r2, r1
mul_pp r0, r1, r0
mov r1.xyz, v3
dp3_sat r3.x, v5, r1
mul r3.w, r3.x, c5.x
rsq r2.z, r2.z
mul r2.xyz, r2.z, c2
dp3_sat r1.w, v3, r2
add_pp r1.w, r1, c17.z
mul_pp r1.y, r1.w, c3.w
mul_pp_sat r1.w, r1.y, c17
mov r1.x, c8
add r1.xyz, c3, r1.x
mad_sat r2.xyz, r1, r1.w, c0
add r3.xyz, -v1, c1
mov r1.xyz, v0
add r1.xyz, v1, -r1
dp3 r1.x, r1, r1
dp3 r1.w, r3, r3
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r3.x, -r1, c12, r1.y
pow_sat r1, r3.w, c4.x
mul r1.y, r2.w, c10.x
add_sat r1.y, r1, -c9.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r3, c11
mad r1.x, r1, r1.z, r1.y
mul_pp oC0.xyz, r0, r2
mul_pp oC0.w, r0, r1.x
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 304 // 292 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_FadeDist]
Float 280 [_FadeScale]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 123 instructions, 5 temp regs, 0 temp arrays:
// ALU 114 float, 0 int, 5 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhcinaghdhfakdopfopgglakbpidogekpabaaaaaaaibbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefciiapaaaa
eaaaaaaaocadaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadpcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaafaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
bbaaaaahbcaabaaaabaaaaaaegbobaaaadaaaaaaegbobaaaadaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahpcaabaaaabaaaaaaagaabaaa
abaaaaaabgbjbaaaadaaaaaaaaaaaaaldcaabaaaacaaaaaajgafbaiaibaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaaaaaaaaaibcaabaaa
acaaaaaadkaabaiambaaaaaaabaaaaaaakaabaaaacaaaaaaebcaaaafbcaabaaa
acaaaaaaakaabaaaacaaaaaaaaaaaaajecaabaaaacaaaaaadkaabaiambaaaaaa
abaaaaaabkaabaiaibaaaaaaabaaaaaadcaaaaakecaabaaaacaaaaaaakaabaaa
acaaaaaackaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaaaaaaaaaiccaabaaa
acaaaaaackaabaiaebaaaaaaacaaaaaabkaabaaaacaaaaaaebcaaaafccaabaaa
acaaaaaabkaabaaaacaaaaaaaaaaaaajhcaabaaaadaaaaaahgaobaiambaaaaaa
abaaaaaajgahbaiaibaaaaaaabaaaaaadcaaaaakncaabaaaacaaaaaaagaabaaa
acaaaaaaagajbaaaadaaaaaapgajbaiaibaaaaaaabaaaaaaaaaaaaajhcaabaaa
adaaaaaaggalbaiaibaaaaaaabaaaaaaigadbaiaebaaaaaaacaaaaaadcaaaaaj
hcaabaaaacaaaaaafgafbaaaacaaaaaaegacbaaaadaaaaaaigadbaaaacaaaaaa
diaaaaakgcaabaaaacaaaaaakgajbaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaadp
aaaaaadpaaaaaaaaaoaaaaahdcaabaaaacaaaaaajgafbaaaacaaaaaaagaabaaa
acaaaaaadiaaaaaidcaabaaaacaaaaaaegaabaaaacaaaaaakgikcaaaaaaaaaaa
baaaaaaadcaaaaakecaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakecaabaaaacaaaaaackaabaaaacaaaaaa
akaabaiaibaaaaaaabaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaakeanmjdpaaaaaaai
bcaabaaaabaaaaaaakaabaiambaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaacaaaaaaakaabaaa
abaaaaaackaabaaaacaaaaaadcaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaacaaaaaa
akaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaaakaabaaaabaaaaaa
amaaaaafccaabaaaaeaaaaaaakaabaaaabaaaaaaalaaaaaffcaabaaaabaaaaaa
fgahbaaaabaaaaaaamaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaapaaaaah
ccaabaaaabaaaaaangafbaaaabaaaaaangafbaaaabaaaaaaelaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaaeaaaaaabkaabaaaabaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaabaaaaaaigaabaaaabaaaaaaigaabaaa
abaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaa
egaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaa
egbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaa
adaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaa
akaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaa
aaaaaaaabaaaaaaadccaaaambcaabaaaadaaaaaackiacaaaaaaaaaaabbaaaaaa
akaabaaaadaaaaaabkiacaiaebaaaaaaaaaaaaaabbaaaaaadcaaaaajpcaabaaa
abaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaah
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaabacaaaahbcaabaaa
abaaaaaaegbcbaaaagaaaaaaegbcbaaaaeaaaaaadiaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakiacaaa
aaaaaaaabaaaaaaabjaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaibcaabaaa
abaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaaabaaaaaaaaaaaaajocaabaaa
abaaaaaaagbjbaaaacaaaaaaagijcaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaaaaaaaaaihcaabaaa
acaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahecaabaaa
abaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafgcaabaaaabaaaaaa
fgagbaaaabaaaaaadcaaaaalccaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaa
bcaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadicaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaadaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Float 4 [_FalloffPow]
Float 5 [_FalloffScale]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_FadeDist]
Float 10 [_FadeScale]
Float 11 [_RimDist]
Float 12 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 148 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c13, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c14, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp4 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c13.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
dsy r3.xy, r0.xzzw
add r0.w, r0, c13.y
frc r1.w, r0
add_sat r0.w, r0, -r1
add_pp r1.xyz, r1.yxzw, -r2
mad_pp r1.xyz, r0.w, r1, r2
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c13.y
mad r1.z, r0.w, c14.x, c14.y
mad r1.z, r1, r0.w, c13.w
mul_pp r1.xy, r1, c17.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c14.z
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c13.x, c13.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c14.w, r1
mad r0.w, r0, c13.z, r1.z
dp3 r0.y, v4, v4
rsq r0.y, r0.y
mul r2.xyz, r0.y, v4
abs r3.w, r2.x
abs r4.x, r2.z
mul r1.z, r0.w, c15.x
max r0.y, r3.w, r4.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c15.y, c15.z
mad r2.w, r2, r4.z, c15
mul r1.xy, r1, c6.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.x, r3, r3
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c17.x
mul r0.x, r1.z, c17
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c13.y
rsq r3.y, r3.x
mad r2.w, r2, r4.z, c16.x
mad r3.x, r2.w, r4.z, c16.y
rcp r2.w, r3.y
mad r3.x, r3, r4.z, c16.z
mul r3.y, r2.w, c7.x
mul_sat r3.y, r3, c14.w
mad_pp r0, r3.y, r1, r0
abs r1.y, r2
mul r3.x, r3, r4.y
add r1.x, r3.w, -r4
add r1.z, -r3.x, c16.w
cmp r1.x, -r1, r3, r1.z
dsx r3.xy, r2.xzzw
add r1.w, -r1.y, c13.y
mad r1.z, r1.y, c14.x, c14.y
mad r1.z, r1, r1.y, c13.w
rsq r1.w, r1.w
dsy r3.zw, r2.xyxz
mad r1.y, r1.z, r1, c14.z
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r2, c13.x, c13
mul r1.w, r1.y, r1.z
add r2.y, -r1.x, c13.z
mad r1.z, -r1.w, c14.w, r1
cmp r1.w, r2.z, r1.x, r2.y
mad r1.x, r1.y, c13.z, r1.z
cmp r1.y, r2.x, r1.w, -r1.w
mul r1.x, r1, c15
mad r1.z, r1.y, c17.x, c17.y
dsx r2.y, r1.x
mov r1.w, r1.x
dsy r1.y, r1.x
mul r3.xy, r3, r3
add r1.x, r3, r3.y
mul r3.xy, r3.zwzw, r3.zwzw
add r2.x, r3, r3.y
rsq r1.x, r1.x
rsq r2.z, r2.x
rcp r1.x, r1.x
mul r2.x, r1, c17
rcp r1.x, r2.z
dp4 r2.z, c2, c2
mul r1.x, r1, c17
texldd r1, r1.zwzw, s0, r2, r1
mul_pp r0, r1, r0
mov r1.xyz, v3
dp3_sat r3.x, v5, r1
mul r3.w, r3.x, c5.x
rsq r2.z, r2.z
mul r2.xyz, r2.z, c2
dp3_sat r1.w, v3, r2
add_pp r1.w, r1, c17.z
mul_pp r1.y, r1.w, c3.w
mul_pp_sat r1.w, r1.y, c17
mov r1.x, c8
add r1.xyz, c3, r1.x
mad_sat r2.xyz, r1, r1.w, c0
add r3.xyz, -v1, c1
mov r1.xyz, v0
add r1.xyz, v1, -r1
dp3 r1.x, r1, r1
dp3 r1.w, r3, r3
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r3.x, -r1, c12, r1.y
pow_sat r1, r3.w, c4.x
mul r1.y, r2.w, c10.x
add_sat r1.y, r1, -c9.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r3, c11
mad r1.x, r1, r1.z, r1.y
mul_pp oC0.xyz, r0, r2
mul_pp oC0.w, r0, r1.x
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 368 // 356 used size, 18 vars
Vector 272 [_LightColor0] 4
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_FadeDist]
Float 344 [_FadeScale]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 123 instructions, 5 temp regs, 0 temp arrays:
// ALU 114 float, 0 int, 5 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedpgdlmeehgkibgnmcdolbjjkkiadmgembabaaaaaaaibbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefciiapaaaa
eaaaaaaaocadaaaafjaaaaaeegiocaaaaaaaaaaabhaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadpcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaafaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
bbaaaaahbcaabaaaabaaaaaaegbobaaaadaaaaaaegbobaaaadaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahpcaabaaaabaaaaaaagaabaaa
abaaaaaabgbjbaaaadaaaaaaaaaaaaaldcaabaaaacaaaaaajgafbaiaibaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaaaaaaaaaibcaabaaa
acaaaaaadkaabaiambaaaaaaabaaaaaaakaabaaaacaaaaaaebcaaaafbcaabaaa
acaaaaaaakaabaaaacaaaaaaaaaaaaajecaabaaaacaaaaaadkaabaiambaaaaaa
abaaaaaabkaabaiaibaaaaaaabaaaaaadcaaaaakecaabaaaacaaaaaaakaabaaa
acaaaaaackaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaaaaaaaaaiccaabaaa
acaaaaaackaabaiaebaaaaaaacaaaaaabkaabaaaacaaaaaaebcaaaafccaabaaa
acaaaaaabkaabaaaacaaaaaaaaaaaaajhcaabaaaadaaaaaahgaobaiambaaaaaa
abaaaaaajgahbaiaibaaaaaaabaaaaaadcaaaaakncaabaaaacaaaaaaagaabaaa
acaaaaaaagajbaaaadaaaaaapgajbaiaibaaaaaaabaaaaaaaaaaaaajhcaabaaa
adaaaaaaggalbaiaibaaaaaaabaaaaaaigadbaiaebaaaaaaacaaaaaadcaaaaaj
hcaabaaaacaaaaaafgafbaaaacaaaaaaegacbaaaadaaaaaaigadbaaaacaaaaaa
diaaaaakgcaabaaaacaaaaaakgajbaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaadp
aaaaaadpaaaaaaaaaoaaaaahdcaabaaaacaaaaaajgafbaaaacaaaaaaagaabaaa
acaaaaaadiaaaaaidcaabaaaacaaaaaaegaabaaaacaaaaaakgikcaaaaaaaaaaa
beaaaaaadcaaaaakecaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakecaabaaaacaaaaaackaabaaaacaaaaaa
akaabaiaibaaaaaaabaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaakeanmjdpaaaaaaai
bcaabaaaabaaaaaaakaabaiambaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaacaaaaaaakaabaaa
abaaaaaackaabaaaacaaaaaadcaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaacaaaaaa
akaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaaakaabaaaabaaaaaa
amaaaaafccaabaaaaeaaaaaaakaabaaaabaaaaaaalaaaaaffcaabaaaabaaaaaa
fgahbaaaabaaaaaaamaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaapaaaaah
ccaabaaaabaaaaaangafbaaaabaaaaaangafbaaaabaaaaaaelaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaaeaaaaaabkaabaaaabaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaabaaaaaaigaabaaaabaaaaaaigaabaaa
abaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaa
egaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaa
egbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaa
adaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaa
akaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaa
aaaaaaaabeaaaaaadccaaaambcaabaaaadaaaaaackiacaaaaaaaaaaabfaaaaaa
akaabaaaadaaaaaabkiacaiaebaaaaaaaaaaaaaabfaaaaaadcaaaaajpcaabaaa
abaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaah
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaabacaaaahbcaabaaa
abaaaaaaegbcbaaaagaaaaaaegbcbaaaaeaaaaaadiaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaabkiacaaaaaaaaaaabeaaaaaacpaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakiacaaa
aaaaaaaabeaaaaaabjaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaibcaabaaa
abaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaaabaaaaaaaaaaaaajocaabaaa
abaaaaaaagbjbaaaacaaaaaaagijcaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaaaaaaaaaihcaabaaa
acaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahecaabaaa
abaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafgcaabaaaabaaaaaa
fgagbaaaabaaaaaadcaaaaalccaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaa
bgaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadicaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaadkiacaaaaaaaaaaabfaaaaaadcaaaaajbcaabaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaadaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaabbaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaabbaaaaaaagiacaaaaaaaaaaabfaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Float 4 [_FalloffPow]
Float 5 [_FalloffScale]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_FadeDist]
Float 10 [_FadeScale]
Float 11 [_RimDist]
Float 12 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 148 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c13, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c14, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp4 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c13.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
dsy r3.xy, r0.xzzw
add r0.w, r0, c13.y
frc r1.w, r0
add_sat r0.w, r0, -r1
add_pp r1.xyz, r1.yxzw, -r2
mad_pp r1.xyz, r0.w, r1, r2
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c13.y
mad r1.z, r0.w, c14.x, c14.y
mad r1.z, r1, r0.w, c13.w
mul_pp r1.xy, r1, c17.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c14.z
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c13.x, c13.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c14.w, r1
mad r0.w, r0, c13.z, r1.z
dp3 r0.y, v4, v4
rsq r0.y, r0.y
mul r2.xyz, r0.y, v4
abs r3.w, r2.x
abs r4.x, r2.z
mul r1.z, r0.w, c15.x
max r0.y, r3.w, r4.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c15.y, c15.z
mad r2.w, r2, r4.z, c15
mul r1.xy, r1, c6.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.x, r3, r3
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c17.x
mul r0.x, r1.z, c17
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c13.y
rsq r3.y, r3.x
mad r2.w, r2, r4.z, c16.x
mad r3.x, r2.w, r4.z, c16.y
rcp r2.w, r3.y
mad r3.x, r3, r4.z, c16.z
mul r3.y, r2.w, c7.x
mul_sat r3.y, r3, c14.w
mad_pp r0, r3.y, r1, r0
abs r1.y, r2
mul r3.x, r3, r4.y
add r1.x, r3.w, -r4
add r1.z, -r3.x, c16.w
cmp r1.x, -r1, r3, r1.z
dsx r3.xy, r2.xzzw
add r1.w, -r1.y, c13.y
mad r1.z, r1.y, c14.x, c14.y
mad r1.z, r1, r1.y, c13.w
rsq r1.w, r1.w
dsy r3.zw, r2.xyxz
mad r1.y, r1.z, r1, c14.z
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r2, c13.x, c13
mul r1.w, r1.y, r1.z
add r2.y, -r1.x, c13.z
mad r1.z, -r1.w, c14.w, r1
cmp r1.w, r2.z, r1.x, r2.y
mad r1.x, r1.y, c13.z, r1.z
cmp r1.y, r2.x, r1.w, -r1.w
mul r1.x, r1, c15
mad r1.z, r1.y, c17.x, c17.y
dsx r2.y, r1.x
mov r1.w, r1.x
dsy r1.y, r1.x
mul r3.xy, r3, r3
add r1.x, r3, r3.y
mul r3.xy, r3.zwzw, r3.zwzw
add r2.x, r3, r3.y
rsq r1.x, r1.x
rsq r2.z, r2.x
rcp r1.x, r1.x
mul r2.x, r1, c17
rcp r1.x, r2.z
dp4 r2.z, c2, c2
mul r1.x, r1, c17
texldd r1, r1.zwzw, s0, r2, r1
mul_pp r0, r1, r0
mov r1.xyz, v3
dp3_sat r3.x, v5, r1
mul r3.w, r3.x, c5.x
rsq r2.z, r2.z
mul r2.xyz, r2.z, c2
dp3_sat r1.w, v3, r2
add_pp r1.w, r1, c17.z
mul_pp r1.y, r1.w, c3.w
mul_pp_sat r1.w, r1.y, c17
mov r1.x, c8
add r1.xyz, c3, r1.x
mad_sat r2.xyz, r1, r1.w, c0
add r3.xyz, -v1, c1
mov r1.xyz, v0
add r1.xyz, v1, -r1
dp3 r1.x, r1, r1
dp3 r1.w, r3, r3
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r3.x, -r1, c12, r1.y
pow_sat r1, r3.w, c4.x
mul r1.y, r2.w, c10.x
add_sat r1.y, r1, -c9.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r3, c11
mad r1.x, r1, r1.z, r1.y
mul_pp oC0.xyz, r0, r2
mul_pp oC0.w, r0, r1.x
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 368 // 356 used size, 18 vars
Vector 272 [_LightColor0] 4
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_FadeDist]
Float 344 [_FadeScale]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 123 instructions, 5 temp regs, 0 temp arrays:
// ALU 114 float, 0 int, 5 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedpgdlmeehgkibgnmcdolbjjkkiadmgembabaaaaaaaibbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefciiapaaaa
eaaaaaaaocadaaaafjaaaaaeegiocaaaaaaaaaaabhaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadpcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaafaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
bbaaaaahbcaabaaaabaaaaaaegbobaaaadaaaaaaegbobaaaadaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahpcaabaaaabaaaaaaagaabaaa
abaaaaaabgbjbaaaadaaaaaaaaaaaaaldcaabaaaacaaaaaajgafbaiaibaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaaaaaaaaaibcaabaaa
acaaaaaadkaabaiambaaaaaaabaaaaaaakaabaaaacaaaaaaebcaaaafbcaabaaa
acaaaaaaakaabaaaacaaaaaaaaaaaaajecaabaaaacaaaaaadkaabaiambaaaaaa
abaaaaaabkaabaiaibaaaaaaabaaaaaadcaaaaakecaabaaaacaaaaaaakaabaaa
acaaaaaackaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaaaaaaaaaiccaabaaa
acaaaaaackaabaiaebaaaaaaacaaaaaabkaabaaaacaaaaaaebcaaaafccaabaaa
acaaaaaabkaabaaaacaaaaaaaaaaaaajhcaabaaaadaaaaaahgaobaiambaaaaaa
abaaaaaajgahbaiaibaaaaaaabaaaaaadcaaaaakncaabaaaacaaaaaaagaabaaa
acaaaaaaagajbaaaadaaaaaapgajbaiaibaaaaaaabaaaaaaaaaaaaajhcaabaaa
adaaaaaaggalbaiaibaaaaaaabaaaaaaigadbaiaebaaaaaaacaaaaaadcaaaaaj
hcaabaaaacaaaaaafgafbaaaacaaaaaaegacbaaaadaaaaaaigadbaaaacaaaaaa
diaaaaakgcaabaaaacaaaaaakgajbaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaadp
aaaaaadpaaaaaaaaaoaaaaahdcaabaaaacaaaaaajgafbaaaacaaaaaaagaabaaa
acaaaaaadiaaaaaidcaabaaaacaaaaaaegaabaaaacaaaaaakgikcaaaaaaaaaaa
beaaaaaadcaaaaakecaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakecaabaaaacaaaaaackaabaaaacaaaaaa
akaabaiaibaaaaaaabaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaakeanmjdpaaaaaaai
bcaabaaaabaaaaaaakaabaiambaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaacaaaaaaakaabaaa
abaaaaaackaabaaaacaaaaaadcaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaacaaaaaa
akaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaaakaabaaaabaaaaaa
amaaaaafccaabaaaaeaaaaaaakaabaaaabaaaaaaalaaaaaffcaabaaaabaaaaaa
fgahbaaaabaaaaaaamaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaapaaaaah
ccaabaaaabaaaaaangafbaaaabaaaaaangafbaaaabaaaaaaelaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaaeaaaaaabkaabaaaabaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaabaaaaaaigaabaaaabaaaaaaigaabaaa
abaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaa
egaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaa
egbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaa
adaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaa
akaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaa
aaaaaaaabeaaaaaadccaaaambcaabaaaadaaaaaackiacaaaaaaaaaaabfaaaaaa
akaabaaaadaaaaaabkiacaiaebaaaaaaaaaaaaaabfaaaaaadcaaaaajpcaabaaa
abaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaah
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaabacaaaahbcaabaaa
abaaaaaaegbcbaaaagaaaaaaegbcbaaaaeaaaaaadiaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaabkiacaaaaaaaaaaabeaaaaaacpaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakiacaaa
aaaaaaaabeaaaaaabjaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaibcaabaaa
abaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaaabaaaaaaaaaaaaajocaabaaa
abaaaaaaagbjbaaaacaaaaaaagijcaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaaaaaaaaaihcaabaaa
acaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahecaabaaa
abaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafgcaabaaaabaaaaaa
fgagbaaaabaaaaaadcaaaaalccaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaa
bgaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadicaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaadkiacaaaaaaaaaaabfaaaaaadcaaaaajbcaabaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaadaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaabbaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaabbaaaaaaagiacaaaaaaaaaaabfaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Float 4 [_FalloffPow]
Float 5 [_FalloffScale]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_FadeDist]
Float 10 [_FadeScale]
Float 11 [_RimDist]
Float 12 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 148 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c13, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c14, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp4 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c13.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
dsy r3.xy, r0.xzzw
add r0.w, r0, c13.y
frc r1.w, r0
add_sat r0.w, r0, -r1
add_pp r1.xyz, r1.yxzw, -r2
mad_pp r1.xyz, r0.w, r1, r2
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c13.y
mad r1.z, r0.w, c14.x, c14.y
mad r1.z, r1, r0.w, c13.w
mul_pp r1.xy, r1, c17.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c14.z
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c13.x, c13.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c14.w, r1
mad r0.w, r0, c13.z, r1.z
dp3 r0.y, v4, v4
rsq r0.y, r0.y
mul r2.xyz, r0.y, v4
abs r3.w, r2.x
abs r4.x, r2.z
mul r1.z, r0.w, c15.x
max r0.y, r3.w, r4.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c15.y, c15.z
mad r2.w, r2, r4.z, c15
mul r1.xy, r1, c6.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.x, r3, r3
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c17.x
mul r0.x, r1.z, c17
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c13.y
rsq r3.y, r3.x
mad r2.w, r2, r4.z, c16.x
mad r3.x, r2.w, r4.z, c16.y
rcp r2.w, r3.y
mad r3.x, r3, r4.z, c16.z
mul r3.y, r2.w, c7.x
mul_sat r3.y, r3, c14.w
mad_pp r0, r3.y, r1, r0
abs r1.y, r2
mul r3.x, r3, r4.y
add r1.x, r3.w, -r4
add r1.z, -r3.x, c16.w
cmp r1.x, -r1, r3, r1.z
dsx r3.xy, r2.xzzw
add r1.w, -r1.y, c13.y
mad r1.z, r1.y, c14.x, c14.y
mad r1.z, r1, r1.y, c13.w
rsq r1.w, r1.w
dsy r3.zw, r2.xyxz
mad r1.y, r1.z, r1, c14.z
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r2, c13.x, c13
mul r1.w, r1.y, r1.z
add r2.y, -r1.x, c13.z
mad r1.z, -r1.w, c14.w, r1
cmp r1.w, r2.z, r1.x, r2.y
mad r1.x, r1.y, c13.z, r1.z
cmp r1.y, r2.x, r1.w, -r1.w
mul r1.x, r1, c15
mad r1.z, r1.y, c17.x, c17.y
dsx r2.y, r1.x
mov r1.w, r1.x
dsy r1.y, r1.x
mul r3.xy, r3, r3
add r1.x, r3, r3.y
mul r3.xy, r3.zwzw, r3.zwzw
add r2.x, r3, r3.y
rsq r1.x, r1.x
rsq r2.z, r2.x
rcp r1.x, r1.x
mul r2.x, r1, c17
rcp r1.x, r2.z
dp4 r2.z, c2, c2
mul r1.x, r1, c17
texldd r1, r1.zwzw, s0, r2, r1
mul_pp r0, r1, r0
mov r1.xyz, v3
dp3_sat r3.x, v5, r1
mul r3.w, r3.x, c5.x
rsq r2.z, r2.z
mul r2.xyz, r2.z, c2
dp3_sat r1.w, v3, r2
add_pp r1.w, r1, c17.z
mul_pp r1.y, r1.w, c3.w
mul_pp_sat r1.w, r1.y, c17
mov r1.x, c8
add r1.xyz, c3, r1.x
mad_sat r2.xyz, r1, r1.w, c0
add r3.xyz, -v1, c1
mov r1.xyz, v0
add r1.xyz, v1, -r1
dp3 r1.x, r1, r1
dp3 r1.w, r3, r3
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r3.x, -r1, c12, r1.y
pow_sat r1, r3.w, c4.x
mul r1.y, r2.w, c10.x
add_sat r1.y, r1, -c9.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r3, c11
mad r1.x, r1, r1.z, r1.y
mul_pp oC0.xyz, r0, r2
mul_pp oC0.w, r0, r1.x
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 304 // 292 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_FadeDist]
Float 280 [_FadeScale]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 123 instructions, 5 temp regs, 0 temp arrays:
// ALU 114 float, 0 int, 5 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhcinaghdhfakdopfopgglakbpidogekpabaaaaaaaibbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefciiapaaaa
eaaaaaaaocadaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadpcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaafaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
bbaaaaahbcaabaaaabaaaaaaegbobaaaadaaaaaaegbobaaaadaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahpcaabaaaabaaaaaaagaabaaa
abaaaaaabgbjbaaaadaaaaaaaaaaaaaldcaabaaaacaaaaaajgafbaiaibaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaaaaaaaaaibcaabaaa
acaaaaaadkaabaiambaaaaaaabaaaaaaakaabaaaacaaaaaaebcaaaafbcaabaaa
acaaaaaaakaabaaaacaaaaaaaaaaaaajecaabaaaacaaaaaadkaabaiambaaaaaa
abaaaaaabkaabaiaibaaaaaaabaaaaaadcaaaaakecaabaaaacaaaaaaakaabaaa
acaaaaaackaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaaaaaaaaaiccaabaaa
acaaaaaackaabaiaebaaaaaaacaaaaaabkaabaaaacaaaaaaebcaaaafccaabaaa
acaaaaaabkaabaaaacaaaaaaaaaaaaajhcaabaaaadaaaaaahgaobaiambaaaaaa
abaaaaaajgahbaiaibaaaaaaabaaaaaadcaaaaakncaabaaaacaaaaaaagaabaaa
acaaaaaaagajbaaaadaaaaaapgajbaiaibaaaaaaabaaaaaaaaaaaaajhcaabaaa
adaaaaaaggalbaiaibaaaaaaabaaaaaaigadbaiaebaaaaaaacaaaaaadcaaaaaj
hcaabaaaacaaaaaafgafbaaaacaaaaaaegacbaaaadaaaaaaigadbaaaacaaaaaa
diaaaaakgcaabaaaacaaaaaakgajbaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaadp
aaaaaadpaaaaaaaaaoaaaaahdcaabaaaacaaaaaajgafbaaaacaaaaaaagaabaaa
acaaaaaadiaaaaaidcaabaaaacaaaaaaegaabaaaacaaaaaakgikcaaaaaaaaaaa
baaaaaaadcaaaaakecaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakecaabaaaacaaaaaackaabaaaacaaaaaa
akaabaiaibaaaaaaabaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaakeanmjdpaaaaaaai
bcaabaaaabaaaaaaakaabaiambaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaacaaaaaaakaabaaa
abaaaaaackaabaaaacaaaaaadcaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaacaaaaaa
akaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaaakaabaaaabaaaaaa
amaaaaafccaabaaaaeaaaaaaakaabaaaabaaaaaaalaaaaaffcaabaaaabaaaaaa
fgahbaaaabaaaaaaamaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaapaaaaah
ccaabaaaabaaaaaangafbaaaabaaaaaangafbaaaabaaaaaaelaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaaeaaaaaabkaabaaaabaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaabaaaaaaigaabaaaabaaaaaaigaabaaa
abaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaa
egaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaa
egbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaa
adaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaa
akaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaa
aaaaaaaabaaaaaaadccaaaambcaabaaaadaaaaaackiacaaaaaaaaaaabbaaaaaa
akaabaaaadaaaaaabkiacaiaebaaaaaaaaaaaaaabbaaaaaadcaaaaajpcaabaaa
abaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaah
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaabacaaaahbcaabaaa
abaaaaaaegbcbaaaagaaaaaaegbcbaaaaeaaaaaadiaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakiacaaa
aaaaaaaabaaaaaaabjaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaibcaabaaa
abaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaaabaaaaaaaaaaaaajocaabaaa
abaaaaaaagbjbaaaacaaaaaaagijcaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaaaaaaaaaihcaabaaa
acaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahecaabaaa
abaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafgcaabaaaabaaaaaa
fgagbaaaabaaaaaadcaaaaalccaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaa
bcaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadicaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaadaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Float 4 [_FalloffPow]
Float 5 [_FalloffScale]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_FadeDist]
Float 10 [_FadeScale]
Float 11 [_RimDist]
Float 12 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 148 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c13, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c14, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp4 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c13.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
dsy r3.xy, r0.xzzw
add r0.w, r0, c13.y
frc r1.w, r0
add_sat r0.w, r0, -r1
add_pp r1.xyz, r1.yxzw, -r2
mad_pp r1.xyz, r0.w, r1, r2
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c13.y
mad r1.z, r0.w, c14.x, c14.y
mad r1.z, r1, r0.w, c13.w
mul_pp r1.xy, r1, c17.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c14.z
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c13.x, c13.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c14.w, r1
mad r0.w, r0, c13.z, r1.z
dp3 r0.y, v4, v4
rsq r0.y, r0.y
mul r2.xyz, r0.y, v4
abs r3.w, r2.x
abs r4.x, r2.z
mul r1.z, r0.w, c15.x
max r0.y, r3.w, r4.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c15.y, c15.z
mad r2.w, r2, r4.z, c15
mul r1.xy, r1, c6.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.x, r3, r3
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c17.x
mul r0.x, r1.z, c17
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c13.y
rsq r3.y, r3.x
mad r2.w, r2, r4.z, c16.x
mad r3.x, r2.w, r4.z, c16.y
rcp r2.w, r3.y
mad r3.x, r3, r4.z, c16.z
mul r3.y, r2.w, c7.x
mul_sat r3.y, r3, c14.w
mad_pp r0, r3.y, r1, r0
abs r1.y, r2
mul r3.x, r3, r4.y
add r1.x, r3.w, -r4
add r1.z, -r3.x, c16.w
cmp r1.x, -r1, r3, r1.z
dsx r3.xy, r2.xzzw
add r1.w, -r1.y, c13.y
mad r1.z, r1.y, c14.x, c14.y
mad r1.z, r1, r1.y, c13.w
rsq r1.w, r1.w
dsy r3.zw, r2.xyxz
mad r1.y, r1.z, r1, c14.z
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r2, c13.x, c13
mul r1.w, r1.y, r1.z
add r2.y, -r1.x, c13.z
mad r1.z, -r1.w, c14.w, r1
cmp r1.w, r2.z, r1.x, r2.y
mad r1.x, r1.y, c13.z, r1.z
cmp r1.y, r2.x, r1.w, -r1.w
mul r1.x, r1, c15
mad r1.z, r1.y, c17.x, c17.y
dsx r2.y, r1.x
mov r1.w, r1.x
dsy r1.y, r1.x
mul r3.xy, r3, r3
add r1.x, r3, r3.y
mul r3.xy, r3.zwzw, r3.zwzw
add r2.x, r3, r3.y
rsq r1.x, r1.x
rsq r2.z, r2.x
rcp r1.x, r1.x
mul r2.x, r1, c17
rcp r1.x, r2.z
dp4 r2.z, c2, c2
mul r1.x, r1, c17
texldd r1, r1.zwzw, s0, r2, r1
mul_pp r0, r1, r0
mov r1.xyz, v3
dp3_sat r3.x, v5, r1
mul r3.w, r3.x, c5.x
rsq r2.z, r2.z
mul r2.xyz, r2.z, c2
dp3_sat r1.w, v3, r2
add_pp r1.w, r1, c17.z
mul_pp r1.y, r1.w, c3.w
mul_pp_sat r1.w, r1.y, c17
mov r1.x, c8
add r1.xyz, c3, r1.x
mad_sat r2.xyz, r1, r1.w, c0
add r3.xyz, -v1, c1
mov r1.xyz, v0
add r1.xyz, v1, -r1
dp3 r1.x, r1, r1
dp3 r1.w, r3, r3
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r3.x, -r1, c12, r1.y
pow_sat r1, r3.w, c4.x
mul r1.y, r2.w, c10.x
add_sat r1.y, r1, -c9.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r3, c11
mad r1.x, r1, r1.z, r1.y
mul_pp oC0.xyz, r0, r2
mul_pp oC0.w, r0, r1.x
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 304 // 292 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_FadeDist]
Float 280 [_FadeScale]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 123 instructions, 5 temp regs, 0 temp arrays:
// ALU 114 float, 0 int, 5 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhcinaghdhfakdopfopgglakbpidogekpabaaaaaaaibbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefciiapaaaa
eaaaaaaaocadaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadpcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaafaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
bbaaaaahbcaabaaaabaaaaaaegbobaaaadaaaaaaegbobaaaadaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahpcaabaaaabaaaaaaagaabaaa
abaaaaaabgbjbaaaadaaaaaaaaaaaaaldcaabaaaacaaaaaajgafbaiaibaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaaaaaaaaaibcaabaaa
acaaaaaadkaabaiambaaaaaaabaaaaaaakaabaaaacaaaaaaebcaaaafbcaabaaa
acaaaaaaakaabaaaacaaaaaaaaaaaaajecaabaaaacaaaaaadkaabaiambaaaaaa
abaaaaaabkaabaiaibaaaaaaabaaaaaadcaaaaakecaabaaaacaaaaaaakaabaaa
acaaaaaackaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaaaaaaaaaiccaabaaa
acaaaaaackaabaiaebaaaaaaacaaaaaabkaabaaaacaaaaaaebcaaaafccaabaaa
acaaaaaabkaabaaaacaaaaaaaaaaaaajhcaabaaaadaaaaaahgaobaiambaaaaaa
abaaaaaajgahbaiaibaaaaaaabaaaaaadcaaaaakncaabaaaacaaaaaaagaabaaa
acaaaaaaagajbaaaadaaaaaapgajbaiaibaaaaaaabaaaaaaaaaaaaajhcaabaaa
adaaaaaaggalbaiaibaaaaaaabaaaaaaigadbaiaebaaaaaaacaaaaaadcaaaaaj
hcaabaaaacaaaaaafgafbaaaacaaaaaaegacbaaaadaaaaaaigadbaaaacaaaaaa
diaaaaakgcaabaaaacaaaaaakgajbaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaadp
aaaaaadpaaaaaaaaaoaaaaahdcaabaaaacaaaaaajgafbaaaacaaaaaaagaabaaa
acaaaaaadiaaaaaidcaabaaaacaaaaaaegaabaaaacaaaaaakgikcaaaaaaaaaaa
baaaaaaadcaaaaakecaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakecaabaaaacaaaaaackaabaaaacaaaaaa
akaabaiaibaaaaaaabaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaakeanmjdpaaaaaaai
bcaabaaaabaaaaaaakaabaiambaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaacaaaaaaakaabaaa
abaaaaaackaabaaaacaaaaaadcaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaacaaaaaa
akaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaaakaabaaaabaaaaaa
amaaaaafccaabaaaaeaaaaaaakaabaaaabaaaaaaalaaaaaffcaabaaaabaaaaaa
fgahbaaaabaaaaaaamaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaapaaaaah
ccaabaaaabaaaaaangafbaaaabaaaaaangafbaaaabaaaaaaelaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaaeaaaaaabkaabaaaabaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaabaaaaaaigaabaaaabaaaaaaigaabaaa
abaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaa
egaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaa
egbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaa
adaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaa
akaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaa
aaaaaaaabaaaaaaadccaaaambcaabaaaadaaaaaackiacaaaaaaaaaaabbaaaaaa
akaabaaaadaaaaaabkiacaiaebaaaaaaaaaaaaaabbaaaaaadcaaaaajpcaabaaa
abaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaah
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaabacaaaahbcaabaaa
abaaaaaaegbcbaaaagaaaaaaegbcbaaaaeaaaaaadiaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakiacaaa
aaaaaaaabaaaaaaabjaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaibcaabaaa
abaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaaabaaaaaaaaaaaaajocaabaaa
abaaaaaaagbjbaaaacaaaaaaagijcaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaaaaaaaaaihcaabaaa
acaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahecaabaaa
abaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafgcaabaaaabaaaaaa
fgagbaaaabaaaaaadcaaaaalccaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaa
bcaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadicaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaadaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_FadeDist]
Float 11 [_FadeScale]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 153 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c15, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c16, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp4 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c15.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
add r0.w, r0, c15.y
frc r1.w, r0
add_pp r1.xyz, r1.yxzw, -r2
add_sat r0.w, r0, -r1
mad_pp r1.xyz, r0.w, r1, r2
dsy r2.xy, r0.xzzw
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c15.y
mad r1.z, r0.w, c16.x, c16.y
mad r1.z, r1, r0.w, c15.w
mul_pp r1.xy, r1, c19.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c16.z
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c15.x, c15.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c16.w, r1
mad r0.w, r0, c15.z, r1.z
dp3 r0.y, v4, v4
rsq r0.y, r0.y
mul r3.xyz, r0.y, v4
abs r4.x, r3.z
abs r3.w, r3.x
max r0.y, r3.w, r4.x
mul r1.z, r0.w, c17.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c17.y, c17.z
mul r1.xy, r1, c7.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.x, r2, r2
rsq r0.z, r0.z
mad r2.w, r2, r4.z, c17
mad r2.y, r2.w, r4.z, c18.x
rsq r2.x, r2.x
rsq r0.x, r0.x
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c19.x
mul r0.x, r1.z, c19
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c15.y
rcp r2.w, r2.x
mad r2.y, r2, r4.z, c18
mad r2.x, r2.y, r4.z, c18.z
mul r2.y, r2.w, c8.x
mul_sat r2.y, r2, c16.w
mad_pp r0, r2.y, r1, r0
mul r2.x, r2, r4.y
abs r1.y, r3
add r1.x, r3.w, -r4
add r1.z, -r2.x, c18.w
cmp r1.x, -r1, r2, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c15.y
mad r1.z, r1.y, c16.x, c16.y
mad r1.z, r1, r1.y, c15.w
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c16.z
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c15.x, c15
mul r1.w, r1.y, r1.z
add r2.x, -r1, c15.z
mad r1.z, -r1.w, c16.w, r1
cmp r1.w, r3.z, r1.x, r2.x
mad r1.x, r1.y, c15.z, r1.z
mul r1.z, r1.x, c17.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.zw, r3.xyxz
mad r1.x, r1.y, c19, c19.y
mov r2.xyz, v3
mul r3.zw, r3, r3
add r3.x, r3.z, r3.w
rsq r3.x, r3.x
mov r1.y, r1.z
dsx r3.y, r1.z
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rcp r3.z, r3.x
mul r3.x, r1.z, c19
mul r1.z, r3, c19.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1, r1, r0
dp3_sat r2.x, v5, r2
mul r3.x, r2, c6
add r2.xyz, -v1, c1
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r0.w, r2, r2
rsq r0.y, r0.w
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.x, -r0, c13, r0.y
pow_sat r0, r3.x, c5.x
mul r0.y, r2.w, c11.x
add_sat r0.y, r0, -c10.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2, c12
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c9
texldp r3.x, v6, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c19.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c14.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c19.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 304 // 296 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_FadeDist]
Float 280 [_FadeScale]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 130 instructions, 5 temp regs, 0 temp arrays:
// ALU 120 float, 0 int, 5 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefieceddoplegbklpgnmaojijmlhiofeobljaakabaaaaaaaibcaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefckabaaaaaeaaaaaaaciaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
pcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaafaaaaaa
egbcbaaaafaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaafaaaaaadeaaaaajicaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
jgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaaf
mcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaa
aaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaadaaaaaabbaaaaahbcaabaaaabaaaaaaegbobaaa
adaaaaaaegbobaaaadaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahpcaabaaaabaaaaaaagaabaaaabaaaaaabgbjbaaaadaaaaaaaaaaaaal
dcaabaaaacaaaaaajgafbaiaibaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaaaaaaaaaaaaaaaaaaaaibcaabaaaacaaaaaadkaabaiambaaaaaaabaaaaaa
akaabaaaacaaaaaaebcaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaaaaaaaaj
ecaabaaaacaaaaaadkaabaiambaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaa
dcaaaaakecaabaaaacaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaadkaabaia
ibaaaaaaabaaaaaaaaaaaaaiccaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
bkaabaaaacaaaaaaebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaaj
hcaabaaaadaaaaaahgaobaiambaaaaaaabaaaaaajgahbaiaibaaaaaaabaaaaaa
dcaaaaakncaabaaaacaaaaaaagaabaaaacaaaaaaagajbaaaadaaaaaapgajbaia
ibaaaaaaabaaaaaaaaaaaaajhcaabaaaadaaaaaaggalbaiaibaaaaaaabaaaaaa
igadbaiaebaaaaaaacaaaaaadcaaaaajhcaabaaaacaaaaaafgafbaaaacaaaaaa
egacbaaaadaaaaaaigadbaaaacaaaaaadiaaaaakgcaabaaaacaaaaaakgajbaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
acaaaaaajgafbaaaacaaaaaaagaabaaaacaaaaaadiaaaaaidcaabaaaacaaaaaa
egaabaaaacaaaaaakgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaacaaaaaa
akaabaiaibaaaaaaabaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaacaaaaaackaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaacaaaaaackaabaaaacaaaaaaakaabaiaibaaaaaa
abaaaaaaabeaaaaakeanmjdpaaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaa
abaaaaaaabeaaaaaaaaaiadpelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahicaabaaaacaaaaaaakaabaaaabaaaaaackaabaaaacaaaaaadcaaaaaj
icaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
abaaaaahecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaaj
bcaabaaaabaaaaaackaabaaaacaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaaf
ccaabaaaadaaaaaaakaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaaakaabaaa
abaaaaaaalaaaaaffcaabaaaabaaaaaafgahbaaaabaaaaaaamaaaaafkcaabaaa
abaaaaaafganbaaaabaaaaaaapaaaaahccaabaaaabaaaaaangafbaaaabaaaaaa
ngafbaaaabaaaaaaelaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaah
bcaabaaaaeaaaaaabkaabaaaabaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaa
abaaaaaaigaabaaaabaaaaaaigaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaa
adaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaabaaaaaaadccaaaambcaabaaa
adaaaaaackiacaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaabkiacaiaebaaaaaa
aaaaaaaabbaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaa
acaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaa
egaobaaaabaaaaaabacaaaahbcaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaa
aeaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaa
baaaaaaacpaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaiadpaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaa
akaabaaaabaaaaaaaaaaaaajocaabaaaabaaaaaaagbjbaaaacaaaaaaagijcaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaa
jgahbaaaabaaaaaaaaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaia
ebaaaaaaacaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
acaaaaaaelaaaaafgcaabaaaabaaaaaafgagbaaaabaaaaaadcaaaaalccaabaaa
abaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaadicaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaadkiacaaaaaaaaaaa
bbaaaaaadcaaaaajbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaaaadaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaa
abaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_FadeDist]
Float 11 [_FadeScale]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 153 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c15, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c16, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp4 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c15.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
add r0.w, r0, c15.y
frc r1.w, r0
add_pp r1.xyz, r1.yxzw, -r2
add_sat r0.w, r0, -r1
mad_pp r1.xyz, r0.w, r1, r2
dsy r2.xy, r0.xzzw
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c15.y
mad r1.z, r0.w, c16.x, c16.y
mad r1.z, r1, r0.w, c15.w
mul_pp r1.xy, r1, c19.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c16.z
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c15.x, c15.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c16.w, r1
mad r0.w, r0, c15.z, r1.z
dp3 r0.y, v4, v4
rsq r0.y, r0.y
mul r3.xyz, r0.y, v4
abs r4.x, r3.z
abs r3.w, r3.x
max r0.y, r3.w, r4.x
mul r1.z, r0.w, c17.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c17.y, c17.z
mul r1.xy, r1, c7.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.x, r2, r2
rsq r0.z, r0.z
mad r2.w, r2, r4.z, c17
mad r2.y, r2.w, r4.z, c18.x
rsq r2.x, r2.x
rsq r0.x, r0.x
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c19.x
mul r0.x, r1.z, c19
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c15.y
rcp r2.w, r2.x
mad r2.y, r2, r4.z, c18
mad r2.x, r2.y, r4.z, c18.z
mul r2.y, r2.w, c8.x
mul_sat r2.y, r2, c16.w
mad_pp r0, r2.y, r1, r0
mul r2.x, r2, r4.y
abs r1.y, r3
add r1.x, r3.w, -r4
add r1.z, -r2.x, c18.w
cmp r1.x, -r1, r2, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c15.y
mad r1.z, r1.y, c16.x, c16.y
mad r1.z, r1, r1.y, c15.w
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c16.z
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c15.x, c15
mul r1.w, r1.y, r1.z
add r2.x, -r1, c15.z
mad r1.z, -r1.w, c16.w, r1
cmp r1.w, r3.z, r1.x, r2.x
mad r1.x, r1.y, c15.z, r1.z
mul r1.z, r1.x, c17.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.zw, r3.xyxz
mad r1.x, r1.y, c19, c19.y
mov r2.xyz, v3
mul r3.zw, r3, r3
add r3.x, r3.z, r3.w
rsq r3.x, r3.x
mov r1.y, r1.z
dsx r3.y, r1.z
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rcp r3.z, r3.x
mul r3.x, r1.z, c19
mul r1.z, r3, c19.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1, r1, r0
dp3_sat r2.x, v5, r2
mul r3.x, r2, c6
add r2.xyz, -v1, c1
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r0.w, r2, r2
rsq r0.y, r0.w
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.x, -r0, c13, r0.y
pow_sat r0, r3.x, c5.x
mul r0.y, r2.w, c11.x
add_sat r0.y, r0, -c10.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2, c12
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4_pp r0.y, c3, c3
rsq_pp r1.w, r0.y
mul_pp r2.xyz, r1.w, c3
mov r0.x, c9
texldp r3.x, v6, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c19.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c14.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c19.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
ConstBuffer "$Globals" 240 // 232 used size, 16 vars
Vector 144 [_LightColor0] 4
Float 192 [_FalloffPow]
Float 196 [_FalloffScale]
Float 200 [_DetailScale]
Float 204 [_DetailDist]
Float 208 [_MinLight]
Float 212 [_FadeDist]
Float 216 [_FadeScale]
Float 220 [_RimDist]
Float 224 [_RimDistSub]
Float 228 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 130 instructions, 5 temp regs, 0 temp arrays:
// ALU 120 float, 0 int, 5 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedbmdieheckhiblpjnjjbnpbcfoclmogjmabaaaaaapabbaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaneaaaaaaaiaaaaaaaaaaaaaaadaaaaaaahaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefckabaaaaaeaaaaaaaciaeaaaafjaaaaaeegiocaaa
aaaaaaaaapaaaaaafjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaa
acaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadpcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaaahaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaafaaaaaa
deaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaa
abaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaai
dcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaa
ckaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaa
akaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
iedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaa
aaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
abaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaaj
ecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaa
diaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaaf
ccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaa
acaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaa
aaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaa
egaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
bcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaa
aaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaa
aagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaabbaaaaahbcaabaaa
abaaaaaaegbobaaaadaaaaaaegbobaaaadaaaaaaeeaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahpcaabaaaabaaaaaaagaabaaaabaaaaaabgbjbaaa
adaaaaaaaaaaaaaldcaabaaaacaaaaaajgafbaiaibaaaaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaaaaaaaaaaaaaaaaaaaaibcaabaaaacaaaaaadkaabaia
mbaaaaaaabaaaaaaakaabaaaacaaaaaaebcaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaaaaaaaaajecaabaaaacaaaaaadkaabaiambaaaaaaabaaaaaabkaabaia
ibaaaaaaabaaaaaadcaaaaakecaabaaaacaaaaaaakaabaaaacaaaaaackaabaaa
acaaaaaadkaabaiaibaaaaaaabaaaaaaaaaaaaaiccaabaaaacaaaaaackaabaia
ebaaaaaaacaaaaaabkaabaaaacaaaaaaebcaaaafccaabaaaacaaaaaabkaabaaa
acaaaaaaaaaaaaajhcaabaaaadaaaaaahgaobaiambaaaaaaabaaaaaajgahbaia
ibaaaaaaabaaaaaadcaaaaakncaabaaaacaaaaaaagaabaaaacaaaaaaagajbaaa
adaaaaaapgajbaiaibaaaaaaabaaaaaaaaaaaaajhcaabaaaadaaaaaaggalbaia
ibaaaaaaabaaaaaaigadbaiaebaaaaaaacaaaaaadcaaaaajhcaabaaaacaaaaaa
fgafbaaaacaaaaaaegacbaaaadaaaaaaigadbaaaacaaaaaadiaaaaakgcaabaaa
acaaaaaakgajbaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaacaaaaaajgafbaaaacaaaaaaagaabaaaacaaaaaadiaaaaai
dcaabaaaacaaaaaaegaabaaaacaaaaaakgikcaaaaaaaaaaaamaaaaaadcaaaaak
ecaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakecaabaaaacaaaaaackaabaaaacaaaaaaakaabaiaibaaaaaa
abaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaacaaaaaackaabaaaacaaaaaa
akaabaiaibaaaaaaabaaaaaaabeaaaaakeanmjdpaaaaaaaibcaabaaaabaaaaaa
akaabaiambaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahicaabaaaacaaaaaaakaabaaaabaaaaaackaabaaa
acaaaaaadcaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeadbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaa
acaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaacaaaaaaakaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaadaaaaaaakaabaaaabaaaaaaamaaaaafccaabaaa
aeaaaaaaakaabaaaabaaaaaaalaaaaaffcaabaaaabaaaaaafgahbaaaabaaaaaa
amaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaapaaaaahccaabaaaabaaaaaa
ngafbaaaabaaaaaangafbaaaabaaaaaaelaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaahbcaabaaaaeaaaaaabkaabaaaabaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaabaaaaaaigaabaaaabaaaaaaigaabaaaabaaaaaaelaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaa
abaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaa
apcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaaamaaaaaa
dccaaaambcaabaaaadaaaaaackiacaaaaaaaaaaaanaaaaaaakaabaaaadaaaaaa
bkiacaiaebaaaaaaaaaaaaaaanaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaa
adaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegaobaaaabaaaaaabacaaaahbcaabaaaabaaaaaaegbcbaaa
agaaaaaaegbcbaaaaeaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
bkiacaaaaaaaaaaaamaaaaaacpaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakiacaaaaaaaaaaaamaaaaaa
bjaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaibcaabaaaabaaaaaaakaabaia
ebaaaaaaadaaaaaaakaabaaaabaaaaaaaaaaaaajocaabaaaabaaaaaaagbjbaaa
acaaaaaaagijcaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahccaabaaaabaaaaaa
jgahbaaaabaaaaaajgahbaaaabaaaaaaaaaaaaaihcaabaaaacaaaaaaegbcbaaa
abaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaelaaaaafgcaabaaaabaaaaaafgagbaaaabaaaaaa
dcaaaaalccaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaaaoaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaadicaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaa
dkiacaaaaaaaaaaaanaaaaaadcaaaaajbcaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaaaadaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaahaaaaaa
pgbpbaaaahaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaa
ahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaa
aaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaaahaaaaaa
dicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaaaoaaaaaa
diaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaa
aaaaaaaaajaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaaagiacaaa
aaaaaaaaanaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_FadeDist]
Float 11 [_FadeScale]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 153 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c15, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c16, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp4 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c15.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
add r0.w, r0, c15.y
frc r1.w, r0
add_pp r1.xyz, r1.yxzw, -r2
add_sat r0.w, r0, -r1
mad_pp r1.xyz, r0.w, r1, r2
dsy r2.xy, r0.xzzw
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c15.y
mad r1.z, r0.w, c16.x, c16.y
mad r1.z, r1, r0.w, c15.w
mul_pp r1.xy, r1, c19.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c16.z
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c15.x, c15.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c16.w, r1
mad r0.w, r0, c15.z, r1.z
dp3 r0.y, v4, v4
rsq r0.y, r0.y
mul r3.xyz, r0.y, v4
abs r4.x, r3.z
abs r3.w, r3.x
max r0.y, r3.w, r4.x
mul r1.z, r0.w, c17.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c17.y, c17.z
mul r1.xy, r1, c7.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.x, r2, r2
rsq r0.z, r0.z
mad r2.w, r2, r4.z, c17
mad r2.y, r2.w, r4.z, c18.x
rsq r2.x, r2.x
rsq r0.x, r0.x
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c19.x
mul r0.x, r1.z, c19
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c15.y
rcp r2.w, r2.x
mad r2.y, r2, r4.z, c18
mad r2.x, r2.y, r4.z, c18.z
mul r2.y, r2.w, c8.x
mul_sat r2.y, r2, c16.w
mad_pp r0, r2.y, r1, r0
mul r2.x, r2, r4.y
abs r1.y, r3
add r1.x, r3.w, -r4
add r1.z, -r2.x, c18.w
cmp r1.x, -r1, r2, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c15.y
mad r1.z, r1.y, c16.x, c16.y
mad r1.z, r1, r1.y, c15.w
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c16.z
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c15.x, c15
mul r1.w, r1.y, r1.z
add r2.x, -r1, c15.z
mad r1.z, -r1.w, c16.w, r1
cmp r1.w, r3.z, r1.x, r2.x
mad r1.x, r1.y, c15.z, r1.z
mul r1.z, r1.x, c17.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.zw, r3.xyxz
mad r1.x, r1.y, c19, c19.y
mov r2.xyz, v3
mul r3.zw, r3, r3
add r3.x, r3.z, r3.w
rsq r3.x, r3.x
mov r1.y, r1.z
dsx r3.y, r1.z
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rcp r3.z, r3.x
mul r3.x, r1.z, c19
mul r1.z, r3, c19.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1, r1, r0
dp3_sat r2.x, v5, r2
mul r3.x, r2, c6
add r2.xyz, -v1, c1
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r0.w, r2, r2
rsq r0.y, r0.w
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.x, -r0, c13, r0.y
pow_sat r0, r3.x, c5.x
mul r0.y, r2.w, c11.x
add_sat r0.y, r0, -c10.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2, c12
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c9
texldp r3.x, v6, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c19.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c14.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c19.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 304 // 296 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_FadeDist]
Float 280 [_FadeScale]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 130 instructions, 5 temp regs, 0 temp arrays:
// ALU 120 float, 0 int, 5 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedgkdnipoacedjhbgcinpjkblfmpkgpgfaabaaaaaaaibcaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefckabaaaaaeaaaaaaaciaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
pcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaafaaaaaa
egbcbaaaafaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaafaaaaaadeaaaaajicaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
jgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaaf
mcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaa
aaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaadaaaaaabbaaaaahbcaabaaaabaaaaaaegbobaaa
adaaaaaaegbobaaaadaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahpcaabaaaabaaaaaaagaabaaaabaaaaaabgbjbaaaadaaaaaaaaaaaaal
dcaabaaaacaaaaaajgafbaiaibaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaaaaaaaaaaaaaaaaaaaaibcaabaaaacaaaaaadkaabaiambaaaaaaabaaaaaa
akaabaaaacaaaaaaebcaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaaaaaaaaj
ecaabaaaacaaaaaadkaabaiambaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaa
dcaaaaakecaabaaaacaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaadkaabaia
ibaaaaaaabaaaaaaaaaaaaaiccaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
bkaabaaaacaaaaaaebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaaj
hcaabaaaadaaaaaahgaobaiambaaaaaaabaaaaaajgahbaiaibaaaaaaabaaaaaa
dcaaaaakncaabaaaacaaaaaaagaabaaaacaaaaaaagajbaaaadaaaaaapgajbaia
ibaaaaaaabaaaaaaaaaaaaajhcaabaaaadaaaaaaggalbaiaibaaaaaaabaaaaaa
igadbaiaebaaaaaaacaaaaaadcaaaaajhcaabaaaacaaaaaafgafbaaaacaaaaaa
egacbaaaadaaaaaaigadbaaaacaaaaaadiaaaaakgcaabaaaacaaaaaakgajbaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
acaaaaaajgafbaaaacaaaaaaagaabaaaacaaaaaadiaaaaaidcaabaaaacaaaaaa
egaabaaaacaaaaaakgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaacaaaaaa
akaabaiaibaaaaaaabaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaacaaaaaackaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaacaaaaaackaabaaaacaaaaaaakaabaiaibaaaaaa
abaaaaaaabeaaaaakeanmjdpaaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaa
abaaaaaaabeaaaaaaaaaiadpelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahicaabaaaacaaaaaaakaabaaaabaaaaaackaabaaaacaaaaaadcaaaaaj
icaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
abaaaaahecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaaj
bcaabaaaabaaaaaackaabaaaacaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaaf
ccaabaaaadaaaaaaakaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaaakaabaaa
abaaaaaaalaaaaaffcaabaaaabaaaaaafgahbaaaabaaaaaaamaaaaafkcaabaaa
abaaaaaafganbaaaabaaaaaaapaaaaahccaabaaaabaaaaaangafbaaaabaaaaaa
ngafbaaaabaaaaaaelaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaah
bcaabaaaaeaaaaaabkaabaaaabaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaa
abaaaaaaigaabaaaabaaaaaaigaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaa
adaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaabaaaaaaadccaaaambcaabaaa
adaaaaaackiacaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaabkiacaiaebaaaaaa
aaaaaaaabbaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaa
acaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaa
egaobaaaabaaaaaabacaaaahbcaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaa
aeaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaa
baaaaaaacpaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaiadpaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaa
akaabaaaabaaaaaaaaaaaaajocaabaaaabaaaaaaagbjbaaaacaaaaaaagijcaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaa
jgahbaaaabaaaaaaaaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaia
ebaaaaaaacaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
acaaaaaaelaaaaafgcaabaaaabaaaaaafgagbaaaabaaaaaadcaaaaalccaabaaa
abaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaadicaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaadkiacaaaaaaaaaaa
bbaaaaaadcaaaaajbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaaaadaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaa
abaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_FadeDist]
Float 11 [_FadeScale]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 153 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c15, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c16, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp4 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c15.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
add r0.w, r0, c15.y
frc r1.w, r0
add_pp r1.xyz, r1.yxzw, -r2
add_sat r0.w, r0, -r1
mad_pp r1.xyz, r0.w, r1, r2
dsy r2.xy, r0.xzzw
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c15.y
mad r1.z, r0.w, c16.x, c16.y
mad r1.z, r1, r0.w, c15.w
mul_pp r1.xy, r1, c19.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c16.z
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c15.x, c15.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c16.w, r1
mad r0.w, r0, c15.z, r1.z
dp3 r0.y, v4, v4
rsq r0.y, r0.y
mul r3.xyz, r0.y, v4
abs r4.x, r3.z
abs r3.w, r3.x
max r0.y, r3.w, r4.x
mul r1.z, r0.w, c17.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c17.y, c17.z
mul r1.xy, r1, c7.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.x, r2, r2
rsq r0.z, r0.z
mad r2.w, r2, r4.z, c17
mad r2.y, r2.w, r4.z, c18.x
rsq r2.x, r2.x
rsq r0.x, r0.x
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c19.x
mul r0.x, r1.z, c19
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c15.y
rcp r2.w, r2.x
mad r2.y, r2, r4.z, c18
mad r2.x, r2.y, r4.z, c18.z
mul r2.y, r2.w, c8.x
mul_sat r2.y, r2, c16.w
mad_pp r0, r2.y, r1, r0
mul r2.x, r2, r4.y
abs r1.y, r3
add r1.x, r3.w, -r4
add r1.z, -r2.x, c18.w
cmp r1.x, -r1, r2, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c15.y
mad r1.z, r1.y, c16.x, c16.y
mad r1.z, r1, r1.y, c15.w
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c16.z
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c15.x, c15
mul r1.w, r1.y, r1.z
add r2.x, -r1, c15.z
mad r1.z, -r1.w, c16.w, r1
cmp r1.w, r3.z, r1.x, r2.x
mad r1.x, r1.y, c15.z, r1.z
mul r1.z, r1.x, c17.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.zw, r3.xyxz
mad r1.x, r1.y, c19, c19.y
mov r2.xyz, v3
mul r3.zw, r3, r3
add r3.x, r3.z, r3.w
rsq r3.x, r3.x
mov r1.y, r1.z
dsx r3.y, r1.z
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rcp r3.z, r3.x
mul r3.x, r1.z, c19
mul r1.z, r3, c19.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1, r1, r0
dp3_sat r2.x, v5, r2
mul r3.x, r2, c6
add r2.xyz, -v1, c1
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r0.w, r2, r2
rsq r0.y, r0.w
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.x, -r0, c13, r0.y
pow_sat r0, r3.x, c5.x
mul r0.y, r2.w, c11.x
add_sat r0.y, r0, -c10.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2, c12
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c9
texldp r3.x, v6, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c19.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c14.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c19.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 304 // 296 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_FadeDist]
Float 280 [_FadeScale]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 130 instructions, 5 temp regs, 0 temp arrays:
// ALU 120 float, 0 int, 5 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefieceddoplegbklpgnmaojijmlhiofeobljaakabaaaaaaaibcaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefckabaaaaaeaaaaaaaciaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
pcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaafaaaaaa
egbcbaaaafaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaafaaaaaadeaaaaajicaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
jgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaaf
mcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaa
aaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaadaaaaaabbaaaaahbcaabaaaabaaaaaaegbobaaa
adaaaaaaegbobaaaadaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahpcaabaaaabaaaaaaagaabaaaabaaaaaabgbjbaaaadaaaaaaaaaaaaal
dcaabaaaacaaaaaajgafbaiaibaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaaaaaaaaaaaaaaaaaaaaibcaabaaaacaaaaaadkaabaiambaaaaaaabaaaaaa
akaabaaaacaaaaaaebcaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaaaaaaaaj
ecaabaaaacaaaaaadkaabaiambaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaa
dcaaaaakecaabaaaacaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaadkaabaia
ibaaaaaaabaaaaaaaaaaaaaiccaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
bkaabaaaacaaaaaaebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaaj
hcaabaaaadaaaaaahgaobaiambaaaaaaabaaaaaajgahbaiaibaaaaaaabaaaaaa
dcaaaaakncaabaaaacaaaaaaagaabaaaacaaaaaaagajbaaaadaaaaaapgajbaia
ibaaaaaaabaaaaaaaaaaaaajhcaabaaaadaaaaaaggalbaiaibaaaaaaabaaaaaa
igadbaiaebaaaaaaacaaaaaadcaaaaajhcaabaaaacaaaaaafgafbaaaacaaaaaa
egacbaaaadaaaaaaigadbaaaacaaaaaadiaaaaakgcaabaaaacaaaaaakgajbaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
acaaaaaajgafbaaaacaaaaaaagaabaaaacaaaaaadiaaaaaidcaabaaaacaaaaaa
egaabaaaacaaaaaakgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaacaaaaaa
akaabaiaibaaaaaaabaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaacaaaaaackaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaacaaaaaackaabaaaacaaaaaaakaabaiaibaaaaaa
abaaaaaaabeaaaaakeanmjdpaaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaa
abaaaaaaabeaaaaaaaaaiadpelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahicaabaaaacaaaaaaakaabaaaabaaaaaackaabaaaacaaaaaadcaaaaaj
icaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
abaaaaahecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaaj
bcaabaaaabaaaaaackaabaaaacaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaaf
ccaabaaaadaaaaaaakaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaaakaabaaa
abaaaaaaalaaaaaffcaabaaaabaaaaaafgahbaaaabaaaaaaamaaaaafkcaabaaa
abaaaaaafganbaaaabaaaaaaapaaaaahccaabaaaabaaaaaangafbaaaabaaaaaa
ngafbaaaabaaaaaaelaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaah
bcaabaaaaeaaaaaabkaabaaaabaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaa
abaaaaaaigaabaaaabaaaaaaigaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaa
adaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaabaaaaaaadccaaaambcaabaaa
adaaaaaackiacaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaabkiacaiaebaaaaaa
aaaaaaaabbaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaa
acaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaa
egaobaaaabaaaaaabacaaaahbcaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaa
aeaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaa
baaaaaaacpaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaiadpaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaa
akaabaaaabaaaaaaaaaaaaajocaabaaaabaaaaaaagbjbaaaacaaaaaaagijcaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaa
jgahbaaaabaaaaaaaaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaia
ebaaaaaaacaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
acaaaaaaelaaaaafgcaabaaaabaaaaaafgagbaaaabaaaaaadcaaaaalccaabaaa
abaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaadicaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaadkiacaaaaaaaaaaa
bbaaaaaadcaaaaajbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaaaadaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaa
abaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_FadeDist]
Float 11 [_FadeScale]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 153 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c15, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c16, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp4 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c15.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
add r0.w, r0, c15.y
frc r1.w, r0
add_pp r1.xyz, r1.yxzw, -r2
add_sat r0.w, r0, -r1
mad_pp r1.xyz, r0.w, r1, r2
dsy r2.xy, r0.xzzw
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c15.y
mad r1.z, r0.w, c16.x, c16.y
mad r1.z, r1, r0.w, c15.w
mul_pp r1.xy, r1, c19.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c16.z
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c15.x, c15.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c16.w, r1
mad r0.w, r0, c15.z, r1.z
dp3 r0.y, v4, v4
rsq r0.y, r0.y
mul r3.xyz, r0.y, v4
abs r4.x, r3.z
abs r3.w, r3.x
max r0.y, r3.w, r4.x
mul r1.z, r0.w, c17.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c17.y, c17.z
mul r1.xy, r1, c7.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.x, r2, r2
rsq r0.z, r0.z
mad r2.w, r2, r4.z, c17
mad r2.y, r2.w, r4.z, c18.x
rsq r2.x, r2.x
rsq r0.x, r0.x
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c19.x
mul r0.x, r1.z, c19
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c15.y
rcp r2.w, r2.x
mad r2.y, r2, r4.z, c18
mad r2.x, r2.y, r4.z, c18.z
mul r2.y, r2.w, c8.x
mul_sat r2.y, r2, c16.w
mad_pp r0, r2.y, r1, r0
mul r2.x, r2, r4.y
abs r1.y, r3
add r1.x, r3.w, -r4
add r1.z, -r2.x, c18.w
cmp r1.x, -r1, r2, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c15.y
mad r1.z, r1.y, c16.x, c16.y
mad r1.z, r1, r1.y, c15.w
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c16.z
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c15.x, c15
mul r1.w, r1.y, r1.z
add r2.x, -r1, c15.z
mad r1.z, -r1.w, c16.w, r1
cmp r1.w, r3.z, r1.x, r2.x
mad r1.x, r1.y, c15.z, r1.z
mul r1.z, r1.x, c17.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.zw, r3.xyxz
mad r1.x, r1.y, c19, c19.y
mov r2.xyz, v3
mul r3.zw, r3, r3
add r3.x, r3.z, r3.w
rsq r3.x, r3.x
mov r1.y, r1.z
dsx r3.y, r1.z
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rcp r3.z, r3.x
mul r3.x, r1.z, c19
mul r1.z, r3, c19.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1, r1, r0
dp3_sat r2.x, v5, r2
mul r3.x, r2, c6
add r2.xyz, -v1, c1
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r0.w, r2, r2
rsq r0.y, r0.w
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.x, -r0, c13, r0.y
pow_sat r0, r3.x, c5.x
mul r0.y, r2.w, c11.x
add_sat r0.y, r0, -c10.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2, c12
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4_pp r0.y, c3, c3
rsq_pp r1.w, r0.y
mul_pp r2.xyz, r1.w, c3
mov r0.x, c9
texldp r3.x, v6, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c19.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c14.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c19.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 304 // 296 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_FadeDist]
Float 280 [_FadeScale]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 130 instructions, 5 temp regs, 0 temp arrays:
// ALU 120 float, 0 int, 5 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedkihhadjdgadcnnennhhbbepddfohcconabaaaaaaaibcaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaadaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefckabaaaaaeaaaaaaaciaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
pcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaafaaaaaa
egbcbaaaafaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaafaaaaaadeaaaaajicaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
jgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaaf
mcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaa
aaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaadaaaaaabbaaaaahbcaabaaaabaaaaaaegbobaaa
adaaaaaaegbobaaaadaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahpcaabaaaabaaaaaaagaabaaaabaaaaaabgbjbaaaadaaaaaaaaaaaaal
dcaabaaaacaaaaaajgafbaiaibaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaaaaaaaaaaaaaaaaaaaaibcaabaaaacaaaaaadkaabaiambaaaaaaabaaaaaa
akaabaaaacaaaaaaebcaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaaaaaaaaj
ecaabaaaacaaaaaadkaabaiambaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaa
dcaaaaakecaabaaaacaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaadkaabaia
ibaaaaaaabaaaaaaaaaaaaaiccaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
bkaabaaaacaaaaaaebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaaj
hcaabaaaadaaaaaahgaobaiambaaaaaaabaaaaaajgahbaiaibaaaaaaabaaaaaa
dcaaaaakncaabaaaacaaaaaaagaabaaaacaaaaaaagajbaaaadaaaaaapgajbaia
ibaaaaaaabaaaaaaaaaaaaajhcaabaaaadaaaaaaggalbaiaibaaaaaaabaaaaaa
igadbaiaebaaaaaaacaaaaaadcaaaaajhcaabaaaacaaaaaafgafbaaaacaaaaaa
egacbaaaadaaaaaaigadbaaaacaaaaaadiaaaaakgcaabaaaacaaaaaakgajbaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
acaaaaaajgafbaaaacaaaaaaagaabaaaacaaaaaadiaaaaaidcaabaaaacaaaaaa
egaabaaaacaaaaaakgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaacaaaaaa
akaabaiaibaaaaaaabaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaacaaaaaackaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaacaaaaaackaabaaaacaaaaaaakaabaiaibaaaaaa
abaaaaaaabeaaaaakeanmjdpaaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaa
abaaaaaaabeaaaaaaaaaiadpelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahicaabaaaacaaaaaaakaabaaaabaaaaaackaabaaaacaaaaaadcaaaaaj
icaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
abaaaaahecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaaj
bcaabaaaabaaaaaackaabaaaacaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaaf
ccaabaaaadaaaaaaakaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaaakaabaaa
abaaaaaaalaaaaaffcaabaaaabaaaaaafgahbaaaabaaaaaaamaaaaafkcaabaaa
abaaaaaafganbaaaabaaaaaaapaaaaahccaabaaaabaaaaaangafbaaaabaaaaaa
ngafbaaaabaaaaaaelaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaah
bcaabaaaaeaaaaaabkaabaaaabaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaa
abaaaaaaigaabaaaabaaaaaaigaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaa
adaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaabaaaaaaadccaaaambcaabaaa
adaaaaaackiacaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaabkiacaiaebaaaaaa
aaaaaaaabbaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaa
acaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaa
egaobaaaabaaaaaabacaaaahbcaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaa
aeaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaa
baaaaaaacpaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaiadpaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaa
akaabaaaabaaaaaaaaaaaaajocaabaaaabaaaaaaagbjbaaaacaaaaaaagijcaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaa
jgahbaaaabaaaaaaaaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaia
ebaaaaaaacaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
acaaaaaaelaaaaafgcaabaaaabaaaaaafgagbaaaabaaaaaadcaaaaalccaabaaa
abaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaadicaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaadkiacaaaaaaaaaaa
bbaaaaaadcaaaaajbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaaaadaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaa
abaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_FadeDist]
Float 11 [_FadeScale]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 153 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c15, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c16, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp4 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c15.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
add r0.w, r0, c15.y
frc r1.w, r0
add_pp r1.xyz, r1.yxzw, -r2
add_sat r0.w, r0, -r1
mad_pp r1.xyz, r0.w, r1, r2
dsy r2.xy, r0.xzzw
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c15.y
mad r1.z, r0.w, c16.x, c16.y
mad r1.z, r1, r0.w, c15.w
mul_pp r1.xy, r1, c19.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c16.z
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c15.x, c15.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c16.w, r1
mad r0.w, r0, c15.z, r1.z
dp3 r0.y, v4, v4
rsq r0.y, r0.y
mul r3.xyz, r0.y, v4
abs r4.x, r3.z
abs r3.w, r3.x
max r0.y, r3.w, r4.x
mul r1.z, r0.w, c17.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c17.y, c17.z
mul r1.xy, r1, c7.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.x, r2, r2
rsq r0.z, r0.z
mad r2.w, r2, r4.z, c17
mad r2.y, r2.w, r4.z, c18.x
rsq r2.x, r2.x
rsq r0.x, r0.x
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c19.x
mul r0.x, r1.z, c19
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c15.y
rcp r2.w, r2.x
mad r2.y, r2, r4.z, c18
mad r2.x, r2.y, r4.z, c18.z
mul r2.y, r2.w, c8.x
mul_sat r2.y, r2, c16.w
mad_pp r0, r2.y, r1, r0
mul r2.x, r2, r4.y
abs r1.y, r3
add r1.x, r3.w, -r4
add r1.z, -r2.x, c18.w
cmp r1.x, -r1, r2, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c15.y
mad r1.z, r1.y, c16.x, c16.y
mad r1.z, r1, r1.y, c15.w
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c16.z
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c15.x, c15
mul r1.w, r1.y, r1.z
add r2.x, -r1, c15.z
mad r1.z, -r1.w, c16.w, r1
cmp r1.w, r3.z, r1.x, r2.x
mad r1.x, r1.y, c15.z, r1.z
mul r1.z, r1.x, c17.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.zw, r3.xyxz
mad r1.x, r1.y, c19, c19.y
mov r2.xyz, v3
mul r3.zw, r3, r3
add r3.x, r3.z, r3.w
rsq r3.x, r3.x
mov r1.y, r1.z
dsx r3.y, r1.z
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rcp r3.z, r3.x
mul r3.x, r1.z, c19
mul r1.z, r3, c19.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1, r1, r0
dp3_sat r2.x, v5, r2
mul r3.x, r2, c6
add r2.xyz, -v1, c1
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r0.w, r2, r2
rsq r0.y, r0.w
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.x, -r0, c13, r0.y
pow_sat r0, r3.x, c5.x
mul r0.y, r2.w, c11.x
add_sat r0.y, r0, -c10.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2, c12
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c9
texldp r3.x, v6, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c19.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c14.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c19.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
ConstBuffer "$Globals" 304 // 296 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_FadeDist]
Float 280 [_FadeScale]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 130 instructions, 5 temp regs, 0 temp arrays:
// ALU 120 float, 0 int, 5 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednmeknalkkajedfmjocmhabejgpgcjfbbabaaaaaacabcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefckabaaaaa
eaaaaaaaciaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadpcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaafaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaabbaaaaahbcaabaaaabaaaaaaegbobaaaadaaaaaaegbobaaa
adaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahpcaabaaa
abaaaaaaagaabaaaabaaaaaabgbjbaaaadaaaaaaaaaaaaaldcaabaaaacaaaaaa
jgafbaiaibaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaa
aaaaaaaibcaabaaaacaaaaaadkaabaiambaaaaaaabaaaaaaakaabaaaacaaaaaa
ebcaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaaaaaaaajecaabaaaacaaaaaa
dkaabaiambaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaadcaaaaakecaabaaa
acaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaa
aaaaaaaiccaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaabkaabaaaacaaaaaa
ebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajhcaabaaaadaaaaaa
hgaobaiambaaaaaaabaaaaaajgahbaiaibaaaaaaabaaaaaadcaaaaakncaabaaa
acaaaaaaagaabaaaacaaaaaaagajbaaaadaaaaaapgajbaiaibaaaaaaabaaaaaa
aaaaaaajhcaabaaaadaaaaaaggalbaiaibaaaaaaabaaaaaaigadbaiaebaaaaaa
acaaaaaadcaaaaajhcaabaaaacaaaaaafgafbaaaacaaaaaaegacbaaaadaaaaaa
igadbaaaacaaaaaadiaaaaakgcaabaaaacaaaaaakgajbaaaacaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaacaaaaaajgafbaaa
acaaaaaaagaabaaaacaaaaaadiaaaaaidcaabaaaacaaaaaaegaabaaaacaaaaaa
kgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaacaaaaaaakaabaiaibaaaaaa
abaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaacaaaaaackaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
keanmjdpaaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaaabaaaaaaabeaaaaa
aaaaiadpelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaa
acaaaaaaakaabaaaabaaaaaackaabaaaacaaaaaadcaaaaajicaabaaaacaaaaaa
dkaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaacaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaa
akaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaaakaabaaaabaaaaaaalaaaaaf
fcaabaaaabaaaaaafgahbaaaabaaaaaaamaaaaafkcaabaaaabaaaaaafganbaaa
abaaaaaaapaaaaahccaabaaaabaaaaaangafbaaaabaaaaaangafbaaaabaaaaaa
elaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaaeaaaaaa
bkaabaaaabaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaabaaaaaaigaabaaa
abaaaaaaigaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaa
adaaaaaapgipcaaaaaaaaaaabaaaaaaadccaaaambcaabaaaadaaaaaackiacaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaabkiacaiaebaaaaaaaaaaaaaabbaaaaaa
dcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
bacaaaahbcaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaaeaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaaabaaaaaa
aaaaaaajocaabaaaabaaaaaaagbjbaaaacaaaaaaagijcaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaa
aaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaa
baaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaf
gcaabaaaabaaaaaafgagbaaaabaaaaaadcaaaaalccaabaaaabaaaaaaakiacaia
ebaaaaaaaaaaaaaabcaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadicaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaaj
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaadaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaah
dcaabaaaabaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaal
bcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaa
abaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaackbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaabkiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaa
diaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_FadeDist]
Float 11 [_FadeScale]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 153 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c15, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c16, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp4 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c15.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
add r0.w, r0, c15.y
frc r1.w, r0
add_pp r1.xyz, r1.yxzw, -r2
add_sat r0.w, r0, -r1
mad_pp r1.xyz, r0.w, r1, r2
dsy r2.xy, r0.xzzw
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c15.y
mad r1.z, r0.w, c16.x, c16.y
mad r1.z, r1, r0.w, c15.w
mul_pp r1.xy, r1, c19.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c16.z
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c15.x, c15.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c16.w, r1
mad r0.w, r0, c15.z, r1.z
dp3 r0.y, v4, v4
rsq r0.y, r0.y
mul r3.xyz, r0.y, v4
abs r4.x, r3.z
abs r3.w, r3.x
max r0.y, r3.w, r4.x
mul r1.z, r0.w, c17.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c17.y, c17.z
mul r1.xy, r1, c7.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.x, r2, r2
rsq r0.z, r0.z
mad r2.w, r2, r4.z, c17
mad r2.y, r2.w, r4.z, c18.x
rsq r2.x, r2.x
rsq r0.x, r0.x
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c19.x
mul r0.x, r1.z, c19
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c15.y
rcp r2.w, r2.x
mad r2.y, r2, r4.z, c18
mad r2.x, r2.y, r4.z, c18.z
mul r2.y, r2.w, c8.x
mul_sat r2.y, r2, c16.w
mad_pp r0, r2.y, r1, r0
mul r2.x, r2, r4.y
abs r1.y, r3
add r1.x, r3.w, -r4
add r1.z, -r2.x, c18.w
cmp r1.x, -r1, r2, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c15.y
mad r1.z, r1.y, c16.x, c16.y
mad r1.z, r1, r1.y, c15.w
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c16.z
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c15.x, c15
mul r1.w, r1.y, r1.z
add r2.x, -r1, c15.z
mad r1.z, -r1.w, c16.w, r1
cmp r1.w, r3.z, r1.x, r2.x
mad r1.x, r1.y, c15.z, r1.z
mul r1.z, r1.x, c17.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.zw, r3.xyxz
mad r1.x, r1.y, c19, c19.y
mov r2.xyz, v3
mul r3.zw, r3, r3
add r3.x, r3.z, r3.w
rsq r3.x, r3.x
mov r1.y, r1.z
dsx r3.y, r1.z
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rcp r3.z, r3.x
mul r3.x, r1.z, c19
mul r1.z, r3, c19.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1, r1, r0
dp3_sat r2.x, v5, r2
mul r3.x, r2, c6
add r2.xyz, -v1, c1
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r0.w, r2, r2
rsq r0.y, r0.w
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.x, -r0, c13, r0.y
pow_sat r0, r3.x, c5.x
mul r0.y, r2.w, c11.x
add_sat r0.y, r0, -c10.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2, c12
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c9
texldp r3.x, v6, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c19.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c14.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c19.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 304 // 296 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_FadeDist]
Float 280 [_FadeScale]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 130 instructions, 5 temp regs, 0 temp arrays:
// ALU 120 float, 0 int, 5 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednmeknalkkajedfmjocmhabejgpgcjfbbabaaaaaacabcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefckabaaaaa
eaaaaaaaciaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadpcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaafaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaabbaaaaahbcaabaaaabaaaaaaegbobaaaadaaaaaaegbobaaa
adaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahpcaabaaa
abaaaaaaagaabaaaabaaaaaabgbjbaaaadaaaaaaaaaaaaaldcaabaaaacaaaaaa
jgafbaiaibaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaa
aaaaaaaibcaabaaaacaaaaaadkaabaiambaaaaaaabaaaaaaakaabaaaacaaaaaa
ebcaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaaaaaaaajecaabaaaacaaaaaa
dkaabaiambaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaadcaaaaakecaabaaa
acaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaa
aaaaaaaiccaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaabkaabaaaacaaaaaa
ebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajhcaabaaaadaaaaaa
hgaobaiambaaaaaaabaaaaaajgahbaiaibaaaaaaabaaaaaadcaaaaakncaabaaa
acaaaaaaagaabaaaacaaaaaaagajbaaaadaaaaaapgajbaiaibaaaaaaabaaaaaa
aaaaaaajhcaabaaaadaaaaaaggalbaiaibaaaaaaabaaaaaaigadbaiaebaaaaaa
acaaaaaadcaaaaajhcaabaaaacaaaaaafgafbaaaacaaaaaaegacbaaaadaaaaaa
igadbaaaacaaaaaadiaaaaakgcaabaaaacaaaaaakgajbaaaacaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaacaaaaaajgafbaaa
acaaaaaaagaabaaaacaaaaaadiaaaaaidcaabaaaacaaaaaaegaabaaaacaaaaaa
kgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaacaaaaaaakaabaiaibaaaaaa
abaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaacaaaaaackaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
keanmjdpaaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaaabaaaaaaabeaaaaa
aaaaiadpelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaa
acaaaaaaakaabaaaabaaaaaackaabaaaacaaaaaadcaaaaajicaabaaaacaaaaaa
dkaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaacaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaa
akaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaaakaabaaaabaaaaaaalaaaaaf
fcaabaaaabaaaaaafgahbaaaabaaaaaaamaaaaafkcaabaaaabaaaaaafganbaaa
abaaaaaaapaaaaahccaabaaaabaaaaaangafbaaaabaaaaaangafbaaaabaaaaaa
elaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaaeaaaaaa
bkaabaaaabaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaabaaaaaaigaabaaa
abaaaaaaigaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaa
adaaaaaapgipcaaaaaaaaaaabaaaaaaadccaaaambcaabaaaadaaaaaackiacaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaabkiacaiaebaaaaaaaaaaaaaabbaaaaaa
dcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
bacaaaahbcaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaaeaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaaabaaaaaa
aaaaaaajocaabaaaabaaaaaaagbjbaaaacaaaaaaagijcaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaa
aaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaa
baaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaf
gcaabaaaabaaaaaafgagbaaaabaaaaaadcaaaaalccaabaaaabaaaaaaakiacaia
ebaaaaaaaaaaaaaabcaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadicaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaaj
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaadaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaah
dcaabaaaabaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaal
bcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaa
abaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaackbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaabkiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaa
diaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_FadeDist]
Float 11 [_FadeScale]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 153 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c15, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c16, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp4 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c15.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
add r0.w, r0, c15.y
frc r1.w, r0
add_pp r1.xyz, r1.yxzw, -r2
add_sat r0.w, r0, -r1
mad_pp r1.xyz, r0.w, r1, r2
dsy r2.xy, r0.xzzw
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c15.y
mad r1.z, r0.w, c16.x, c16.y
mad r1.z, r1, r0.w, c15.w
mul_pp r1.xy, r1, c19.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c16.z
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c15.x, c15.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c16.w, r1
mad r0.w, r0, c15.z, r1.z
dp3 r0.y, v4, v4
rsq r0.y, r0.y
mul r3.xyz, r0.y, v4
abs r4.x, r3.z
abs r3.w, r3.x
max r0.y, r3.w, r4.x
mul r1.z, r0.w, c17.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c17.y, c17.z
mul r1.xy, r1, c7.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.x, r2, r2
rsq r0.z, r0.z
mad r2.w, r2, r4.z, c17
mad r2.y, r2.w, r4.z, c18.x
rsq r2.x, r2.x
rsq r0.x, r0.x
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c19.x
mul r0.x, r1.z, c19
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c15.y
rcp r2.w, r2.x
mad r2.y, r2, r4.z, c18
mad r2.x, r2.y, r4.z, c18.z
mul r2.y, r2.w, c8.x
mul_sat r2.y, r2, c16.w
mad_pp r0, r2.y, r1, r0
mul r2.x, r2, r4.y
abs r1.y, r3
add r1.x, r3.w, -r4
add r1.z, -r2.x, c18.w
cmp r1.x, -r1, r2, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c15.y
mad r1.z, r1.y, c16.x, c16.y
mad r1.z, r1, r1.y, c15.w
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c16.z
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c15.x, c15
mul r1.w, r1.y, r1.z
add r2.x, -r1, c15.z
mad r1.z, -r1.w, c16.w, r1
cmp r1.w, r3.z, r1.x, r2.x
mad r1.x, r1.y, c15.z, r1.z
mul r1.z, r1.x, c17.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.zw, r3.xyxz
mad r1.x, r1.y, c19, c19.y
mov r2.xyz, v3
mul r3.zw, r3, r3
add r3.x, r3.z, r3.w
rsq r3.x, r3.x
mov r1.y, r1.z
dsx r3.y, r1.z
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rcp r3.z, r3.x
mul r3.x, r1.z, c19
mul r1.z, r3, c19.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1, r1, r0
dp3_sat r2.x, v5, r2
mul r3.x, r2, c6
add r2.xyz, -v1, c1
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r0.w, r2, r2
rsq r0.y, r0.w
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.x, -r0, c13, r0.y
pow_sat r0, r3.x, c5.x
mul r0.y, r2.w, c11.x
add_sat r0.y, r0, -c10.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2, c12
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4_pp r0.y, c3, c3
rsq_pp r1.w, r0.y
mul_pp r2.xyz, r1.w, c3
mov r0.x, c9
texldp r3.x, v6, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c19.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c14.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c19.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 304 // 296 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_FadeDist]
Float 280 [_FadeScale]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 130 instructions, 5 temp regs, 0 temp arrays:
// ALU 120 float, 0 int, 5 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedgkdnipoacedjhbgcinpjkblfmpkgpgfaabaaaaaaaibcaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefckabaaaaaeaaaaaaaciaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
pcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaafaaaaaa
egbcbaaaafaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaafaaaaaadeaaaaajicaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
jgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaaf
mcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaa
aaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaadaaaaaabbaaaaahbcaabaaaabaaaaaaegbobaaa
adaaaaaaegbobaaaadaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahpcaabaaaabaaaaaaagaabaaaabaaaaaabgbjbaaaadaaaaaaaaaaaaal
dcaabaaaacaaaaaajgafbaiaibaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaaaaaaaaaaaaaaaaaaaaibcaabaaaacaaaaaadkaabaiambaaaaaaabaaaaaa
akaabaaaacaaaaaaebcaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaaaaaaaaj
ecaabaaaacaaaaaadkaabaiambaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaa
dcaaaaakecaabaaaacaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaadkaabaia
ibaaaaaaabaaaaaaaaaaaaaiccaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
bkaabaaaacaaaaaaebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaaj
hcaabaaaadaaaaaahgaobaiambaaaaaaabaaaaaajgahbaiaibaaaaaaabaaaaaa
dcaaaaakncaabaaaacaaaaaaagaabaaaacaaaaaaagajbaaaadaaaaaapgajbaia
ibaaaaaaabaaaaaaaaaaaaajhcaabaaaadaaaaaaggalbaiaibaaaaaaabaaaaaa
igadbaiaebaaaaaaacaaaaaadcaaaaajhcaabaaaacaaaaaafgafbaaaacaaaaaa
egacbaaaadaaaaaaigadbaaaacaaaaaadiaaaaakgcaabaaaacaaaaaakgajbaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
acaaaaaajgafbaaaacaaaaaaagaabaaaacaaaaaadiaaaaaidcaabaaaacaaaaaa
egaabaaaacaaaaaakgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaacaaaaaa
akaabaiaibaaaaaaabaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaacaaaaaackaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaacaaaaaackaabaaaacaaaaaaakaabaiaibaaaaaa
abaaaaaaabeaaaaakeanmjdpaaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaa
abaaaaaaabeaaaaaaaaaiadpelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahicaabaaaacaaaaaaakaabaaaabaaaaaackaabaaaacaaaaaadcaaaaaj
icaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
abaaaaahecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaaj
bcaabaaaabaaaaaackaabaaaacaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaaf
ccaabaaaadaaaaaaakaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaaakaabaaa
abaaaaaaalaaaaaffcaabaaaabaaaaaafgahbaaaabaaaaaaamaaaaafkcaabaaa
abaaaaaafganbaaaabaaaaaaapaaaaahccaabaaaabaaaaaangafbaaaabaaaaaa
ngafbaaaabaaaaaaelaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaah
bcaabaaaaeaaaaaabkaabaaaabaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaa
abaaaaaaigaabaaaabaaaaaaigaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaa
adaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaabaaaaaaadccaaaambcaabaaa
adaaaaaackiacaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaabkiacaiaebaaaaaa
aaaaaaaabbaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaa
acaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaa
egaobaaaabaaaaaabacaaaahbcaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaa
aeaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaa
baaaaaaacpaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaiadpaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaa
akaabaaaabaaaaaaaaaaaaajocaabaaaabaaaaaaagbjbaaaacaaaaaaagijcaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaa
jgahbaaaabaaaaaaaaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaia
ebaaaaaaacaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
acaaaaaaelaaaaafgcaabaaaabaaaaaafgagbaaaabaaaaaadcaaaaalccaabaaa
abaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaadicaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaadkiacaaaaaaaaaaa
bbaaaaaadcaaaaajbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaaaadaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaa
abaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_FadeDist]
Float 11 [_FadeScale]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 153 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c15, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c16, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp4 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c15.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
add r0.w, r0, c15.y
frc r1.w, r0
add_pp r1.xyz, r1.yxzw, -r2
add_sat r0.w, r0, -r1
mad_pp r1.xyz, r0.w, r1, r2
dsy r2.xy, r0.xzzw
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c15.y
mad r1.z, r0.w, c16.x, c16.y
mad r1.z, r1, r0.w, c15.w
mul_pp r1.xy, r1, c19.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c16.z
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c15.x, c15.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c16.w, r1
mad r0.w, r0, c15.z, r1.z
dp3 r0.y, v4, v4
rsq r0.y, r0.y
mul r3.xyz, r0.y, v4
abs r4.x, r3.z
abs r3.w, r3.x
max r0.y, r3.w, r4.x
mul r1.z, r0.w, c17.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c17.y, c17.z
mul r1.xy, r1, c7.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.x, r2, r2
rsq r0.z, r0.z
mad r2.w, r2, r4.z, c17
mad r2.y, r2.w, r4.z, c18.x
rsq r2.x, r2.x
rsq r0.x, r0.x
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c19.x
mul r0.x, r1.z, c19
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c15.y
rcp r2.w, r2.x
mad r2.y, r2, r4.z, c18
mad r2.x, r2.y, r4.z, c18.z
mul r2.y, r2.w, c8.x
mul_sat r2.y, r2, c16.w
mad_pp r0, r2.y, r1, r0
mul r2.x, r2, r4.y
abs r1.y, r3
add r1.x, r3.w, -r4
add r1.z, -r2.x, c18.w
cmp r1.x, -r1, r2, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c15.y
mad r1.z, r1.y, c16.x, c16.y
mad r1.z, r1, r1.y, c15.w
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c16.z
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c15.x, c15
mul r1.w, r1.y, r1.z
add r2.x, -r1, c15.z
mad r1.z, -r1.w, c16.w, r1
cmp r1.w, r3.z, r1.x, r2.x
mad r1.x, r1.y, c15.z, r1.z
mul r1.z, r1.x, c17.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.zw, r3.xyxz
mad r1.x, r1.y, c19, c19.y
mov r2.xyz, v3
mul r3.zw, r3, r3
add r3.x, r3.z, r3.w
rsq r3.x, r3.x
mov r1.y, r1.z
dsx r3.y, r1.z
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rcp r3.z, r3.x
mul r3.x, r1.z, c19
mul r1.z, r3, c19.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1, r1, r0
dp3_sat r2.x, v5, r2
mul r3.x, r2, c6
add r2.xyz, -v1, c1
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r0.w, r2, r2
rsq r0.y, r0.w
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.x, -r0, c13, r0.y
pow_sat r0, r3.x, c5.x
mul r0.y, r2.w, c11.x
add_sat r0.y, r0, -c10.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2, c12
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4_pp r0.y, c3, c3
rsq_pp r1.w, r0.y
mul_pp r2.xyz, r1.w, c3
mov r0.x, c9
texldp r3.x, v6, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c19.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c14.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c19.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 368 // 360 used size, 18 vars
Vector 272 [_LightColor0] 4
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_FadeDist]
Float 344 [_FadeScale]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
Float 356 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 130 instructions, 5 temp regs, 0 temp arrays:
// ALU 120 float, 0 int, 5 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedlgjnhefhcimpfcgdcdfdmjlponbjilklabaaaaaacabcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaadaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefckabaaaaa
eaaaaaaaciaeaaaafjaaaaaeegiocaaaaaaaaaaabhaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadpcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaafaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaabbaaaaahbcaabaaaabaaaaaaegbobaaaadaaaaaaegbobaaa
adaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahpcaabaaa
abaaaaaaagaabaaaabaaaaaabgbjbaaaadaaaaaaaaaaaaaldcaabaaaacaaaaaa
jgafbaiaibaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaa
aaaaaaaibcaabaaaacaaaaaadkaabaiambaaaaaaabaaaaaaakaabaaaacaaaaaa
ebcaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaaaaaaaajecaabaaaacaaaaaa
dkaabaiambaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaadcaaaaakecaabaaa
acaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaa
aaaaaaaiccaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaabkaabaaaacaaaaaa
ebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajhcaabaaaadaaaaaa
hgaobaiambaaaaaaabaaaaaajgahbaiaibaaaaaaabaaaaaadcaaaaakncaabaaa
acaaaaaaagaabaaaacaaaaaaagajbaaaadaaaaaapgajbaiaibaaaaaaabaaaaaa
aaaaaaajhcaabaaaadaaaaaaggalbaiaibaaaaaaabaaaaaaigadbaiaebaaaaaa
acaaaaaadcaaaaajhcaabaaaacaaaaaafgafbaaaacaaaaaaegacbaaaadaaaaaa
igadbaaaacaaaaaadiaaaaakgcaabaaaacaaaaaakgajbaaaacaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaacaaaaaajgafbaaa
acaaaaaaagaabaaaacaaaaaadiaaaaaidcaabaaaacaaaaaaegaabaaaacaaaaaa
kgikcaaaaaaaaaaabeaaaaaadcaaaaakecaabaaaacaaaaaaakaabaiaibaaaaaa
abaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaacaaaaaackaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
keanmjdpaaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaaabaaaaaaabeaaaaa
aaaaiadpelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaa
acaaaaaaakaabaaaabaaaaaackaabaaaacaaaaaadcaaaaajicaabaaaacaaaaaa
dkaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaacaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaa
akaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaaakaabaaaabaaaaaaalaaaaaf
fcaabaaaabaaaaaafgahbaaaabaaaaaaamaaaaafkcaabaaaabaaaaaafganbaaa
abaaaaaaapaaaaahccaabaaaabaaaaaangafbaaaabaaaaaangafbaaaabaaaaaa
elaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaaeaaaaaa
bkaabaaaabaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaabaaaaaaigaabaaa
abaaaaaaigaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaa
adaaaaaapgipcaaaaaaaaaaabeaaaaaadccaaaambcaabaaaadaaaaaackiacaaa
aaaaaaaabfaaaaaaakaabaaaadaaaaaabkiacaiaebaaaaaaaaaaaaaabfaaaaaa
dcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
bacaaaahbcaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaaeaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaabeaaaaaacpaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaaakiacaaaaaaaaaaabeaaaaaabjaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaaabaaaaaa
aaaaaaajocaabaaaabaaaaaaagbjbaaaacaaaaaaagijcaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaa
aaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaa
baaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaf
gcaabaaaabaaaaaafgagbaaaabaaaaaadcaaaaalccaabaaaabaaaaaaakiacaia
ebaaaaaaaaaaaaaabgaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadicaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaadkiacaaaaaaaaaaabfaaaaaadcaaaaaj
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaadaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaah
dcaabaaaabaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaal
bcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaa
abaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaackbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaabkiacaaaaaaaaaaabgaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaabbaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaabbaaaaaaagiacaaaaaaaaaaabfaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaa
diaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_FadeDist]
Float 11 [_FadeScale]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 153 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c15, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c16, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp4 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c15.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
add r0.w, r0, c15.y
frc r1.w, r0
add_pp r1.xyz, r1.yxzw, -r2
add_sat r0.w, r0, -r1
mad_pp r1.xyz, r0.w, r1, r2
dsy r2.xy, r0.xzzw
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c15.y
mad r1.z, r0.w, c16.x, c16.y
mad r1.z, r1, r0.w, c15.w
mul_pp r1.xy, r1, c19.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c16.z
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c15.x, c15.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c16.w, r1
mad r0.w, r0, c15.z, r1.z
dp3 r0.y, v4, v4
rsq r0.y, r0.y
mul r3.xyz, r0.y, v4
abs r4.x, r3.z
abs r3.w, r3.x
max r0.y, r3.w, r4.x
mul r1.z, r0.w, c17.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c17.y, c17.z
mul r1.xy, r1, c7.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.x, r2, r2
rsq r0.z, r0.z
mad r2.w, r2, r4.z, c17
mad r2.y, r2.w, r4.z, c18.x
rsq r2.x, r2.x
rsq r0.x, r0.x
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c19.x
mul r0.x, r1.z, c19
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c15.y
rcp r2.w, r2.x
mad r2.y, r2, r4.z, c18
mad r2.x, r2.y, r4.z, c18.z
mul r2.y, r2.w, c8.x
mul_sat r2.y, r2, c16.w
mad_pp r0, r2.y, r1, r0
mul r2.x, r2, r4.y
abs r1.y, r3
add r1.x, r3.w, -r4
add r1.z, -r2.x, c18.w
cmp r1.x, -r1, r2, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c15.y
mad r1.z, r1.y, c16.x, c16.y
mad r1.z, r1, r1.y, c15.w
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c16.z
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c15.x, c15
mul r1.w, r1.y, r1.z
add r2.x, -r1, c15.z
mad r1.z, -r1.w, c16.w, r1
cmp r1.w, r3.z, r1.x, r2.x
mad r1.x, r1.y, c15.z, r1.z
mul r1.z, r1.x, c17.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.zw, r3.xyxz
mad r1.x, r1.y, c19, c19.y
mov r2.xyz, v3
mul r3.zw, r3, r3
add r3.x, r3.z, r3.w
rsq r3.x, r3.x
mov r1.y, r1.z
dsx r3.y, r1.z
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rcp r3.z, r3.x
mul r3.x, r1.z, c19
mul r1.z, r3, c19.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1, r1, r0
dp3_sat r2.x, v5, r2
mul r3.x, r2, c6
add r2.xyz, -v1, c1
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r0.w, r2, r2
rsq r0.y, r0.w
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.x, -r0, c13, r0.y
pow_sat r0, r3.x, c5.x
mul r0.y, r2.w, c11.x
add_sat r0.y, r0, -c10.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2, c12
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c9
texldp r3.x, v6, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c19.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c14.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c19.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 304 // 296 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_FadeDist]
Float 280 [_FadeScale]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 130 instructions, 5 temp regs, 0 temp arrays:
// ALU 120 float, 0 int, 5 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedoiiiloldjkbiocokcccjgblfaegebfhmabaaaaaacabcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefckabaaaaa
eaaaaaaaciaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadpcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaafaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaabbaaaaahbcaabaaaabaaaaaaegbobaaaadaaaaaaegbobaaa
adaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahpcaabaaa
abaaaaaaagaabaaaabaaaaaabgbjbaaaadaaaaaaaaaaaaaldcaabaaaacaaaaaa
jgafbaiaibaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaa
aaaaaaaibcaabaaaacaaaaaadkaabaiambaaaaaaabaaaaaaakaabaaaacaaaaaa
ebcaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaaaaaaaajecaabaaaacaaaaaa
dkaabaiambaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaadcaaaaakecaabaaa
acaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaa
aaaaaaaiccaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaabkaabaaaacaaaaaa
ebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajhcaabaaaadaaaaaa
hgaobaiambaaaaaaabaaaaaajgahbaiaibaaaaaaabaaaaaadcaaaaakncaabaaa
acaaaaaaagaabaaaacaaaaaaagajbaaaadaaaaaapgajbaiaibaaaaaaabaaaaaa
aaaaaaajhcaabaaaadaaaaaaggalbaiaibaaaaaaabaaaaaaigadbaiaebaaaaaa
acaaaaaadcaaaaajhcaabaaaacaaaaaafgafbaaaacaaaaaaegacbaaaadaaaaaa
igadbaaaacaaaaaadiaaaaakgcaabaaaacaaaaaakgajbaaaacaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaacaaaaaajgafbaaa
acaaaaaaagaabaaaacaaaaaadiaaaaaidcaabaaaacaaaaaaegaabaaaacaaaaaa
kgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaacaaaaaaakaabaiaibaaaaaa
abaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaacaaaaaackaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
keanmjdpaaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaaabaaaaaaabeaaaaa
aaaaiadpelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaa
acaaaaaaakaabaaaabaaaaaackaabaaaacaaaaaadcaaaaajicaabaaaacaaaaaa
dkaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaacaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaa
akaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaaakaabaaaabaaaaaaalaaaaaf
fcaabaaaabaaaaaafgahbaaaabaaaaaaamaaaaafkcaabaaaabaaaaaafganbaaa
abaaaaaaapaaaaahccaabaaaabaaaaaangafbaaaabaaaaaangafbaaaabaaaaaa
elaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaaeaaaaaa
bkaabaaaabaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaabaaaaaaigaabaaa
abaaaaaaigaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaa
adaaaaaapgipcaaaaaaaaaaabaaaaaaadccaaaambcaabaaaadaaaaaackiacaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaabkiacaiaebaaaaaaaaaaaaaabbaaaaaa
dcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
bacaaaahbcaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaaeaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaaabaaaaaa
aaaaaaajocaabaaaabaaaaaaagbjbaaaacaaaaaaagijcaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaa
aaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaa
baaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaf
gcaabaaaabaaaaaafgagbaaaabaaaaaadcaaaaalccaabaaaabaaaaaaakiacaia
ebaaaaaaaaaaaaaabcaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadicaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaaj
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaadaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaah
dcaabaaaabaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaal
bcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaa
abaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaackbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaabkiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaa
diaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_FadeDist]
Float 11 [_FadeScale]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 153 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c15, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c16, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp4 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c15.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
add r0.w, r0, c15.y
frc r1.w, r0
add_pp r1.xyz, r1.yxzw, -r2
add_sat r0.w, r0, -r1
mad_pp r1.xyz, r0.w, r1, r2
dsy r2.xy, r0.xzzw
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c15.y
mad r1.z, r0.w, c16.x, c16.y
mad r1.z, r1, r0.w, c15.w
mul_pp r1.xy, r1, c19.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c16.z
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c15.x, c15.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c16.w, r1
mad r0.w, r0, c15.z, r1.z
dp3 r0.y, v4, v4
rsq r0.y, r0.y
mul r3.xyz, r0.y, v4
abs r4.x, r3.z
abs r3.w, r3.x
max r0.y, r3.w, r4.x
mul r1.z, r0.w, c17.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c17.y, c17.z
mul r1.xy, r1, c7.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.x, r2, r2
rsq r0.z, r0.z
mad r2.w, r2, r4.z, c17
mad r2.y, r2.w, r4.z, c18.x
rsq r2.x, r2.x
rsq r0.x, r0.x
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c19.x
mul r0.x, r1.z, c19
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c15.y
rcp r2.w, r2.x
mad r2.y, r2, r4.z, c18
mad r2.x, r2.y, r4.z, c18.z
mul r2.y, r2.w, c8.x
mul_sat r2.y, r2, c16.w
mad_pp r0, r2.y, r1, r0
mul r2.x, r2, r4.y
abs r1.y, r3
add r1.x, r3.w, -r4
add r1.z, -r2.x, c18.w
cmp r1.x, -r1, r2, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c15.y
mad r1.z, r1.y, c16.x, c16.y
mad r1.z, r1, r1.y, c15.w
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c16.z
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c15.x, c15
mul r1.w, r1.y, r1.z
add r2.x, -r1, c15.z
mad r1.z, -r1.w, c16.w, r1
cmp r1.w, r3.z, r1.x, r2.x
mad r1.x, r1.y, c15.z, r1.z
mul r1.z, r1.x, c17.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.zw, r3.xyxz
mad r1.x, r1.y, c19, c19.y
mov r2.xyz, v3
mul r3.zw, r3, r3
add r3.x, r3.z, r3.w
rsq r3.x, r3.x
mov r1.y, r1.z
dsx r3.y, r1.z
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rcp r3.z, r3.x
mul r3.x, r1.z, c19
mul r1.z, r3, c19.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1, r1, r0
dp3_sat r2.x, v5, r2
mul r3.x, r2, c6
add r2.xyz, -v1, c1
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r0.w, r2, r2
rsq r0.y, r0.w
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.x, -r0, c13, r0.y
pow_sat r0, r3.x, c5.x
mul r0.y, r2.w, c11.x
add_sat r0.y, r0, -c10.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2, c12
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c9
texldp r3.x, v6, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c19.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c14.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c19.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 304 // 296 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_FadeDist]
Float 280 [_FadeScale]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 130 instructions, 5 temp regs, 0 temp arrays:
// ALU 120 float, 0 int, 5 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedoiiiloldjkbiocokcccjgblfaegebfhmabaaaaaacabcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefckabaaaaa
eaaaaaaaciaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadpcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaafaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaabbaaaaahbcaabaaaabaaaaaaegbobaaaadaaaaaaegbobaaa
adaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahpcaabaaa
abaaaaaaagaabaaaabaaaaaabgbjbaaaadaaaaaaaaaaaaaldcaabaaaacaaaaaa
jgafbaiaibaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaa
aaaaaaaibcaabaaaacaaaaaadkaabaiambaaaaaaabaaaaaaakaabaaaacaaaaaa
ebcaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaaaaaaaajecaabaaaacaaaaaa
dkaabaiambaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaadcaaaaakecaabaaa
acaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaa
aaaaaaaiccaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaabkaabaaaacaaaaaa
ebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajhcaabaaaadaaaaaa
hgaobaiambaaaaaaabaaaaaajgahbaiaibaaaaaaabaaaaaadcaaaaakncaabaaa
acaaaaaaagaabaaaacaaaaaaagajbaaaadaaaaaapgajbaiaibaaaaaaabaaaaaa
aaaaaaajhcaabaaaadaaaaaaggalbaiaibaaaaaaabaaaaaaigadbaiaebaaaaaa
acaaaaaadcaaaaajhcaabaaaacaaaaaafgafbaaaacaaaaaaegacbaaaadaaaaaa
igadbaaaacaaaaaadiaaaaakgcaabaaaacaaaaaakgajbaaaacaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaacaaaaaajgafbaaa
acaaaaaaagaabaaaacaaaaaadiaaaaaidcaabaaaacaaaaaaegaabaaaacaaaaaa
kgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaacaaaaaaakaabaiaibaaaaaa
abaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaacaaaaaackaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
keanmjdpaaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaaabaaaaaaabeaaaaa
aaaaiadpelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaa
acaaaaaaakaabaaaabaaaaaackaabaaaacaaaaaadcaaaaajicaabaaaacaaaaaa
dkaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaacaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaa
akaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaaakaabaaaabaaaaaaalaaaaaf
fcaabaaaabaaaaaafgahbaaaabaaaaaaamaaaaafkcaabaaaabaaaaaafganbaaa
abaaaaaaapaaaaahccaabaaaabaaaaaangafbaaaabaaaaaangafbaaaabaaaaaa
elaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaaeaaaaaa
bkaabaaaabaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaabaaaaaaigaabaaa
abaaaaaaigaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaa
adaaaaaapgipcaaaaaaaaaaabaaaaaaadccaaaambcaabaaaadaaaaaackiacaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaabkiacaiaebaaaaaaaaaaaaaabbaaaaaa
dcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
bacaaaahbcaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaaeaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaaabaaaaaa
aaaaaaajocaabaaaabaaaaaaagbjbaaaacaaaaaaagijcaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaa
aaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaa
baaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaf
gcaabaaaabaaaaaafgagbaaaabaaaaaadcaaaaalccaabaaaabaaaaaaakiacaia
ebaaaaaaaaaaaaaabcaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadicaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaaj
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaadaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaah
dcaabaaaabaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaal
bcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaa
abaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaackbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaabkiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaa
diaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_FadeDist]
Float 11 [_FadeScale]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 153 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c15, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c16, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp4 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c15.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
add r0.w, r0, c15.y
frc r1.w, r0
add_pp r1.xyz, r1.yxzw, -r2
add_sat r0.w, r0, -r1
mad_pp r1.xyz, r0.w, r1, r2
dsy r2.xy, r0.xzzw
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c15.y
mad r1.z, r0.w, c16.x, c16.y
mad r1.z, r1, r0.w, c15.w
mul_pp r1.xy, r1, c19.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c16.z
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c15.x, c15.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c16.w, r1
mad r0.w, r0, c15.z, r1.z
dp3 r0.y, v4, v4
rsq r0.y, r0.y
mul r3.xyz, r0.y, v4
abs r4.x, r3.z
abs r3.w, r3.x
max r0.y, r3.w, r4.x
mul r1.z, r0.w, c17.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c17.y, c17.z
mul r1.xy, r1, c7.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.x, r2, r2
rsq r0.z, r0.z
mad r2.w, r2, r4.z, c17
mad r2.y, r2.w, r4.z, c18.x
rsq r2.x, r2.x
rsq r0.x, r0.x
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c19.x
mul r0.x, r1.z, c19
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c15.y
rcp r2.w, r2.x
mad r2.y, r2, r4.z, c18
mad r2.x, r2.y, r4.z, c18.z
mul r2.y, r2.w, c8.x
mul_sat r2.y, r2, c16.w
mad_pp r0, r2.y, r1, r0
mul r2.x, r2, r4.y
abs r1.y, r3
add r1.x, r3.w, -r4
add r1.z, -r2.x, c18.w
cmp r1.x, -r1, r2, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c15.y
mad r1.z, r1.y, c16.x, c16.y
mad r1.z, r1, r1.y, c15.w
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c16.z
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c15.x, c15
mul r1.w, r1.y, r1.z
add r2.x, -r1, c15.z
mad r1.z, -r1.w, c16.w, r1
cmp r1.w, r3.z, r1.x, r2.x
mad r1.x, r1.y, c15.z, r1.z
mul r1.z, r1.x, c17.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.zw, r3.xyxz
mad r1.x, r1.y, c19, c19.y
mov r2.xyz, v3
mul r3.zw, r3, r3
add r3.x, r3.z, r3.w
rsq r3.x, r3.x
mov r1.y, r1.z
dsx r3.y, r1.z
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rcp r3.z, r3.x
mul r3.x, r1.z, c19
mul r1.z, r3, c19.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1, r1, r0
dp3_sat r2.x, v5, r2
mul r3.x, r2, c6
add r2.xyz, -v1, c1
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r0.w, r2, r2
rsq r0.y, r0.w
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.x, -r0, c13, r0.y
pow_sat r0, r3.x, c5.x
mul r0.y, r2.w, c11.x
add_sat r0.y, r0, -c10.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2, c12
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c9
texldp r3.x, v6, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c19.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c14.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c19.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 368 // 360 used size, 18 vars
Vector 272 [_LightColor0] 4
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_FadeDist]
Float 344 [_FadeScale]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
Float 356 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 130 instructions, 5 temp regs, 0 temp arrays:
// ALU 120 float, 0 int, 5 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednadbmnfkafimdlebkpphddngnpdnknggabaaaaaacabcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefckabaaaaa
eaaaaaaaciaeaaaafjaaaaaeegiocaaaaaaaaaaabhaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadpcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaafaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaabbaaaaahbcaabaaaabaaaaaaegbobaaaadaaaaaaegbobaaa
adaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahpcaabaaa
abaaaaaaagaabaaaabaaaaaabgbjbaaaadaaaaaaaaaaaaaldcaabaaaacaaaaaa
jgafbaiaibaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaa
aaaaaaaibcaabaaaacaaaaaadkaabaiambaaaaaaabaaaaaaakaabaaaacaaaaaa
ebcaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaaaaaaaajecaabaaaacaaaaaa
dkaabaiambaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaadcaaaaakecaabaaa
acaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaa
aaaaaaaiccaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaabkaabaaaacaaaaaa
ebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajhcaabaaaadaaaaaa
hgaobaiambaaaaaaabaaaaaajgahbaiaibaaaaaaabaaaaaadcaaaaakncaabaaa
acaaaaaaagaabaaaacaaaaaaagajbaaaadaaaaaapgajbaiaibaaaaaaabaaaaaa
aaaaaaajhcaabaaaadaaaaaaggalbaiaibaaaaaaabaaaaaaigadbaiaebaaaaaa
acaaaaaadcaaaaajhcaabaaaacaaaaaafgafbaaaacaaaaaaegacbaaaadaaaaaa
igadbaaaacaaaaaadiaaaaakgcaabaaaacaaaaaakgajbaaaacaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaacaaaaaajgafbaaa
acaaaaaaagaabaaaacaaaaaadiaaaaaidcaabaaaacaaaaaaegaabaaaacaaaaaa
kgikcaaaaaaaaaaabeaaaaaadcaaaaakecaabaaaacaaaaaaakaabaiaibaaaaaa
abaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaacaaaaaackaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
keanmjdpaaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaaabaaaaaaabeaaaaa
aaaaiadpelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaa
acaaaaaaakaabaaaabaaaaaackaabaaaacaaaaaadcaaaaajicaabaaaacaaaaaa
dkaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaacaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaa
akaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaaakaabaaaabaaaaaaalaaaaaf
fcaabaaaabaaaaaafgahbaaaabaaaaaaamaaaaafkcaabaaaabaaaaaafganbaaa
abaaaaaaapaaaaahccaabaaaabaaaaaangafbaaaabaaaaaangafbaaaabaaaaaa
elaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaaeaaaaaa
bkaabaaaabaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaabaaaaaaigaabaaa
abaaaaaaigaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaa
adaaaaaapgipcaaaaaaaaaaabeaaaaaadccaaaambcaabaaaadaaaaaackiacaaa
aaaaaaaabfaaaaaaakaabaaaadaaaaaabkiacaiaebaaaaaaaaaaaaaabfaaaaaa
dcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
bacaaaahbcaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaaeaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaabeaaaaaacpaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaaakiacaaaaaaaaaaabeaaaaaabjaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaaabaaaaaa
aaaaaaajocaabaaaabaaaaaaagbjbaaaacaaaaaaagijcaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaa
aaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaa
baaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaf
gcaabaaaabaaaaaafgagbaaaabaaaaaadcaaaaalccaabaaaabaaaaaaakiacaia
ebaaaaaaaaaaaaaabgaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadicaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaadkiacaaaaaaaaaaabfaaaaaadcaaaaaj
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaadaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaah
dcaabaaaabaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaal
bcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaa
abaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaackbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaabkiacaaaaaaaaaaabgaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaabbaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaabbaaaaaaagiacaaaaaaaaaaabfaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaa
diaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_FadeDist]
Float 11 [_FadeScale]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 153 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c15, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c16, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp4 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c15.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
add r0.w, r0, c15.y
frc r1.w, r0
add_pp r1.xyz, r1.yxzw, -r2
add_sat r0.w, r0, -r1
mad_pp r1.xyz, r0.w, r1, r2
dsy r2.xy, r0.xzzw
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c15.y
mad r1.z, r0.w, c16.x, c16.y
mad r1.z, r1, r0.w, c15.w
mul_pp r1.xy, r1, c19.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c16.z
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c15.x, c15.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c16.w, r1
mad r0.w, r0, c15.z, r1.z
dp3 r0.y, v4, v4
rsq r0.y, r0.y
mul r3.xyz, r0.y, v4
abs r4.x, r3.z
abs r3.w, r3.x
max r0.y, r3.w, r4.x
mul r1.z, r0.w, c17.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c17.y, c17.z
mul r1.xy, r1, c7.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.x, r2, r2
rsq r0.z, r0.z
mad r2.w, r2, r4.z, c17
mad r2.y, r2.w, r4.z, c18.x
rsq r2.x, r2.x
rsq r0.x, r0.x
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c19.x
mul r0.x, r1.z, c19
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c15.y
rcp r2.w, r2.x
mad r2.y, r2, r4.z, c18
mad r2.x, r2.y, r4.z, c18.z
mul r2.y, r2.w, c8.x
mul_sat r2.y, r2, c16.w
mad_pp r0, r2.y, r1, r0
mul r2.x, r2, r4.y
abs r1.y, r3
add r1.x, r3.w, -r4
add r1.z, -r2.x, c18.w
cmp r1.x, -r1, r2, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c15.y
mad r1.z, r1.y, c16.x, c16.y
mad r1.z, r1, r1.y, c15.w
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c16.z
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c15.x, c15
mul r1.w, r1.y, r1.z
add r2.x, -r1, c15.z
mad r1.z, -r1.w, c16.w, r1
cmp r1.w, r3.z, r1.x, r2.x
mad r1.x, r1.y, c15.z, r1.z
mul r1.z, r1.x, c17.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.zw, r3.xyxz
mad r1.x, r1.y, c19, c19.y
mov r2.xyz, v3
mul r3.zw, r3, r3
add r3.x, r3.z, r3.w
rsq r3.x, r3.x
mov r1.y, r1.z
dsx r3.y, r1.z
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rcp r3.z, r3.x
mul r3.x, r1.z, c19
mul r1.z, r3, c19.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1, r1, r0
dp3_sat r2.x, v5, r2
mul r3.x, r2, c6
add r2.xyz, -v1, c1
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r0.w, r2, r2
rsq r0.y, r0.w
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.x, -r0, c13, r0.y
pow_sat r0, r3.x, c5.x
mul r0.y, r2.w, c11.x
add_sat r0.y, r0, -c10.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2, c12
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c9
texldp r3.x, v6, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c19.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c14.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c19.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 368 // 360 used size, 18 vars
Vector 272 [_LightColor0] 4
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_FadeDist]
Float 344 [_FadeScale]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
Float 356 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 130 instructions, 5 temp regs, 0 temp arrays:
// ALU 120 float, 0 int, 5 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednadbmnfkafimdlebkpphddngnpdnknggabaaaaaacabcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefckabaaaaa
eaaaaaaaciaeaaaafjaaaaaeegiocaaaaaaaaaaabhaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadpcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaafaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaabbaaaaahbcaabaaaabaaaaaaegbobaaaadaaaaaaegbobaaa
adaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahpcaabaaa
abaaaaaaagaabaaaabaaaaaabgbjbaaaadaaaaaaaaaaaaaldcaabaaaacaaaaaa
jgafbaiaibaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaa
aaaaaaaibcaabaaaacaaaaaadkaabaiambaaaaaaabaaaaaaakaabaaaacaaaaaa
ebcaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaaaaaaaajecaabaaaacaaaaaa
dkaabaiambaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaadcaaaaakecaabaaa
acaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaa
aaaaaaaiccaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaabkaabaaaacaaaaaa
ebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajhcaabaaaadaaaaaa
hgaobaiambaaaaaaabaaaaaajgahbaiaibaaaaaaabaaaaaadcaaaaakncaabaaa
acaaaaaaagaabaaaacaaaaaaagajbaaaadaaaaaapgajbaiaibaaaaaaabaaaaaa
aaaaaaajhcaabaaaadaaaaaaggalbaiaibaaaaaaabaaaaaaigadbaiaebaaaaaa
acaaaaaadcaaaaajhcaabaaaacaaaaaafgafbaaaacaaaaaaegacbaaaadaaaaaa
igadbaaaacaaaaaadiaaaaakgcaabaaaacaaaaaakgajbaaaacaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaacaaaaaajgafbaaa
acaaaaaaagaabaaaacaaaaaadiaaaaaidcaabaaaacaaaaaaegaabaaaacaaaaaa
kgikcaaaaaaaaaaabeaaaaaadcaaaaakecaabaaaacaaaaaaakaabaiaibaaaaaa
abaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaacaaaaaackaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
keanmjdpaaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaaabaaaaaaabeaaaaa
aaaaiadpelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaa
acaaaaaaakaabaaaabaaaaaackaabaaaacaaaaaadcaaaaajicaabaaaacaaaaaa
dkaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaacaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaa
akaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaaakaabaaaabaaaaaaalaaaaaf
fcaabaaaabaaaaaafgahbaaaabaaaaaaamaaaaafkcaabaaaabaaaaaafganbaaa
abaaaaaaapaaaaahccaabaaaabaaaaaangafbaaaabaaaaaangafbaaaabaaaaaa
elaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaaeaaaaaa
bkaabaaaabaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaabaaaaaaigaabaaa
abaaaaaaigaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaa
adaaaaaapgipcaaaaaaaaaaabeaaaaaadccaaaambcaabaaaadaaaaaackiacaaa
aaaaaaaabfaaaaaaakaabaaaadaaaaaabkiacaiaebaaaaaaaaaaaaaabfaaaaaa
dcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
bacaaaahbcaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaaeaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaabeaaaaaacpaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaaakiacaaaaaaaaaaabeaaaaaabjaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaaabaaaaaa
aaaaaaajocaabaaaabaaaaaaagbjbaaaacaaaaaaagijcaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaa
aaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaa
baaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaf
gcaabaaaabaaaaaafgagbaaaabaaaaaadcaaaaalccaabaaaabaaaaaaakiacaia
ebaaaaaaaaaaaaaabgaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadicaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaadkiacaaaaaaaaaaabfaaaaaadcaaaaaj
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaadaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaah
dcaabaaaabaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaal
bcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaa
abaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaackbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaabkiacaaaaaaaaaaabgaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaabbaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaabbaaaaaaagiacaaaaaaaaaaabfaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaa
diaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_FadeDist]
Float 11 [_FadeScale]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 153 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c15, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c16, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp4 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c15.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
add r0.w, r0, c15.y
frc r1.w, r0
add_pp r1.xyz, r1.yxzw, -r2
add_sat r0.w, r0, -r1
mad_pp r1.xyz, r0.w, r1, r2
dsy r2.xy, r0.xzzw
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c15.y
mad r1.z, r0.w, c16.x, c16.y
mad r1.z, r1, r0.w, c15.w
mul_pp r1.xy, r1, c19.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c16.z
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c15.x, c15.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c16.w, r1
mad r0.w, r0, c15.z, r1.z
dp3 r0.y, v4, v4
rsq r0.y, r0.y
mul r3.xyz, r0.y, v4
abs r4.x, r3.z
abs r3.w, r3.x
max r0.y, r3.w, r4.x
mul r1.z, r0.w, c17.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c17.y, c17.z
mul r1.xy, r1, c7.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.x, r2, r2
rsq r0.z, r0.z
mad r2.w, r2, r4.z, c17
mad r2.y, r2.w, r4.z, c18.x
rsq r2.x, r2.x
rsq r0.x, r0.x
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c19.x
mul r0.x, r1.z, c19
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c15.y
rcp r2.w, r2.x
mad r2.y, r2, r4.z, c18
mad r2.x, r2.y, r4.z, c18.z
mul r2.y, r2.w, c8.x
mul_sat r2.y, r2, c16.w
mad_pp r0, r2.y, r1, r0
mul r2.x, r2, r4.y
abs r1.y, r3
add r1.x, r3.w, -r4
add r1.z, -r2.x, c18.w
cmp r1.x, -r1, r2, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c15.y
mad r1.z, r1.y, c16.x, c16.y
mad r1.z, r1, r1.y, c15.w
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c16.z
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c15.x, c15
mul r1.w, r1.y, r1.z
add r2.x, -r1, c15.z
mad r1.z, -r1.w, c16.w, r1
cmp r1.w, r3.z, r1.x, r2.x
mad r1.x, r1.y, c15.z, r1.z
mul r1.z, r1.x, c17.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.zw, r3.xyxz
mad r1.x, r1.y, c19, c19.y
mov r2.xyz, v3
mul r3.zw, r3, r3
add r3.x, r3.z, r3.w
rsq r3.x, r3.x
mov r1.y, r1.z
dsx r3.y, r1.z
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rcp r3.z, r3.x
mul r3.x, r1.z, c19
mul r1.z, r3, c19.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1, r1, r0
dp3_sat r2.x, v5, r2
mul r3.x, r2, c6
add r2.xyz, -v1, c1
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r0.w, r2, r2
rsq r0.y, r0.w
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.x, -r0, c13, r0.y
pow_sat r0, r3.x, c5.x
mul r0.y, r2.w, c11.x
add_sat r0.y, r0, -c10.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2, c12
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c9
texldp r3.x, v6, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c19.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c14.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c19.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 304 // 296 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_FadeDist]
Float 280 [_FadeScale]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 130 instructions, 5 temp regs, 0 temp arrays:
// ALU 120 float, 0 int, 5 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedoiiiloldjkbiocokcccjgblfaegebfhmabaaaaaacabcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefckabaaaaa
eaaaaaaaciaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadpcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaafaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaabbaaaaahbcaabaaaabaaaaaaegbobaaaadaaaaaaegbobaaa
adaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahpcaabaaa
abaaaaaaagaabaaaabaaaaaabgbjbaaaadaaaaaaaaaaaaaldcaabaaaacaaaaaa
jgafbaiaibaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaa
aaaaaaaibcaabaaaacaaaaaadkaabaiambaaaaaaabaaaaaaakaabaaaacaaaaaa
ebcaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaaaaaaaajecaabaaaacaaaaaa
dkaabaiambaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaadcaaaaakecaabaaa
acaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaa
aaaaaaaiccaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaabkaabaaaacaaaaaa
ebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajhcaabaaaadaaaaaa
hgaobaiambaaaaaaabaaaaaajgahbaiaibaaaaaaabaaaaaadcaaaaakncaabaaa
acaaaaaaagaabaaaacaaaaaaagajbaaaadaaaaaapgajbaiaibaaaaaaabaaaaaa
aaaaaaajhcaabaaaadaaaaaaggalbaiaibaaaaaaabaaaaaaigadbaiaebaaaaaa
acaaaaaadcaaaaajhcaabaaaacaaaaaafgafbaaaacaaaaaaegacbaaaadaaaaaa
igadbaaaacaaaaaadiaaaaakgcaabaaaacaaaaaakgajbaaaacaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaacaaaaaajgafbaaa
acaaaaaaagaabaaaacaaaaaadiaaaaaidcaabaaaacaaaaaaegaabaaaacaaaaaa
kgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaacaaaaaaakaabaiaibaaaaaa
abaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaacaaaaaackaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
keanmjdpaaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaaabaaaaaaabeaaaaa
aaaaiadpelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaa
acaaaaaaakaabaaaabaaaaaackaabaaaacaaaaaadcaaaaajicaabaaaacaaaaaa
dkaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaacaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaa
akaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaaakaabaaaabaaaaaaalaaaaaf
fcaabaaaabaaaaaafgahbaaaabaaaaaaamaaaaafkcaabaaaabaaaaaafganbaaa
abaaaaaaapaaaaahccaabaaaabaaaaaangafbaaaabaaaaaangafbaaaabaaaaaa
elaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaaeaaaaaa
bkaabaaaabaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaabaaaaaaigaabaaa
abaaaaaaigaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaa
adaaaaaapgipcaaaaaaaaaaabaaaaaaadccaaaambcaabaaaadaaaaaackiacaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaabkiacaiaebaaaaaaaaaaaaaabbaaaaaa
dcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
bacaaaahbcaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaaeaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaaabaaaaaa
aaaaaaajocaabaaaabaaaaaaagbjbaaaacaaaaaaagijcaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaa
aaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaa
baaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaf
gcaabaaaabaaaaaafgagbaaaabaaaaaadcaaaaalccaabaaaabaaaaaaakiacaia
ebaaaaaaaaaaaaaabcaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadicaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaaj
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaadaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaah
dcaabaaaabaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaal
bcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaa
abaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaackbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaabkiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaa
diaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_FadeDist]
Float 11 [_FadeScale]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 153 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c15, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c16, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp4 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c15.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
add r0.w, r0, c15.y
frc r1.w, r0
add_pp r1.xyz, r1.yxzw, -r2
add_sat r0.w, r0, -r1
mad_pp r1.xyz, r0.w, r1, r2
dsy r2.xy, r0.xzzw
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
abs r0.w, r0.y
add r1.w, -r0, c15.y
mad r1.z, r0.w, c16.x, c16.y
mad r1.z, r1, r0.w, c15.w
mul_pp r1.xy, r1, c19.y
rsq r1.w, r1.w
mad r0.w, r1.z, r0, c16.z
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, r0.y, c15.x, c15.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c16.w, r1
mad r0.w, r0, c15.z, r1.z
dp3 r0.y, v4, v4
rsq r0.y, r0.y
mul r3.xyz, r0.y, v4
abs r4.x, r3.z
abs r3.w, r3.x
max r0.y, r3.w, r4.x
mul r1.z, r0.w, c17.x
rcp r0.w, r0.y
min r0.y, r3.w, r4.x
mul r4.y, r0, r0.w
mul r4.z, r4.y, r4.y
mad r2.w, r4.z, c17.y, c17.z
mul r1.xy, r1, c7.x
dsx r0.w, r1.z
dsy r0.y, r1.z
dsx r1.zw, r0.xyxz
mul r1.zw, r1, r1
add r0.x, r1.z, r1.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.x, r2, r2
rsq r0.z, r0.z
mad r2.w, r2, r4.z, c17
mad r2.y, r2.w, r4.z, c18.x
rsq r2.x, r2.x
rsq r0.x, r0.x
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c19.x
mul r0.x, r1.z, c19
texldd r0, r1, s1, r0.zwzw, r0
add_pp r1, -r0, c15.y
rcp r2.w, r2.x
mad r2.y, r2, r4.z, c18
mad r2.x, r2.y, r4.z, c18.z
mul r2.y, r2.w, c8.x
mul_sat r2.y, r2, c16.w
mad_pp r0, r2.y, r1, r0
mul r2.x, r2, r4.y
abs r1.y, r3
add r1.x, r3.w, -r4
add r1.z, -r2.x, c18.w
cmp r1.x, -r1, r2, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c15.y
mad r1.z, r1.y, c16.x, c16.y
mad r1.z, r1, r1.y, c15.w
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c16.z
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c15.x, c15
mul r1.w, r1.y, r1.z
add r2.x, -r1, c15.z
mad r1.z, -r1.w, c16.w, r1
cmp r1.w, r3.z, r1.x, r2.x
mad r1.x, r1.y, c15.z, r1.z
mul r1.z, r1.x, c17.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.zw, r3.xyxz
mad r1.x, r1.y, c19, c19.y
mov r2.xyz, v3
mul r3.zw, r3, r3
add r3.x, r3.z, r3.w
rsq r3.x, r3.x
mov r1.y, r1.z
dsx r3.y, r1.z
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rcp r3.z, r3.x
mul r3.x, r1.z, c19
mul r1.z, r3, c19.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1, r1, r0
dp3_sat r2.x, v5, r2
mul r3.x, r2, c6
add r2.xyz, -v1, c1
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
dp3 r0.w, r2, r2
rsq r0.y, r0.w
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.x, -r0, c13, r0.y
pow_sat r0, r3.x, c5.x
mul r0.y, r2.w, c11.x
add_sat r0.y, r0, -c10.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2, c12
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c9
texldp r3.x, v6, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c19.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c14.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c19.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 304 // 296 used size, 17 vars
Vector 208 [_LightColor0] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_FadeDist]
Float 280 [_FadeScale]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 130 instructions, 5 temp regs, 0 temp arrays:
// ALU 120 float, 0 int, 5 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedoiiiloldjkbiocokcccjgblfaegebfhmabaaaaaacabcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefckabaaaaa
eaaaaaaaciaeaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadpcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaafaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaabbaaaaahbcaabaaaabaaaaaaegbobaaaadaaaaaaegbobaaa
adaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahpcaabaaa
abaaaaaaagaabaaaabaaaaaabgbjbaaaadaaaaaaaaaaaaaldcaabaaaacaaaaaa
jgafbaiaibaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaa
aaaaaaaibcaabaaaacaaaaaadkaabaiambaaaaaaabaaaaaaakaabaaaacaaaaaa
ebcaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaaaaaaaajecaabaaaacaaaaaa
dkaabaiambaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaadcaaaaakecaabaaa
acaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaa
aaaaaaaiccaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaabkaabaaaacaaaaaa
ebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajhcaabaaaadaaaaaa
hgaobaiambaaaaaaabaaaaaajgahbaiaibaaaaaaabaaaaaadcaaaaakncaabaaa
acaaaaaaagaabaaaacaaaaaaagajbaaaadaaaaaapgajbaiaibaaaaaaabaaaaaa
aaaaaaajhcaabaaaadaaaaaaggalbaiaibaaaaaaabaaaaaaigadbaiaebaaaaaa
acaaaaaadcaaaaajhcaabaaaacaaaaaafgafbaaaacaaaaaaegacbaaaadaaaaaa
igadbaaaacaaaaaadiaaaaakgcaabaaaacaaaaaakgajbaaaacaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaacaaaaaajgafbaaa
acaaaaaaagaabaaaacaaaaaadiaaaaaidcaabaaaacaaaaaaegaabaaaacaaaaaa
kgikcaaaaaaaaaaabaaaaaaadcaaaaakecaabaaaacaaaaaaakaabaiaibaaaaaa
abaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaacaaaaaackaabaaaacaaaaaaakaabaiaibaaaaaaabaaaaaaabeaaaaa
keanmjdpaaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaaabaaaaaaabeaaaaa
aaaaiadpelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaa
acaaaaaaakaabaaaabaaaaaackaabaaaacaaaaaadcaaaaajicaabaaaacaaaaaa
dkaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaacaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaa
akaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaaakaabaaaabaaaaaaalaaaaaf
fcaabaaaabaaaaaafgahbaaaabaaaaaaamaaaaafkcaabaaaabaaaaaafganbaaa
abaaaaaaapaaaaahccaabaaaabaaaaaangafbaaaabaaaaaangafbaaaabaaaaaa
elaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaaeaaaaaa
bkaabaaaabaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaabaaaaaaigaabaaa
abaaaaaaigaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaa
adaaaaaapgipcaaaaaaaaaaabaaaaaaadccaaaambcaabaaaadaaaaaackiacaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaabkiacaiaebaaaaaaaaaaaaaabbaaaaaa
dcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
bacaaaahbcaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaaeaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaaabaaaaaa
aaaaaaajocaabaaaabaaaaaaagbjbaaaacaaaaaaagijcaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaa
aaaaaaaihcaabaaaacaaaaaaegbcbaaaabaaaaaaegbcbaiaebaaaaaaacaaaaaa
baaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaf
gcaabaaaabaaaaaafgagbaaaabaaaaaadcaaaaalccaabaaaabaaaaaaakiacaia
ebaaaaaaaaaaaaaabcaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadicaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaaj
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaadaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaah
dcaabaaaabaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaal
bcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaa
abaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaackbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaabkiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaaanaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaa
diaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

}

#LINE 152

	
		}
		
	} 
	
}
}

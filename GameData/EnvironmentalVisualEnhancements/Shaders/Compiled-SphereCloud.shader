Shader "EVE/Cloud" {
	Properties {
		_Color ("Color Tint", Color) = (1,1,1,1)
		_MainTex ("Main (RGB)", 2D) = "white" {}
		_MainOffset ("Main Offset", Vector) = (0,0,0,0)
		_DetailTex ("Detail (RGB)", 2D) = "white" {}
		_FalloffPow ("Falloff Power", Range(0,3)) = 2
		_FalloffScale ("Falloff Scale", Range(0,20)) = 3
		_DetailScale ("Detail Scale", Range(0,1000)) = 100
		_DetailOffset ("Detail Offset", Vector) = (.5,.5,0,0)
		_DetailDist ("Detail Distance", Range(0,1)) = 0.00875
		_MinLight ("Minimum Light", Range(0,1)) = .5
		_FadeDist ("Fade Distance", Range(0,100)) = 10
		_FadeScale ("Fade Scale", Range(0,1)) = .002
		_RimDist ("Rim Distance", Range(0,1)) = 1
		_RimDistSub ("Rim Distance Sub", Range(0,2)) = 1.01
		_InvFade ("Soft Particles Factor", Range(0.01,3.0)) = .01
	}

Category {
	
	Tags { "Queue"="Transparent" "IgnoreProjector"="True" "RenderType"="Transparent" }
	Blend SrcAlpha OneMinusSrcAlpha
	Fog { Mode Global}
	AlphaTest Greater 0
	ColorMask RGB
	Cull Off Lighting On ZWrite Off
	
SubShader {
	Pass {

		Lighting On
		Tags { "LightMode"="ForwardBase"}
		
		Program "vp" {
// Vertex combos: 30
//   d3d9 - ALU: 25 to 43
//   d3d11 - ALU: 24 to 44, TEX: 0 to 0, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _World2Planet;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _DetailOffset;
uniform vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = (uv_1 + _MainOffset.xy);
  uv_1 = tmpvar_8;
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(tmpvar_8.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(tmpvar_8.y);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = (uv_13 + _MainOffset.xy);
  uv_13 = tmpvar_18;
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_3);
  float tmpvar_23;
  tmpvar_23 = clamp (floor(((1.0 + tmpvar_22.x) - tmpvar_22.z)), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = mix (mix (tmpvar_22.zxy, tmpvar_22, vec3(tmpvar_23)), tmpvar_22.yxz, vec3(clamp (floor(((1.0 + tmpvar_22.y) - mix (tmpvar_22.z, tmpvar_22.x, tmpvar_23))), 0.0, 1.0)));
  vec4 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_MainTex, tmpvar_18, tmpvar_21.xy, tmpvar_21.zw) * mix (texture2DGradARB (_DetailTex, ((((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_11.xy, tmpvar_11.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0))));
  vec3 p_26;
  p_26 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix (clamp (((_FadeScale * sqrt(dot (p_26, p_26))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_27, p_27)) - (_RimDistSub * sqrt(dot (p_28, p_28))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_World2Planet]
"vs_3_0
; 25 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
add r2.xyz, -r0, c12
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mov o1.xyz, r0
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r3.xyz, r0, -r1
dp3 r1.w, r3, r3
rsq r1.w, r1.w
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mul o4.xyz, r1.w, r3
mul o6.xyz, r0.w, r2
mov o2.xyz, r1
rcp o3.x, r0.w
mov o5.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 288 // 272 used size, 18 vars
Matrix 208 [_World2Planet] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 27 instructions, 2 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhbkkgfllalpnnepmjanpgcankpnjohpcabaaaaaaimafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaiahaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaahaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
oiadaaaaeaaaabaapkaaaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadiccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaad
hccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaa
abaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaaficcabaaa
abaaaaaadkaabaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaaaaaaaaa
dgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaa
abaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaaj
hcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaa
anaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaaaaaaaaaapaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaaaaaaaaabaaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaaghccabaaaaeaaaaaaegacbaiaebaaaaaaabaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = (uv_10 + _MainOffset.xy);
  uv_10 = tmpvar_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  highp vec2 uvOffset_21;
  uvOffset_21 = _MainOffset.xy;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = (uv_24 + uvOffset_21);
  uv_24 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw);
  tex_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_12);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_8, tmpvar_34.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_8.x);
  highp vec2 coord_40;
  coord_40 = ((((0.5 * detailCoords_8.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_20.xy, tmpvar_20.zw);
  detail_6 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_5 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (tex_22 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_43.w, mix (clamp (((_FadeScale * sqrt(dot (p_44, p_44))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_11.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_11.xyz = (tmpvar_43.xyz * tmpvar_52);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = (uv_10 + _MainOffset.xy);
  uv_10 = tmpvar_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  highp vec2 uvOffset_21;
  uvOffset_21 = _MainOffset.xy;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = (uv_24 + uvOffset_21);
  uv_24 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw);
  tex_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_12);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_8, tmpvar_34.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_8.x);
  highp vec2 coord_40;
  coord_40 = ((((0.5 * detailCoords_8.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_20.xy, tmpvar_20.zw);
  detail_6 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_5 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (tex_22 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_43.w, mix (clamp (((_FadeScale * sqrt(dot (p_44, p_44))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_11.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_11.xyz = (tmpvar_43.xyz * tmpvar_52);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 351
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 451
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 444
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 361
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 374
#line 382
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 429
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 433
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 437
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 441
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 464
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 464
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 468
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 472
    o.viewDist = distance( vertexPos, vec4( _WorldSpaceCameraPos, 0.0));
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = vec3( (-(_World2Planet * v.vertex)));
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 476
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp float xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = float(xl_retval.viewDist);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 351
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 451
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 444
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 361
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 374
#line 382
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 429
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 433
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 437
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 441
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 464
#line 315
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 319
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 324
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 328
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 341
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, uvOffset);
    #line 345
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 478
lowp vec4 frag( in v2f IN ) {
    #line 480
    mediump vec4 color;
    highp vec3 objNrm = normalize(IN.objNormal);
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 484
    uv.y = (0.31831 * acos(objNrm.y));
    uv += _MainOffset.xy;
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, IN.objNormal, _MainOffset.xy);
    #line 488
    objNrm = abs(objNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    #line 492
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 496
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 500
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 504
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 508
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp float xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDist = float(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _World2Planet;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _WorldSpaceCameraPos;
  vec4 p_5;
  p_5 = (tmpvar_2 - tmpvar_4);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_2.xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD3 = normalize((tmpvar_2.xyz - tmpvar_3));
  xlv_TEXCOORD4 = -((_World2Planet * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _DetailOffset;
uniform vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = (uv_1 + _MainOffset.xy);
  uv_1 = tmpvar_8;
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(tmpvar_8.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(tmpvar_8.y);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = (uv_13 + _MainOffset.xy);
  uv_13 = tmpvar_18;
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_3);
  float tmpvar_23;
  tmpvar_23 = clamp (floor(((1.0 + tmpvar_22.x) - tmpvar_22.z)), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = mix (mix (tmpvar_22.zxy, tmpvar_22, vec3(tmpvar_23)), tmpvar_22.yxz, vec3(clamp (floor(((1.0 + tmpvar_22.y) - mix (tmpvar_22.z, tmpvar_22.x, tmpvar_23))), 0.0, 1.0)));
  vec4 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_MainTex, tmpvar_18, tmpvar_21.xy, tmpvar_21.zw) * mix (texture2DGradARB (_DetailTex, ((((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_11.xy, tmpvar_11.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0))));
  vec3 p_26;
  p_26 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix (clamp (((_FadeScale * sqrt(dot (p_26, p_26))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_27, p_27)) - (_RimDistSub * sqrt(dot (p_28, p_28))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_World2Planet]
"vs_3_0
; 25 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
add r2.xyz, -r0, c12
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mov o1.xyz, r0
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r3.xyz, r0, -r1
dp3 r1.w, r3, r3
rsq r1.w, r1.w
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mul o4.xyz, r1.w, r3
mul o6.xyz, r0.w, r2
mov o2.xyz, r1
rcp o3.x, r0.w
mov o5.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 224 // 208 used size, 17 vars
Matrix 144 [_World2Planet] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 27 instructions, 2 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedcaaoppkbbkgcpafeliljadbclcnpfkceabaaaaaaheafaaaaadaaaaaa
cmaaaaaajmaaaaaaieabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaiahaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaaiaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcoiadaaaaeaaaabaapkaaaaaafjaaaaaeegiocaaaaaaaaaaa
anaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadiccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
hccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaa
elaaaaaficcabaaaabaaaaaadkaabaaaaaaaaaaadgaaaaafhccabaaaabaaaaaa
egacbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaa
aaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaa
apaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaa
abaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
adaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaihcaabaaaabaaaaaa
fgbfbaaaaaaaaaaaegiccaaaaaaaaaaaakaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaaaaaaaaaajaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaaaaaaaaaalaaaaaakgbkbaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaamaaaaaapgbpbaaa
aaaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaaaeaaaaaaegacbaiaebaaaaaa
abaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _WorldSpaceCameraPos;
  highp vec4 p_5;
  p_5 = (tmpvar_2 - tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2.xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD3 = normalize((tmpvar_2.xyz - tmpvar_3));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = (uv_10 + _MainOffset.xy);
  uv_10 = tmpvar_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  highp vec2 uvOffset_21;
  uvOffset_21 = _MainOffset.xy;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = (uv_24 + uvOffset_21);
  uv_24 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw);
  tex_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_12);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_8, tmpvar_34.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_8.x);
  highp vec2 coord_40;
  coord_40 = ((((0.5 * detailCoords_8.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_20.xy, tmpvar_20.zw);
  detail_6 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_5 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (tex_22 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_43.w, mix (clamp (((_FadeScale * sqrt(dot (p_44, p_44))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_11.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_11.xyz = (tmpvar_43.xyz * tmpvar_52);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _WorldSpaceCameraPos;
  highp vec4 p_5;
  p_5 = (tmpvar_2 - tmpvar_4);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2.xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD3 = normalize((tmpvar_2.xyz - tmpvar_3));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = (uv_10 + _MainOffset.xy);
  uv_10 = tmpvar_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  highp vec2 uvOffset_21;
  uvOffset_21 = _MainOffset.xy;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = (uv_24 + uvOffset_21);
  uv_24 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw);
  tex_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_12);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_8, tmpvar_34.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_8.x);
  highp vec2 coord_40;
  coord_40 = ((((0.5 * detailCoords_8.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_20.xy, tmpvar_20.zw);
  detail_6 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_5 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (tex_22 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_43.w, mix (clamp (((_FadeScale * sqrt(dot (p_44, p_44))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_11.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_11.xyz = (tmpvar_43.xyz * tmpvar_52);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 349
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 449
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec4 projPos;
};
#line 442
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 359
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 372
#line 380
#line 394
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 427
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 431
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 435
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 439
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 461
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 461
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 465
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 469
    o.viewDist = distance( vertexPos, vec4( _WorldSpaceCameraPos, 0.0));
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = vec3( (-(_World2Planet * v.vertex)));
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 473
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp float xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = float(xl_retval.viewDist);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 349
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 449
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec4 projPos;
};
#line 442
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 359
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 372
#line 380
#line 394
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 427
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 431
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 435
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 439
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 461
#line 315
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 319
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 324
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 328
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 341
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, uvOffset);
    #line 345
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 475
lowp vec4 frag( in v2f IN ) {
    #line 477
    mediump vec4 color;
    highp vec3 objNrm = normalize(IN.objNormal);
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 481
    uv.y = (0.31831 * acos(objNrm.y));
    uv += _MainOffset.xy;
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, IN.objNormal, _MainOffset.xy);
    #line 485
    objNrm = abs(objNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    #line 489
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 493
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 497
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 501
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 505
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp float xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDist = float(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _World2Planet;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _DetailOffset;
uniform vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = (uv_1 + _MainOffset.xy);
  uv_1 = tmpvar_8;
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(tmpvar_8.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(tmpvar_8.y);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = (uv_13 + _MainOffset.xy);
  uv_13 = tmpvar_18;
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_3);
  float tmpvar_23;
  tmpvar_23 = clamp (floor(((1.0 + tmpvar_22.x) - tmpvar_22.z)), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = mix (mix (tmpvar_22.zxy, tmpvar_22, vec3(tmpvar_23)), tmpvar_22.yxz, vec3(clamp (floor(((1.0 + tmpvar_22.y) - mix (tmpvar_22.z, tmpvar_22.x, tmpvar_23))), 0.0, 1.0)));
  vec4 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_MainTex, tmpvar_18, tmpvar_21.xy, tmpvar_21.zw) * mix (texture2DGradARB (_DetailTex, ((((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_11.xy, tmpvar_11.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0))));
  vec3 p_26;
  p_26 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix (clamp (((_FadeScale * sqrt(dot (p_26, p_26))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_27, p_27)) - (_RimDistSub * sqrt(dot (p_28, p_28))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_World2Planet]
"vs_3_0
; 25 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
add r2.xyz, -r0, c12
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mov o1.xyz, r0
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r3.xyz, r0, -r1
dp3 r1.w, r3, r3
rsq r1.w, r1.w
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mul o4.xyz, r1.w, r3
mul o6.xyz, r0.w, r2
mov o2.xyz, r1
rcp o3.x, r0.w
mov o5.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 288 // 272 used size, 18 vars
Matrix 208 [_World2Planet] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 27 instructions, 2 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhliaepomgejgnlejoebfbippagchjnieabaaaaaaimafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaiahaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaahaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
oiadaaaaeaaaabaapkaaaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadiccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaad
hccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaa
abaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaaficcabaaa
abaaaaaadkaabaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaaaaaaaaa
dgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaa
abaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaaj
hcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaa
anaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaaaaaaaaaapaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaaaaaaaaabaaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaaghccabaaaaeaaaaaaegacbaiaebaaaaaaabaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = (uv_10 + _MainOffset.xy);
  uv_10 = tmpvar_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  highp vec2 uvOffset_21;
  uvOffset_21 = _MainOffset.xy;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = (uv_24 + uvOffset_21);
  uv_24 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw);
  tex_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_12);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_8, tmpvar_34.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_8.x);
  highp vec2 coord_40;
  coord_40 = ((((0.5 * detailCoords_8.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_20.xy, tmpvar_20.zw);
  detail_6 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_5 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (tex_22 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_43.w, mix (clamp (((_FadeScale * sqrt(dot (p_44, p_44))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_11.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_11.xyz = (tmpvar_43.xyz * tmpvar_52);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = (uv_10 + _MainOffset.xy);
  uv_10 = tmpvar_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  highp vec2 uvOffset_21;
  uvOffset_21 = _MainOffset.xy;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = (uv_24 + uvOffset_21);
  uv_24 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw);
  tex_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_12);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_8, tmpvar_34.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_8.x);
  highp vec2 coord_40;
  coord_40 = ((((0.5 * detailCoords_8.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_20.xy, tmpvar_20.zw);
  detail_6 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_5 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (tex_22 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_43.w, mix (clamp (((_FadeScale * sqrt(dot (p_44, p_44))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_11.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_11.xyz = (tmpvar_43.xyz * tmpvar_52);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 360
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 460
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 projPos;
};
#line 453
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 370
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 383
#line 391
#line 405
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 438
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 442
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 446
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 450
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 473
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 473
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 477
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 481
    o.viewDist = distance( vertexPos, vec4( _WorldSpaceCameraPos, 0.0));
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = vec3( (-(_World2Planet * v.vertex)));
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 485
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp float xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = float(xl_retval.viewDist);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 360
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 460
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 projPos;
};
#line 453
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 370
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 383
#line 391
#line 405
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 438
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 442
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 446
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 450
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 473
#line 315
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 319
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 324
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 328
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 341
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, uvOffset);
    #line 345
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 487
lowp vec4 frag( in v2f IN ) {
    #line 489
    mediump vec4 color;
    highp vec3 objNrm = normalize(IN.objNormal);
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 493
    uv.y = (0.31831 * acos(objNrm.y));
    uv += _MainOffset.xy;
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, IN.objNormal, _MainOffset.xy);
    #line 497
    objNrm = abs(objNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    #line 501
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 505
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 509
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 513
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 517
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp float xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDist = float(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _World2Planet;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _DetailOffset;
uniform vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = (uv_1 + _MainOffset.xy);
  uv_1 = tmpvar_8;
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(tmpvar_8.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(tmpvar_8.y);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = (uv_13 + _MainOffset.xy);
  uv_13 = tmpvar_18;
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_3);
  float tmpvar_23;
  tmpvar_23 = clamp (floor(((1.0 + tmpvar_22.x) - tmpvar_22.z)), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = mix (mix (tmpvar_22.zxy, tmpvar_22, vec3(tmpvar_23)), tmpvar_22.yxz, vec3(clamp (floor(((1.0 + tmpvar_22.y) - mix (tmpvar_22.z, tmpvar_22.x, tmpvar_23))), 0.0, 1.0)));
  vec4 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_MainTex, tmpvar_18, tmpvar_21.xy, tmpvar_21.zw) * mix (texture2DGradARB (_DetailTex, ((((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_11.xy, tmpvar_11.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0))));
  vec3 p_26;
  p_26 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix (clamp (((_FadeScale * sqrt(dot (p_26, p_26))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_27, p_27)) - (_RimDistSub * sqrt(dot (p_28, p_28))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_World2Planet]
"vs_3_0
; 25 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
add r2.xyz, -r0, c12
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mov o1.xyz, r0
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r3.xyz, r0, -r1
dp3 r1.w, r3, r3
rsq r1.w, r1.w
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mul o4.xyz, r1.w, r3
mul o6.xyz, r0.w, r2
mov o2.xyz, r1
rcp o3.x, r0.w
mov o5.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 288 // 272 used size, 18 vars
Matrix 208 [_World2Planet] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 27 instructions, 2 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhbkkgfllalpnnepmjanpgcankpnjohpcabaaaaaaimafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaiahaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaahaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
oiadaaaaeaaaabaapkaaaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadiccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaad
hccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaa
abaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaaficcabaaa
abaaaaaadkaabaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaaaaaaaaa
dgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaa
abaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaaj
hcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaa
anaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaaaaaaaaaapaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaaaaaaaaabaaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaaghccabaaaaeaaaaaaegacbaiaebaaaaaaabaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = (uv_10 + _MainOffset.xy);
  uv_10 = tmpvar_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  highp vec2 uvOffset_21;
  uvOffset_21 = _MainOffset.xy;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = (uv_24 + uvOffset_21);
  uv_24 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw);
  tex_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_12);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_8, tmpvar_34.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_8.x);
  highp vec2 coord_40;
  coord_40 = ((((0.5 * detailCoords_8.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_20.xy, tmpvar_20.zw);
  detail_6 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_5 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (tex_22 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_43.w, mix (clamp (((_FadeScale * sqrt(dot (p_44, p_44))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_11.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_11.xyz = (tmpvar_43.xyz * tmpvar_52);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = (uv_10 + _MainOffset.xy);
  uv_10 = tmpvar_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  highp vec2 uvOffset_21;
  uvOffset_21 = _MainOffset.xy;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = (uv_24 + uvOffset_21);
  uv_24 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw);
  tex_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_12);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_8, tmpvar_34.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_8.x);
  highp vec2 coord_40;
  coord_40 = ((((0.5 * detailCoords_8.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_20.xy, tmpvar_20.zw);
  detail_6 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_5 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (tex_22 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_43.w, mix (clamp (((_FadeScale * sqrt(dot (p_44, p_44))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_11.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_11.xyz = (tmpvar_43.xyz * tmpvar_52);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 352
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 452
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 445
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 362
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 375
#line 383
#line 397
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 430
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 434
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 438
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 442
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 465
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 465
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 469
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 473
    o.viewDist = distance( vertexPos, vec4( _WorldSpaceCameraPos, 0.0));
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = vec3( (-(_World2Planet * v.vertex)));
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 477
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp float xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = float(xl_retval.viewDist);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 352
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 452
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 445
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 362
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 375
#line 383
#line 397
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 430
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 434
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 438
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 442
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 465
#line 315
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 319
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 324
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 328
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 341
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, uvOffset);
    #line 345
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 479
lowp vec4 frag( in v2f IN ) {
    #line 481
    mediump vec4 color;
    highp vec3 objNrm = normalize(IN.objNormal);
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 485
    uv.y = (0.31831 * acos(objNrm.y));
    uv += _MainOffset.xy;
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, IN.objNormal, _MainOffset.xy);
    #line 489
    objNrm = abs(objNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    #line 493
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 497
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 501
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 505
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 509
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp float xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDist = float(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _World2Planet;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _DetailOffset;
uniform vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = (uv_1 + _MainOffset.xy);
  uv_1 = tmpvar_8;
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(tmpvar_8.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(tmpvar_8.y);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = (uv_13 + _MainOffset.xy);
  uv_13 = tmpvar_18;
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_3);
  float tmpvar_23;
  tmpvar_23 = clamp (floor(((1.0 + tmpvar_22.x) - tmpvar_22.z)), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = mix (mix (tmpvar_22.zxy, tmpvar_22, vec3(tmpvar_23)), tmpvar_22.yxz, vec3(clamp (floor(((1.0 + tmpvar_22.y) - mix (tmpvar_22.z, tmpvar_22.x, tmpvar_23))), 0.0, 1.0)));
  vec4 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_MainTex, tmpvar_18, tmpvar_21.xy, tmpvar_21.zw) * mix (texture2DGradARB (_DetailTex, ((((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_11.xy, tmpvar_11.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0))));
  vec3 p_26;
  p_26 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix (clamp (((_FadeScale * sqrt(dot (p_26, p_26))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_27, p_27)) - (_RimDistSub * sqrt(dot (p_28, p_28))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_World2Planet]
"vs_3_0
; 25 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
add r2.xyz, -r0, c12
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mov o1.xyz, r0
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r3.xyz, r0, -r1
dp3 r1.w, r3, r3
rsq r1.w, r1.w
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mul o4.xyz, r1.w, r3
mul o6.xyz, r0.w, r2
mov o2.xyz, r1
rcp o3.x, r0.w
mov o5.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 288 // 272 used size, 18 vars
Matrix 208 [_World2Planet] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 27 instructions, 2 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddfiijkdmbjdhgendaipimkifhiefcondabaaaaaaimafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaiahaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaadapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaahaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
oiadaaaaeaaaabaapkaaaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadiccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaad
hccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaa
abaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaaficcabaaa
abaaaaaadkaabaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaaaaaaaaa
dgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaa
abaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaaj
hcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaa
anaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaaaaaaaaaapaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaaaaaaaaabaaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaaghccabaaaaeaaaaaaegacbaiaebaaaaaaabaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = (uv_10 + _MainOffset.xy);
  uv_10 = tmpvar_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  highp vec2 uvOffset_21;
  uvOffset_21 = _MainOffset.xy;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = (uv_24 + uvOffset_21);
  uv_24 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw);
  tex_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_12);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_8, tmpvar_34.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_8.x);
  highp vec2 coord_40;
  coord_40 = ((((0.5 * detailCoords_8.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_20.xy, tmpvar_20.zw);
  detail_6 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_5 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (tex_22 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_43.w, mix (clamp (((_FadeScale * sqrt(dot (p_44, p_44))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_11.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_11.xyz = (tmpvar_43.xyz * tmpvar_52);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = (uv_10 + _MainOffset.xy);
  uv_10 = tmpvar_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  highp vec2 uvOffset_21;
  uvOffset_21 = _MainOffset.xy;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = (uv_24 + uvOffset_21);
  uv_24 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw);
  tex_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_12);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_8, tmpvar_34.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_8.x);
  highp vec2 coord_40;
  coord_40 = ((((0.5 * detailCoords_8.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_20.xy, tmpvar_20.zw);
  detail_6 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_5 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (tex_22 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_43.w, mix (clamp (((_FadeScale * sqrt(dot (p_44, p_44))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_11.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_11.xyz = (tmpvar_43.xyz * tmpvar_52);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 351
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 451
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 projPos;
};
#line 444
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 361
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 374
#line 382
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 429
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 433
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 437
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 441
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 464
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 464
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 468
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 472
    o.viewDist = distance( vertexPos, vec4( _WorldSpaceCameraPos, 0.0));
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = vec3( (-(_World2Planet * v.vertex)));
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 476
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp float xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = float(xl_retval.viewDist);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 351
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 451
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 projPos;
};
#line 444
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 361
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 374
#line 382
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 429
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 433
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 437
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 441
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 464
#line 315
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 319
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 324
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 328
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 341
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, uvOffset);
    #line 345
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 478
lowp vec4 frag( in v2f IN ) {
    #line 480
    mediump vec4 color;
    highp vec3 objNrm = normalize(IN.objNormal);
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 484
    uv.y = (0.31831 * acos(objNrm.y));
    uv += _MainOffset.xy;
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, IN.objNormal, _MainOffset.xy);
    #line 488
    objNrm = abs(objNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    #line 492
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 496
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 500
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 504
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 508
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp float xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDist = float(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _World2Planet;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  vec4 p_7;
  p_7 = (tmpvar_4 - tmpvar_6);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = sqrt(dot (p_7, p_7));
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = -((_World2Planet * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _DetailOffset;
uniform vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = (uv_1 + _MainOffset.xy);
  uv_1 = tmpvar_8;
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(tmpvar_8.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(tmpvar_8.y);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = (uv_13 + _MainOffset.xy);
  uv_13 = tmpvar_18;
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_3);
  float tmpvar_23;
  tmpvar_23 = clamp (floor(((1.0 + tmpvar_22.x) - tmpvar_22.z)), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = mix (mix (tmpvar_22.zxy, tmpvar_22, vec3(tmpvar_23)), tmpvar_22.yxz, vec3(clamp (floor(((1.0 + tmpvar_22.y) - mix (tmpvar_22.z, tmpvar_22.x, tmpvar_23))), 0.0, 1.0)));
  vec4 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_MainTex, tmpvar_18, tmpvar_21.xy, tmpvar_21.zw) * mix (texture2DGradARB (_DetailTex, ((((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_11.xy, tmpvar_11.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0))));
  vec3 p_26;
  p_26 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix (clamp (((_FadeScale * sqrt(dot (p_26, p_26))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_27, p_27)) - (_RimDistSub * sqrt(dot (p_28, p_28))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_World2Planet]
"vs_3_0
; 25 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
add r2.xyz, -r0, c12
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mov o1.xyz, r0
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r3.xyz, r0, -r1
dp3 r1.w, r3, r3
rsq r1.w, r1.w
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mul o4.xyz, r1.w, r3
mul o6.xyz, r0.w, r2
mov o2.xyz, r1
rcp o3.x, r0.w
mov o5.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 288 // 272 used size, 18 vars
Matrix 208 [_World2Planet] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 27 instructions, 2 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbilkdjbbbbcaenfhhnjijkpbkaodkkeaabaaaaaakeafaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaiahaaaaaeabaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaahaaaaaa
apapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcoiadaaaaeaaaabaa
pkaaaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
iccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaaficcabaaaabaaaaaadkaabaaa
aaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
acaaaaaaegiccaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaaaaaaaaa
aoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagbabaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaa
apaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaaaaaaaaabaaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaag
hccabaaaaeaaaaaaegacbaiaebaaaaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  highp vec4 p_7;
  p_7 = (tmpvar_4 - tmpvar_6);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = sqrt(dot (p_7, p_7));
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = (uv_10 + _MainOffset.xy);
  uv_10 = tmpvar_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  highp vec2 uvOffset_21;
  uvOffset_21 = _MainOffset.xy;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = (uv_24 + uvOffset_21);
  uv_24 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw);
  tex_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_12);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_8, tmpvar_34.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_8.x);
  highp vec2 coord_40;
  coord_40 = ((((0.5 * detailCoords_8.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_20.xy, tmpvar_20.zw);
  detail_6 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_5 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (tex_22 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_43.w, mix (clamp (((_FadeScale * sqrt(dot (p_44, p_44))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_11.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_11.xyz = (tmpvar_43.xyz * tmpvar_52);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  highp vec4 p_7;
  p_7 = (tmpvar_4 - tmpvar_6);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = sqrt(dot (p_7, p_7));
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = (uv_10 + _MainOffset.xy);
  uv_10 = tmpvar_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  highp vec2 uvOffset_21;
  uvOffset_21 = _MainOffset.xy;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = (uv_24 + uvOffset_21);
  uv_24 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw);
  tex_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_12);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_8, tmpvar_34.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_8.x);
  highp vec2 coord_40;
  coord_40 = ((((0.5 * detailCoords_8.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_20.xy, tmpvar_20.zw);
  detail_6 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_5 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (tex_22 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_43.w, mix (clamp (((_FadeScale * sqrt(dot (p_44, p_44))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_11.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_11.xyz = (tmpvar_43.xyz * tmpvar_52);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 366
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 466
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 459
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 357
uniform sampler2D _LightTextureB0;
#line 362
#line 376
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 389
#line 397
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 444
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 448
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 452
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 456
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 480
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 480
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 484
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 488
    o.viewDist = distance( vertexPos, vec4( _WorldSpaceCameraPos, 0.0));
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = vec3( (-(_World2Planet * v.vertex)));
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 492
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp float xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = float(xl_retval.viewDist);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 366
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 466
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 459
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 357
uniform sampler2D _LightTextureB0;
#line 362
#line 376
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 389
#line 397
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 444
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 448
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 452
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 456
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 480
#line 315
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 319
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 324
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 328
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 341
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, uvOffset);
    #line 345
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 494
lowp vec4 frag( in v2f IN ) {
    #line 496
    mediump vec4 color;
    highp vec3 objNrm = normalize(IN.objNormal);
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 500
    uv.y = (0.31831 * acos(objNrm.y));
    uv += _MainOffset.xy;
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, IN.objNormal, _MainOffset.xy);
    #line 504
    objNrm = abs(objNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    #line 508
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 512
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 516
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 520
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 524
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp float xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDist = float(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _World2Planet;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  vec4 p_7;
  p_7 = (tmpvar_4 - tmpvar_6);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = sqrt(dot (p_7, p_7));
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = -((_World2Planet * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _DetailOffset;
uniform vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = (uv_1 + _MainOffset.xy);
  uv_1 = tmpvar_8;
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(tmpvar_8.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(tmpvar_8.y);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = (uv_13 + _MainOffset.xy);
  uv_13 = tmpvar_18;
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_3);
  float tmpvar_23;
  tmpvar_23 = clamp (floor(((1.0 + tmpvar_22.x) - tmpvar_22.z)), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = mix (mix (tmpvar_22.zxy, tmpvar_22, vec3(tmpvar_23)), tmpvar_22.yxz, vec3(clamp (floor(((1.0 + tmpvar_22.y) - mix (tmpvar_22.z, tmpvar_22.x, tmpvar_23))), 0.0, 1.0)));
  vec4 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_MainTex, tmpvar_18, tmpvar_21.xy, tmpvar_21.zw) * mix (texture2DGradARB (_DetailTex, ((((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_11.xy, tmpvar_11.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0))));
  vec3 p_26;
  p_26 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix (clamp (((_FadeScale * sqrt(dot (p_26, p_26))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_27, p_27)) - (_RimDistSub * sqrt(dot (p_28, p_28))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_World2Planet]
"vs_3_0
; 25 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
add r2.xyz, -r0, c12
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mov o1.xyz, r0
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r3.xyz, r0, -r1
dp3 r1.w, r3, r3
rsq r1.w, r1.w
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mul o4.xyz, r1.w, r3
mul o6.xyz, r0.w, r2
mov o2.xyz, r1
rcp o3.x, r0.w
mov o5.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 288 // 272 used size, 18 vars
Matrix 208 [_World2Planet] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 27 instructions, 2 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbilkdjbbbbcaenfhhnjijkpbkaodkkeaabaaaaaakeafaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaiahaaaaaeabaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaahaaaaaa
apapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcoiadaaaaeaaaabaa
pkaaaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
iccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaaficcabaaaabaaaaaadkaabaaa
aaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
acaaaaaaegiccaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaaaaaaaaa
aoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagbabaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaa
apaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaaaaaaaaabaaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaag
hccabaaaaeaaaaaaegacbaiaebaaaaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  highp vec4 p_7;
  p_7 = (tmpvar_4 - tmpvar_6);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = sqrt(dot (p_7, p_7));
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = (uv_10 + _MainOffset.xy);
  uv_10 = tmpvar_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  highp vec2 uvOffset_21;
  uvOffset_21 = _MainOffset.xy;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = (uv_24 + uvOffset_21);
  uv_24 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw);
  tex_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_12);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_8, tmpvar_34.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_8.x);
  highp vec2 coord_40;
  coord_40 = ((((0.5 * detailCoords_8.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_20.xy, tmpvar_20.zw);
  detail_6 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_5 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (tex_22 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_43.w, mix (clamp (((_FadeScale * sqrt(dot (p_44, p_44))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_11.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_11.xyz = (tmpvar_43.xyz * tmpvar_52);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 367
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 467
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 460
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 357
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 377
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 390
#line 398
#line 412
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 445
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 449
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 453
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 457
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 481
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 481
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 485
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 489
    o.viewDist = distance( vertexPos, vec4( _WorldSpaceCameraPos, 0.0));
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = vec3( (-(_World2Planet * v.vertex)));
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 493
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp float xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = float(xl_retval.viewDist);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 367
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 467
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 460
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 357
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 377
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 390
#line 398
#line 412
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 445
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 449
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 453
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 457
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 481
#line 315
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 319
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 324
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 328
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 341
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, uvOffset);
    #line 345
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 495
lowp vec4 frag( in v2f IN ) {
    #line 497
    mediump vec4 color;
    highp vec3 objNrm = normalize(IN.objNormal);
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 501
    uv.y = (0.31831 * acos(objNrm.y));
    uv += _MainOffset.xy;
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, IN.objNormal, _MainOffset.xy);
    #line 505
    objNrm = abs(objNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    #line 509
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 513
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 517
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 521
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 525
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp float xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDist = float(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _World2Planet;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _DetailOffset;
uniform vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = (uv_1 + _MainOffset.xy);
  uv_1 = tmpvar_8;
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(tmpvar_8.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(tmpvar_8.y);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = (uv_13 + _MainOffset.xy);
  uv_13 = tmpvar_18;
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_3);
  float tmpvar_23;
  tmpvar_23 = clamp (floor(((1.0 + tmpvar_22.x) - tmpvar_22.z)), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = mix (mix (tmpvar_22.zxy, tmpvar_22, vec3(tmpvar_23)), tmpvar_22.yxz, vec3(clamp (floor(((1.0 + tmpvar_22.y) - mix (tmpvar_22.z, tmpvar_22.x, tmpvar_23))), 0.0, 1.0)));
  vec4 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_MainTex, tmpvar_18, tmpvar_21.xy, tmpvar_21.zw) * mix (texture2DGradARB (_DetailTex, ((((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_11.xy, tmpvar_11.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0))));
  vec3 p_26;
  p_26 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix (clamp (((_FadeScale * sqrt(dot (p_26, p_26))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_27, p_27)) - (_RimDistSub * sqrt(dot (p_28, p_28))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_World2Planet]
"vs_3_0
; 25 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
add r2.xyz, -r0, c12
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mov o1.xyz, r0
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r3.xyz, r0, -r1
dp3 r1.w, r3, r3
rsq r1.w, r1.w
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mul o4.xyz, r1.w, r3
mul o6.xyz, r0.w, r2
mov o2.xyz, r1
rcp o3.x, r0.w
mov o5.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 288 // 272 used size, 18 vars
Matrix 208 [_World2Planet] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 27 instructions, 2 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhliaepomgejgnlejoebfbippagchjnieabaaaaaaimafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaiahaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaahaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
oiadaaaaeaaaabaapkaaaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadiccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaad
hccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaa
abaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaaficcabaaa
abaaaaaadkaabaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaaaaaaaaa
dgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaa
abaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaaj
hcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaa
anaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaaaaaaaaaapaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaaaaaaaaabaaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaaghccabaaaaeaaaaaaegacbaiaebaaaaaaabaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = (uv_10 + _MainOffset.xy);
  uv_10 = tmpvar_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  highp vec2 uvOffset_21;
  uvOffset_21 = _MainOffset.xy;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = (uv_24 + uvOffset_21);
  uv_24 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw);
  tex_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_12);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_8, tmpvar_34.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_8.x);
  highp vec2 coord_40;
  coord_40 = ((((0.5 * detailCoords_8.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_20.xy, tmpvar_20.zw);
  detail_6 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_5 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (tex_22 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_43.w, mix (clamp (((_FadeScale * sqrt(dot (p_44, p_44))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_11.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_11.xyz = (tmpvar_43.xyz * tmpvar_52);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = (uv_10 + _MainOffset.xy);
  uv_10 = tmpvar_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  highp vec2 uvOffset_21;
  uvOffset_21 = _MainOffset.xy;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = (uv_24 + uvOffset_21);
  uv_24 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw);
  tex_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_12);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_8, tmpvar_34.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_8.x);
  highp vec2 coord_40;
  coord_40 = ((((0.5 * detailCoords_8.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_20.xy, tmpvar_20.zw);
  detail_6 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_5 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (tex_22 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_43.w, mix (clamp (((_FadeScale * sqrt(dot (p_44, p_44))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_11.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_11.xyz = (tmpvar_43.xyz * tmpvar_52);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 357
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 457
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 450
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 367
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 380
#line 388
#line 402
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 435
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 439
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 443
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 447
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 470
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 470
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 474
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 478
    o.viewDist = distance( vertexPos, vec4( _WorldSpaceCameraPos, 0.0));
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = vec3( (-(_World2Planet * v.vertex)));
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 482
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp float xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = float(xl_retval.viewDist);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 357
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 457
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 450
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 367
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 380
#line 388
#line 402
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 435
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 439
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 443
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 447
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 470
#line 315
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 319
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 324
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 328
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 341
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, uvOffset);
    #line 345
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 484
lowp vec4 frag( in v2f IN ) {
    #line 486
    mediump vec4 color;
    highp vec3 objNrm = normalize(IN.objNormal);
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 490
    uv.y = (0.31831 * acos(objNrm.y));
    uv += _MainOffset.xy;
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, IN.objNormal, _MainOffset.xy);
    #line 494
    objNrm = abs(objNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    #line 498
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 502
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 506
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 510
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 514
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp float xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDist = float(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _World2Planet;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  vec4 p_7;
  p_7 = (tmpvar_4 - tmpvar_6);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = sqrt(dot (p_7, p_7));
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = -((_World2Planet * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _DetailOffset;
uniform vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = (uv_1 + _MainOffset.xy);
  uv_1 = tmpvar_8;
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(tmpvar_8.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(tmpvar_8.y);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = (uv_13 + _MainOffset.xy);
  uv_13 = tmpvar_18;
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_3);
  float tmpvar_23;
  tmpvar_23 = clamp (floor(((1.0 + tmpvar_22.x) - tmpvar_22.z)), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = mix (mix (tmpvar_22.zxy, tmpvar_22, vec3(tmpvar_23)), tmpvar_22.yxz, vec3(clamp (floor(((1.0 + tmpvar_22.y) - mix (tmpvar_22.z, tmpvar_22.x, tmpvar_23))), 0.0, 1.0)));
  vec4 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_MainTex, tmpvar_18, tmpvar_21.xy, tmpvar_21.zw) * mix (texture2DGradARB (_DetailTex, ((((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_11.xy, tmpvar_11.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0))));
  vec3 p_26;
  p_26 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix (clamp (((_FadeScale * sqrt(dot (p_26, p_26))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_27, p_27)) - (_RimDistSub * sqrt(dot (p_28, p_28))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_World2Planet]
"vs_3_0
; 25 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
add r2.xyz, -r0, c12
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mov o1.xyz, r0
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r3.xyz, r0, -r1
dp3 r1.w, r3, r3
rsq r1.w, r1.w
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mul o4.xyz, r1.w, r3
mul o6.xyz, r0.w, r2
mov o2.xyz, r1
rcp o3.x, r0.w
mov o5.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 352 // 336 used size, 19 vars
Matrix 272 [_World2Planet] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 27 instructions, 2 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedfialhklanmgabbneihehheldainjfpmlabaaaaaakeafaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaiahaaaaaeabaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaadapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaahaaaaaa
apapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcoiadaaaaeaaaabaa
pkaaaaaafjaaaaaeegiocaaaaaaaaaaabfaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
iccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaaficcabaaaabaaaaaadkaabaaa
aaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
acaaaaaaegiccaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaaaaaaaaa
bcaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaabbaaaaaaagbabaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaa
bdaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaaaaaaaaabeaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaag
hccabaaaaeaaaaaaegacbaiaebaaaaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  highp vec4 p_7;
  p_7 = (tmpvar_4 - tmpvar_6);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = sqrt(dot (p_7, p_7));
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = (uv_10 + _MainOffset.xy);
  uv_10 = tmpvar_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  highp vec2 uvOffset_21;
  uvOffset_21 = _MainOffset.xy;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = (uv_24 + uvOffset_21);
  uv_24 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw);
  tex_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_12);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_8, tmpvar_34.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_8.x);
  highp vec2 coord_40;
  coord_40 = ((((0.5 * detailCoords_8.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_20.xy, tmpvar_20.zw);
  detail_6 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_5 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (tex_22 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_43.w, mix (clamp (((_FadeScale * sqrt(dot (p_44, p_44))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_11.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_11.xyz = (tmpvar_43.xyz * tmpvar_52);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  highp vec4 p_7;
  p_7 = (tmpvar_4 - tmpvar_6);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = sqrt(dot (p_7, p_7));
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = (uv_10 + _MainOffset.xy);
  uv_10 = tmpvar_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  highp vec2 uvOffset_21;
  uvOffset_21 = _MainOffset.xy;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = (uv_24 + uvOffset_21);
  uv_24 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw);
  tex_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_12);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_8, tmpvar_34.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_8.x);
  highp vec2 coord_40;
  coord_40 = ((((0.5 * detailCoords_8.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_20.xy, tmpvar_20.zw);
  detail_6 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_5 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (tex_22 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_43.w, mix (clamp (((_FadeScale * sqrt(dot (p_44, p_44))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_11.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_11.xyz = (tmpvar_43.xyz * tmpvar_52);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 359
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 459
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 452
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 357
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 369
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 382
#line 390
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 437
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 441
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 445
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 449
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 473
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 473
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 477
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 481
    o.viewDist = distance( vertexPos, vec4( _WorldSpaceCameraPos, 0.0));
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = vec3( (-(_World2Planet * v.vertex)));
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 485
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp float xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = float(xl_retval.viewDist);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 359
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 459
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 452
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 357
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 369
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 382
#line 390
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 437
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 441
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 445
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 449
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 473
#line 315
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 319
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 324
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 328
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 341
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, uvOffset);
    #line 345
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 487
lowp vec4 frag( in v2f IN ) {
    #line 489
    mediump vec4 color;
    highp vec3 objNrm = normalize(IN.objNormal);
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 493
    uv.y = (0.31831 * acos(objNrm.y));
    uv += _MainOffset.xy;
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, IN.objNormal, _MainOffset.xy);
    #line 497
    objNrm = abs(objNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    #line 501
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 505
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 509
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 513
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 517
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp float xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDist = float(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _World2Planet;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  vec4 p_7;
  p_7 = (tmpvar_4 - tmpvar_6);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = sqrt(dot (p_7, p_7));
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = -((_World2Planet * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _DetailOffset;
uniform vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = (uv_1 + _MainOffset.xy);
  uv_1 = tmpvar_8;
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(tmpvar_8.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(tmpvar_8.y);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = (uv_13 + _MainOffset.xy);
  uv_13 = tmpvar_18;
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_3);
  float tmpvar_23;
  tmpvar_23 = clamp (floor(((1.0 + tmpvar_22.x) - tmpvar_22.z)), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = mix (mix (tmpvar_22.zxy, tmpvar_22, vec3(tmpvar_23)), tmpvar_22.yxz, vec3(clamp (floor(((1.0 + tmpvar_22.y) - mix (tmpvar_22.z, tmpvar_22.x, tmpvar_23))), 0.0, 1.0)));
  vec4 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_MainTex, tmpvar_18, tmpvar_21.xy, tmpvar_21.zw) * mix (texture2DGradARB (_DetailTex, ((((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_11.xy, tmpvar_11.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0))));
  vec3 p_26;
  p_26 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix (clamp (((_FadeScale * sqrt(dot (p_26, p_26))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_27, p_27)) - (_RimDistSub * sqrt(dot (p_28, p_28))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_World2Planet]
"vs_3_0
; 25 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
add r2.xyz, -r0, c12
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mov o1.xyz, r0
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r3.xyz, r0, -r1
dp3 r1.w, r3, r3
rsq r1.w, r1.w
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mul o4.xyz, r1.w, r3
mul o6.xyz, r0.w, r2
mov o2.xyz, r1
rcp o3.x, r0.w
mov o5.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 288 // 272 used size, 18 vars
Matrix 208 [_World2Planet] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 27 instructions, 2 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecednoopdnfbbhnkladjmkpifjdedcpoaeaoabaaaaaakeafaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaiahaaaaaeabaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaahaaaaaa
ahapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcoiadaaaaeaaaabaa
pkaaaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
iccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaaficcabaaaabaaaaaadkaabaaa
aaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
acaaaaaaegiccaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaaaaaaaaa
aoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagbabaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaa
apaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaaaaaaaaabaaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaag
hccabaaaaeaaaaaaegacbaiaebaaaaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  highp vec4 p_7;
  p_7 = (tmpvar_4 - tmpvar_6);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = sqrt(dot (p_7, p_7));
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = (uv_10 + _MainOffset.xy);
  uv_10 = tmpvar_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  highp vec2 uvOffset_21;
  uvOffset_21 = _MainOffset.xy;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = (uv_24 + uvOffset_21);
  uv_24 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw);
  tex_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_12);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_8, tmpvar_34.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_8.x);
  highp vec2 coord_40;
  coord_40 = ((((0.5 * detailCoords_8.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_20.xy, tmpvar_20.zw);
  detail_6 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_5 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (tex_22 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_43.w, mix (clamp (((_FadeScale * sqrt(dot (p_44, p_44))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_11.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_11.xyz = (tmpvar_43.xyz * tmpvar_52);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  highp vec4 p_7;
  p_7 = (tmpvar_4 - tmpvar_6);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = sqrt(dot (p_7, p_7));
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = (uv_10 + _MainOffset.xy);
  uv_10 = tmpvar_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  highp vec2 uvOffset_21;
  uvOffset_21 = _MainOffset.xy;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = (uv_24 + uvOffset_21);
  uv_24 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw);
  tex_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_12);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_8, tmpvar_34.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_8.x);
  highp vec2 coord_40;
  coord_40 = ((((0.5 * detailCoords_8.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_20.xy, tmpvar_20.zw);
  detail_6 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_5 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (tex_22 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_43.w, mix (clamp (((_FadeScale * sqrt(dot (p_44, p_44))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_11.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_11.xyz = (tmpvar_43.xyz * tmpvar_52);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 364
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 464
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 457
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform samplerCube _ShadowMapTexture;
#line 362
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 374
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 387
#line 395
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 442
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 446
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 450
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 454
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 478
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 478
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 482
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 486
    o.viewDist = distance( vertexPos, vec4( _WorldSpaceCameraPos, 0.0));
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = vec3( (-(_World2Planet * v.vertex)));
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 490
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp float xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = float(xl_retval.viewDist);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 364
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 464
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 457
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform samplerCube _ShadowMapTexture;
#line 362
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 374
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 387
#line 395
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 442
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 446
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 450
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 454
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 478
#line 315
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 319
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 324
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 328
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 341
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, uvOffset);
    #line 345
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 492
lowp vec4 frag( in v2f IN ) {
    #line 494
    mediump vec4 color;
    highp vec3 objNrm = normalize(IN.objNormal);
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 498
    uv.y = (0.31831 * acos(objNrm.y));
    uv += _MainOffset.xy;
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, IN.objNormal, _MainOffset.xy);
    #line 502
    objNrm = abs(objNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    #line 506
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 510
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 514
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 518
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 522
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp float xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDist = float(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _World2Planet;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  vec4 p_7;
  p_7 = (tmpvar_4 - tmpvar_6);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = sqrt(dot (p_7, p_7));
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = -((_World2Planet * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _DetailOffset;
uniform vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = (uv_1 + _MainOffset.xy);
  uv_1 = tmpvar_8;
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(tmpvar_8.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(tmpvar_8.y);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = (uv_13 + _MainOffset.xy);
  uv_13 = tmpvar_18;
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_3);
  float tmpvar_23;
  tmpvar_23 = clamp (floor(((1.0 + tmpvar_22.x) - tmpvar_22.z)), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = mix (mix (tmpvar_22.zxy, tmpvar_22, vec3(tmpvar_23)), tmpvar_22.yxz, vec3(clamp (floor(((1.0 + tmpvar_22.y) - mix (tmpvar_22.z, tmpvar_22.x, tmpvar_23))), 0.0, 1.0)));
  vec4 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_MainTex, tmpvar_18, tmpvar_21.xy, tmpvar_21.zw) * mix (texture2DGradARB (_DetailTex, ((((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_11.xy, tmpvar_11.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0))));
  vec3 p_26;
  p_26 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix (clamp (((_FadeScale * sqrt(dot (p_26, p_26))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_27, p_27)) - (_RimDistSub * sqrt(dot (p_28, p_28))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_World2Planet]
"vs_3_0
; 25 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
add r2.xyz, -r0, c12
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mov o1.xyz, r0
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r3.xyz, r0, -r1
dp3 r1.w, r3, r3
rsq r1.w, r1.w
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mul o4.xyz, r1.w, r3
mul o6.xyz, r0.w, r2
mov o2.xyz, r1
rcp o3.x, r0.w
mov o5.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 288 // 272 used size, 18 vars
Matrix 208 [_World2Planet] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 27 instructions, 2 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecednoopdnfbbhnkladjmkpifjdedcpoaeaoabaaaaaakeafaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaiahaaaaaeabaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaahaaaaaa
ahapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcoiadaaaaeaaaabaa
pkaaaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
iccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaaficcabaaaabaaaaaadkaabaaa
aaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
acaaaaaaegiccaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaaaaaaaaa
aoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagbabaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaa
apaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaaaaaaaaabaaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaag
hccabaaaaeaaaaaaegacbaiaebaaaaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  highp vec4 p_7;
  p_7 = (tmpvar_4 - tmpvar_6);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = sqrt(dot (p_7, p_7));
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = (uv_10 + _MainOffset.xy);
  uv_10 = tmpvar_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  highp vec2 uvOffset_21;
  uvOffset_21 = _MainOffset.xy;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = (uv_24 + uvOffset_21);
  uv_24 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw);
  tex_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_12);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_8, tmpvar_34.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_8.x);
  highp vec2 coord_40;
  coord_40 = ((((0.5 * detailCoords_8.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_20.xy, tmpvar_20.zw);
  detail_6 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_5 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (tex_22 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_43.w, mix (clamp (((_FadeScale * sqrt(dot (p_44, p_44))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_11.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_11.xyz = (tmpvar_43.xyz * tmpvar_52);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  highp vec4 p_7;
  p_7 = (tmpvar_4 - tmpvar_6);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = sqrt(dot (p_7, p_7));
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = (uv_10 + _MainOffset.xy);
  uv_10 = tmpvar_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  highp vec2 uvOffset_21;
  uvOffset_21 = _MainOffset.xy;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = (uv_24 + uvOffset_21);
  uv_24 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw);
  tex_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_12);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_8, tmpvar_34.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_8.x);
  highp vec2 coord_40;
  coord_40 = ((((0.5 * detailCoords_8.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_20.xy, tmpvar_20.zw);
  detail_6 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_5 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (tex_22 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_43.w, mix (clamp (((_FadeScale * sqrt(dot (p_44, p_44))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_11.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_11.xyz = (tmpvar_43.xyz * tmpvar_52);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 365
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 465
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 458
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform samplerCube _ShadowMapTexture;
#line 362
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 375
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 388
#line 396
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 443
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 447
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 451
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 455
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 479
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 479
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 483
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 487
    o.viewDist = distance( vertexPos, vec4( _WorldSpaceCameraPos, 0.0));
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = vec3( (-(_World2Planet * v.vertex)));
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 491
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp float xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = float(xl_retval.viewDist);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 365
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 465
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 458
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform samplerCube _ShadowMapTexture;
#line 362
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 375
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 388
#line 396
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 443
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 447
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 451
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 455
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 479
#line 315
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 319
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 324
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 328
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 341
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, uvOffset);
    #line 345
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 493
lowp vec4 frag( in v2f IN ) {
    #line 495
    mediump vec4 color;
    highp vec3 objNrm = normalize(IN.objNormal);
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 499
    uv.y = (0.31831 * acos(objNrm.y));
    uv += _MainOffset.xy;
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, IN.objNormal, _MainOffset.xy);
    #line 503
    objNrm = abs(objNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    #line 507
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 511
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 515
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 519
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 523
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp float xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDist = float(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _World2Planet;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  vec4 p_7;
  p_7 = (tmpvar_4 - tmpvar_6);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = sqrt(dot (p_7, p_7));
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = -((_World2Planet * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _DetailOffset;
uniform vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = (uv_1 + _MainOffset.xy);
  uv_1 = tmpvar_8;
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(tmpvar_8.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(tmpvar_8.y);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = (uv_13 + _MainOffset.xy);
  uv_13 = tmpvar_18;
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_3);
  float tmpvar_23;
  tmpvar_23 = clamp (floor(((1.0 + tmpvar_22.x) - tmpvar_22.z)), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = mix (mix (tmpvar_22.zxy, tmpvar_22, vec3(tmpvar_23)), tmpvar_22.yxz, vec3(clamp (floor(((1.0 + tmpvar_22.y) - mix (tmpvar_22.z, tmpvar_22.x, tmpvar_23))), 0.0, 1.0)));
  vec4 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_MainTex, tmpvar_18, tmpvar_21.xy, tmpvar_21.zw) * mix (texture2DGradARB (_DetailTex, ((((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_11.xy, tmpvar_11.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0))));
  vec3 p_26;
  p_26 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix (clamp (((_FadeScale * sqrt(dot (p_26, p_26))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_27, p_27)) - (_RimDistSub * sqrt(dot (p_28, p_28))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_World2Planet]
"vs_3_0
; 25 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
add r2.xyz, -r0, c12
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mov o1.xyz, r0
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r3.xyz, r0, -r1
dp3 r1.w, r3, r3
rsq r1.w, r1.w
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mul o4.xyz, r1.w, r3
mul o6.xyz, r0.w, r2
mov o2.xyz, r1
rcp o3.x, r0.w
mov o5.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 352 // 336 used size, 19 vars
Matrix 272 [_World2Planet] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 27 instructions, 2 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhbjogbafkfemgnnlooickgccknpjennlabaaaaaakeafaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaiahaaaaaeabaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaahaaaaaa
apapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcoiadaaaaeaaaabaa
pkaaaaaafjaaaaaeegiocaaaaaaaaaaabfaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
iccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaaficcabaaaabaaaaaadkaabaaa
aaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
acaaaaaaegiccaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaaaaaaaaa
bcaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaabbaaaaaaagbabaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaa
bdaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaaaaaaaaabeaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaag
hccabaaaaeaaaaaaegacbaiaebaaaaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  highp vec4 p_7;
  p_7 = (tmpvar_4 - tmpvar_6);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = sqrt(dot (p_7, p_7));
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = (uv_10 + _MainOffset.xy);
  uv_10 = tmpvar_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  highp vec2 uvOffset_21;
  uvOffset_21 = _MainOffset.xy;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = (uv_24 + uvOffset_21);
  uv_24 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw);
  tex_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_12);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_8, tmpvar_34.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_8.x);
  highp vec2 coord_40;
  coord_40 = ((((0.5 * detailCoords_8.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_20.xy, tmpvar_20.zw);
  detail_6 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_5 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (tex_22 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_43.w, mix (clamp (((_FadeScale * sqrt(dot (p_44, p_44))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_11.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_11.xyz = (tmpvar_43.xyz * tmpvar_52);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  highp vec4 p_7;
  p_7 = (tmpvar_4 - tmpvar_6);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = sqrt(dot (p_7, p_7));
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = (uv_10 + _MainOffset.xy);
  uv_10 = tmpvar_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  highp vec2 uvOffset_21;
  uvOffset_21 = _MainOffset.xy;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = (uv_24 + uvOffset_21);
  uv_24 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw);
  tex_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_12);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_8, tmpvar_34.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_8.x);
  highp vec2 coord_40;
  coord_40 = ((((0.5 * detailCoords_8.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_20.xy, tmpvar_20.zw);
  detail_6 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_5 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (tex_22 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_43.w, mix (clamp (((_FadeScale * sqrt(dot (p_44, p_44))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_11.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_11.xyz = (tmpvar_43.xyz * tmpvar_52);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 374
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 474
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 467
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 365
uniform sampler2D _LightTextureB0;
#line 370
#line 384
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 397
#line 405
#line 419
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 452
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 456
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 460
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 464
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 488
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 488
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 492
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 496
    o.viewDist = distance( vertexPos, vec4( _WorldSpaceCameraPos, 0.0));
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = vec3( (-(_World2Planet * v.vertex)));
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 500
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp float xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = float(xl_retval.viewDist);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 374
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 474
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 467
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 365
uniform sampler2D _LightTextureB0;
#line 370
#line 384
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 397
#line 405
#line 419
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 452
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 456
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 460
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 464
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 488
#line 315
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 319
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 324
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 328
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 341
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, uvOffset);
    #line 345
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 502
lowp vec4 frag( in v2f IN ) {
    #line 504
    mediump vec4 color;
    highp vec3 objNrm = normalize(IN.objNormal);
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 508
    uv.y = (0.31831 * acos(objNrm.y));
    uv += _MainOffset.xy;
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, IN.objNormal, _MainOffset.xy);
    #line 512
    objNrm = abs(objNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    #line 516
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 520
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 524
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 528
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 532
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp float xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDist = float(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _World2Planet;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  vec4 p_7;
  p_7 = (tmpvar_4 - tmpvar_6);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = sqrt(dot (p_7, p_7));
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = -((_World2Planet * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _DetailOffset;
uniform vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = (uv_1 + _MainOffset.xy);
  uv_1 = tmpvar_8;
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(tmpvar_8.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(tmpvar_8.y);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = (uv_13 + _MainOffset.xy);
  uv_13 = tmpvar_18;
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_3);
  float tmpvar_23;
  tmpvar_23 = clamp (floor(((1.0 + tmpvar_22.x) - tmpvar_22.z)), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = mix (mix (tmpvar_22.zxy, tmpvar_22, vec3(tmpvar_23)), tmpvar_22.yxz, vec3(clamp (floor(((1.0 + tmpvar_22.y) - mix (tmpvar_22.z, tmpvar_22.x, tmpvar_23))), 0.0, 1.0)));
  vec4 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_MainTex, tmpvar_18, tmpvar_21.xy, tmpvar_21.zw) * mix (texture2DGradARB (_DetailTex, ((((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_11.xy, tmpvar_11.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0))));
  vec3 p_26;
  p_26 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix (clamp (((_FadeScale * sqrt(dot (p_26, p_26))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_27, p_27)) - (_RimDistSub * sqrt(dot (p_28, p_28))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_World2Planet]
"vs_3_0
; 25 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
add r2.xyz, -r0, c12
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mov o1.xyz, r0
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r3.xyz, r0, -r1
dp3 r1.w, r3, r3
rsq r1.w, r1.w
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mul o4.xyz, r1.w, r3
mul o6.xyz, r0.w, r2
mov o2.xyz, r1
rcp o3.x, r0.w
mov o5.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 352 // 336 used size, 19 vars
Matrix 272 [_World2Planet] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 27 instructions, 2 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhbjogbafkfemgnnlooickgccknpjennlabaaaaaakeafaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaiahaaaaaeabaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaahaaaaaa
apapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcoiadaaaaeaaaabaa
pkaaaaaafjaaaaaeegiocaaaaaaaaaaabfaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
iccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaaficcabaaaabaaaaaadkaabaaa
aaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
acaaaaaaegiccaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaaaaaaaaa
bcaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaabbaaaaaaagbabaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaa
bdaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaaaaaaaaabeaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaag
hccabaaaaeaaaaaaegacbaiaebaaaaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  highp vec4 p_7;
  p_7 = (tmpvar_4 - tmpvar_6);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = sqrt(dot (p_7, p_7));
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = (uv_10 + _MainOffset.xy);
  uv_10 = tmpvar_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  highp vec2 uvOffset_21;
  uvOffset_21 = _MainOffset.xy;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = (uv_24 + uvOffset_21);
  uv_24 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw);
  tex_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_12);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_8, tmpvar_34.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_8.x);
  highp vec2 coord_40;
  coord_40 = ((((0.5 * detailCoords_8.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_20.xy, tmpvar_20.zw);
  detail_6 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_5 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (tex_22 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_43.w, mix (clamp (((_FadeScale * sqrt(dot (p_44, p_44))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_11.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_11.xyz = (tmpvar_43.xyz * tmpvar_52);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 374
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 474
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 467
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 365
uniform sampler2D _LightTextureB0;
#line 370
#line 384
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 397
#line 405
#line 419
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 452
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 456
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 460
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 464
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 488
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 488
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 492
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 496
    o.viewDist = distance( vertexPos, vec4( _WorldSpaceCameraPos, 0.0));
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = vec3( (-(_World2Planet * v.vertex)));
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 500
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp float xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = float(xl_retval.viewDist);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 374
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 474
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 467
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 365
uniform sampler2D _LightTextureB0;
#line 370
#line 384
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 397
#line 405
#line 419
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 452
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 456
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 460
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 464
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 488
#line 315
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 319
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 324
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 328
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 341
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, uvOffset);
    #line 345
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 502
lowp vec4 frag( in v2f IN ) {
    #line 504
    mediump vec4 color;
    highp vec3 objNrm = normalize(IN.objNormal);
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 508
    uv.y = (0.31831 * acos(objNrm.y));
    uv += _MainOffset.xy;
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, IN.objNormal, _MainOffset.xy);
    #line 512
    objNrm = abs(objNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    #line 516
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 520
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 524
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 528
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 532
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp float xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDist = float(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _World2Planet;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  vec4 p_7;
  p_7 = (tmpvar_4 - tmpvar_6);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = sqrt(dot (p_7, p_7));
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = -((_World2Planet * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _DetailOffset;
uniform vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = (uv_1 + _MainOffset.xy);
  uv_1 = tmpvar_8;
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(tmpvar_8.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(tmpvar_8.y);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = (uv_13 + _MainOffset.xy);
  uv_13 = tmpvar_18;
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_3);
  float tmpvar_23;
  tmpvar_23 = clamp (floor(((1.0 + tmpvar_22.x) - tmpvar_22.z)), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = mix (mix (tmpvar_22.zxy, tmpvar_22, vec3(tmpvar_23)), tmpvar_22.yxz, vec3(clamp (floor(((1.0 + tmpvar_22.y) - mix (tmpvar_22.z, tmpvar_22.x, tmpvar_23))), 0.0, 1.0)));
  vec4 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_MainTex, tmpvar_18, tmpvar_21.xy, tmpvar_21.zw) * mix (texture2DGradARB (_DetailTex, ((((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_11.xy, tmpvar_11.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0))));
  vec3 p_26;
  p_26 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix (clamp (((_FadeScale * sqrt(dot (p_26, p_26))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_27, p_27)) - (_RimDistSub * sqrt(dot (p_28, p_28))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_World2Planet]
"vs_3_0
; 25 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
add r2.xyz, -r0, c12
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mov o1.xyz, r0
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r3.xyz, r0, -r1
dp3 r1.w, r3, r3
rsq r1.w, r1.w
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mul o4.xyz, r1.w, r3
mul o6.xyz, r0.w, r2
mov o2.xyz, r1
rcp o3.x, r0.w
mov o5.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 288 // 272 used size, 18 vars
Matrix 208 [_World2Planet] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 27 instructions, 2 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecednoopdnfbbhnkladjmkpifjdedcpoaeaoabaaaaaakeafaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaiahaaaaaeabaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaahaaaaaa
ahapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcoiadaaaaeaaaabaa
pkaaaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
iccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaaficcabaaaabaaaaaadkaabaaa
aaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
acaaaaaaegiccaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaaaaaaaaa
aoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagbabaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaa
apaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaaaaaaaaabaaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaag
hccabaaaaeaaaaaaegacbaiaebaaaaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  highp vec4 p_7;
  p_7 = (tmpvar_4 - tmpvar_6);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = sqrt(dot (p_7, p_7));
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = (uv_10 + _MainOffset.xy);
  uv_10 = tmpvar_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  highp vec2 uvOffset_21;
  uvOffset_21 = _MainOffset.xy;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = (uv_24 + uvOffset_21);
  uv_24 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw);
  tex_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_12);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_8, tmpvar_34.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_8.x);
  highp vec2 coord_40;
  coord_40 = ((((0.5 * detailCoords_8.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_20.xy, tmpvar_20.zw);
  detail_6 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_5 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (tex_22 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_43.w, mix (clamp (((_FadeScale * sqrt(dot (p_44, p_44))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_11.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_11.xyz = (tmpvar_43.xyz * tmpvar_52);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  highp vec4 p_7;
  p_7 = (tmpvar_4 - tmpvar_6);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = sqrt(dot (p_7, p_7));
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = (uv_10 + _MainOffset.xy);
  uv_10 = tmpvar_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  highp vec2 uvOffset_21;
  uvOffset_21 = _MainOffset.xy;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = (uv_24 + uvOffset_21);
  uv_24 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw);
  tex_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_12);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_8, tmpvar_34.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_8.x);
  highp vec2 coord_40;
  coord_40 = ((((0.5 * detailCoords_8.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_20.xy, tmpvar_20.zw);
  detail_6 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_5 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (tex_22 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_43.w, mix (clamp (((_FadeScale * sqrt(dot (p_44, p_44))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_11.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_11.xyz = (tmpvar_43.xyz * tmpvar_52);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 370
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 470
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 463
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 369
uniform highp mat4 _LightMatrix0;
#line 380
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 393
#line 401
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 448
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 452
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 456
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 460
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 484
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 484
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 488
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 492
    o.viewDist = distance( vertexPos, vec4( _WorldSpaceCameraPos, 0.0));
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = vec3( (-(_World2Planet * v.vertex)));
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 496
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp float xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = float(xl_retval.viewDist);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 370
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 470
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 463
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 369
uniform highp mat4 _LightMatrix0;
#line 380
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 393
#line 401
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 448
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 452
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 456
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 460
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 484
#line 315
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 319
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 324
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 328
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 341
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, uvOffset);
    #line 345
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 498
lowp vec4 frag( in v2f IN ) {
    #line 500
    mediump vec4 color;
    highp vec3 objNrm = normalize(IN.objNormal);
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 504
    uv.y = (0.31831 * acos(objNrm.y));
    uv += _MainOffset.xy;
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, IN.objNormal, _MainOffset.xy);
    #line 508
    objNrm = abs(objNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    #line 512
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 516
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 520
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 524
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 528
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp float xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDist = float(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _World2Planet;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  vec4 p_7;
  p_7 = (tmpvar_4 - tmpvar_6);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = sqrt(dot (p_7, p_7));
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = -((_World2Planet * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _DetailOffset;
uniform vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = (uv_1 + _MainOffset.xy);
  uv_1 = tmpvar_8;
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(tmpvar_8.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(tmpvar_8.y);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = (uv_13 + _MainOffset.xy);
  uv_13 = tmpvar_18;
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_3);
  float tmpvar_23;
  tmpvar_23 = clamp (floor(((1.0 + tmpvar_22.x) - tmpvar_22.z)), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = mix (mix (tmpvar_22.zxy, tmpvar_22, vec3(tmpvar_23)), tmpvar_22.yxz, vec3(clamp (floor(((1.0 + tmpvar_22.y) - mix (tmpvar_22.z, tmpvar_22.x, tmpvar_23))), 0.0, 1.0)));
  vec4 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_MainTex, tmpvar_18, tmpvar_21.xy, tmpvar_21.zw) * mix (texture2DGradARB (_DetailTex, ((((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_11.xy, tmpvar_11.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0))));
  vec3 p_26;
  p_26 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix (clamp (((_FadeScale * sqrt(dot (p_26, p_26))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_27, p_27)) - (_RimDistSub * sqrt(dot (p_28, p_28))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_World2Planet]
"vs_3_0
; 25 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
add r2.xyz, -r0, c12
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mov o1.xyz, r0
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r3.xyz, r0, -r1
dp3 r1.w, r3, r3
rsq r1.w, r1.w
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mul o4.xyz, r1.w, r3
mul o6.xyz, r0.w, r2
mov o2.xyz, r1
rcp o3.x, r0.w
mov o5.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 288 // 272 used size, 18 vars
Matrix 208 [_World2Planet] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 27 instructions, 2 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecednoopdnfbbhnkladjmkpifjdedcpoaeaoabaaaaaakeafaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaiahaaaaaeabaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaahaaaaaa
ahapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcoiadaaaaeaaaabaa
pkaaaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
iccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaaficcabaaaabaaaaaadkaabaaa
aaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
acaaaaaaegiccaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaaaaaaaaa
aoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaaagbabaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaa
apaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaaaaaaaaabaaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaag
hccabaaaaeaaaaaaegacbaiaebaaaaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  highp vec4 p_7;
  p_7 = (tmpvar_4 - tmpvar_6);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = sqrt(dot (p_7, p_7));
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = (uv_10 + _MainOffset.xy);
  uv_10 = tmpvar_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  highp vec2 uvOffset_21;
  uvOffset_21 = _MainOffset.xy;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = (uv_24 + uvOffset_21);
  uv_24 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw);
  tex_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_12);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_8, tmpvar_34.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_8.x);
  highp vec2 coord_40;
  coord_40 = ((((0.5 * detailCoords_8.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_20.xy, tmpvar_20.zw);
  detail_6 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_5 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (tex_22 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_43.w, mix (clamp (((_FadeScale * sqrt(dot (p_44, p_44))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_11.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_11.xyz = (tmpvar_43.xyz * tmpvar_52);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  highp vec4 p_7;
  p_7 = (tmpvar_4 - tmpvar_6);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = sqrt(dot (p_7, p_7));
  xlv_TEXCOORD3 = normalize((tmpvar_4.xyz - tmpvar_5));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 detail_6;
  mediump float nylerp_7;
  mediump vec3 detailCoords_8;
  mediump float zxlerp_9;
  highp vec2 uv_10;
  mediump vec4 color_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  highp float r_13;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_12.x / tmpvar_12.z);
    float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_13));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = (uv_10 + _MainOffset.xy);
  uv_10 = tmpvar_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_12.xz);
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_12.xz);
  highp vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  highp vec2 uvOffset_21;
  uvOffset_21 = _MainOffset.xy;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = (uv_24 + uvOffset_21);
  uv_24 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw);
  tex_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_12);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_9 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_9));
  detailCoords_8 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_9))), 0.0, 1.0);
  nylerp_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_8, tmpvar_34.yxz, vec3(nylerp_7));
  detailCoords_8 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_8.x);
  highp vec2 coord_40;
  coord_40 = ((((0.5 * detailCoords_8.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_20.xy, tmpvar_20.zw);
  detail_6 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_5 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (tex_22 * mix (detail_6, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_43.w, mix (clamp (((_FadeScale * sqrt(dot (p_44, p_44))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_11.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD3, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_11.xyz = (tmpvar_43.xyz * tmpvar_52);
  tmpvar_1 = color_11;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 371
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 471
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 464
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 369
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 381
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 394
#line 402
#line 416
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 449
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 453
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 457
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 461
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 485
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 485
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 489
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 493
    o.viewDist = distance( vertexPos, vec4( _WorldSpaceCameraPos, 0.0));
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = vec3( (-(_World2Planet * v.vertex)));
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 497
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp float xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = float(xl_retval.viewDist);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 371
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 471
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 464
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 369
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 381
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 394
#line 402
#line 416
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 449
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 453
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 457
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 461
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 485
#line 315
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 319
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 324
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 328
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 341
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, uvOffset);
    #line 345
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 499
lowp vec4 frag( in v2f IN ) {
    #line 501
    mediump vec4 color;
    highp vec3 objNrm = normalize(IN.objNormal);
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 505
    uv.y = (0.31831 * acos(objNrm.y));
    uv += _MainOffset.xy;
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, IN.objNormal, _MainOffset.xy);
    #line 509
    objNrm = abs(objNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    #line 513
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 517
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 521
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 525
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 529
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp float xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDist = float(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _World2Planet;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  vec4 o_7;
  vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _DetailOffset;
uniform vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = (uv_1 + _MainOffset.xy);
  uv_1 = tmpvar_8;
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(tmpvar_8.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(tmpvar_8.y);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = (uv_13 + _MainOffset.xy);
  uv_13 = tmpvar_18;
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_3);
  float tmpvar_23;
  tmpvar_23 = clamp (floor(((1.0 + tmpvar_22.x) - tmpvar_22.z)), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = mix (mix (tmpvar_22.zxy, tmpvar_22, vec3(tmpvar_23)), tmpvar_22.yxz, vec3(clamp (floor(((1.0 + tmpvar_22.y) - mix (tmpvar_22.z, tmpvar_22.x, tmpvar_23))), 0.0, 1.0)));
  vec4 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_MainTex, tmpvar_18, tmpvar_21.xy, tmpvar_21.zw) * mix (texture2DGradARB (_DetailTex, ((((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_11.xy, tmpvar_11.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0))));
  vec3 p_26;
  p_26 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix (clamp (((_FadeScale * sqrt(dot (p_26, p_26))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_27, p_27)) - (_RimDistSub * sqrt(dot (p_28, p_28))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_ProjectionParams]
Vector 22 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_World2Planet]
"vs_3_0
; 38 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c23, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r2, -r0
mov o2.xyz, r0
dp3 r1.x, r3, r3
rsq r1.z, r1.x
mul o4.xyz, r1.z, r3
add r3.xyz, -r2, c20
dp3 r2.w, r3, r3
rsq r2.w, r2.w
mov r1.w, r0
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
mul r4.xyz, r1.xyww, c23.x
dp4 r1.z, v0, c6
mov o0, r1
mul r4.y, r4, c21.x
mov r1.xyz, r2
dp4 r1.w, v0, c11
dp4 o7.z, r1, c14
dp4 o7.y, r1, c13
dp4 o7.x, r1, c12
dp4 r1.x, v0, c2
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
mad o8.xy, r4.z, c22.zwzw, r4
mul o6.xyz, r2.w, r3
mov o1.xyz, r2
rcp o3.x, r2.w
mov o5.xyz, -r0
mov o8.z, -r1.x
mov o8.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 288 // 272 used size, 18 vars
Matrix 16 [_LightMatrix0] 4
Matrix 208 [_World2Planet] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 45 instructions, 3 temp regs, 0 temp arrays:
// ALU 40 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkicplccjckcjenimlealngjkobpfpjhdabaaaaaabaaiaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaiahaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaahaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
gmagaaaaeaaaabaajlabaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadiccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaad
hccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
gfaaaaadhccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
acaaaaaaelaaaaaficcabaaaabaaaaaackaabaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaa
apaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
hccabaaaadaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaaihcaabaaa
acaaaaaafgbfbaaaaaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaaaaaaaaaanaaaaaaagbabaaaaaaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaapaaaaaakgbkbaaaaaaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaabaaaaaaa
pgbpbaaaaaaaaaaaegacbaaaacaaaaaadgaaaaaghccabaaaaeaaaaaaegacbaia
ebaaaaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaa
afaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaa
fgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaa
egiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
abaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaaaaaaaaaadaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaak
hccabaaaagaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaa
afaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaaahaaaaaadkaabaaaaaaaaaaa
aaaaaaahdccabaaaahaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaai
bcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaacaaaaaaafaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaacaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaagaaaaaackbabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaa
ahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaahaaaaaa
akaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD4);
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = (uv_11 + _MainOffset.xy);
  uv_11 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  highp vec2 uvOffset_22;
  uvOffset_22 = _MainOffset.xy;
  mediump vec4 tex_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_25 + uvOffset_22);
  uv_25 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  tex_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_13);
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_35.x) - tmpvar_35.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_35.zxy, tmpvar_35, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_35.y) - mix (tmpvar_35.z, tmpvar_35.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (detailCoords_9, tmpvar_35.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_9.x);
  highp vec2 coord_41;
  coord_41 = ((((0.5 * detailCoords_9.zy) / tmpvar_40) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_21.xy, tmpvar_21.zw);
  detail_7 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_6 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tex_23 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_44.w, mix (clamp (((_FadeScale * sqrt(dot (p_45, p_45))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_12.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_12.xyz = (tmpvar_44.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_12.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_56;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD4);
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = (uv_11 + _MainOffset.xy);
  uv_11 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  highp vec2 uvOffset_22;
  uvOffset_22 = _MainOffset.xy;
  mediump vec4 tex_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_25 + uvOffset_22);
  uv_25 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  tex_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_13);
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_35.x) - tmpvar_35.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_35.zxy, tmpvar_35, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_35.y) - mix (tmpvar_35.z, tmpvar_35.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (detailCoords_9, tmpvar_35.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_9.x);
  highp vec2 coord_41;
  coord_41 = ((((0.5 * detailCoords_9.zy) / tmpvar_40) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_21.xy, tmpvar_21.zw);
  detail_7 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_6 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tex_23 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_44.w, mix (clamp (((_FadeScale * sqrt(dot (p_45, p_45))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_12.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_12.xyz = (tmpvar_44.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_12.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_56;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 351
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 451
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 444
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 361
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 374
#line 382
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 429
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 433
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 437
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 441
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 464
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 464
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 468
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 472
    o.viewDist = distance( vertexPos, vec4( _WorldSpaceCameraPos, 0.0));
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = vec3( (-(_World2Planet * v.vertex)));
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 476
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 480
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp float xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = float(xl_retval.viewDist);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 351
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 451
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 444
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 361
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 374
#line 382
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 429
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 433
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 437
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 441
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 464
#line 315
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 319
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 324
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 328
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 341
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, uvOffset);
    #line 345
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 482
lowp vec4 frag( in v2f IN ) {
    #line 484
    mediump vec4 color;
    highp vec3 objNrm = normalize(IN.objNormal);
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 488
    uv.y = (0.31831 * acos(objNrm.y));
    uv += _MainOffset.xy;
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, IN.objNormal, _MainOffset.xy);
    #line 492
    objNrm = abs(objNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    #line 496
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 500
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 504
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 508
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 512
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 516
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp float xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDist = float(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _World2Planet;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  vec4 o_7;
  vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _DetailOffset;
uniform vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = (uv_1 + _MainOffset.xy);
  uv_1 = tmpvar_8;
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(tmpvar_8.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(tmpvar_8.y);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = (uv_13 + _MainOffset.xy);
  uv_13 = tmpvar_18;
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_3);
  float tmpvar_23;
  tmpvar_23 = clamp (floor(((1.0 + tmpvar_22.x) - tmpvar_22.z)), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = mix (mix (tmpvar_22.zxy, tmpvar_22, vec3(tmpvar_23)), tmpvar_22.yxz, vec3(clamp (floor(((1.0 + tmpvar_22.y) - mix (tmpvar_22.z, tmpvar_22.x, tmpvar_23))), 0.0, 1.0)));
  vec4 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_MainTex, tmpvar_18, tmpvar_21.xy, tmpvar_21.zw) * mix (texture2DGradARB (_DetailTex, ((((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_11.xy, tmpvar_11.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0))));
  vec3 p_26;
  p_26 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix (clamp (((_FadeScale * sqrt(dot (p_26, p_26))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_27, p_27)) - (_RimDistSub * sqrt(dot (p_28, p_28))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_ProjectionParams]
Vector 18 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_World2Planet]
"vs_3_0
; 33 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord8 o7
def c19, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r2, -r0
mov o2.xyz, r0
dp3 r1.x, r3, r3
rsq r1.z, r1.x
mul o4.xyz, r1.z, r3
add r3.xyz, -r2, c16
dp3 r2.w, r3, r3
rsq r2.w, r2.w
dp4 r1.x, v0, c4
mov r1.w, r0
dp4 r1.y, v0, c5
mul r4.xyz, r1.xyww, c19.x
mul r4.y, r4, c17.x
dp4 r1.z, v0, c6
mov o0, r1
dp4 r1.x, v0, c2
dp4 r0.z, v0, c14
dp4 r0.x, v0, c12
dp4 r0.y, v0, c13
mad o7.xy, r4.z, c18.zwzw, r4
mul o6.xyz, r2.w, r3
mov o1.xyz, r2
rcp o3.x, r2.w
mov o5.xyz, -r0
mov o7.z, -r1.x
mov o7.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 224 // 208 used size, 17 vars
Matrix 144 [_World2Planet] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 37 instructions, 3 temp regs, 0 temp arrays:
// ALU 32 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedpajknckgfeeknfglclnflkglephekpbdabaaaaaalmagaaaaadaaaaaa
cmaaaaaajmaaaaaaieabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaiahaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaaiaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcdaafaaaaeaaaabaaemabaaaafjaaaaaeegiocaaaaaaaaaaa
anaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadiccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
hccabaaaafaaaaaagfaaaaadpccabaaaagaaaaaagiaaaaacadaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaa
aaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaaficcabaaaabaaaaaackaabaaaaaaaaaaadgaaaaafhccabaaaabaaaaaa
egacbaaaabaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaa
aaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaa
apaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaa
abaaaaaaaeaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
acaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaa
adaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaaihcaabaaaacaaaaaa
fgbfbaaaaaaaaaaaegiccaaaaaaaaaaaakaaaaaadcaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaaajaaaaaaagbabaaaaaaaaaaaegacbaaaacaaaaaadcaaaaak
hcaabaaaacaaaaaaegiccaaaaaaaaaaaalaaaaaakgbkbaaaaaaaaaaaegacbaaa
acaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaamaaaaaapgbpbaaa
aaaaaaaaegacbaaaacaaaaaadgaaaaaghccabaaaaeaaaaaaegacbaiaebaaaaaa
acaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaa
eeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaa
kgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaa
aaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaa
agaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaagaaaaaakgakbaaaabaaaaaa
mgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaa
acaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaaeaaaaaa
akbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaacaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaa
dgaaaaageccabaaaagaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD4);
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = (uv_11 + _MainOffset.xy);
  uv_11 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  highp vec2 uvOffset_22;
  uvOffset_22 = _MainOffset.xy;
  mediump vec4 tex_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_25 + uvOffset_22);
  uv_25 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  tex_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_13);
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_35.x) - tmpvar_35.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_35.zxy, tmpvar_35, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_35.y) - mix (tmpvar_35.z, tmpvar_35.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (detailCoords_9, tmpvar_35.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_9.x);
  highp vec2 coord_41;
  coord_41 = ((((0.5 * detailCoords_9.zy) / tmpvar_40) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_21.xy, tmpvar_21.zw);
  detail_7 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_6 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tex_23 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_44.w, mix (clamp (((_FadeScale * sqrt(dot (p_45, p_45))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_12.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  lowp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_12.xyz = (tmpvar_44.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_12.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_56;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD4);
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = (uv_11 + _MainOffset.xy);
  uv_11 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  highp vec2 uvOffset_22;
  uvOffset_22 = _MainOffset.xy;
  mediump vec4 tex_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_25 + uvOffset_22);
  uv_25 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  tex_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_13);
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_35.x) - tmpvar_35.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_35.zxy, tmpvar_35, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_35.y) - mix (tmpvar_35.z, tmpvar_35.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (detailCoords_9, tmpvar_35.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_9.x);
  highp vec2 coord_41;
  coord_41 = ((((0.5 * detailCoords_9.zy) / tmpvar_40) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_21.xy, tmpvar_21.zw);
  detail_7 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_6 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tex_23 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_44.w, mix (clamp (((_FadeScale * sqrt(dot (p_45, p_45))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_12.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  lowp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_12.xyz = (tmpvar_44.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_12.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_56;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 349
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 449
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec4 projPos;
};
#line 442
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 359
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 372
#line 380
#line 394
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 427
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 431
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 435
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 439
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 461
#line 478
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 461
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 465
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 469
    o.viewDist = distance( vertexPos, vec4( _WorldSpaceCameraPos, 0.0));
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = vec3( (-(_World2Planet * v.vertex)));
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 473
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp float xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = float(xl_retval.viewDist);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 349
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 449
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec4 projPos;
};
#line 442
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 359
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 372
#line 380
#line 394
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 427
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 431
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 435
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 439
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 461
#line 478
#line 315
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 319
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 324
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 328
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 341
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, uvOffset);
    #line 345
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 478
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 objNrm = normalize(IN.objNormal);
    #line 482
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    uv.y = (0.31831 * acos(objNrm.y));
    uv += _MainOffset.xy;
    #line 486
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, IN.objNormal, _MainOffset.xy);
    objNrm = abs(objNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    #line 490
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    #line 494
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 498
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 502
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 506
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    #line 510
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    #line 514
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp float xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDist = float(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _World2Planet;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  vec4 o_7;
  vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _DetailOffset;
uniform vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = (uv_1 + _MainOffset.xy);
  uv_1 = tmpvar_8;
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(tmpvar_8.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(tmpvar_8.y);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = (uv_13 + _MainOffset.xy);
  uv_13 = tmpvar_18;
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_3);
  float tmpvar_23;
  tmpvar_23 = clamp (floor(((1.0 + tmpvar_22.x) - tmpvar_22.z)), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = mix (mix (tmpvar_22.zxy, tmpvar_22, vec3(tmpvar_23)), tmpvar_22.yxz, vec3(clamp (floor(((1.0 + tmpvar_22.y) - mix (tmpvar_22.z, tmpvar_22.x, tmpvar_23))), 0.0, 1.0)));
  vec4 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_MainTex, tmpvar_18, tmpvar_21.xy, tmpvar_21.zw) * mix (texture2DGradARB (_DetailTex, ((((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_11.xy, tmpvar_11.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0))));
  vec3 p_26;
  p_26 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix (clamp (((_FadeScale * sqrt(dot (p_26, p_26))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_27, p_27)) - (_RimDistSub * sqrt(dot (p_28, p_28))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_ProjectionParams]
Vector 22 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_World2Planet]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c23, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r2, -r0
mov o2.xyz, r0
dp3 r1.x, r3, r3
rsq r1.z, r1.x
mul o4.xyz, r1.z, r3
add r3.xyz, -r2, c20
dp3 r2.w, r3, r3
rsq r2.w, r2.w
mov r1.w, r0
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
mul r4.xyz, r1.xyww, c23.x
dp4 r1.z, v0, c6
mov o0, r1
mul r4.y, r4, c21.x
mov r1.xyz, r2
dp4 r1.w, v0, c11
dp4 o7.w, r1, c15
dp4 o7.z, r1, c14
dp4 o7.y, r1, c13
dp4 o7.x, r1, c12
dp4 r1.x, v0, c2
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
mad o8.xy, r4.z, c22.zwzw, r4
mul o6.xyz, r2.w, r3
mov o1.xyz, r2
rcp o3.x, r2.w
mov o5.xyz, -r0
mov o8.z, -r1.x
mov o8.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 288 // 272 used size, 18 vars
Matrix 16 [_LightMatrix0] 4
Matrix 208 [_World2Planet] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 45 instructions, 3 temp regs, 0 temp arrays:
// ALU 40 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedpcnmbidngjjdddnfoddjodeljhdcfiepabaaaaaabaaiaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaiahaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapaaaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaahaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
gmagaaaaeaaaabaajlabaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadiccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaad
hccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
gfaaaaadpccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
acaaaaaaelaaaaaficcabaaaabaaaaaackaabaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaa
apaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
hccabaaaadaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaaihcaabaaa
acaaaaaafgbfbaaaaaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaaaaaaaaaanaaaaaaagbabaaaaaaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaapaaaaaakgbkbaaaaaaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaabaaaaaaa
pgbpbaaaaaaaaaaaegacbaaaacaaaaaadgaaaaaghccabaaaaeaaaaaaegacbaia
ebaaaaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaa
afaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaa
fgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaacaaaaaafgafbaaaabaaaaaa
egiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
abaaaaaaagaabaaaabaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaadaaaaaakgakbaaaabaaaaaaegaobaaaacaaaaaadcaaaaak
pccabaaaagaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaaegaobaaa
acaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaa
afaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaaahaaaaaadkaabaaaaaaaaaaa
aaaaaaahdccabaaaahaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaai
bcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaacaaaaaaafaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaacaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaagaaaaaackbabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaa
ahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaahaaaaaa
akaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD4);
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = (uv_11 + _MainOffset.xy);
  uv_11 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  highp vec2 uvOffset_22;
  uvOffset_22 = _MainOffset.xy;
  mediump vec4 tex_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_25 + uvOffset_22);
  uv_25 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  tex_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_13);
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_35.x) - tmpvar_35.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_35.zxy, tmpvar_35, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_35.y) - mix (tmpvar_35.z, tmpvar_35.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (detailCoords_9, tmpvar_35.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_9.x);
  highp vec2 coord_41;
  coord_41 = ((((0.5 * detailCoords_9.zy) / tmpvar_40) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_21.xy, tmpvar_21.zw);
  detail_7 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_6 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tex_23 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_44.w, mix (clamp (((_FadeScale * sqrt(dot (p_45, p_45))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_12.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_12.xyz = (tmpvar_44.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_12.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_56;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD4);
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = (uv_11 + _MainOffset.xy);
  uv_11 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  highp vec2 uvOffset_22;
  uvOffset_22 = _MainOffset.xy;
  mediump vec4 tex_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_25 + uvOffset_22);
  uv_25 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  tex_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_13);
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_35.x) - tmpvar_35.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_35.zxy, tmpvar_35, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_35.y) - mix (tmpvar_35.z, tmpvar_35.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (detailCoords_9, tmpvar_35.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_9.x);
  highp vec2 coord_41;
  coord_41 = ((((0.5 * detailCoords_9.zy) / tmpvar_40) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_21.xy, tmpvar_21.zw);
  detail_7 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_6 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tex_23 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_44.w, mix (clamp (((_FadeScale * sqrt(dot (p_45, p_45))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_12.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_12.xyz = (tmpvar_44.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_12.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_56;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 360
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 460
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 projPos;
};
#line 453
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 370
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 383
#line 391
#line 405
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 438
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 442
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 446
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 450
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 473
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 473
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 477
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 481
    o.viewDist = distance( vertexPos, vec4( _WorldSpaceCameraPos, 0.0));
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = vec3( (-(_World2Planet * v.vertex)));
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 485
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 489
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp float xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = float(xl_retval.viewDist);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 360
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 460
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 projPos;
};
#line 453
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 370
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 383
#line 391
#line 405
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 438
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 442
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 446
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 450
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 473
#line 315
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 319
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 324
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 328
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 341
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, uvOffset);
    #line 345
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 491
lowp vec4 frag( in v2f IN ) {
    #line 493
    mediump vec4 color;
    highp vec3 objNrm = normalize(IN.objNormal);
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 497
    uv.y = (0.31831 * acos(objNrm.y));
    uv += _MainOffset.xy;
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, IN.objNormal, _MainOffset.xy);
    #line 501
    objNrm = abs(objNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    #line 505
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 509
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 513
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 517
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 521
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 525
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp float xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDist = float(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _World2Planet;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  vec4 o_7;
  vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _DetailOffset;
uniform vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = (uv_1 + _MainOffset.xy);
  uv_1 = tmpvar_8;
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(tmpvar_8.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(tmpvar_8.y);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = (uv_13 + _MainOffset.xy);
  uv_13 = tmpvar_18;
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_3);
  float tmpvar_23;
  tmpvar_23 = clamp (floor(((1.0 + tmpvar_22.x) - tmpvar_22.z)), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = mix (mix (tmpvar_22.zxy, tmpvar_22, vec3(tmpvar_23)), tmpvar_22.yxz, vec3(clamp (floor(((1.0 + tmpvar_22.y) - mix (tmpvar_22.z, tmpvar_22.x, tmpvar_23))), 0.0, 1.0)));
  vec4 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_MainTex, tmpvar_18, tmpvar_21.xy, tmpvar_21.zw) * mix (texture2DGradARB (_DetailTex, ((((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_11.xy, tmpvar_11.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0))));
  vec3 p_26;
  p_26 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix (clamp (((_FadeScale * sqrt(dot (p_26, p_26))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_27, p_27)) - (_RimDistSub * sqrt(dot (p_28, p_28))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_ProjectionParams]
Vector 22 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_World2Planet]
"vs_3_0
; 38 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c23, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r2, -r0
mov o2.xyz, r0
dp3 r1.x, r3, r3
rsq r1.z, r1.x
mul o4.xyz, r1.z, r3
add r3.xyz, -r2, c20
dp3 r2.w, r3, r3
rsq r2.w, r2.w
mov r1.w, r0
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
mul r4.xyz, r1.xyww, c23.x
dp4 r1.z, v0, c6
mov o0, r1
mul r4.y, r4, c21.x
mov r1.xyz, r2
dp4 r1.w, v0, c11
dp4 o7.z, r1, c14
dp4 o7.y, r1, c13
dp4 o7.x, r1, c12
dp4 r1.x, v0, c2
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
mad o8.xy, r4.z, c22.zwzw, r4
mul o6.xyz, r2.w, r3
mov o1.xyz, r2
rcp o3.x, r2.w
mov o5.xyz, -r0
mov o8.z, -r1.x
mov o8.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 288 // 272 used size, 18 vars
Matrix 16 [_LightMatrix0] 4
Matrix 208 [_World2Planet] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 45 instructions, 3 temp regs, 0 temp arrays:
// ALU 40 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkicplccjckcjenimlealngjkobpfpjhdabaaaaaabaaiaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaiahaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaahaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
gmagaaaaeaaaabaajlabaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadiccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaad
hccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
gfaaaaadhccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
acaaaaaaelaaaaaficcabaaaabaaaaaackaabaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaa
apaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
hccabaaaadaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaaihcaabaaa
acaaaaaafgbfbaaaaaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaaaaaaaaaanaaaaaaagbabaaaaaaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaapaaaaaakgbkbaaaaaaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaabaaaaaaa
pgbpbaaaaaaaaaaaegacbaaaacaaaaaadgaaaaaghccabaaaaeaaaaaaegacbaia
ebaaaaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaa
afaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaa
fgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaa
egiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
abaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaaaaaaaaaadaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaak
hccabaaaagaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaa
afaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaaahaaaaaadkaabaaaaaaaaaaa
aaaaaaahdccabaaaahaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaai
bcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaacaaaaaaafaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaacaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaagaaaaaackbabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaa
ahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaahaaaaaa
akaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD4);
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = (uv_11 + _MainOffset.xy);
  uv_11 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  highp vec2 uvOffset_22;
  uvOffset_22 = _MainOffset.xy;
  mediump vec4 tex_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_25 + uvOffset_22);
  uv_25 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  tex_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_13);
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_35.x) - tmpvar_35.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_35.zxy, tmpvar_35, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_35.y) - mix (tmpvar_35.z, tmpvar_35.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (detailCoords_9, tmpvar_35.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_9.x);
  highp vec2 coord_41;
  coord_41 = ((((0.5 * detailCoords_9.zy) / tmpvar_40) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_21.xy, tmpvar_21.zw);
  detail_7 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_6 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tex_23 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_44.w, mix (clamp (((_FadeScale * sqrt(dot (p_45, p_45))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_12.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_12.xyz = (tmpvar_44.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_12.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_56;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD4);
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = (uv_11 + _MainOffset.xy);
  uv_11 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  highp vec2 uvOffset_22;
  uvOffset_22 = _MainOffset.xy;
  mediump vec4 tex_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_25 + uvOffset_22);
  uv_25 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  tex_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_13);
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_35.x) - tmpvar_35.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_35.zxy, tmpvar_35, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_35.y) - mix (tmpvar_35.z, tmpvar_35.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (detailCoords_9, tmpvar_35.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_9.x);
  highp vec2 coord_41;
  coord_41 = ((((0.5 * detailCoords_9.zy) / tmpvar_40) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_21.xy, tmpvar_21.zw);
  detail_7 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_6 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tex_23 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_44.w, mix (clamp (((_FadeScale * sqrt(dot (p_45, p_45))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_12.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_12.xyz = (tmpvar_44.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_12.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_56;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 352
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 452
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 445
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 362
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 375
#line 383
#line 397
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 430
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 434
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 438
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 442
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 465
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 465
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 469
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 473
    o.viewDist = distance( vertexPos, vec4( _WorldSpaceCameraPos, 0.0));
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = vec3( (-(_World2Planet * v.vertex)));
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 477
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 481
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp float xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = float(xl_retval.viewDist);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 352
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 452
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 445
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 362
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 375
#line 383
#line 397
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 430
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 434
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 438
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 442
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 465
#line 315
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 319
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 324
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 328
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 341
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, uvOffset);
    #line 345
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 483
lowp vec4 frag( in v2f IN ) {
    #line 485
    mediump vec4 color;
    highp vec3 objNrm = normalize(IN.objNormal);
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 489
    uv.y = (0.31831 * acos(objNrm.y));
    uv += _MainOffset.xy;
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, IN.objNormal, _MainOffset.xy);
    #line 493
    objNrm = abs(objNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    #line 497
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 501
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 505
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 509
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 513
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 517
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp float xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDist = float(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _World2Planet;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  vec4 o_7;
  vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _DetailOffset;
uniform vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = (uv_1 + _MainOffset.xy);
  uv_1 = tmpvar_8;
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(tmpvar_8.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(tmpvar_8.y);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = (uv_13 + _MainOffset.xy);
  uv_13 = tmpvar_18;
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_3);
  float tmpvar_23;
  tmpvar_23 = clamp (floor(((1.0 + tmpvar_22.x) - tmpvar_22.z)), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = mix (mix (tmpvar_22.zxy, tmpvar_22, vec3(tmpvar_23)), tmpvar_22.yxz, vec3(clamp (floor(((1.0 + tmpvar_22.y) - mix (tmpvar_22.z, tmpvar_22.x, tmpvar_23))), 0.0, 1.0)));
  vec4 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_MainTex, tmpvar_18, tmpvar_21.xy, tmpvar_21.zw) * mix (texture2DGradARB (_DetailTex, ((((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_11.xy, tmpvar_11.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0))));
  vec3 p_26;
  p_26 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix (clamp (((_FadeScale * sqrt(dot (p_26, p_26))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_27, p_27)) - (_RimDistSub * sqrt(dot (p_28, p_28))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_ProjectionParams]
Vector 22 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_World2Planet]
"vs_3_0
; 37 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c23, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r2, -r0
mov o2.xyz, r0
dp3 r1.x, r3, r3
rsq r1.z, r1.x
mul o4.xyz, r1.z, r3
add r3.xyz, -r2, c20
dp3 r2.w, r3, r3
rsq r2.w, r2.w
mov r1.w, r0
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
mul r4.xyz, r1.xyww, c23.x
dp4 r1.z, v0, c6
mov o0, r1
mul r4.y, r4, c21.x
mov r1.xyz, r2
dp4 r1.w, v0, c11
dp4 o7.y, r1, c13
dp4 o7.x, r1, c12
dp4 r1.x, v0, c2
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
mad o8.xy, r4.z, c22.zwzw, r4
mul o6.xyz, r2.w, r3
mov o1.xyz, r2
rcp o3.x, r2.w
mov o5.xyz, -r0
mov o8.z, -r1.x
mov o8.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 288 // 272 used size, 18 vars
Matrix 16 [_LightMatrix0] 4
Matrix 208 [_World2Planet] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 45 instructions, 3 temp regs, 0 temp arrays:
// ALU 40 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedikhadacdoagekmpcfkfbbnccnlkbgfbmabaaaaaabaaiaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaiahaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaadamaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaahaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
gmagaaaaeaaaabaajlabaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadiccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaad
hccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
gfaaaaaddccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
acaaaaaaelaaaaaficcabaaaabaaaaaackaabaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaa
apaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
hccabaaaadaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaaihcaabaaa
acaaaaaafgbfbaaaaaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaaaaaaaaaanaaaaaaagbabaaaaaaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaapaaaaaakgbkbaaaaaaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaabaaaaaaa
pgbpbaaaaaaaaaaaegacbaaaacaaaaaadgaaaaaghccabaaaaeaaaaaaegacbaia
ebaaaaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaa
afaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaa
fgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaidcaabaaaacaaaaaafgafbaaaabaaaaaa
egiacaaaaaaaaaaaacaaaaaadcaaaaakdcaabaaaabaaaaaaegiacaaaaaaaaaaa
abaaaaaaagaabaaaabaaaaaaegaabaaaacaaaaaadcaaaaakdcaabaaaabaaaaaa
egiacaaaaaaaaaaaadaaaaaakgakbaaaabaaaaaaegaabaaaabaaaaaadcaaaaak
dccabaaaagaaaaaaegiacaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaaegaabaaa
abaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaa
afaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaaahaaaaaadkaabaaaaaaaaaaa
aaaaaaahdccabaaaahaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaai
bcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaacaaaaaaafaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaacaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaagaaaaaackbabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaa
ahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaahaaaaaa
akaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD4);
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = (uv_11 + _MainOffset.xy);
  uv_11 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  highp vec2 uvOffset_22;
  uvOffset_22 = _MainOffset.xy;
  mediump vec4 tex_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_25 + uvOffset_22);
  uv_25 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  tex_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_13);
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_35.x) - tmpvar_35.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_35.zxy, tmpvar_35, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_35.y) - mix (tmpvar_35.z, tmpvar_35.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (detailCoords_9, tmpvar_35.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_9.x);
  highp vec2 coord_41;
  coord_41 = ((((0.5 * detailCoords_9.zy) / tmpvar_40) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_21.xy, tmpvar_21.zw);
  detail_7 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_6 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tex_23 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_44.w, mix (clamp (((_FadeScale * sqrt(dot (p_45, p_45))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_12.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  lowp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_12.xyz = (tmpvar_44.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_12.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_56;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD4);
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = (uv_11 + _MainOffset.xy);
  uv_11 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  highp vec2 uvOffset_22;
  uvOffset_22 = _MainOffset.xy;
  mediump vec4 tex_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_25 + uvOffset_22);
  uv_25 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  tex_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_13);
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_35.x) - tmpvar_35.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_35.zxy, tmpvar_35, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_35.y) - mix (tmpvar_35.z, tmpvar_35.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (detailCoords_9, tmpvar_35.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_9.x);
  highp vec2 coord_41;
  coord_41 = ((((0.5 * detailCoords_9.zy) / tmpvar_40) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_21.xy, tmpvar_21.zw);
  detail_7 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_6 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tex_23 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_44.w, mix (clamp (((_FadeScale * sqrt(dot (p_45, p_45))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_12.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  lowp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_12.xyz = (tmpvar_44.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_12.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_56;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 351
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 451
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 projPos;
};
#line 444
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 361
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 374
#line 382
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 429
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 433
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 437
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 441
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 464
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 464
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 468
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 472
    o.viewDist = distance( vertexPos, vec4( _WorldSpaceCameraPos, 0.0));
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = vec3( (-(_World2Planet * v.vertex)));
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 476
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 480
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp float xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = float(xl_retval.viewDist);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 351
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 451
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 projPos;
};
#line 444
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 361
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 374
#line 382
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 429
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 433
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 437
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 441
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 464
#line 315
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 319
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 324
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 328
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 341
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, uvOffset);
    #line 345
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 482
lowp vec4 frag( in v2f IN ) {
    #line 484
    mediump vec4 color;
    highp vec3 objNrm = normalize(IN.objNormal);
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 488
    uv.y = (0.31831 * acos(objNrm.y));
    uv += _MainOffset.xy;
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, IN.objNormal, _MainOffset.xy);
    #line 492
    objNrm = abs(objNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    #line 496
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 500
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 504
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 508
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 512
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 516
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp float xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDist = float(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _World2Planet;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform mat4 unity_World2Shadow[4];
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  vec4 o_7;
  vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _DetailOffset;
uniform vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = (uv_1 + _MainOffset.xy);
  uv_1 = tmpvar_8;
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(tmpvar_8.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(tmpvar_8.y);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = (uv_13 + _MainOffset.xy);
  uv_13 = tmpvar_18;
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_3);
  float tmpvar_23;
  tmpvar_23 = clamp (floor(((1.0 + tmpvar_22.x) - tmpvar_22.z)), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = mix (mix (tmpvar_22.zxy, tmpvar_22, vec3(tmpvar_23)), tmpvar_22.yxz, vec3(clamp (floor(((1.0 + tmpvar_22.y) - mix (tmpvar_22.z, tmpvar_22.x, tmpvar_23))), 0.0, 1.0)));
  vec4 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_MainTex, tmpvar_18, tmpvar_21.xy, tmpvar_21.zw) * mix (texture2DGradARB (_DetailTex, ((((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_11.xy, tmpvar_11.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0))));
  vec3 p_26;
  p_26 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix (clamp (((_FadeScale * sqrt(dot (p_26, p_26))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_27, p_27)) - (_RimDistSub * sqrt(dot (p_28, p_28))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [_LightMatrix0]
Matrix 20 [_World2Planet]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c27, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c14
dp4 r2.y, v0, c13
dp4 r2.x, v0, c12
mov r0.z, c14.w
mov r0.x, c12.w
mov r0.y, c13.w
add r3.xyz, r2, -r0
mov o2.xyz, r0
dp3 r1.x, r3, r3
rsq r1.z, r1.x
mul o4.xyz, r1.z, r3
add r3.xyz, -r2, c24
dp3 r2.w, r3, r3
rsq r2.w, r2.w
mov r1.w, r0
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
mul r4.xyz, r1.xyww, c27.x
dp4 r1.z, v0, c6
mov o0, r1
mul r4.y, r4, c25.x
mov r1.xyz, r2
dp4 r1.w, v0, c15
dp4 o7.w, r1, c19
dp4 o7.z, r1, c18
dp4 o7.y, r1, c17
dp4 o7.x, r1, c16
dp4 o8.w, r1, c11
dp4 o8.z, r1, c10
dp4 o8.y, r1, c9
dp4 o8.x, r1, c8
dp4 r1.x, v0, c2
dp4 r0.z, v0, c22
dp4 r0.x, v0, c20
dp4 r0.y, v0, c21
mad o9.xy, r4.z, c26.zwzw, r4
mul o6.xyz, r2.w, r3
mov o1.xyz, r2
rcp o3.x, r2.w
mov o5.xyz, -r0
mov o9.z, -r1.x
mov o9.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 288 // 272 used size, 18 vars
Matrix 16 [_LightMatrix0] 4
Matrix 208 [_World2Planet] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 49 instructions, 3 temp regs, 0 temp arrays:
// ALU 44 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedohdakjleileniepojlkdkijpjfjplahnabaaaaaanmaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaiahaaaaaeabaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapaaaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaahaaaaaa
apaaaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefccaahaaaaeaaaabaa
miabaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaamaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadiccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
hccabaaaafaaaaaagfaaaaadpccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaa
gfaaaaadpccabaaaaiaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaficcabaaa
abaaaaaackaabaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaa
dgaaaaaghccabaaaacaaaaaaegiccaaaadaaaaaaapaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaadaaaaaaapaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgbfbaaaaaaaaaaa
egiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
anaaaaaaagbabaaaaaaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaaapaaaaaakgbkbaaaaaaaaaaaegacbaaaacaaaaaadcaaaaak
hcaabaaaacaaaaaaegiccaaaaaaaaaaabaaaaaaapgbpbaaaaaaaaaaaegacbaaa
acaaaaaadgaaaaaghccabaaaaeaaaaaaegacbaiaebaaaaaaacaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaa
adaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaipcaabaaaacaaaaaafgafbaaaabaaaaaaegiocaaaaaaaaaaaacaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaabaaaaaaagaabaaaabaaaaaa
egaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaadaaaaaa
kgakbaaaabaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaagaaaaaaegiocaaa
aaaaaaaaaeaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaaipcaabaaa
acaaaaaafgafbaaaabaaaaaaegiocaaaacaaaaaaajaaaaaadcaaaaakpcaabaaa
acaaaaaaegiocaaaacaaaaaaaiaaaaaaagaabaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaacaaaaaaakaaaaaakgakbaaaabaaaaaa
egaobaaaacaaaaaadcaaaaakpccabaaaahaaaaaaegiocaaaacaaaaaaalaaaaaa
pgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaa
aaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaa
aiaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaaiaaaaaakgakbaaaabaaaaaa
mgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaa
adaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaa
akbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
adaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaa
dgaaaaageccabaaaaiaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD4);
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = (uv_11 + _MainOffset.xy);
  uv_11 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  highp vec2 uvOffset_22;
  uvOffset_22 = _MainOffset.xy;
  mediump vec4 tex_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_25 + uvOffset_22);
  uv_25 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  tex_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_13);
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_35.x) - tmpvar_35.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_35.zxy, tmpvar_35, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_35.y) - mix (tmpvar_35.z, tmpvar_35.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (detailCoords_9, tmpvar_35.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_9.x);
  highp vec2 coord_41;
  coord_41 = ((((0.5 * detailCoords_9.zy) / tmpvar_40) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_21.xy, tmpvar_21.zw);
  detail_7 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_6 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tex_23 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_44.w, mix (clamp (((_FadeScale * sqrt(dot (p_45, p_45))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_12.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_12.xyz = (tmpvar_44.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_12.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_56;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD4);
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = (uv_11 + _MainOffset.xy);
  uv_11 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  highp vec2 uvOffset_22;
  uvOffset_22 = _MainOffset.xy;
  mediump vec4 tex_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_25 + uvOffset_22);
  uv_25 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  tex_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_13);
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_35.x) - tmpvar_35.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_35.zxy, tmpvar_35, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_35.y) - mix (tmpvar_35.z, tmpvar_35.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (detailCoords_9, tmpvar_35.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_9.x);
  highp vec2 coord_41;
  coord_41 = ((((0.5 * detailCoords_9.zy) / tmpvar_40) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_21.xy, tmpvar_21.zw);
  detail_7 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_6 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tex_23 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_44.w, mix (clamp (((_FadeScale * sqrt(dot (p_45, p_45))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_12.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_12.xyz = (tmpvar_44.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_12.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_56;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 366
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 466
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 459
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 357
uniform sampler2D _LightTextureB0;
#line 362
#line 376
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 389
#line 397
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 444
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 448
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 452
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 456
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 480
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 480
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 484
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 488
    o.viewDist = distance( vertexPos, vec4( _WorldSpaceCameraPos, 0.0));
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = vec3( (-(_World2Planet * v.vertex)));
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 492
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 497
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp float xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = float(xl_retval.viewDist);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 366
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 466
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 459
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 357
uniform sampler2D _LightTextureB0;
#line 362
#line 376
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 389
#line 397
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 444
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 448
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 452
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 456
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 480
#line 315
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 319
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 324
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 328
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 341
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, uvOffset);
    #line 345
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 499
lowp vec4 frag( in v2f IN ) {
    #line 501
    mediump vec4 color;
    highp vec3 objNrm = normalize(IN.objNormal);
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 505
    uv.y = (0.31831 * acos(objNrm.y));
    uv += _MainOffset.xy;
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, IN.objNormal, _MainOffset.xy);
    #line 509
    objNrm = abs(objNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    #line 513
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 517
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 521
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 525
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 529
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 533
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp float xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDist = float(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _World2Planet;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform mat4 unity_World2Shadow[4];
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  vec4 o_7;
  vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _DetailOffset;
uniform vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = (uv_1 + _MainOffset.xy);
  uv_1 = tmpvar_8;
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(tmpvar_8.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(tmpvar_8.y);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = (uv_13 + _MainOffset.xy);
  uv_13 = tmpvar_18;
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_3);
  float tmpvar_23;
  tmpvar_23 = clamp (floor(((1.0 + tmpvar_22.x) - tmpvar_22.z)), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = mix (mix (tmpvar_22.zxy, tmpvar_22, vec3(tmpvar_23)), tmpvar_22.yxz, vec3(clamp (floor(((1.0 + tmpvar_22.y) - mix (tmpvar_22.z, tmpvar_22.x, tmpvar_23))), 0.0, 1.0)));
  vec4 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_MainTex, tmpvar_18, tmpvar_21.xy, tmpvar_21.zw) * mix (texture2DGradARB (_DetailTex, ((((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_11.xy, tmpvar_11.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0))));
  vec3 p_26;
  p_26 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix (clamp (((_FadeScale * sqrt(dot (p_26, p_26))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_27, p_27)) - (_RimDistSub * sqrt(dot (p_28, p_28))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [_LightMatrix0]
Matrix 20 [_World2Planet]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c27, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c14
dp4 r2.y, v0, c13
dp4 r2.x, v0, c12
mov r0.z, c14.w
mov r0.x, c12.w
mov r0.y, c13.w
add r3.xyz, r2, -r0
mov o2.xyz, r0
dp3 r1.x, r3, r3
rsq r1.z, r1.x
mul o4.xyz, r1.z, r3
add r3.xyz, -r2, c24
dp3 r2.w, r3, r3
rsq r2.w, r2.w
mov r1.w, r0
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
mul r4.xyz, r1.xyww, c27.x
dp4 r1.z, v0, c6
mov o0, r1
mul r4.y, r4, c25.x
mov r1.xyz, r2
dp4 r1.w, v0, c15
dp4 o7.w, r1, c19
dp4 o7.z, r1, c18
dp4 o7.y, r1, c17
dp4 o7.x, r1, c16
dp4 o8.w, r1, c11
dp4 o8.z, r1, c10
dp4 o8.y, r1, c9
dp4 o8.x, r1, c8
dp4 r1.x, v0, c2
dp4 r0.z, v0, c22
dp4 r0.x, v0, c20
dp4 r0.y, v0, c21
mad o9.xy, r4.z, c26.zwzw, r4
mul o6.xyz, r2.w, r3
mov o1.xyz, r2
rcp o3.x, r2.w
mov o5.xyz, -r0
mov o9.z, -r1.x
mov o9.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 288 // 272 used size, 18 vars
Matrix 16 [_LightMatrix0] 4
Matrix 208 [_World2Planet] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 49 instructions, 3 temp regs, 0 temp arrays:
// ALU 44 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedohdakjleileniepojlkdkijpjfjplahnabaaaaaanmaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaiahaaaaaeabaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapaaaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaahaaaaaa
apaaaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefccaahaaaaeaaaabaa
miabaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaamaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadiccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
hccabaaaafaaaaaagfaaaaadpccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaa
gfaaaaadpccabaaaaiaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaficcabaaa
abaaaaaackaabaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaa
dgaaaaaghccabaaaacaaaaaaegiccaaaadaaaaaaapaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaadaaaaaaapaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgbfbaaaaaaaaaaa
egiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
anaaaaaaagbabaaaaaaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaaapaaaaaakgbkbaaaaaaaaaaaegacbaaaacaaaaaadcaaaaak
hcaabaaaacaaaaaaegiccaaaaaaaaaaabaaaaaaapgbpbaaaaaaaaaaaegacbaaa
acaaaaaadgaaaaaghccabaaaaeaaaaaaegacbaiaebaaaaaaacaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaa
adaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaipcaabaaaacaaaaaafgafbaaaabaaaaaaegiocaaaaaaaaaaaacaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaabaaaaaaagaabaaaabaaaaaa
egaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaadaaaaaa
kgakbaaaabaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaagaaaaaaegiocaaa
aaaaaaaaaeaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaaipcaabaaa
acaaaaaafgafbaaaabaaaaaaegiocaaaacaaaaaaajaaaaaadcaaaaakpcaabaaa
acaaaaaaegiocaaaacaaaaaaaiaaaaaaagaabaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaacaaaaaaakaaaaaakgakbaaaabaaaaaa
egaobaaaacaaaaaadcaaaaakpccabaaaahaaaaaaegiocaaaacaaaaaaalaaaaaa
pgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaa
aaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaa
aiaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaaiaaaaaakgakbaaaabaaaaaa
mgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaa
adaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaa
akbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
adaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaa
dgaaaaageccabaaaaiaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD4);
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = (uv_11 + _MainOffset.xy);
  uv_11 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  highp vec2 uvOffset_22;
  uvOffset_22 = _MainOffset.xy;
  mediump vec4 tex_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_25 + uvOffset_22);
  uv_25 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  tex_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_13);
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_35.x) - tmpvar_35.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_35.zxy, tmpvar_35, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_35.y) - mix (tmpvar_35.z, tmpvar_35.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (detailCoords_9, tmpvar_35.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_9.x);
  highp vec2 coord_41;
  coord_41 = ((((0.5 * detailCoords_9.zy) / tmpvar_40) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_21.xy, tmpvar_21.zw);
  detail_7 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_6 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tex_23 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_44.w, mix (clamp (((_FadeScale * sqrt(dot (p_45, p_45))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_12.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_12.xyz = (tmpvar_44.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_12.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_56;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 367
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 467
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 460
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 357
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 377
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 390
#line 398
#line 412
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 445
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 449
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 453
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 457
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 481
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 481
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 485
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 489
    o.viewDist = distance( vertexPos, vec4( _WorldSpaceCameraPos, 0.0));
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = vec3( (-(_World2Planet * v.vertex)));
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 493
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 498
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp float xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = float(xl_retval.viewDist);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 367
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 467
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 460
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 357
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 377
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 390
#line 398
#line 412
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 445
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 449
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 453
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 457
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 481
#line 315
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 319
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 324
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 328
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 341
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, uvOffset);
    #line 345
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 500
lowp vec4 frag( in v2f IN ) {
    #line 502
    mediump vec4 color;
    highp vec3 objNrm = normalize(IN.objNormal);
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 506
    uv.y = (0.31831 * acos(objNrm.y));
    uv += _MainOffset.xy;
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, IN.objNormal, _MainOffset.xy);
    #line 510
    objNrm = abs(objNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    #line 514
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 518
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 522
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 526
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 530
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 534
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp float xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDist = float(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _World2Planet;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  vec4 o_7;
  vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  vec4 o_10;
  vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_2 * 0.5);
  vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = o_10;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _DetailOffset;
uniform vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = (uv_1 + _MainOffset.xy);
  uv_1 = tmpvar_8;
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(tmpvar_8.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(tmpvar_8.y);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = (uv_13 + _MainOffset.xy);
  uv_13 = tmpvar_18;
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_3);
  float tmpvar_23;
  tmpvar_23 = clamp (floor(((1.0 + tmpvar_22.x) - tmpvar_22.z)), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = mix (mix (tmpvar_22.zxy, tmpvar_22, vec3(tmpvar_23)), tmpvar_22.yxz, vec3(clamp (floor(((1.0 + tmpvar_22.y) - mix (tmpvar_22.z, tmpvar_22.x, tmpvar_23))), 0.0, 1.0)));
  vec4 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_MainTex, tmpvar_18, tmpvar_21.xy, tmpvar_21.zw) * mix (texture2DGradARB (_DetailTex, ((((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_11.xy, tmpvar_11.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0))));
  vec3 p_26;
  p_26 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix (clamp (((_FadeScale * sqrt(dot (p_26, p_26))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_27, p_27)) - (_RimDistSub * sqrt(dot (p_28, p_28))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_ProjectionParams]
Vector 18 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_World2Planet]
"vs_3_0
; 36 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c19, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r2.w, v0, c7
dp4 r3.z, v0, c10
dp4 r3.y, v0, c9
dp4 r3.x, v0, c8
mov r1.w, r2
mov r2.z, c10.w
mov r2.x, c8.w
mov r2.y, c9.w
add r4.xyz, r3, -r2
dp3 r0.x, r4, r4
rsq r0.w, r0.x
mul o4.xyz, r0.w, r4
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
mul r0.xyz, r1.xyww, c19.x
dp4 r1.z, v0, c6
mul r0.y, r0, c17.x
mad r0.xy, r0.z, c18.zwzw, r0
mov r0.zw, r1
mov o7, r0
add r4.xyz, -r3, c16
mov o8.xy, r0
dp3 r0.z, r4, r4
rsq r0.x, r0.z
dp4 r0.w, v0, c2
mul o6.xyz, r0.x, r4
rcp o3.x, r0.x
dp4 r0.z, v0, c14
dp4 r0.x, v0, c12
dp4 r0.y, v0, c13
mov o0, r1
mov o1.xyz, r3
mov o2.xyz, r2
mov o5.xyz, -r0
mov o8.z, -r0.w
mov o8.w, r2
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 288 // 272 used size, 18 vars
Matrix 208 [_World2Planet] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 39 instructions, 3 temp regs, 0 temp arrays:
// ALU 33 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedknbfdhmgejimhhkjacifbjpnkeapecchabaaaaaabaahaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaiahaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapaaaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaahaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
gmafaaaaeaaaabaaflabaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadiccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaad
hccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
gfaaaaadpccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
acaaaaaaelaaaaaficcabaaaabaaaaaadkaabaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaaacaaaaaa
apaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hccabaaaadaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaihcaabaaa
acaaaaaafgbfbaaaaaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaaaaaaaaaanaaaaaaagbabaaaaaaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaapaaaaaakgbkbaaaaaaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaabaaaaaaa
pgbpbaaaaaaaaaaaegacbaaaacaaaaaadgaaaaaghccabaaaaeaaaaaaegacbaia
ebaaaaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhccabaaa
afaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaa
bkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaahicaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaadpdiaaaaakfcaabaaaabaaaaaaagadbaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaaaaaaaaaaahdcaabaaa
aaaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadgaaaaafpccabaaaagaaaaaa
egaobaaaaaaaaaaadgaaaaaflccabaaaahaaaaaaegambaaaaaaaaaaadiaaaaai
bcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaacaaaaaaafaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaacaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaagaaaaaackbabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaa
ahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaahaaaaaa
akaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD4);
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = (uv_11 + _MainOffset.xy);
  uv_11 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  highp vec2 uvOffset_22;
  uvOffset_22 = _MainOffset.xy;
  mediump vec4 tex_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_25 + uvOffset_22);
  uv_25 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  tex_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_13);
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_35.x) - tmpvar_35.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_35.zxy, tmpvar_35, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_35.y) - mix (tmpvar_35.z, tmpvar_35.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (detailCoords_9, tmpvar_35.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_9.x);
  highp vec2 coord_41;
  coord_41 = ((((0.5 * detailCoords_9.zy) / tmpvar_40) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_21.xy, tmpvar_21.zw);
  detail_7 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_6 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tex_23 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_44.w, mix (clamp (((_FadeScale * sqrt(dot (p_45, p_45))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_12.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  lowp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_12.xyz = (tmpvar_44.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_12.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_56;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = o_10;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD4);
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = (uv_11 + _MainOffset.xy);
  uv_11 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  highp vec2 uvOffset_22;
  uvOffset_22 = _MainOffset.xy;
  mediump vec4 tex_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_25 + uvOffset_22);
  uv_25 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  tex_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_13);
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_35.x) - tmpvar_35.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_35.zxy, tmpvar_35, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_35.y) - mix (tmpvar_35.z, tmpvar_35.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (detailCoords_9, tmpvar_35.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_9.x);
  highp vec2 coord_41;
  coord_41 = ((((0.5 * detailCoords_9.zy) / tmpvar_40) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_21.xy, tmpvar_21.zw);
  detail_7 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_6 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tex_23 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_44.w, mix (clamp (((_FadeScale * sqrt(dot (p_45, p_45))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_12.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  lowp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_12.xyz = (tmpvar_44.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_12.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_56;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 357
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 457
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 450
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 367
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 380
#line 388
#line 402
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 435
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 439
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 443
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 447
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 470
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 470
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 474
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 478
    o.viewDist = distance( vertexPos, vec4( _WorldSpaceCameraPos, 0.0));
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = vec3( (-(_World2Planet * v.vertex)));
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 482
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 486
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp float xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = float(xl_retval.viewDist);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 357
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 457
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 450
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 367
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 380
#line 388
#line 402
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 435
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 439
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 443
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 447
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 470
#line 315
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 319
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 324
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 328
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 341
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, uvOffset);
    #line 345
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 488
lowp vec4 frag( in v2f IN ) {
    #line 490
    mediump vec4 color;
    highp vec3 objNrm = normalize(IN.objNormal);
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 494
    uv.y = (0.31831 * acos(objNrm.y));
    uv += _MainOffset.xy;
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, IN.objNormal, _MainOffset.xy);
    #line 498
    objNrm = abs(objNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    #line 502
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 506
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 510
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 514
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 518
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 522
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp float xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDist = float(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _World2Planet;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  vec4 o_7;
  vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  vec4 o_10;
  vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_2 * 0.5);
  vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD7 = o_10;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _DetailOffset;
uniform vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = (uv_1 + _MainOffset.xy);
  uv_1 = tmpvar_8;
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(tmpvar_8.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(tmpvar_8.y);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = (uv_13 + _MainOffset.xy);
  uv_13 = tmpvar_18;
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_3);
  float tmpvar_23;
  tmpvar_23 = clamp (floor(((1.0 + tmpvar_22.x) - tmpvar_22.z)), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = mix (mix (tmpvar_22.zxy, tmpvar_22, vec3(tmpvar_23)), tmpvar_22.yxz, vec3(clamp (floor(((1.0 + tmpvar_22.y) - mix (tmpvar_22.z, tmpvar_22.x, tmpvar_23))), 0.0, 1.0)));
  vec4 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_MainTex, tmpvar_18, tmpvar_21.xy, tmpvar_21.zw) * mix (texture2DGradARB (_DetailTex, ((((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_11.xy, tmpvar_11.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0))));
  vec3 p_26;
  p_26 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix (clamp (((_FadeScale * sqrt(dot (p_26, p_26))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_27, p_27)) - (_RimDistSub * sqrt(dot (p_28, p_28))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_ProjectionParams]
Vector 22 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_World2Planet]
"vs_3_0
; 40 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c23, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r2.w, v0, c7
dp4 r3.z, v0, c10
dp4 r3.y, v0, c9
dp4 r3.x, v0, c8
mov r1.w, r2
mov r2.z, c10.w
mov r2.x, c8.w
mov r2.y, c9.w
add r4.xyz, r3, -r2
dp3 r0.x, r4, r4
rsq r0.w, r0.x
mul o4.xyz, r0.w, r4
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
mul r0.xyz, r1.xyww, c23.x
dp4 r1.z, v0, c6
mul r0.y, r0, c21.x
mad r0.xy, r0.z, c22.zwzw, r0
mov r0.zw, r1
mov o8, r0
add r4.xyz, -r3, c20
dp3 r0.z, r4, r4
rsq r3.w, r0.z
mov o9.xy, r0
mov r0.xyz, r3
dp4 r0.w, v0, c11
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
dp4 r0.w, v0, c2
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
mov o0, r1
mul o6.xyz, r3.w, r4
mov o1.xyz, r3
mov o2.xyz, r2
rcp o3.x, r3.w
mov o5.xyz, -r0
mov o9.z, -r0.w
mov o9.w, r2
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 352 // 336 used size, 19 vars
Matrix 80 [_LightMatrix0] 4
Matrix 272 [_World2Planet] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 47 instructions, 3 temp regs, 0 temp arrays:
// ALU 41 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedpokjeinngckgficbnfaddmjkjhfaegnnabaaaaaageaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaiahaaaaaeabaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaadamaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaahaaaaaa
apaaaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefckiagaaaaeaaaabaa
kkabaaaafjaaaaaeegiocaaaaaaaaaaabfaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
iccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaaddccabaaa
agaaaaaagfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaac
adaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaaf
pccabaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaa
aaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaabaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaaficcabaaaabaaaaaadkaabaaaabaaaaaadgaaaaaf
hccabaaaabaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaaacaaaaaaegiccaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaia
ebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaiaebaaaaaa
abaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhccabaaaadaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaai
hcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiccaaaaaaaaaaabcaaaaaadcaaaaak
hcaabaaaacaaaaaaegiccaaaaaaaaaaabbaaaaaaagbabaaaaaaaaaaaegacbaaa
acaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaakgbkbaaa
aaaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
beaaaaaapgbpbaaaaaaaaaaaegacbaaaacaaaaaadgaaaaaghccabaaaaeaaaaaa
egacbaiaebaaaaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaidcaabaaaacaaaaaafgafbaaa
abaaaaaaegiacaaaaaaaaaaaagaaaaaadcaaaaakdcaabaaaabaaaaaaegiacaaa
aaaaaaaaafaaaaaaagaabaaaabaaaaaaegaabaaaacaaaaaadcaaaaakdcaabaaa
abaaaaaaegiacaaaaaaaaaaaahaaaaaakgakbaaaabaaaaaaegaabaaaabaaaaaa
dcaaaaakdccabaaaagaaaaaaegiacaaaaaaaaaaaaiaaaaaapgapbaaaabaaaaaa
egaabaaaabaaaaaadiaaaaaibcaabaaaabaaaaaabkaabaaaaaaaaaaaakiacaaa
abaaaaaaafaaaaaadiaaaaahicaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaaadpdiaaaaakfcaabaaaabaaaaaaagadbaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaaaaaaaaaadpaaaaaaaaaaaaaaahdcaabaaaaaaaaaaakgakbaaaabaaaaaa
mgaabaaaabaaaaaadgaaaaafpccabaaaahaaaaaaegaobaaaaaaaaaaadgaaaaaf
lccabaaaaiaaaaaaegambaaaaaaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaa
aaaaaaaackiacaaaacaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaacaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaahaaaaaadkbabaaaaaaaaaaa
akaabaaaaaaaaaaadgaaaaageccabaaaaiaaaaaaakaabaiaebaaaaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD4);
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = (uv_11 + _MainOffset.xy);
  uv_11 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  highp vec2 uvOffset_22;
  uvOffset_22 = _MainOffset.xy;
  mediump vec4 tex_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_25 + uvOffset_22);
  uv_25 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  tex_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_13);
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_35.x) - tmpvar_35.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_35.zxy, tmpvar_35, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_35.y) - mix (tmpvar_35.z, tmpvar_35.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (detailCoords_9, tmpvar_35.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_9.x);
  highp vec2 coord_41;
  coord_41 = ((((0.5 * detailCoords_9.zy) / tmpvar_40) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_21.xy, tmpvar_21.zw);
  detail_7 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_6 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tex_23 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_44.w, mix (clamp (((_FadeScale * sqrt(dot (p_45, p_45))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_12.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  lowp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_12.xyz = (tmpvar_44.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_12.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_56;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD7 = o_10;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD4);
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = (uv_11 + _MainOffset.xy);
  uv_11 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  highp vec2 uvOffset_22;
  uvOffset_22 = _MainOffset.xy;
  mediump vec4 tex_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_25 + uvOffset_22);
  uv_25 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  tex_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_13);
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_35.x) - tmpvar_35.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_35.zxy, tmpvar_35, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_35.y) - mix (tmpvar_35.z, tmpvar_35.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (detailCoords_9, tmpvar_35.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_9.x);
  highp vec2 coord_41;
  coord_41 = ((((0.5 * detailCoords_9.zy) / tmpvar_40) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_21.xy, tmpvar_21.zw);
  detail_7 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_6 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tex_23 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_44.w, mix (clamp (((_FadeScale * sqrt(dot (p_45, p_45))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_12.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  lowp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_12.xyz = (tmpvar_44.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_12.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_56;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 359
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 459
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 452
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 357
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 369
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 382
#line 390
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 437
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 441
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 445
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 449
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 473
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 473
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 477
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 481
    o.viewDist = distance( vertexPos, vec4( _WorldSpaceCameraPos, 0.0));
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = vec3( (-(_World2Planet * v.vertex)));
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 485
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 490
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp float xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = float(xl_retval.viewDist);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 359
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 459
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 452
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 357
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 369
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 382
#line 390
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 437
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 441
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 445
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 449
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 473
#line 315
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 319
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 324
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 328
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 341
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, uvOffset);
    #line 345
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 492
lowp vec4 frag( in v2f IN ) {
    #line 494
    mediump vec4 color;
    highp vec3 objNrm = normalize(IN.objNormal);
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 498
    uv.y = (0.31831 * acos(objNrm.y));
    uv += _MainOffset.xy;
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, IN.objNormal, _MainOffset.xy);
    #line 502
    objNrm = abs(objNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    #line 506
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 510
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 514
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 518
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 522
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 526
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp float xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDist = float(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _World2Planet;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform vec4 _LightPositionRange;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  vec4 o_7;
  vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _DetailOffset;
uniform vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = (uv_1 + _MainOffset.xy);
  uv_1 = tmpvar_8;
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(tmpvar_8.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(tmpvar_8.y);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = (uv_13 + _MainOffset.xy);
  uv_13 = tmpvar_18;
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_3);
  float tmpvar_23;
  tmpvar_23 = clamp (floor(((1.0 + tmpvar_22.x) - tmpvar_22.z)), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = mix (mix (tmpvar_22.zxy, tmpvar_22, vec3(tmpvar_23)), tmpvar_22.yxz, vec3(clamp (floor(((1.0 + tmpvar_22.y) - mix (tmpvar_22.z, tmpvar_22.x, tmpvar_23))), 0.0, 1.0)));
  vec4 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_MainTex, tmpvar_18, tmpvar_21.xy, tmpvar_21.zw) * mix (texture2DGradARB (_DetailTex, ((((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_11.xy, tmpvar_11.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0))));
  vec3 p_26;
  p_26 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix (clamp (((_FadeScale * sqrt(dot (p_26, p_26))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_27, p_27)) - (_RimDistSub * sqrt(dot (p_28, p_28))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_ProjectionParams]
Vector 22 [_ScreenParams]
Vector 23 [_LightPositionRange]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_World2Planet]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c24, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r2, -r0
mov o2.xyz, r0
dp3 r1.x, r3, r3
rsq r1.z, r1.x
mul o4.xyz, r1.z, r3
add r3.xyz, -r2, c20
dp3 r2.w, r3, r3
rsq r2.w, r2.w
mov r1.w, r0
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
mul r4.xyz, r1.xyww, c24.x
dp4 r1.z, v0, c6
mov o0, r1
mul r4.y, r4, c21.x
mov r1.xyz, r2
dp4 r1.w, v0, c11
dp4 r0.x, v0, c16
dp4 r0.z, v0, c18
dp4 r0.y, v0, c17
mov o5.xyz, -r0
dp4 r0.x, v0, c2
mad o9.xy, r4.z, c22.zwzw, r4
mul o6.xyz, r2.w, r3
dp4 o7.z, r1, c14
dp4 o7.y, r1, c13
dp4 o7.x, r1, c12
mov o1.xyz, r2
rcp o3.x, r2.w
add o8.xyz, r2, -c23
mov o9.z, -r0.x
mov o9.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 288 // 272 used size, 18 vars
Matrix 16 [_LightMatrix0] 4
Matrix 208 [_World2Planet] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 46 instructions, 3 temp regs, 0 temp arrays:
// ALU 41 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedjonnglnjhmholdpeogfieblpbkbgpkigabaaaaaagiaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaiahaaaaaeabaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaahaaaaaa
ahaiaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefckmagaaaaeaaaabaa
klabaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadiccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
hccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaa
gfaaaaadpccabaaaaiaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaficcabaaa
abaaaaaackaabaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaa
dgaaaaaghccabaaaacaaaaaaegiccaaaadaaaaaaapaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaadaaaaaaapaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaanaaaaaa
agbabaaaaaaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
aaaaaaaaapaaaaaakgbkbaaaaaaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaaaaaaaaabaaaaaaapgbpbaaaaaaaaaaaegacbaaaacaaaaaa
dgaaaaaghccabaaaaeaaaaaaegacbaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaaaaaaaaaj
hccabaaaahaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaabaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaaaaaaaaaa
acaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaa
abaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaa
adaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaaagaaaaaa
egiccaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaai
ccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaak
ncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadp
aaaaaadpdgaaaaaficcabaaaaiaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaa
aiaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaa
bkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaa
aaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaaiaaaaaaakaabaiaebaaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD4);
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = (uv_11 + _MainOffset.xy);
  uv_11 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  highp vec2 uvOffset_22;
  uvOffset_22 = _MainOffset.xy;
  mediump vec4 tex_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_25 + uvOffset_22);
  uv_25 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  tex_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_13);
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_35.x) - tmpvar_35.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_35.zxy, tmpvar_35, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_35.y) - mix (tmpvar_35.z, tmpvar_35.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (detailCoords_9, tmpvar_35.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_9.x);
  highp vec2 coord_41;
  coord_41 = ((((0.5 * detailCoords_9.zy) / tmpvar_40) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_21.xy, tmpvar_21.zw);
  detail_7 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_6 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tex_23 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_44.w, mix (clamp (((_FadeScale * sqrt(dot (p_45, p_45))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_12.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_12.xyz = (tmpvar_44.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_12.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_56;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD4);
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = (uv_11 + _MainOffset.xy);
  uv_11 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  highp vec2 uvOffset_22;
  uvOffset_22 = _MainOffset.xy;
  mediump vec4 tex_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_25 + uvOffset_22);
  uv_25 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  tex_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_13);
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_35.x) - tmpvar_35.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_35.zxy, tmpvar_35, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_35.y) - mix (tmpvar_35.z, tmpvar_35.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (detailCoords_9, tmpvar_35.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_9.x);
  highp vec2 coord_41;
  coord_41 = ((((0.5 * detailCoords_9.zy) / tmpvar_40) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_21.xy, tmpvar_21.zw);
  detail_7 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_6 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tex_23 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_44.w, mix (clamp (((_FadeScale * sqrt(dot (p_45, p_45))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_12.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_12.xyz = (tmpvar_44.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_12.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_56;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 364
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 464
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 457
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform samplerCube _ShadowMapTexture;
#line 362
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 374
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 387
#line 395
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 442
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 446
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 450
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 454
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 478
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 478
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 482
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 486
    o.viewDist = distance( vertexPos, vec4( _WorldSpaceCameraPos, 0.0));
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = vec3( (-(_World2Planet * v.vertex)));
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 490
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 495
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp float xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = float(xl_retval.viewDist);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 364
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 464
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 457
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform samplerCube _ShadowMapTexture;
#line 362
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 374
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 387
#line 395
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 442
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 446
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 450
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 454
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 478
#line 315
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 319
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 324
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 328
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 341
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, uvOffset);
    #line 345
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 497
lowp vec4 frag( in v2f IN ) {
    #line 499
    mediump vec4 color;
    highp vec3 objNrm = normalize(IN.objNormal);
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 503
    uv.y = (0.31831 * acos(objNrm.y));
    uv += _MainOffset.xy;
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, IN.objNormal, _MainOffset.xy);
    #line 507
    objNrm = abs(objNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    #line 511
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 515
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 519
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 523
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 527
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 531
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp float xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDist = float(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _World2Planet;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform vec4 _LightPositionRange;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  vec4 o_7;
  vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _DetailOffset;
uniform vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = (uv_1 + _MainOffset.xy);
  uv_1 = tmpvar_8;
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(tmpvar_8.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(tmpvar_8.y);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = (uv_13 + _MainOffset.xy);
  uv_13 = tmpvar_18;
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_3);
  float tmpvar_23;
  tmpvar_23 = clamp (floor(((1.0 + tmpvar_22.x) - tmpvar_22.z)), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = mix (mix (tmpvar_22.zxy, tmpvar_22, vec3(tmpvar_23)), tmpvar_22.yxz, vec3(clamp (floor(((1.0 + tmpvar_22.y) - mix (tmpvar_22.z, tmpvar_22.x, tmpvar_23))), 0.0, 1.0)));
  vec4 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_MainTex, tmpvar_18, tmpvar_21.xy, tmpvar_21.zw) * mix (texture2DGradARB (_DetailTex, ((((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_11.xy, tmpvar_11.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0))));
  vec3 p_26;
  p_26 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix (clamp (((_FadeScale * sqrt(dot (p_26, p_26))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_27, p_27)) - (_RimDistSub * sqrt(dot (p_28, p_28))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_ProjectionParams]
Vector 22 [_ScreenParams]
Vector 23 [_LightPositionRange]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_World2Planet]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c24, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r2, -r0
mov o2.xyz, r0
dp3 r1.x, r3, r3
rsq r1.z, r1.x
mul o4.xyz, r1.z, r3
add r3.xyz, -r2, c20
dp3 r2.w, r3, r3
rsq r2.w, r2.w
mov r1.w, r0
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
mul r4.xyz, r1.xyww, c24.x
dp4 r1.z, v0, c6
mov o0, r1
mul r4.y, r4, c21.x
mov r1.xyz, r2
dp4 r1.w, v0, c11
dp4 r0.x, v0, c16
dp4 r0.z, v0, c18
dp4 r0.y, v0, c17
mov o5.xyz, -r0
dp4 r0.x, v0, c2
mad o9.xy, r4.z, c22.zwzw, r4
mul o6.xyz, r2.w, r3
dp4 o7.z, r1, c14
dp4 o7.y, r1, c13
dp4 o7.x, r1, c12
mov o1.xyz, r2
rcp o3.x, r2.w
add o8.xyz, r2, -c23
mov o9.z, -r0.x
mov o9.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 288 // 272 used size, 18 vars
Matrix 16 [_LightMatrix0] 4
Matrix 208 [_World2Planet] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 46 instructions, 3 temp regs, 0 temp arrays:
// ALU 41 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedjonnglnjhmholdpeogfieblpbkbgpkigabaaaaaagiaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaiahaaaaaeabaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaahaaaaaa
ahaiaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefckmagaaaaeaaaabaa
klabaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadiccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
hccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaa
gfaaaaadpccabaaaaiaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaficcabaaa
abaaaaaackaabaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaa
dgaaaaaghccabaaaacaaaaaaegiccaaaadaaaaaaapaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaadaaaaaaapaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaanaaaaaa
agbabaaaaaaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
aaaaaaaaapaaaaaakgbkbaaaaaaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaaaaaaaaabaaaaaaapgbpbaaaaaaaaaaaegacbaaaacaaaaaa
dgaaaaaghccabaaaaeaaaaaaegacbaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaaaaaaaaaj
hccabaaaahaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaabaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaaaaaaaaaa
acaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaa
abaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaa
adaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaaagaaaaaa
egiccaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaai
ccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaak
ncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadp
aaaaaadpdgaaaaaficcabaaaaiaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaa
aiaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaa
bkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaa
aaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaaiaaaaaaakaabaiaebaaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD4);
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = (uv_11 + _MainOffset.xy);
  uv_11 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  highp vec2 uvOffset_22;
  uvOffset_22 = _MainOffset.xy;
  mediump vec4 tex_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_25 + uvOffset_22);
  uv_25 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  tex_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_13);
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_35.x) - tmpvar_35.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_35.zxy, tmpvar_35, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_35.y) - mix (tmpvar_35.z, tmpvar_35.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (detailCoords_9, tmpvar_35.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_9.x);
  highp vec2 coord_41;
  coord_41 = ((((0.5 * detailCoords_9.zy) / tmpvar_40) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_21.xy, tmpvar_21.zw);
  detail_7 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_6 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tex_23 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_44.w, mix (clamp (((_FadeScale * sqrt(dot (p_45, p_45))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_12.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_12.xyz = (tmpvar_44.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_12.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_56;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD4);
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = (uv_11 + _MainOffset.xy);
  uv_11 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  highp vec2 uvOffset_22;
  uvOffset_22 = _MainOffset.xy;
  mediump vec4 tex_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_25 + uvOffset_22);
  uv_25 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  tex_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_13);
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_35.x) - tmpvar_35.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_35.zxy, tmpvar_35, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_35.y) - mix (tmpvar_35.z, tmpvar_35.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (detailCoords_9, tmpvar_35.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_9.x);
  highp vec2 coord_41;
  coord_41 = ((((0.5 * detailCoords_9.zy) / tmpvar_40) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_21.xy, tmpvar_21.zw);
  detail_7 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_6 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tex_23 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_44.w, mix (clamp (((_FadeScale * sqrt(dot (p_45, p_45))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_12.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_12.xyz = (tmpvar_44.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_12.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_56;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 365
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 465
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 458
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform samplerCube _ShadowMapTexture;
#line 362
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 375
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 388
#line 396
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 443
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 447
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 451
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 455
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 479
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 479
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 483
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 487
    o.viewDist = distance( vertexPos, vec4( _WorldSpaceCameraPos, 0.0));
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = vec3( (-(_World2Planet * v.vertex)));
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 491
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 496
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp float xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = float(xl_retval.viewDist);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 365
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 465
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 458
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform samplerCube _ShadowMapTexture;
#line 362
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 375
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 388
#line 396
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 443
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 447
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 451
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 455
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 479
#line 315
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 319
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 324
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 328
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 341
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, uvOffset);
    #line 345
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 498
lowp vec4 frag( in v2f IN ) {
    #line 500
    mediump vec4 color;
    highp vec3 objNrm = normalize(IN.objNormal);
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 504
    uv.y = (0.31831 * acos(objNrm.y));
    uv += _MainOffset.xy;
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, IN.objNormal, _MainOffset.xy);
    #line 508
    objNrm = abs(objNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    #line 512
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 516
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 520
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 524
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 528
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 532
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp float xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDist = float(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _World2Planet;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform mat4 unity_World2Shadow[4];
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  vec4 o_7;
  vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _DetailOffset;
uniform vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = (uv_1 + _MainOffset.xy);
  uv_1 = tmpvar_8;
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(tmpvar_8.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(tmpvar_8.y);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = (uv_13 + _MainOffset.xy);
  uv_13 = tmpvar_18;
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_3);
  float tmpvar_23;
  tmpvar_23 = clamp (floor(((1.0 + tmpvar_22.x) - tmpvar_22.z)), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = mix (mix (tmpvar_22.zxy, tmpvar_22, vec3(tmpvar_23)), tmpvar_22.yxz, vec3(clamp (floor(((1.0 + tmpvar_22.y) - mix (tmpvar_22.z, tmpvar_22.x, tmpvar_23))), 0.0, 1.0)));
  vec4 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_MainTex, tmpvar_18, tmpvar_21.xy, tmpvar_21.zw) * mix (texture2DGradARB (_DetailTex, ((((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_11.xy, tmpvar_11.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0))));
  vec3 p_26;
  p_26 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix (clamp (((_FadeScale * sqrt(dot (p_26, p_26))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_27, p_27)) - (_RimDistSub * sqrt(dot (p_28, p_28))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [_LightMatrix0]
Matrix 20 [_World2Planet]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c27, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c14
dp4 r2.y, v0, c13
dp4 r2.x, v0, c12
mov r0.z, c14.w
mov r0.x, c12.w
mov r0.y, c13.w
add r3.xyz, r2, -r0
mov o2.xyz, r0
dp3 r1.x, r3, r3
rsq r1.z, r1.x
mul o4.xyz, r1.z, r3
add r3.xyz, -r2, c24
dp3 r2.w, r3, r3
rsq r2.w, r2.w
mov r1.w, r0
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
mul r4.xyz, r1.xyww, c27.x
dp4 r1.z, v0, c6
mov o0, r1
mul r4.y, r4, c25.x
mov r1.xyz, r2
dp4 r1.w, v0, c15
dp4 o7.w, r1, c19
dp4 o7.z, r1, c18
dp4 o7.y, r1, c17
dp4 o7.x, r1, c16
dp4 o8.w, r1, c11
dp4 o8.z, r1, c10
dp4 o8.y, r1, c9
dp4 o8.x, r1, c8
dp4 r1.x, v0, c2
dp4 r0.z, v0, c22
dp4 r0.x, v0, c20
dp4 r0.y, v0, c21
mad o9.xy, r4.z, c26.zwzw, r4
mul o6.xyz, r2.w, r3
mov o1.xyz, r2
rcp o3.x, r2.w
mov o5.xyz, -r0
mov o9.z, -r1.x
mov o9.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 352 // 336 used size, 19 vars
Matrix 80 [_LightMatrix0] 4
Matrix 272 [_World2Planet] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 49 instructions, 3 temp regs, 0 temp arrays:
// ALU 44 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkjigmglbhbijnfjlldogbehdnfaadgnlabaaaaaanmaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaiahaaaaaeabaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapaaaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaahaaaaaa
apaaaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefccaahaaaaeaaaabaa
miabaaaafjaaaaaeegiocaaaaaaaaaaabfaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaamaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadiccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
hccabaaaafaaaaaagfaaaaadpccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaa
gfaaaaadpccabaaaaiaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaficcabaaa
abaaaaaackaabaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaa
dgaaaaaghccabaaaacaaaaaaegiccaaaadaaaaaaapaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaadaaaaaaapaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgbfbaaaaaaaaaaa
egiccaaaaaaaaaaabcaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bbaaaaaaagbabaaaaaaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaakgbkbaaaaaaaaaaaegacbaaaacaaaaaadcaaaaak
hcaabaaaacaaaaaaegiccaaaaaaaaaaabeaaaaaapgbpbaaaaaaaaaaaegacbaaa
acaaaaaadgaaaaaghccabaaaaeaaaaaaegacbaiaebaaaaaaacaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaa
adaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaipcaabaaaacaaaaaafgafbaaaabaaaaaaegiocaaaaaaaaaaaagaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaaaabaaaaaa
egaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaa
kgakbaaaabaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaagaaaaaaegiocaaa
aaaaaaaaaiaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaaipcaabaaa
acaaaaaafgafbaaaabaaaaaaegiocaaaacaaaaaaajaaaaaadcaaaaakpcaabaaa
acaaaaaaegiocaaaacaaaaaaaiaaaaaaagaabaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaacaaaaaaakaaaaaakgakbaaaabaaaaaa
egaobaaaacaaaaaadcaaaaakpccabaaaahaaaaaaegiocaaaacaaaaaaalaaaaaa
pgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaa
aaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaa
aiaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaaiaaaaaakgakbaaaabaaaaaa
mgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaa
adaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaa
akbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
adaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaa
dgaaaaageccabaaaaiaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD4);
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = (uv_11 + _MainOffset.xy);
  uv_11 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  highp vec2 uvOffset_22;
  uvOffset_22 = _MainOffset.xy;
  mediump vec4 tex_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_25 + uvOffset_22);
  uv_25 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  tex_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_13);
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_35.x) - tmpvar_35.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_35.zxy, tmpvar_35, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_35.y) - mix (tmpvar_35.z, tmpvar_35.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (detailCoords_9, tmpvar_35.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_9.x);
  highp vec2 coord_41;
  coord_41 = ((((0.5 * detailCoords_9.zy) / tmpvar_40) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_21.xy, tmpvar_21.zw);
  detail_7 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_6 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tex_23 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_44.w, mix (clamp (((_FadeScale * sqrt(dot (p_45, p_45))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_12.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_12.xyz = (tmpvar_44.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_12.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_56;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD4);
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = (uv_11 + _MainOffset.xy);
  uv_11 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  highp vec2 uvOffset_22;
  uvOffset_22 = _MainOffset.xy;
  mediump vec4 tex_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_25 + uvOffset_22);
  uv_25 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  tex_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_13);
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_35.x) - tmpvar_35.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_35.zxy, tmpvar_35, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_35.y) - mix (tmpvar_35.z, tmpvar_35.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (detailCoords_9, tmpvar_35.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_9.x);
  highp vec2 coord_41;
  coord_41 = ((((0.5 * detailCoords_9.zy) / tmpvar_40) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_21.xy, tmpvar_21.zw);
  detail_7 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_6 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tex_23 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_44.w, mix (clamp (((_FadeScale * sqrt(dot (p_45, p_45))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_12.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_12.xyz = (tmpvar_44.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_12.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_56;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 374
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 474
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 467
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 365
uniform sampler2D _LightTextureB0;
#line 370
#line 384
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 397
#line 405
#line 419
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 452
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 456
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 460
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 464
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 488
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 488
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 492
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 496
    o.viewDist = distance( vertexPos, vec4( _WorldSpaceCameraPos, 0.0));
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = vec3( (-(_World2Planet * v.vertex)));
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 500
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 505
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp float xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = float(xl_retval.viewDist);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 374
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 474
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 467
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 365
uniform sampler2D _LightTextureB0;
#line 370
#line 384
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 397
#line 405
#line 419
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 452
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 456
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 460
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 464
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 488
#line 315
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 319
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 324
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 328
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 341
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, uvOffset);
    #line 345
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 507
lowp vec4 frag( in v2f IN ) {
    #line 509
    mediump vec4 color;
    highp vec3 objNrm = normalize(IN.objNormal);
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 513
    uv.y = (0.31831 * acos(objNrm.y));
    uv += _MainOffset.xy;
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, IN.objNormal, _MainOffset.xy);
    #line 517
    objNrm = abs(objNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    #line 521
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 525
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 529
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 533
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 537
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 541
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp float xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDist = float(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _World2Planet;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform mat4 unity_World2Shadow[4];
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  vec4 o_7;
  vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _DetailOffset;
uniform vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = (uv_1 + _MainOffset.xy);
  uv_1 = tmpvar_8;
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(tmpvar_8.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(tmpvar_8.y);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = (uv_13 + _MainOffset.xy);
  uv_13 = tmpvar_18;
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_3);
  float tmpvar_23;
  tmpvar_23 = clamp (floor(((1.0 + tmpvar_22.x) - tmpvar_22.z)), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = mix (mix (tmpvar_22.zxy, tmpvar_22, vec3(tmpvar_23)), tmpvar_22.yxz, vec3(clamp (floor(((1.0 + tmpvar_22.y) - mix (tmpvar_22.z, tmpvar_22.x, tmpvar_23))), 0.0, 1.0)));
  vec4 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_MainTex, tmpvar_18, tmpvar_21.xy, tmpvar_21.zw) * mix (texture2DGradARB (_DetailTex, ((((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_11.xy, tmpvar_11.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0))));
  vec3 p_26;
  p_26 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix (clamp (((_FadeScale * sqrt(dot (p_26, p_26))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_27, p_27)) - (_RimDistSub * sqrt(dot (p_28, p_28))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [_LightMatrix0]
Matrix 20 [_World2Planet]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c27, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c14
dp4 r2.y, v0, c13
dp4 r2.x, v0, c12
mov r0.z, c14.w
mov r0.x, c12.w
mov r0.y, c13.w
add r3.xyz, r2, -r0
mov o2.xyz, r0
dp3 r1.x, r3, r3
rsq r1.z, r1.x
mul o4.xyz, r1.z, r3
add r3.xyz, -r2, c24
dp3 r2.w, r3, r3
rsq r2.w, r2.w
mov r1.w, r0
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
mul r4.xyz, r1.xyww, c27.x
dp4 r1.z, v0, c6
mov o0, r1
mul r4.y, r4, c25.x
mov r1.xyz, r2
dp4 r1.w, v0, c15
dp4 o7.w, r1, c19
dp4 o7.z, r1, c18
dp4 o7.y, r1, c17
dp4 o7.x, r1, c16
dp4 o8.w, r1, c11
dp4 o8.z, r1, c10
dp4 o8.y, r1, c9
dp4 o8.x, r1, c8
dp4 r1.x, v0, c2
dp4 r0.z, v0, c22
dp4 r0.x, v0, c20
dp4 r0.y, v0, c21
mad o9.xy, r4.z, c26.zwzw, r4
mul o6.xyz, r2.w, r3
mov o1.xyz, r2
rcp o3.x, r2.w
mov o5.xyz, -r0
mov o9.z, -r1.x
mov o9.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 352 // 336 used size, 19 vars
Matrix 80 [_LightMatrix0] 4
Matrix 272 [_World2Planet] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 49 instructions, 3 temp regs, 0 temp arrays:
// ALU 44 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkjigmglbhbijnfjlldogbehdnfaadgnlabaaaaaanmaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaiahaaaaaeabaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapaaaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaahaaaaaa
apaaaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefccaahaaaaeaaaabaa
miabaaaafjaaaaaeegiocaaaaaaaaaaabfaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaamaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadiccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
hccabaaaafaaaaaagfaaaaadpccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaa
gfaaaaadpccabaaaaiaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaficcabaaa
abaaaaaackaabaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaa
dgaaaaaghccabaaaacaaaaaaegiccaaaadaaaaaaapaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaadaaaaaaapaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgbfbaaaaaaaaaaa
egiccaaaaaaaaaaabcaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bbaaaaaaagbabaaaaaaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaakgbkbaaaaaaaaaaaegacbaaaacaaaaaadcaaaaak
hcaabaaaacaaaaaaegiccaaaaaaaaaaabeaaaaaapgbpbaaaaaaaaaaaegacbaaa
acaaaaaadgaaaaaghccabaaaaeaaaaaaegacbaiaebaaaaaaacaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaa
adaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaipcaabaaaacaaaaaafgafbaaaabaaaaaaegiocaaaaaaaaaaaagaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaaaabaaaaaa
egaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaa
kgakbaaaabaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaagaaaaaaegiocaaa
aaaaaaaaaiaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaaipcaabaaa
acaaaaaafgafbaaaabaaaaaaegiocaaaacaaaaaaajaaaaaadcaaaaakpcaabaaa
acaaaaaaegiocaaaacaaaaaaaiaaaaaaagaabaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaacaaaaaaakaaaaaakgakbaaaabaaaaaa
egaobaaaacaaaaaadcaaaaakpccabaaaahaaaaaaegiocaaaacaaaaaaalaaaaaa
pgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaa
aaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaa
aiaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaaiaaaaaakgakbaaaabaaaaaa
mgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaa
adaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaa
akbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
adaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaa
dgaaaaageccabaaaaiaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD4);
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = (uv_11 + _MainOffset.xy);
  uv_11 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  highp vec2 uvOffset_22;
  uvOffset_22 = _MainOffset.xy;
  mediump vec4 tex_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_25 + uvOffset_22);
  uv_25 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  tex_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_13);
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_35.x) - tmpvar_35.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_35.zxy, tmpvar_35, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_35.y) - mix (tmpvar_35.z, tmpvar_35.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (detailCoords_9, tmpvar_35.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_9.x);
  highp vec2 coord_41;
  coord_41 = ((((0.5 * detailCoords_9.zy) / tmpvar_40) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_21.xy, tmpvar_21.zw);
  detail_7 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_6 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tex_23 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_44.w, mix (clamp (((_FadeScale * sqrt(dot (p_45, p_45))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_12.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_12.xyz = (tmpvar_44.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_12.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_56;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 374
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 474
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 467
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 365
uniform sampler2D _LightTextureB0;
#line 370
#line 384
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 397
#line 405
#line 419
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 452
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 456
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 460
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 464
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 488
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 488
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 492
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 496
    o.viewDist = distance( vertexPos, vec4( _WorldSpaceCameraPos, 0.0));
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = vec3( (-(_World2Planet * v.vertex)));
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 500
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 505
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp float xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = float(xl_retval.viewDist);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 374
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 474
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 467
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 365
uniform sampler2D _LightTextureB0;
#line 370
#line 384
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 397
#line 405
#line 419
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 452
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 456
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 460
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 464
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 488
#line 315
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 319
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 324
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 328
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 341
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, uvOffset);
    #line 345
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 507
lowp vec4 frag( in v2f IN ) {
    #line 509
    mediump vec4 color;
    highp vec3 objNrm = normalize(IN.objNormal);
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 513
    uv.y = (0.31831 * acos(objNrm.y));
    uv += _MainOffset.xy;
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, IN.objNormal, _MainOffset.xy);
    #line 517
    objNrm = abs(objNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    #line 521
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 525
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 529
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 533
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 537
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 541
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp float xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDist = float(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _World2Planet;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform vec4 _LightPositionRange;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  vec4 o_7;
  vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _DetailOffset;
uniform vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = (uv_1 + _MainOffset.xy);
  uv_1 = tmpvar_8;
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(tmpvar_8.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(tmpvar_8.y);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = (uv_13 + _MainOffset.xy);
  uv_13 = tmpvar_18;
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_3);
  float tmpvar_23;
  tmpvar_23 = clamp (floor(((1.0 + tmpvar_22.x) - tmpvar_22.z)), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = mix (mix (tmpvar_22.zxy, tmpvar_22, vec3(tmpvar_23)), tmpvar_22.yxz, vec3(clamp (floor(((1.0 + tmpvar_22.y) - mix (tmpvar_22.z, tmpvar_22.x, tmpvar_23))), 0.0, 1.0)));
  vec4 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_MainTex, tmpvar_18, tmpvar_21.xy, tmpvar_21.zw) * mix (texture2DGradARB (_DetailTex, ((((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_11.xy, tmpvar_11.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0))));
  vec3 p_26;
  p_26 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix (clamp (((_FadeScale * sqrt(dot (p_26, p_26))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_27, p_27)) - (_RimDistSub * sqrt(dot (p_28, p_28))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_ProjectionParams]
Vector 22 [_ScreenParams]
Vector 23 [_LightPositionRange]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_World2Planet]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c24, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r2, -r0
mov o2.xyz, r0
dp3 r1.x, r3, r3
rsq r1.z, r1.x
mul o4.xyz, r1.z, r3
add r3.xyz, -r2, c20
dp3 r2.w, r3, r3
rsq r2.w, r2.w
mov r1.w, r0
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
mul r4.xyz, r1.xyww, c24.x
dp4 r1.z, v0, c6
mov o0, r1
mul r4.y, r4, c21.x
mov r1.xyz, r2
dp4 r1.w, v0, c11
dp4 r0.x, v0, c16
dp4 r0.z, v0, c18
dp4 r0.y, v0, c17
mov o5.xyz, -r0
dp4 r0.x, v0, c2
mad o9.xy, r4.z, c22.zwzw, r4
mul o6.xyz, r2.w, r3
dp4 o7.z, r1, c14
dp4 o7.y, r1, c13
dp4 o7.x, r1, c12
mov o1.xyz, r2
rcp o3.x, r2.w
add o8.xyz, r2, -c23
mov o9.z, -r0.x
mov o9.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 288 // 272 used size, 18 vars
Matrix 16 [_LightMatrix0] 4
Matrix 208 [_World2Planet] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 46 instructions, 3 temp regs, 0 temp arrays:
// ALU 41 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedjonnglnjhmholdpeogfieblpbkbgpkigabaaaaaagiaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaiahaaaaaeabaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaahaaaaaa
ahaiaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefckmagaaaaeaaaabaa
klabaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadiccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
hccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaa
gfaaaaadpccabaaaaiaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaficcabaaa
abaaaaaackaabaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaa
dgaaaaaghccabaaaacaaaaaaegiccaaaadaaaaaaapaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaadaaaaaaapaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaanaaaaaa
agbabaaaaaaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
aaaaaaaaapaaaaaakgbkbaaaaaaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaaaaaaaaabaaaaaaapgbpbaaaaaaaaaaaegacbaaaacaaaaaa
dgaaaaaghccabaaaaeaaaaaaegacbaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaaaaaaaaaj
hccabaaaahaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaabaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaaaaaaaaaa
acaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaa
abaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaa
adaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaaagaaaaaa
egiccaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaai
ccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaak
ncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadp
aaaaaadpdgaaaaaficcabaaaaiaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaa
aiaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaa
bkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaa
aaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaaiaaaaaaakaabaiaebaaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD4);
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = (uv_11 + _MainOffset.xy);
  uv_11 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  highp vec2 uvOffset_22;
  uvOffset_22 = _MainOffset.xy;
  mediump vec4 tex_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_25 + uvOffset_22);
  uv_25 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  tex_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_13);
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_35.x) - tmpvar_35.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_35.zxy, tmpvar_35, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_35.y) - mix (tmpvar_35.z, tmpvar_35.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (detailCoords_9, tmpvar_35.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_9.x);
  highp vec2 coord_41;
  coord_41 = ((((0.5 * detailCoords_9.zy) / tmpvar_40) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_21.xy, tmpvar_21.zw);
  detail_7 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_6 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tex_23 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_44.w, mix (clamp (((_FadeScale * sqrt(dot (p_45, p_45))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_12.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_12.xyz = (tmpvar_44.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_12.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_56;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD4);
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = (uv_11 + _MainOffset.xy);
  uv_11 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  highp vec2 uvOffset_22;
  uvOffset_22 = _MainOffset.xy;
  mediump vec4 tex_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_25 + uvOffset_22);
  uv_25 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  tex_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_13);
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_35.x) - tmpvar_35.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_35.zxy, tmpvar_35, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_35.y) - mix (tmpvar_35.z, tmpvar_35.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (detailCoords_9, tmpvar_35.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_9.x);
  highp vec2 coord_41;
  coord_41 = ((((0.5 * detailCoords_9.zy) / tmpvar_40) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_21.xy, tmpvar_21.zw);
  detail_7 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_6 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tex_23 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_44.w, mix (clamp (((_FadeScale * sqrt(dot (p_45, p_45))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_12.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_12.xyz = (tmpvar_44.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_12.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_56;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 370
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 470
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 463
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 369
uniform highp mat4 _LightMatrix0;
#line 380
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 393
#line 401
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 448
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 452
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 456
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 460
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 484
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 484
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 488
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 492
    o.viewDist = distance( vertexPos, vec4( _WorldSpaceCameraPos, 0.0));
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = vec3( (-(_World2Planet * v.vertex)));
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 496
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 501
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp float xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = float(xl_retval.viewDist);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 370
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 470
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 463
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 369
uniform highp mat4 _LightMatrix0;
#line 380
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 393
#line 401
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 448
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 452
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 456
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 460
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 484
#line 315
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 319
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 324
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 328
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 341
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, uvOffset);
    #line 345
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 503
lowp vec4 frag( in v2f IN ) {
    #line 505
    mediump vec4 color;
    highp vec3 objNrm = normalize(IN.objNormal);
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 509
    uv.y = (0.31831 * acos(objNrm.y));
    uv += _MainOffset.xy;
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, IN.objNormal, _MainOffset.xy);
    #line 513
    objNrm = abs(objNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    #line 517
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 521
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 525
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 529
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 533
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 537
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp float xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDist = float(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _World2Planet;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform vec4 _LightPositionRange;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  vec4 o_7;
  vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying float xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _FadeScale;
uniform float _FadeDist;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _DetailOffset;
uniform vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  float r_4;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_5;
    y_over_x_5 = (tmpvar_3.x / tmpvar_3.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_4));
  uv_1.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_8;
  tmpvar_8 = (uv_1 + _MainOffset.xy);
  uv_1 = tmpvar_8;
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(tmpvar_8.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(tmpvar_8.y);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = (uv_13 + _MainOffset.xy);
  uv_13 = tmpvar_18;
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_3);
  float tmpvar_23;
  tmpvar_23 = clamp (floor(((1.0 + tmpvar_22.x) - tmpvar_22.z)), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = mix (mix (tmpvar_22.zxy, tmpvar_22, vec3(tmpvar_23)), tmpvar_22.yxz, vec3(clamp (floor(((1.0 + tmpvar_22.y) - mix (tmpvar_22.z, tmpvar_22.x, tmpvar_23))), 0.0, 1.0)));
  vec4 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_MainTex, tmpvar_18, tmpvar_21.xy, tmpvar_21.zw) * mix (texture2DGradARB (_DetailTex, ((((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_11.xy, tmpvar_11.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0))));
  vec3 p_26;
  p_26 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec3 p_27;
  p_27 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  color_2.w = mix (0.0, tmpvar_25.w, mix (clamp (((_FadeScale * sqrt(dot (p_26, p_26))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_27, p_27)) - (_RimDistSub * sqrt(dot (p_28, p_28))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_25.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_ProjectionParams]
Vector 22 [_ScreenParams]
Vector 23 [_LightPositionRange]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_World2Planet]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c24, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r0.w, v0, c7
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r2, -r0
mov o2.xyz, r0
dp3 r1.x, r3, r3
rsq r1.z, r1.x
mul o4.xyz, r1.z, r3
add r3.xyz, -r2, c20
dp3 r2.w, r3, r3
rsq r2.w, r2.w
mov r1.w, r0
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
mul r4.xyz, r1.xyww, c24.x
dp4 r1.z, v0, c6
mov o0, r1
mul r4.y, r4, c21.x
mov r1.xyz, r2
dp4 r1.w, v0, c11
dp4 r0.x, v0, c16
dp4 r0.z, v0, c18
dp4 r0.y, v0, c17
mov o5.xyz, -r0
dp4 r0.x, v0, c2
mad o9.xy, r4.z, c22.zwzw, r4
mul o6.xyz, r2.w, r3
dp4 o7.z, r1, c14
dp4 o7.y, r1, c13
dp4 o7.x, r1, c12
mov o1.xyz, r2
rcp o3.x, r2.w
add o8.xyz, r2, -c23
mov o9.z, -r0.x
mov o9.w, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 288 // 272 used size, 18 vars
Matrix 16 [_LightMatrix0] 4
Matrix 208 [_World2Planet] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 46 instructions, 3 temp regs, 0 temp arrays:
// ALU 41 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedjonnglnjhmholdpeogfieblpbkbgpkigabaaaaaagiaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaiahaaaaaeabaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaahaaaaaa
ahaiaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefckmagaaaaeaaaabaa
klabaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadiccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
hccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaa
gfaaaaadpccabaaaaiaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaaficcabaaa
abaaaaaackaabaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaa
dgaaaaaghccabaaaacaaaaaaegiccaaaadaaaaaaapaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaadaaaaaaapaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaanaaaaaa
agbabaaaaaaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
aaaaaaaaapaaaaaakgbkbaaaaaaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaaaaaaaaabaaaaaaapgbpbaaaaaaaaaaaegacbaaaacaaaaaa
dgaaaaaghccabaaaaeaaaaaaegacbaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaaaaaaaaaj
hccabaaaahaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaabaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaaaaaaaaaa
acaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaa
abaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaa
adaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaaagaaaaaa
egiccaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaai
ccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaak
ncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadp
aaaaaadpdgaaaaaficcabaaaaiaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaa
aiaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaa
bkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaa
aaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaaiaaaaaaakaabaiaebaaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD4);
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = (uv_11 + _MainOffset.xy);
  uv_11 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  highp vec2 uvOffset_22;
  uvOffset_22 = _MainOffset.xy;
  mediump vec4 tex_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_25 + uvOffset_22);
  uv_25 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  tex_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_13);
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_35.x) - tmpvar_35.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_35.zxy, tmpvar_35, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_35.y) - mix (tmpvar_35.z, tmpvar_35.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (detailCoords_9, tmpvar_35.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_9.x);
  highp vec2 coord_41;
  coord_41 = ((((0.5 * detailCoords_9.zy) / tmpvar_40) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_21.xy, tmpvar_21.zw);
  detail_7 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_6 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tex_23 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_44.w, mix (clamp (((_FadeScale * sqrt(dot (p_45, p_45))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_12.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_12.xyz = (tmpvar_44.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_12.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_56;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _World2Planet;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _WorldSpaceCameraPos;
  highp vec4 p_6;
  p_6 = (tmpvar_3 - tmpvar_5);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_7.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD3 = normalize((tmpvar_3.xyz - tmpvar_4));
  xlv_TEXCOORD4 = -((_World2Planet * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp float xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _FadeScale;
uniform highp float _FadeDist;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _DetailOffset;
uniform lowp vec4 _MainOffset;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  highp vec2 uv_11;
  mediump vec4 color_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD4);
  highp float r_14;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    highp float y_over_x_15;
    y_over_x_15 = (tmpvar_13.x / tmpvar_13.z);
    float s_16;
    highp float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_14));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_13.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_13.y))) * (1.5708 + (abs(tmpvar_13.y) * (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (abs(tmpvar_13.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_18;
  tmpvar_18 = (uv_11 + _MainOffset.xy);
  uv_11 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_13.xz);
  highp vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_13.xz);
  highp vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  highp vec2 uvOffset_22;
  uvOffset_22 = _MainOffset.xy;
  mediump vec4 tex_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_25 + uvOffset_22);
  uv_25 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  tex_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_13);
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_35.x) - tmpvar_35.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_35.zxy, tmpvar_35, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_35.y) - mix (tmpvar_35.z, tmpvar_35.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (detailCoords_9, tmpvar_35.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_9.x);
  highp vec2 coord_41;
  coord_41 = ((((0.5 * detailCoords_9.zy) / tmpvar_40) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_21.xy, tmpvar_21.zw);
  detail_7 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD2), 0.0, 1.0);
  detailLevel_6 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tex_23 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - xlv_TEXCOORD1);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_44.w, mix (clamp (((_FadeScale * sqrt(dot (p_45, p_45))) - _FadeDist), 0.0, 1.0), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD3), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_12.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_12.xyz = (tmpvar_44.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_12.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_12.w = tmpvar_56;
  tmpvar_1 = color_12;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 371
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 471
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 464
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 369
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 381
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 394
#line 402
#line 416
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 449
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 453
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 457
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 461
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 485
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 485
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 489
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldOrigin = origin;
    #line 493
    o.viewDist = distance( vertexPos, vec4( _WorldSpaceCameraPos, 0.0));
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    o.objNormal = vec3( (-(_World2Planet * v.vertex)));
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    #line 497
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 502
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp float xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.worldOrigin);
    xlv_TEXCOORD2 = float(xl_retval.viewDist);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 371
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 471
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 worldOrigin;
    highp float viewDist;
    highp vec3 worldNormal;
    highp vec3 objNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 464
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
#line 324
#line 332
#line 341
#line 349
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 369
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 381
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 394
#line 402
#line 416
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
#line 449
uniform lowp vec4 _Color;
uniform lowp vec4 _MainOffset;
uniform lowp vec4 _DetailOffset;
uniform highp float _FalloffPow;
#line 453
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 457
uniform highp float _FadeDist;
uniform highp float _FadeScale;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
#line 461
uniform highp mat4 _World2Planet;
uniform highp float _InvFade;
uniform sampler2D _CameraDepthTexture;
#line 485
#line 315
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 319
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 324
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 328
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 341
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, uvOffset);
    #line 345
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 504
lowp vec4 frag( in v2f IN ) {
    #line 506
    mediump vec4 color;
    highp vec3 objNrm = normalize(IN.objNormal);
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( objNrm.x, objNrm.z)));
    #line 510
    uv.y = (0.31831 * acos(objNrm.y));
    uv += _MainOffset.xy;
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, objNrm);
    mediump vec4 main = GetSphereMap( _MainTex, IN.objNormal, _MainOffset.xy);
    #line 514
    objNrm = abs(objNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + objNrm.x) - objNrm.z)));
    mediump vec3 detailCoords = mix( objNrm.zxy, objNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + objNrm.y) - mix( objNrm.z, objNrm.x, zxlerp))));
    #line 518
    detailCoords = mix( detailCoords, objNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 522
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( IN.worldOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, IN.worldOrigin)))));
    #line 526
    highp float distFade = xll_saturate_f(((_FadeScale * dist) - _FadeDist));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 530
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 534
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 538
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp float xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.worldOrigin = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDist = float(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 30
//   d3d9 - ALU: 121 to 126, TEX: 6 to 7
//   d3d11 - ALU: 98 to 104, TEX: 0 to 1, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_MainOffset]
Vector 5 [_DetailOffset]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_FadeDist]
Float 12 [_FadeScale]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 121 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c16, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r2.xyz, r0.x, v4
abs r0.xyz, r2
add r1.xyz, r0, -r0.zxyw
add r0.w, r1.x, c15.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r1.xyz, r0.w, r1, r0.zxyw
add r0.w, r0.y, -r1.x
add r0.w, r0, c15.y
add_pp r3.xyz, r0.yxzw, -r1
frc r1.w, r0
add_sat r0.y, r0.w, -r1.w
mad_pp r1.xyz, r0.y, r3, r1
abs_pp r0.z, r1.x
abs r0.y, r2.z
rcp_pp r0.z, r0.z
max r1.x, r0, r0.y
mul_pp r0.zw, r1.xyzy, r0.z
rcp r1.y, r1.x
min r1.x, r0, r0.y
mul r1.z, r1.x, r1.y
mov_pp r1.xy, c5
mad_pp r0.zw, r0, c19.y, r1.xyxy
abs r1.y, r2
mul r1.w, r1.z, r1.z
mad r1.x, r1.w, c17.y, c17.z
mad r1.x, r1, r1.w, c17.w
add r3.x, -r1.y, c15.y
mad r2.w, r1.y, c16.x, c16.y
mad r2.w, r2, r1.y, c15
rsq r3.x, r3.x
mad r1.x, r1, r1.w, c18
mad r1.y, r2.w, r1, c16.z
rcp r3.x, r3.x
mul r2.w, r1.y, r3.x
cmp r1.y, r2, c15.x, c15
mad r3.x, r1, r1.w, c18.y
mul r2.y, r1, r2.w
mad r1.x, -r2.y, c16.w, r2.w
mad r1.x, r1.y, c15.z, r1
mad r1.w, r3.x, r1, c18.z
mul r1.y, r1.w, r1.z
mul r2.y, r1.x, c17.x
add r1.z, r2.y, c4.y
dsy r3.y, r1.z
add r1.x, -r1.y, c18.w
add r0.x, r0, -r0.y
cmp r2.w, -r0.x, r1.y, r1.x
dsx r0.xy, r2.xzzw
mul r0.xy, r0, r0
dsy r1.xy, r2.xzzw
add r0.x, r0, r0.y
mul r1.xy, r1, r1
add r0.y, r1.x, r1
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c19.x
mul r3.x, r0.y, c19
dsx r3.w, r1.z
mul r0.zw, r0, c8.x
texldd r0, r0.zwzw, s1, r3.zwzw, r3
add r3.y, -r2.w, c15.z
cmp r2.z, r2, r2.w, r3.y
cmp r2.x, r2, r2.z, -r2.z
mul r2.w, v2.x, c9.x
mad r2.x, r2, c19, c19.y
add r2.xy, r2, c4
mul_sat r2.z, r2.w, c16.w
add_pp r1, -r0, c15.y
mad_pp r0, r2.z, r1, r0
dp4 r1.x, c2, c2
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r3.y, v3, r1
dsy r2.w, r2.y
mov r2.z, r3.x
dsx r1.w, r2.y
mov r1.z, r3
texldd r1, r2, s0, r1.zwzw, r2.zwzw
mul_pp r1, r1, r0
add_pp r2.x, r3.y, c19.z
mul_pp r0.y, r2.x, c3.w
mul_pp_sat r0.w, r0.y, c19
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r2.xyz, r0, r0.w, c0
add r3.xyz, -v1, c1
dp3 r0.w, r3, r3
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
rsq r0.y, r0.w
add r3.xyz, -v0, c1
rsq r0.x, r0.x
dp3 r0.w, r3, r3
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.w, -r0.x, c14.x, r0.y
mov r0.xyz, v3
dp3_sat r0.x, v5, r0
rsq r0.y, r0.w
rcp r3.y, r0.y
mul r3.x, r0, c7
pow_sat r0, r3.x, c6.x
mul r0.y, r3, c12.x
add_sat r0.y, r0, -c11.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2.w, c13
mad r0.x, r0, r0.z, r0.y
mul_pp oC0.xyz, r1, r2
mul_pp oC0.w, r1, r0.x
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 288 // 196 used size, 18 vars
Vector 80 [_LightColor0] 4
Vector 128 [_MainOffset] 4
Vector 144 [_DetailOffset] 4
Float 160 [_FalloffPow]
Float 164 [_FalloffScale]
Float 168 [_DetailScale]
Float 172 [_DetailDist]
Float 176 [_MinLight]
Float 180 [_FadeDist]
Float 184 [_FadeScale]
Float 188 [_RimDist]
Float 192 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 102 instructions, 5 temp regs, 0 temp arrays:
// ALU 94 float, 0 int, 4 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedghdajclgdgobjanmlhfbhbkljiomlppaabaaaaaajiaoaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aiaiaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcdaanaaaaeaaaaaaaemadaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadicbabaaaabaaaaaa
gcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaabgbgbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaaigaabaaaaaaaaaaa
igaabaiaebaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaa
dbaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaabkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ccaabaaaabaaaaaaakaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaackaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjkcdodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjkcdobkiacaaaaaaaaaaaaiaaaaaaaaaaaaaidcaabaaaabaaaaaa
egaabaaaacaaaaaaegiacaaaaaaaaaaaaiaaaaaaalaaaaafccaabaaaacaaaaaa
bkaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaacaaaaaaegaabaaaadaaaaaaaaaaaaalkcaabaaaacaaaaaafgabbaia
ibaaaaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaai
ccaabaaaacaaaaaackaabaiambaaaaaaaaaaaaaabkaabaaaacaaaaaaebcaaaaf
ccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajpcaabaaaaeaaaaaakgabbaia
mbaaaaaaaaaaaaaafgaibaiaibaaaaaaaaaaaaaadcaaaaakpcaabaaaaeaaaaaa
fgafbaaaacaaaaaaegaobaaaaeaaaaaakgabbaiaibaaaaaaaaaaaaaaaaaaaaaj
hcaabaaaaaaaaaaaegacbaiaibaaaaaaaaaaaaaajgahbaiaebaaaaaaaeaaaaaa
aaaaaaaiccaabaaaacaaaaaadkaabaaaacaaaaaaakaabaiaebaaaaaaaeaaaaaa
ebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaadcaaaaajhcaabaaaaaaaaaaa
fgafbaaaacaaaaaaegacbaaaaaaaaaaajgahbaaaaeaaaaaadiaaaaakgcaabaaa
aaaaaaaakgajbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaaaaaaaaaaaaaaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaegiacaaaaaaaaaaaajaaaaaadiaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaakgikcaaaaaaaaaaaakaaaaaaalaaaaaf
ecaabaaaacaaaaaadkaabaaaaaaaaaaaamaaaaafecaabaaaadaaaaaadkaabaaa
aaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpapcaaaaibcaabaaaadaaaaaapgbpbaaaabaaaaaapgipcaaaaaaaaaaa
akaaaaaadcaaaaajpcaabaaaaaaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaaaaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaaaaaaaaiocaabaaaabaaaaaaagbjbaaaabaaaaaaagbjbaiaebaaaaaa
acaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaa
elaaaaafdcaabaaaabaaaaaaegaabaaaabaaaaaadcaaaaalbcaabaaaabaaaaaa
akiacaiaebaaaaaaaaaaaaaaamaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaaalaaaaaa
bacaaaahccaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaadaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaaakaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaaakiacaaaaaaaaaaaakaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadccaaaamecaabaaaabaaaaaa
ckiacaaaaaaaaaaaalaaaaaackaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaa
alaaaaaaaaaaaaaiccaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaah
icaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaa
afaaaaaaagiacaaaaaaaaaaaalaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_MainOffset]
Vector 5 [_DetailOffset]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_FadeDist]
Float 12 [_FadeScale]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 121 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c16, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r2.xyz, r0.x, v4
abs r0.xyz, r2
add r1.xyz, r0, -r0.zxyw
add r0.w, r1.x, c15.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r1.xyz, r0.w, r1, r0.zxyw
add r0.w, r0.y, -r1.x
add r0.w, r0, c15.y
add_pp r3.xyz, r0.yxzw, -r1
frc r1.w, r0
add_sat r0.y, r0.w, -r1.w
mad_pp r1.xyz, r0.y, r3, r1
abs_pp r0.z, r1.x
abs r0.y, r2.z
rcp_pp r0.z, r0.z
max r1.x, r0, r0.y
mul_pp r0.zw, r1.xyzy, r0.z
rcp r1.y, r1.x
min r1.x, r0, r0.y
mul r1.z, r1.x, r1.y
mov_pp r1.xy, c5
mad_pp r0.zw, r0, c19.y, r1.xyxy
abs r1.y, r2
mul r1.w, r1.z, r1.z
mad r1.x, r1.w, c17.y, c17.z
mad r1.x, r1, r1.w, c17.w
add r3.x, -r1.y, c15.y
mad r2.w, r1.y, c16.x, c16.y
mad r2.w, r2, r1.y, c15
rsq r3.x, r3.x
mad r1.x, r1, r1.w, c18
mad r1.y, r2.w, r1, c16.z
rcp r3.x, r3.x
mul r2.w, r1.y, r3.x
cmp r1.y, r2, c15.x, c15
mad r3.x, r1, r1.w, c18.y
mul r2.y, r1, r2.w
mad r1.x, -r2.y, c16.w, r2.w
mad r1.x, r1.y, c15.z, r1
mad r1.w, r3.x, r1, c18.z
mul r1.y, r1.w, r1.z
mul r2.y, r1.x, c17.x
add r1.z, r2.y, c4.y
dsy r3.y, r1.z
add r1.x, -r1.y, c18.w
add r0.x, r0, -r0.y
cmp r2.w, -r0.x, r1.y, r1.x
dsx r0.xy, r2.xzzw
mul r0.xy, r0, r0
dsy r1.xy, r2.xzzw
add r0.x, r0, r0.y
mul r1.xy, r1, r1
add r0.y, r1.x, r1
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c19.x
mul r3.x, r0.y, c19
dsx r3.w, r1.z
mul r0.zw, r0, c8.x
texldd r0, r0.zwzw, s1, r3.zwzw, r3
add r3.y, -r2.w, c15.z
cmp r2.z, r2, r2.w, r3.y
cmp r2.x, r2, r2.z, -r2.z
mul r2.w, v2.x, c9.x
mad r2.x, r2, c19, c19.y
add r2.xy, r2, c4
mul_sat r2.z, r2.w, c16.w
add_pp r1, -r0, c15.y
mad_pp r0, r2.z, r1, r0
dp4_pp r1.x, c2, c2
rsq_pp r1.x, r1.x
mul_pp r1.xyz, r1.x, c2
dp3_sat r3.y, v3, r1
dsy r2.w, r2.y
mov r2.z, r3.x
dsx r1.w, r2.y
mov r1.z, r3
texldd r1, r2, s0, r1.zwzw, r2.zwzw
mul_pp r1, r1, r0
add_pp r2.x, r3.y, c19.z
mul_pp r0.y, r2.x, c3.w
mul_pp_sat r0.w, r0.y, c19
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r2.xyz, r0, r0.w, c0
add r3.xyz, -v1, c1
dp3 r0.w, r3, r3
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
rsq r0.y, r0.w
add r3.xyz, -v0, c1
rsq r0.x, r0.x
dp3 r0.w, r3, r3
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.w, -r0.x, c14.x, r0.y
mov r0.xyz, v3
dp3_sat r0.x, v5, r0
rsq r0.y, r0.w
rcp r3.y, r0.y
mul r3.x, r0, c7
pow_sat r0, r3.x, c6.x
mul r0.y, r3, c12.x
add_sat r0.y, r0, -c11.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2.w, c13
mad r0.x, r0, r0.z, r0.y
mul_pp oC0.xyz, r1, r2
mul_pp oC0.w, r1, r0.x
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
ConstBuffer "$Globals" 224 // 132 used size, 17 vars
Vector 16 [_LightColor0] 4
Vector 64 [_MainOffset] 4
Vector 80 [_DetailOffset] 4
Float 96 [_FalloffPow]
Float 100 [_FalloffScale]
Float 104 [_DetailScale]
Float 108 [_DetailDist]
Float 112 [_MinLight]
Float 116 [_FadeDist]
Float 120 [_FadeScale]
Float 124 [_RimDist]
Float 128 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 102 instructions, 5 temp regs, 0 temp arrays:
// ALU 94 float, 0 int, 4 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefieceddoldmlaieengcbbmlhamefpagmmgkknbabaaaaaaiaaoaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aiaiaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaaiaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcdaanaaaaeaaaaaaaemadaaaafjaaaaaeegiocaaa
aaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaa
acaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
icbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaabgbgbaaaaeaaaaaadeaaaaajicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackaabaia
ibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
igaabaaaaaaaaaaaigaabaiaebaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaackaabaaaaaaaaaaa
bkaabaaaaaaaaaaadbaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaabkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaiccaabaaaabaaaaaaakaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaa
abaaaaaadkaabaaaaaaaaaaabkaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjkcdodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjkcdobkiacaaaaaaaaaaaaeaaaaaaaaaaaaai
dcaabaaaabaaaaaaegaabaaaacaaaaaaegiacaaaaaaaaaaaaeaaaaaaalaaaaaf
ccaabaaaacaaaaaabkaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoamaaaaafmcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaaaaaaaaalkcaabaaa
acaaaaaafgabbaiaibaaaaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaiadpaaaaaaaa
aaaaiadpaaaaaaaiccaabaaaacaaaaaackaabaiambaaaaaaaaaaaaaabkaabaaa
acaaaaaaebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajpcaabaaa
aeaaaaaakgabbaiambaaaaaaaaaaaaaafgaibaiaibaaaaaaaaaaaaaadcaaaaak
pcaabaaaaeaaaaaafgafbaaaacaaaaaaegaobaaaaeaaaaaakgabbaiaibaaaaaa
aaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaibaaaaaaaaaaaaaajgahbaia
ebaaaaaaaeaaaaaaaaaaaaaiccaabaaaacaaaaaadkaabaaaacaaaaaaakaabaia
ebaaaaaaaeaaaaaaebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaadcaaaaaj
hcaabaaaaaaaaaaafgafbaaaacaaaaaaegacbaaaaaaaaaaajgahbaaaaeaaaaaa
diaaaaakgcaabaaaaaaaaaaakgajbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadp
aaaaaadpaaaaaaaaaoaaaaahdcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaaa
aaaaaaaaaaaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaaegiacaaaaaaaaaaa
afaaaaaadiaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaakgikcaaaaaaaaaaa
agaaaaaaalaaaaafecaabaaaacaaaaaadkaabaaaaaaaaaaaamaaaaafecaabaaa
adaaaaaadkaabaaaaaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpapcaaaaibcaabaaaadaaaaaapgbpbaaaabaaaaaa
pgipcaaaaaaaaaaaagaaaaaadcaaaaajpcaabaaaaaaaaaaaagaabaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaaaaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegbcbaaaacaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaaiocaabaaaabaaaaaaagbjbaaaabaaaaaa
agbjbaiaebaaaaaaacaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaa
jgahbaaaabaaaaaaelaaaaafdcaabaaaabaaaaaaegaabaaaabaaaaaadcaaaaal
bcaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaaaiaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaa
aaaaaaaaahaaaaaabacaaaahccaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaa
adaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaa
agaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaaagaaaaaabjaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaiadpaaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadccaaaam
ecaabaaaabaaaaaackiacaaaaaaaaaaaahaaaaaackaabaaaabaaaaaabkiacaia
ebaaaaaaaaaaaaaaahaaaaaaaaaaaaaiccaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaabaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaaabaaaaaaagiacaaaaaaaaaaaahaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaa
diaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_MainOffset]
Vector 5 [_DetailOffset]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_FadeDist]
Float 12 [_FadeScale]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 121 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c16, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r2.xyz, r0.x, v4
abs r0.xyz, r2
add r1.xyz, r0, -r0.zxyw
add r0.w, r1.x, c15.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r1.xyz, r0.w, r1, r0.zxyw
add r0.w, r0.y, -r1.x
add r0.w, r0, c15.y
add_pp r3.xyz, r0.yxzw, -r1
frc r1.w, r0
add_sat r0.y, r0.w, -r1.w
mad_pp r1.xyz, r0.y, r3, r1
abs_pp r0.z, r1.x
abs r0.y, r2.z
rcp_pp r0.z, r0.z
max r1.x, r0, r0.y
mul_pp r0.zw, r1.xyzy, r0.z
rcp r1.y, r1.x
min r1.x, r0, r0.y
mul r1.z, r1.x, r1.y
mov_pp r1.xy, c5
mad_pp r0.zw, r0, c19.y, r1.xyxy
abs r1.y, r2
mul r1.w, r1.z, r1.z
mad r1.x, r1.w, c17.y, c17.z
mad r1.x, r1, r1.w, c17.w
add r3.x, -r1.y, c15.y
mad r2.w, r1.y, c16.x, c16.y
mad r2.w, r2, r1.y, c15
rsq r3.x, r3.x
mad r1.x, r1, r1.w, c18
mad r1.y, r2.w, r1, c16.z
rcp r3.x, r3.x
mul r2.w, r1.y, r3.x
cmp r1.y, r2, c15.x, c15
mad r3.x, r1, r1.w, c18.y
mul r2.y, r1, r2.w
mad r1.x, -r2.y, c16.w, r2.w
mad r1.x, r1.y, c15.z, r1
mad r1.w, r3.x, r1, c18.z
mul r1.y, r1.w, r1.z
mul r2.y, r1.x, c17.x
add r1.z, r2.y, c4.y
dsy r3.y, r1.z
add r1.x, -r1.y, c18.w
add r0.x, r0, -r0.y
cmp r2.w, -r0.x, r1.y, r1.x
dsx r0.xy, r2.xzzw
mul r0.xy, r0, r0
dsy r1.xy, r2.xzzw
add r0.x, r0, r0.y
mul r1.xy, r1, r1
add r0.y, r1.x, r1
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c19.x
mul r3.x, r0.y, c19
dsx r3.w, r1.z
mul r0.zw, r0, c8.x
texldd r0, r0.zwzw, s1, r3.zwzw, r3
add r3.y, -r2.w, c15.z
cmp r2.z, r2, r2.w, r3.y
cmp r2.x, r2, r2.z, -r2.z
mul r2.w, v2.x, c9.x
mad r2.x, r2, c19, c19.y
add r2.xy, r2, c4
mul_sat r2.z, r2.w, c16.w
add_pp r1, -r0, c15.y
mad_pp r0, r2.z, r1, r0
dp4 r1.x, c2, c2
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r3.y, v3, r1
dsy r2.w, r2.y
mov r2.z, r3.x
dsx r1.w, r2.y
mov r1.z, r3
texldd r1, r2, s0, r1.zwzw, r2.zwzw
mul_pp r1, r1, r0
add_pp r2.x, r3.y, c19.z
mul_pp r0.y, r2.x, c3.w
mul_pp_sat r0.w, r0.y, c19
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r2.xyz, r0, r0.w, c0
add r3.xyz, -v1, c1
dp3 r0.w, r3, r3
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
rsq r0.y, r0.w
add r3.xyz, -v0, c1
rsq r0.x, r0.x
dp3 r0.w, r3, r3
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.w, -r0.x, c14.x, r0.y
mov r0.xyz, v3
dp3_sat r0.x, v5, r0
rsq r0.y, r0.w
rcp r3.y, r0.y
mul r3.x, r0, c7
pow_sat r0, r3.x, c6.x
mul r0.y, r3, c12.x
add_sat r0.y, r0, -c11.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2.w, c13
mad r0.x, r0, r0.z, r0.y
mul_pp oC0.xyz, r1, r2
mul_pp oC0.w, r1, r0.x
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 288 // 196 used size, 18 vars
Vector 80 [_LightColor0] 4
Vector 128 [_MainOffset] 4
Vector 144 [_DetailOffset] 4
Float 160 [_FalloffPow]
Float 164 [_FalloffScale]
Float 168 [_DetailScale]
Float 172 [_DetailDist]
Float 176 [_MinLight]
Float 180 [_FadeDist]
Float 184 [_FadeScale]
Float 188 [_RimDist]
Float 192 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 102 instructions, 5 temp regs, 0 temp arrays:
// ALU 94 float, 0 int, 4 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedkemacpafcgdfcglaljiogaffkibbjgopabaaaaaajiaoaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aiaiaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcdaanaaaaeaaaaaaaemadaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadicbabaaaabaaaaaa
gcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaabgbgbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaaigaabaaaaaaaaaaa
igaabaiaebaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaa
dbaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaabkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ccaabaaaabaaaaaaakaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaackaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjkcdodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjkcdobkiacaaaaaaaaaaaaiaaaaaaaaaaaaaidcaabaaaabaaaaaa
egaabaaaacaaaaaaegiacaaaaaaaaaaaaiaaaaaaalaaaaafccaabaaaacaaaaaa
bkaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaacaaaaaaegaabaaaadaaaaaaaaaaaaalkcaabaaaacaaaaaafgabbaia
ibaaaaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaai
ccaabaaaacaaaaaackaabaiambaaaaaaaaaaaaaabkaabaaaacaaaaaaebcaaaaf
ccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajpcaabaaaaeaaaaaakgabbaia
mbaaaaaaaaaaaaaafgaibaiaibaaaaaaaaaaaaaadcaaaaakpcaabaaaaeaaaaaa
fgafbaaaacaaaaaaegaobaaaaeaaaaaakgabbaiaibaaaaaaaaaaaaaaaaaaaaaj
hcaabaaaaaaaaaaaegacbaiaibaaaaaaaaaaaaaajgahbaiaebaaaaaaaeaaaaaa
aaaaaaaiccaabaaaacaaaaaadkaabaaaacaaaaaaakaabaiaebaaaaaaaeaaaaaa
ebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaadcaaaaajhcaabaaaaaaaaaaa
fgafbaaaacaaaaaaegacbaaaaaaaaaaajgahbaaaaeaaaaaadiaaaaakgcaabaaa
aaaaaaaakgajbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaaaaaaaaaaaaaaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaegiacaaaaaaaaaaaajaaaaaadiaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaakgikcaaaaaaaaaaaakaaaaaaalaaaaaf
ecaabaaaacaaaaaadkaabaaaaaaaaaaaamaaaaafecaabaaaadaaaaaadkaabaaa
aaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpapcaaaaibcaabaaaadaaaaaapgbpbaaaabaaaaaapgipcaaaaaaaaaaa
akaaaaaadcaaaaajpcaabaaaaaaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaaaaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaaaaaaaaiocaabaaaabaaaaaaagbjbaaaabaaaaaaagbjbaiaebaaaaaa
acaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaa
elaaaaafdcaabaaaabaaaaaaegaabaaaabaaaaaadcaaaaalbcaabaaaabaaaaaa
akiacaiaebaaaaaaaaaaaaaaamaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaaalaaaaaa
bacaaaahccaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaadaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaaakaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaaakiacaaaaaaaaaaaakaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadccaaaamecaabaaaabaaaaaa
ckiacaaaaaaaaaaaalaaaaaackaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaa
alaaaaaaaaaaaaaiccaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaah
icaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaa
afaaaaaaagiacaaaaaaaaaaaalaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_MainOffset]
Vector 5 [_DetailOffset]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_FadeDist]
Float 12 [_FadeScale]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 121 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c16, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r2.xyz, r0.x, v4
abs r0.xyz, r2
add r1.xyz, r0, -r0.zxyw
add r0.w, r1.x, c15.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r1.xyz, r0.w, r1, r0.zxyw
add r0.w, r0.y, -r1.x
add r0.w, r0, c15.y
add_pp r3.xyz, r0.yxzw, -r1
frc r1.w, r0
add_sat r0.y, r0.w, -r1.w
mad_pp r1.xyz, r0.y, r3, r1
abs_pp r0.z, r1.x
abs r0.y, r2.z
rcp_pp r0.z, r0.z
max r1.x, r0, r0.y
mul_pp r0.zw, r1.xyzy, r0.z
rcp r1.y, r1.x
min r1.x, r0, r0.y
mul r1.z, r1.x, r1.y
mov_pp r1.xy, c5
mad_pp r0.zw, r0, c19.y, r1.xyxy
abs r1.y, r2
mul r1.w, r1.z, r1.z
mad r1.x, r1.w, c17.y, c17.z
mad r1.x, r1, r1.w, c17.w
add r3.x, -r1.y, c15.y
mad r2.w, r1.y, c16.x, c16.y
mad r2.w, r2, r1.y, c15
rsq r3.x, r3.x
mad r1.x, r1, r1.w, c18
mad r1.y, r2.w, r1, c16.z
rcp r3.x, r3.x
mul r2.w, r1.y, r3.x
cmp r1.y, r2, c15.x, c15
mad r3.x, r1, r1.w, c18.y
mul r2.y, r1, r2.w
mad r1.x, -r2.y, c16.w, r2.w
mad r1.x, r1.y, c15.z, r1
mad r1.w, r3.x, r1, c18.z
mul r1.y, r1.w, r1.z
mul r2.y, r1.x, c17.x
add r1.z, r2.y, c4.y
dsy r3.y, r1.z
add r1.x, -r1.y, c18.w
add r0.x, r0, -r0.y
cmp r2.w, -r0.x, r1.y, r1.x
dsx r0.xy, r2.xzzw
mul r0.xy, r0, r0
dsy r1.xy, r2.xzzw
add r0.x, r0, r0.y
mul r1.xy, r1, r1
add r0.y, r1.x, r1
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c19.x
mul r3.x, r0.y, c19
dsx r3.w, r1.z
mul r0.zw, r0, c8.x
texldd r0, r0.zwzw, s1, r3.zwzw, r3
add r3.y, -r2.w, c15.z
cmp r2.z, r2, r2.w, r3.y
cmp r2.x, r2, r2.z, -r2.z
mul r2.w, v2.x, c9.x
mad r2.x, r2, c19, c19.y
add r2.xy, r2, c4
mul_sat r2.z, r2.w, c16.w
add_pp r1, -r0, c15.y
mad_pp r0, r2.z, r1, r0
dp4 r1.x, c2, c2
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r3.y, v3, r1
dsy r2.w, r2.y
mov r2.z, r3.x
dsx r1.w, r2.y
mov r1.z, r3
texldd r1, r2, s0, r1.zwzw, r2.zwzw
mul_pp r1, r1, r0
add_pp r2.x, r3.y, c19.z
mul_pp r0.y, r2.x, c3.w
mul_pp_sat r0.w, r0.y, c19
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r2.xyz, r0, r0.w, c0
add r3.xyz, -v1, c1
dp3 r0.w, r3, r3
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
rsq r0.y, r0.w
add r3.xyz, -v0, c1
rsq r0.x, r0.x
dp3 r0.w, r3, r3
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.w, -r0.x, c14.x, r0.y
mov r0.xyz, v3
dp3_sat r0.x, v5, r0
rsq r0.y, r0.w
rcp r3.y, r0.y
mul r3.x, r0, c7
pow_sat r0, r3.x, c6.x
mul r0.y, r3, c12.x
add_sat r0.y, r0, -c11.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2.w, c13
mad r0.x, r0, r0.z, r0.y
mul_pp oC0.xyz, r1, r2
mul_pp oC0.w, r1, r0.x
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 288 // 196 used size, 18 vars
Vector 80 [_LightColor0] 4
Vector 128 [_MainOffset] 4
Vector 144 [_DetailOffset] 4
Float 160 [_FalloffPow]
Float 164 [_FalloffScale]
Float 168 [_DetailScale]
Float 172 [_DetailDist]
Float 176 [_MinLight]
Float 180 [_FadeDist]
Float 184 [_FadeScale]
Float 188 [_RimDist]
Float 192 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 102 instructions, 5 temp regs, 0 temp arrays:
// ALU 94 float, 0 int, 4 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedghdajclgdgobjanmlhfbhbkljiomlppaabaaaaaajiaoaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aiaiaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcdaanaaaaeaaaaaaaemadaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadicbabaaaabaaaaaa
gcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaabgbgbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaaigaabaaaaaaaaaaa
igaabaiaebaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaa
dbaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaabkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ccaabaaaabaaaaaaakaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaackaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjkcdodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjkcdobkiacaaaaaaaaaaaaiaaaaaaaaaaaaaidcaabaaaabaaaaaa
egaabaaaacaaaaaaegiacaaaaaaaaaaaaiaaaaaaalaaaaafccaabaaaacaaaaaa
bkaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaacaaaaaaegaabaaaadaaaaaaaaaaaaalkcaabaaaacaaaaaafgabbaia
ibaaaaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaai
ccaabaaaacaaaaaackaabaiambaaaaaaaaaaaaaabkaabaaaacaaaaaaebcaaaaf
ccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajpcaabaaaaeaaaaaakgabbaia
mbaaaaaaaaaaaaaafgaibaiaibaaaaaaaaaaaaaadcaaaaakpcaabaaaaeaaaaaa
fgafbaaaacaaaaaaegaobaaaaeaaaaaakgabbaiaibaaaaaaaaaaaaaaaaaaaaaj
hcaabaaaaaaaaaaaegacbaiaibaaaaaaaaaaaaaajgahbaiaebaaaaaaaeaaaaaa
aaaaaaaiccaabaaaacaaaaaadkaabaaaacaaaaaaakaabaiaebaaaaaaaeaaaaaa
ebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaadcaaaaajhcaabaaaaaaaaaaa
fgafbaaaacaaaaaaegacbaaaaaaaaaaajgahbaaaaeaaaaaadiaaaaakgcaabaaa
aaaaaaaakgajbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaaaaaaaaaaaaaaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaegiacaaaaaaaaaaaajaaaaaadiaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaakgikcaaaaaaaaaaaakaaaaaaalaaaaaf
ecaabaaaacaaaaaadkaabaaaaaaaaaaaamaaaaafecaabaaaadaaaaaadkaabaaa
aaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpapcaaaaibcaabaaaadaaaaaapgbpbaaaabaaaaaapgipcaaaaaaaaaaa
akaaaaaadcaaaaajpcaabaaaaaaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaaaaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaaaaaaaaiocaabaaaabaaaaaaagbjbaaaabaaaaaaagbjbaiaebaaaaaa
acaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaa
elaaaaafdcaabaaaabaaaaaaegaabaaaabaaaaaadcaaaaalbcaabaaaabaaaaaa
akiacaiaebaaaaaaaaaaaaaaamaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaaalaaaaaa
bacaaaahccaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaadaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaaakaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaaakiacaaaaaaaaaaaakaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadccaaaamecaabaaaabaaaaaa
ckiacaaaaaaaaaaaalaaaaaackaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaa
alaaaaaaaaaaaaaiccaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaah
icaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaa
afaaaaaaagiacaaaaaaaaaaaalaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_MainOffset]
Vector 5 [_DetailOffset]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_FadeDist]
Float 12 [_FadeScale]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 121 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c16, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r2.xyz, r0.x, v4
abs r0.xyz, r2
add r1.xyz, r0, -r0.zxyw
add r0.w, r1.x, c15.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r1.xyz, r0.w, r1, r0.zxyw
add r0.w, r0.y, -r1.x
add r0.w, r0, c15.y
add_pp r3.xyz, r0.yxzw, -r1
frc r1.w, r0
add_sat r0.y, r0.w, -r1.w
mad_pp r1.xyz, r0.y, r3, r1
abs_pp r0.z, r1.x
abs r0.y, r2.z
rcp_pp r0.z, r0.z
max r1.x, r0, r0.y
mul_pp r0.zw, r1.xyzy, r0.z
rcp r1.y, r1.x
min r1.x, r0, r0.y
mul r1.z, r1.x, r1.y
mov_pp r1.xy, c5
mad_pp r0.zw, r0, c19.y, r1.xyxy
abs r1.y, r2
mul r1.w, r1.z, r1.z
mad r1.x, r1.w, c17.y, c17.z
mad r1.x, r1, r1.w, c17.w
add r3.x, -r1.y, c15.y
mad r2.w, r1.y, c16.x, c16.y
mad r2.w, r2, r1.y, c15
rsq r3.x, r3.x
mad r1.x, r1, r1.w, c18
mad r1.y, r2.w, r1, c16.z
rcp r3.x, r3.x
mul r2.w, r1.y, r3.x
cmp r1.y, r2, c15.x, c15
mad r3.x, r1, r1.w, c18.y
mul r2.y, r1, r2.w
mad r1.x, -r2.y, c16.w, r2.w
mad r1.x, r1.y, c15.z, r1
mad r1.w, r3.x, r1, c18.z
mul r1.y, r1.w, r1.z
mul r2.y, r1.x, c17.x
add r1.z, r2.y, c4.y
dsy r3.y, r1.z
add r1.x, -r1.y, c18.w
add r0.x, r0, -r0.y
cmp r2.w, -r0.x, r1.y, r1.x
dsx r0.xy, r2.xzzw
mul r0.xy, r0, r0
dsy r1.xy, r2.xzzw
add r0.x, r0, r0.y
mul r1.xy, r1, r1
add r0.y, r1.x, r1
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c19.x
mul r3.x, r0.y, c19
dsx r3.w, r1.z
mul r0.zw, r0, c8.x
texldd r0, r0.zwzw, s1, r3.zwzw, r3
add r3.y, -r2.w, c15.z
cmp r2.z, r2, r2.w, r3.y
cmp r2.x, r2, r2.z, -r2.z
mul r2.w, v2.x, c9.x
mad r2.x, r2, c19, c19.y
add r2.xy, r2, c4
mul_sat r2.z, r2.w, c16.w
add_pp r1, -r0, c15.y
mad_pp r0, r2.z, r1, r0
dp4_pp r1.x, c2, c2
rsq_pp r1.x, r1.x
mul_pp r1.xyz, r1.x, c2
dp3_sat r3.y, v3, r1
dsy r2.w, r2.y
mov r2.z, r3.x
dsx r1.w, r2.y
mov r1.z, r3
texldd r1, r2, s0, r1.zwzw, r2.zwzw
mul_pp r1, r1, r0
add_pp r2.x, r3.y, c19.z
mul_pp r0.y, r2.x, c3.w
mul_pp_sat r0.w, r0.y, c19
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r2.xyz, r0, r0.w, c0
add r3.xyz, -v1, c1
dp3 r0.w, r3, r3
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
rsq r0.y, r0.w
add r3.xyz, -v0, c1
rsq r0.x, r0.x
dp3 r0.w, r3, r3
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.w, -r0.x, c14.x, r0.y
mov r0.xyz, v3
dp3_sat r0.x, v5, r0
rsq r0.y, r0.w
rcp r3.y, r0.y
mul r3.x, r0, c7
pow_sat r0, r3.x, c6.x
mul r0.y, r3, c12.x
add_sat r0.y, r0, -c11.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2.w, c13
mad r0.x, r0, r0.z, r0.y
mul_pp oC0.xyz, r1, r2
mul_pp oC0.w, r1, r0.x
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 288 // 196 used size, 18 vars
Vector 80 [_LightColor0] 4
Vector 128 [_MainOffset] 4
Vector 144 [_DetailOffset] 4
Float 160 [_FalloffPow]
Float 164 [_FalloffScale]
Float 168 [_DetailScale]
Float 172 [_DetailDist]
Float 176 [_MinLight]
Float 180 [_FadeDist]
Float 184 [_FadeScale]
Float 188 [_RimDist]
Float 192 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 102 instructions, 5 temp regs, 0 temp arrays:
// ALU 94 float, 0 int, 4 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedgbbfjmiebdbeopajjeikhjckehjpdidfabaaaaaajiaoaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aiaiaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaadaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcdaanaaaaeaaaaaaaemadaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadicbabaaaabaaaaaa
gcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaabgbgbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaaigaabaaaaaaaaaaa
igaabaiaebaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaa
dbaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaabkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ccaabaaaabaaaaaaakaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaackaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjkcdodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjkcdobkiacaaaaaaaaaaaaiaaaaaaaaaaaaaidcaabaaaabaaaaaa
egaabaaaacaaaaaaegiacaaaaaaaaaaaaiaaaaaaalaaaaafccaabaaaacaaaaaa
bkaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaacaaaaaaegaabaaaadaaaaaaaaaaaaalkcaabaaaacaaaaaafgabbaia
ibaaaaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaai
ccaabaaaacaaaaaackaabaiambaaaaaaaaaaaaaabkaabaaaacaaaaaaebcaaaaf
ccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajpcaabaaaaeaaaaaakgabbaia
mbaaaaaaaaaaaaaafgaibaiaibaaaaaaaaaaaaaadcaaaaakpcaabaaaaeaaaaaa
fgafbaaaacaaaaaaegaobaaaaeaaaaaakgabbaiaibaaaaaaaaaaaaaaaaaaaaaj
hcaabaaaaaaaaaaaegacbaiaibaaaaaaaaaaaaaajgahbaiaebaaaaaaaeaaaaaa
aaaaaaaiccaabaaaacaaaaaadkaabaaaacaaaaaaakaabaiaebaaaaaaaeaaaaaa
ebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaadcaaaaajhcaabaaaaaaaaaaa
fgafbaaaacaaaaaaegacbaaaaaaaaaaajgahbaaaaeaaaaaadiaaaaakgcaabaaa
aaaaaaaakgajbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaaaaaaaaaaaaaaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaegiacaaaaaaaaaaaajaaaaaadiaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaakgikcaaaaaaaaaaaakaaaaaaalaaaaaf
ecaabaaaacaaaaaadkaabaaaaaaaaaaaamaaaaafecaabaaaadaaaaaadkaabaaa
aaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpapcaaaaibcaabaaaadaaaaaapgbpbaaaabaaaaaapgipcaaaaaaaaaaa
akaaaaaadcaaaaajpcaabaaaaaaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaaaaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaaaaaaaaiocaabaaaabaaaaaaagbjbaaaabaaaaaaagbjbaiaebaaaaaa
acaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaa
elaaaaafdcaabaaaabaaaaaaegaabaaaabaaaaaadcaaaaalbcaabaaaabaaaaaa
akiacaiaebaaaaaaaaaaaaaaamaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaaalaaaaaa
bacaaaahccaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaadaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaaakaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaaakiacaaaaaaaaaaaakaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadccaaaamecaabaaaabaaaaaa
ckiacaaaaaaaaaaaalaaaaaackaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaa
alaaaaaaaaaaaaaiccaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaah
icaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaa
afaaaaaaagiacaaaaaaaaaaaalaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_MainOffset]
Vector 5 [_DetailOffset]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_FadeDist]
Float 12 [_FadeScale]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 121 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c16, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r2.xyz, r0.x, v4
abs r0.xyz, r2
add r1.xyz, r0, -r0.zxyw
add r0.w, r1.x, c15.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r1.xyz, r0.w, r1, r0.zxyw
add r0.w, r0.y, -r1.x
add r0.w, r0, c15.y
add_pp r3.xyz, r0.yxzw, -r1
frc r1.w, r0
add_sat r0.y, r0.w, -r1.w
mad_pp r1.xyz, r0.y, r3, r1
abs_pp r0.z, r1.x
abs r0.y, r2.z
rcp_pp r0.z, r0.z
max r1.x, r0, r0.y
mul_pp r0.zw, r1.xyzy, r0.z
rcp r1.y, r1.x
min r1.x, r0, r0.y
mul r1.z, r1.x, r1.y
mov_pp r1.xy, c5
mad_pp r0.zw, r0, c19.y, r1.xyxy
abs r1.y, r2
mul r1.w, r1.z, r1.z
mad r1.x, r1.w, c17.y, c17.z
mad r1.x, r1, r1.w, c17.w
add r3.x, -r1.y, c15.y
mad r2.w, r1.y, c16.x, c16.y
mad r2.w, r2, r1.y, c15
rsq r3.x, r3.x
mad r1.x, r1, r1.w, c18
mad r1.y, r2.w, r1, c16.z
rcp r3.x, r3.x
mul r2.w, r1.y, r3.x
cmp r1.y, r2, c15.x, c15
mad r3.x, r1, r1.w, c18.y
mul r2.y, r1, r2.w
mad r1.x, -r2.y, c16.w, r2.w
mad r1.x, r1.y, c15.z, r1
mad r1.w, r3.x, r1, c18.z
mul r1.y, r1.w, r1.z
mul r2.y, r1.x, c17.x
add r1.z, r2.y, c4.y
dsy r3.y, r1.z
add r1.x, -r1.y, c18.w
add r0.x, r0, -r0.y
cmp r2.w, -r0.x, r1.y, r1.x
dsx r0.xy, r2.xzzw
mul r0.xy, r0, r0
dsy r1.xy, r2.xzzw
add r0.x, r0, r0.y
mul r1.xy, r1, r1
add r0.y, r1.x, r1
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c19.x
mul r3.x, r0.y, c19
dsx r3.w, r1.z
mul r0.zw, r0, c8.x
texldd r0, r0.zwzw, s1, r3.zwzw, r3
add r3.y, -r2.w, c15.z
cmp r2.z, r2, r2.w, r3.y
cmp r2.x, r2, r2.z, -r2.z
mul r2.w, v2.x, c9.x
mad r2.x, r2, c19, c19.y
add r2.xy, r2, c4
mul_sat r2.z, r2.w, c16.w
add_pp r1, -r0, c15.y
mad_pp r0, r2.z, r1, r0
dp4 r1.x, c2, c2
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r3.y, v3, r1
dsy r2.w, r2.y
mov r2.z, r3.x
dsx r1.w, r2.y
mov r1.z, r3
texldd r1, r2, s0, r1.zwzw, r2.zwzw
mul_pp r1, r1, r0
add_pp r2.x, r3.y, c19.z
mul_pp r0.y, r2.x, c3.w
mul_pp_sat r0.w, r0.y, c19
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r2.xyz, r0, r0.w, c0
add r3.xyz, -v1, c1
dp3 r0.w, r3, r3
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
rsq r0.y, r0.w
add r3.xyz, -v0, c1
rsq r0.x, r0.x
dp3 r0.w, r3, r3
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.w, -r0.x, c14.x, r0.y
mov r0.xyz, v3
dp3_sat r0.x, v5, r0
rsq r0.y, r0.w
rcp r3.y, r0.y
mul r3.x, r0, c7
pow_sat r0, r3.x, c6.x
mul r0.y, r3, c12.x
add_sat r0.y, r0, -c11.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2.w, c13
mad r0.x, r0, r0.z, r0.y
mul_pp oC0.xyz, r1, r2
mul_pp oC0.w, r1, r0.x
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
ConstBuffer "$Globals" 288 // 196 used size, 18 vars
Vector 80 [_LightColor0] 4
Vector 128 [_MainOffset] 4
Vector 144 [_DetailOffset] 4
Float 160 [_FalloffPow]
Float 164 [_FalloffScale]
Float 168 [_DetailScale]
Float 172 [_DetailDist]
Float 176 [_MinLight]
Float 180 [_FadeDist]
Float 184 [_FadeScale]
Float 188 [_RimDist]
Float 192 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 102 instructions, 5 temp regs, 0 temp arrays:
// ALU 94 float, 0 int, 4 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedaibpombenooomiglmbhojklmejlgpckkabaaaaaalaaoaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aiaiaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdaanaaaa
eaaaaaaaemadaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadicbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
bgbgbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
ckaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaaigaabaaaaaaaaaaaigaabaiaebaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaadbaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaabkaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiccaabaaaabaaaaaa
akaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaadkaabaaaaaaaaaaabkaabaaa
abaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjkcdodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjkcdo
bkiacaaaaaaaaaaaaiaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaacaaaaaa
egiacaaaaaaaaaaaaiaaaaaaalaaaaafccaabaaaacaaaaaabkaabaaaabaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaa
fgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaa
fgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
adaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaa
egaabaaaadaaaaaaaaaaaaalkcaabaaaacaaaaaafgabbaiaibaaaaaaaaaaaaaa
aceaaaaaaaaaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaiccaabaaaacaaaaaa
ckaabaiambaaaaaaaaaaaaaabkaabaaaacaaaaaaebcaaaafccaabaaaacaaaaaa
bkaabaaaacaaaaaaaaaaaaajpcaabaaaaeaaaaaakgabbaiambaaaaaaaaaaaaaa
fgaibaiaibaaaaaaaaaaaaaadcaaaaakpcaabaaaaeaaaaaafgafbaaaacaaaaaa
egaobaaaaeaaaaaakgabbaiaibaaaaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaiaibaaaaaaaaaaaaaajgahbaiaebaaaaaaaeaaaaaaaaaaaaaiccaabaaa
acaaaaaadkaabaaaacaaaaaaakaabaiaebaaaaaaaeaaaaaaebcaaaafccaabaaa
acaaaaaabkaabaaaacaaaaaadcaaaaajhcaabaaaaaaaaaaafgafbaaaacaaaaaa
egacbaaaaaaaaaaajgahbaaaaeaaaaaadiaaaaakgcaabaaaaaaaaaaakgajbaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
aaaaaaaajgafbaaaaaaaaaaaagaabaaaaaaaaaaaaaaaaaaidcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegiacaaaaaaaaaaaajaaaaaadiaaaaaidcaabaaaaaaaaaaa
egaabaaaaaaaaaaakgikcaaaaaaaaaaaakaaaaaaalaaaaafecaabaaaacaaaaaa
dkaabaaaaaaaaaaaamaaaaafecaabaaaadaaaaaadkaabaaaaaaaaaaaejaaaaan
pcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
igaabaaaacaaaaaaigaabaaaadaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpapcaaaai
bcaabaaaadaaaaaapgbpbaaaabaaaaaapgipcaaaaaaaaaaaakaaaaaadcaaaaaj
pcaabaaaaaaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaaaaaaaaaa
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaaaaaaaai
ocaabaaaabaaaaaaagbjbaaaabaaaaaaagbjbaiaebaaaaaaacaaaaaabaaaaaah
ccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaaelaaaaafdcaabaaa
abaaaaaaegaabaaaabaaaaaadcaaaaalbcaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaaamaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadicaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaaalaaaaaabacaaaahccaabaaa
abaaaaaaegbcbaaaafaaaaaaegbcbaaaadaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaabkiacaaaaaaaaaaaakaaaaaacpaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaa
aaaaaaaaakaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafecaabaaa
abaaaaaackaabaaaabaaaaaadccaaaamecaabaaaabaaaaaackiacaaaaaaaaaaa
alaaaaaackaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaaalaaaaaaaaaaaaai
ccaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaadaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaa
aaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaa
aaaaaaaaalaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_MainOffset]
Vector 5 [_DetailOffset]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_FadeDist]
Float 12 [_FadeScale]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 121 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c16, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r2.xyz, r0.x, v4
abs r0.xyz, r2
add r1.xyz, r0, -r0.zxyw
add r0.w, r1.x, c15.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r1.xyz, r0.w, r1, r0.zxyw
add r0.w, r0.y, -r1.x
add r0.w, r0, c15.y
add_pp r3.xyz, r0.yxzw, -r1
frc r1.w, r0
add_sat r0.y, r0.w, -r1.w
mad_pp r1.xyz, r0.y, r3, r1
abs_pp r0.z, r1.x
abs r0.y, r2.z
rcp_pp r0.z, r0.z
max r1.x, r0, r0.y
mul_pp r0.zw, r1.xyzy, r0.z
rcp r1.y, r1.x
min r1.x, r0, r0.y
mul r1.z, r1.x, r1.y
mov_pp r1.xy, c5
mad_pp r0.zw, r0, c19.y, r1.xyxy
abs r1.y, r2
mul r1.w, r1.z, r1.z
mad r1.x, r1.w, c17.y, c17.z
mad r1.x, r1, r1.w, c17.w
add r3.x, -r1.y, c15.y
mad r2.w, r1.y, c16.x, c16.y
mad r2.w, r2, r1.y, c15
rsq r3.x, r3.x
mad r1.x, r1, r1.w, c18
mad r1.y, r2.w, r1, c16.z
rcp r3.x, r3.x
mul r2.w, r1.y, r3.x
cmp r1.y, r2, c15.x, c15
mad r3.x, r1, r1.w, c18.y
mul r2.y, r1, r2.w
mad r1.x, -r2.y, c16.w, r2.w
mad r1.x, r1.y, c15.z, r1
mad r1.w, r3.x, r1, c18.z
mul r1.y, r1.w, r1.z
mul r2.y, r1.x, c17.x
add r1.z, r2.y, c4.y
dsy r3.y, r1.z
add r1.x, -r1.y, c18.w
add r0.x, r0, -r0.y
cmp r2.w, -r0.x, r1.y, r1.x
dsx r0.xy, r2.xzzw
mul r0.xy, r0, r0
dsy r1.xy, r2.xzzw
add r0.x, r0, r0.y
mul r1.xy, r1, r1
add r0.y, r1.x, r1
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c19.x
mul r3.x, r0.y, c19
dsx r3.w, r1.z
mul r0.zw, r0, c8.x
texldd r0, r0.zwzw, s1, r3.zwzw, r3
add r3.y, -r2.w, c15.z
cmp r2.z, r2, r2.w, r3.y
cmp r2.x, r2, r2.z, -r2.z
mul r2.w, v2.x, c9.x
mad r2.x, r2, c19, c19.y
add r2.xy, r2, c4
mul_sat r2.z, r2.w, c16.w
add_pp r1, -r0, c15.y
mad_pp r0, r2.z, r1, r0
dp4 r1.x, c2, c2
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r3.y, v3, r1
dsy r2.w, r2.y
mov r2.z, r3.x
dsx r1.w, r2.y
mov r1.z, r3
texldd r1, r2, s0, r1.zwzw, r2.zwzw
mul_pp r1, r1, r0
add_pp r2.x, r3.y, c19.z
mul_pp r0.y, r2.x, c3.w
mul_pp_sat r0.w, r0.y, c19
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r2.xyz, r0, r0.w, c0
add r3.xyz, -v1, c1
dp3 r0.w, r3, r3
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
rsq r0.y, r0.w
add r3.xyz, -v0, c1
rsq r0.x, r0.x
dp3 r0.w, r3, r3
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.w, -r0.x, c14.x, r0.y
mov r0.xyz, v3
dp3_sat r0.x, v5, r0
rsq r0.y, r0.w
rcp r3.y, r0.y
mul r3.x, r0, c7
pow_sat r0, r3.x, c6.x
mul r0.y, r3, c12.x
add_sat r0.y, r0, -c11.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2.w, c13
mad r0.x, r0, r0.z, r0.y
mul_pp oC0.xyz, r1, r2
mul_pp oC0.w, r1, r0.x
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 288 // 196 used size, 18 vars
Vector 80 [_LightColor0] 4
Vector 128 [_MainOffset] 4
Vector 144 [_DetailOffset] 4
Float 160 [_FalloffPow]
Float 164 [_FalloffScale]
Float 168 [_DetailScale]
Float 172 [_DetailDist]
Float 176 [_MinLight]
Float 180 [_FadeDist]
Float 184 [_FadeScale]
Float 188 [_RimDist]
Float 192 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 102 instructions, 5 temp regs, 0 temp arrays:
// ALU 94 float, 0 int, 4 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedaibpombenooomiglmbhojklmejlgpckkabaaaaaalaaoaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aiaiaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdaanaaaa
eaaaaaaaemadaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadicbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
bgbgbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
ckaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaaigaabaaaaaaaaaaaigaabaiaebaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaadbaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaabkaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiccaabaaaabaaaaaa
akaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaadkaabaaaaaaaaaaabkaabaaa
abaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjkcdodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjkcdo
bkiacaaaaaaaaaaaaiaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaacaaaaaa
egiacaaaaaaaaaaaaiaaaaaaalaaaaafccaabaaaacaaaaaabkaabaaaabaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaa
fgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaa
fgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
adaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaa
egaabaaaadaaaaaaaaaaaaalkcaabaaaacaaaaaafgabbaiaibaaaaaaaaaaaaaa
aceaaaaaaaaaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaiccaabaaaacaaaaaa
ckaabaiambaaaaaaaaaaaaaabkaabaaaacaaaaaaebcaaaafccaabaaaacaaaaaa
bkaabaaaacaaaaaaaaaaaaajpcaabaaaaeaaaaaakgabbaiambaaaaaaaaaaaaaa
fgaibaiaibaaaaaaaaaaaaaadcaaaaakpcaabaaaaeaaaaaafgafbaaaacaaaaaa
egaobaaaaeaaaaaakgabbaiaibaaaaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaiaibaaaaaaaaaaaaaajgahbaiaebaaaaaaaeaaaaaaaaaaaaaiccaabaaa
acaaaaaadkaabaaaacaaaaaaakaabaiaebaaaaaaaeaaaaaaebcaaaafccaabaaa
acaaaaaabkaabaaaacaaaaaadcaaaaajhcaabaaaaaaaaaaafgafbaaaacaaaaaa
egacbaaaaaaaaaaajgahbaaaaeaaaaaadiaaaaakgcaabaaaaaaaaaaakgajbaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
aaaaaaaajgafbaaaaaaaaaaaagaabaaaaaaaaaaaaaaaaaaidcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegiacaaaaaaaaaaaajaaaaaadiaaaaaidcaabaaaaaaaaaaa
egaabaaaaaaaaaaakgikcaaaaaaaaaaaakaaaaaaalaaaaafecaabaaaacaaaaaa
dkaabaaaaaaaaaaaamaaaaafecaabaaaadaaaaaadkaabaaaaaaaaaaaejaaaaan
pcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
igaabaaaacaaaaaaigaabaaaadaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpapcaaaai
bcaabaaaadaaaaaapgbpbaaaabaaaaaapgipcaaaaaaaaaaaakaaaaaadcaaaaaj
pcaabaaaaaaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaaaaaaaaaa
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaaaaaaaai
ocaabaaaabaaaaaaagbjbaaaabaaaaaaagbjbaiaebaaaaaaacaaaaaabaaaaaah
ccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaaelaaaaafdcaabaaa
abaaaaaaegaabaaaabaaaaaadcaaaaalbcaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaaamaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadicaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaaalaaaaaabacaaaahccaabaaa
abaaaaaaegbcbaaaafaaaaaaegbcbaaaadaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaabkiacaaaaaaaaaaaakaaaaaacpaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaa
aaaaaaaaakaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafecaabaaa
abaaaaaackaabaaaabaaaaaadccaaaamecaabaaaabaaaaaackiacaaaaaaaaaaa
alaaaaaackaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaaalaaaaaaaaaaaaai
ccaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaadaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaa
aaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaa
aaaaaaaaalaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_MainOffset]
Vector 5 [_DetailOffset]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_FadeDist]
Float 12 [_FadeScale]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 121 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c16, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r2.xyz, r0.x, v4
abs r0.xyz, r2
add r1.xyz, r0, -r0.zxyw
add r0.w, r1.x, c15.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r1.xyz, r0.w, r1, r0.zxyw
add r0.w, r0.y, -r1.x
add r0.w, r0, c15.y
add_pp r3.xyz, r0.yxzw, -r1
frc r1.w, r0
add_sat r0.y, r0.w, -r1.w
mad_pp r1.xyz, r0.y, r3, r1
abs_pp r0.z, r1.x
abs r0.y, r2.z
rcp_pp r0.z, r0.z
max r1.x, r0, r0.y
mul_pp r0.zw, r1.xyzy, r0.z
rcp r1.y, r1.x
min r1.x, r0, r0.y
mul r1.z, r1.x, r1.y
mov_pp r1.xy, c5
mad_pp r0.zw, r0, c19.y, r1.xyxy
abs r1.y, r2
mul r1.w, r1.z, r1.z
mad r1.x, r1.w, c17.y, c17.z
mad r1.x, r1, r1.w, c17.w
add r3.x, -r1.y, c15.y
mad r2.w, r1.y, c16.x, c16.y
mad r2.w, r2, r1.y, c15
rsq r3.x, r3.x
mad r1.x, r1, r1.w, c18
mad r1.y, r2.w, r1, c16.z
rcp r3.x, r3.x
mul r2.w, r1.y, r3.x
cmp r1.y, r2, c15.x, c15
mad r3.x, r1, r1.w, c18.y
mul r2.y, r1, r2.w
mad r1.x, -r2.y, c16.w, r2.w
mad r1.x, r1.y, c15.z, r1
mad r1.w, r3.x, r1, c18.z
mul r1.y, r1.w, r1.z
mul r2.y, r1.x, c17.x
add r1.z, r2.y, c4.y
dsy r3.y, r1.z
add r1.x, -r1.y, c18.w
add r0.x, r0, -r0.y
cmp r2.w, -r0.x, r1.y, r1.x
dsx r0.xy, r2.xzzw
mul r0.xy, r0, r0
dsy r1.xy, r2.xzzw
add r0.x, r0, r0.y
mul r1.xy, r1, r1
add r0.y, r1.x, r1
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c19.x
mul r3.x, r0.y, c19
dsx r3.w, r1.z
mul r0.zw, r0, c8.x
texldd r0, r0.zwzw, s1, r3.zwzw, r3
add r3.y, -r2.w, c15.z
cmp r2.z, r2, r2.w, r3.y
cmp r2.x, r2, r2.z, -r2.z
mul r2.w, v2.x, c9.x
mad r2.x, r2, c19, c19.y
add r2.xy, r2, c4
mul_sat r2.z, r2.w, c16.w
add_pp r1, -r0, c15.y
mad_pp r0, r2.z, r1, r0
dp4_pp r1.x, c2, c2
rsq_pp r1.x, r1.x
mul_pp r1.xyz, r1.x, c2
dp3_sat r3.y, v3, r1
dsy r2.w, r2.y
mov r2.z, r3.x
dsx r1.w, r2.y
mov r1.z, r3
texldd r1, r2, s0, r1.zwzw, r2.zwzw
mul_pp r1, r1, r0
add_pp r2.x, r3.y, c19.z
mul_pp r0.y, r2.x, c3.w
mul_pp_sat r0.w, r0.y, c19
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r2.xyz, r0, r0.w, c0
add r3.xyz, -v1, c1
dp3 r0.w, r3, r3
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
rsq r0.y, r0.w
add r3.xyz, -v0, c1
rsq r0.x, r0.x
dp3 r0.w, r3, r3
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.w, -r0.x, c14.x, r0.y
mov r0.xyz, v3
dp3_sat r0.x, v5, r0
rsq r0.y, r0.w
rcp r3.y, r0.y
mul r3.x, r0, c7
pow_sat r0, r3.x, c6.x
mul r0.y, r3, c12.x
add_sat r0.y, r0, -c11.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2.w, c13
mad r0.x, r0, r0.z, r0.y
mul_pp oC0.xyz, r1, r2
mul_pp oC0.w, r1, r0.x
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 288 // 196 used size, 18 vars
Vector 80 [_LightColor0] 4
Vector 128 [_MainOffset] 4
Vector 144 [_DetailOffset] 4
Float 160 [_FalloffPow]
Float 164 [_FalloffScale]
Float 168 [_DetailScale]
Float 172 [_DetailDist]
Float 176 [_MinLight]
Float 180 [_FadeDist]
Float 184 [_FadeScale]
Float 188 [_RimDist]
Float 192 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 102 instructions, 5 temp regs, 0 temp arrays:
// ALU 94 float, 0 int, 4 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedkemacpafcgdfcglaljiogaffkibbjgopabaaaaaajiaoaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aiaiaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcdaanaaaaeaaaaaaaemadaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadicbabaaaabaaaaaa
gcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaabgbgbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaaigaabaaaaaaaaaaa
igaabaiaebaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaa
dbaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaabkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ccaabaaaabaaaaaaakaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaackaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjkcdodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjkcdobkiacaaaaaaaaaaaaiaaaaaaaaaaaaaidcaabaaaabaaaaaa
egaabaaaacaaaaaaegiacaaaaaaaaaaaaiaaaaaaalaaaaafccaabaaaacaaaaaa
bkaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaacaaaaaaegaabaaaadaaaaaaaaaaaaalkcaabaaaacaaaaaafgabbaia
ibaaaaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaai
ccaabaaaacaaaaaackaabaiambaaaaaaaaaaaaaabkaabaaaacaaaaaaebcaaaaf
ccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajpcaabaaaaeaaaaaakgabbaia
mbaaaaaaaaaaaaaafgaibaiaibaaaaaaaaaaaaaadcaaaaakpcaabaaaaeaaaaaa
fgafbaaaacaaaaaaegaobaaaaeaaaaaakgabbaiaibaaaaaaaaaaaaaaaaaaaaaj
hcaabaaaaaaaaaaaegacbaiaibaaaaaaaaaaaaaajgahbaiaebaaaaaaaeaaaaaa
aaaaaaaiccaabaaaacaaaaaadkaabaaaacaaaaaaakaabaiaebaaaaaaaeaaaaaa
ebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaadcaaaaajhcaabaaaaaaaaaaa
fgafbaaaacaaaaaaegacbaaaaaaaaaaajgahbaaaaeaaaaaadiaaaaakgcaabaaa
aaaaaaaakgajbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaaaaaaaaaaaaaaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaegiacaaaaaaaaaaaajaaaaaadiaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaakgikcaaaaaaaaaaaakaaaaaaalaaaaaf
ecaabaaaacaaaaaadkaabaaaaaaaaaaaamaaaaafecaabaaaadaaaaaadkaabaaa
aaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpapcaaaaibcaabaaaadaaaaaapgbpbaaaabaaaaaapgipcaaaaaaaaaaa
akaaaaaadcaaaaajpcaabaaaaaaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaaaaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaaaaaaaaiocaabaaaabaaaaaaagbjbaaaabaaaaaaagbjbaiaebaaaaaa
acaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaa
elaaaaafdcaabaaaabaaaaaaegaabaaaabaaaaaadcaaaaalbcaabaaaabaaaaaa
akiacaiaebaaaaaaaaaaaaaaamaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaaalaaaaaa
bacaaaahccaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaadaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaaakaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaaakiacaaaaaaaaaaaakaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadccaaaamecaabaaaabaaaaaa
ckiacaaaaaaaaaaaalaaaaaackaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaa
alaaaaaaaaaaaaaiccaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaah
icaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaa
afaaaaaaagiacaaaaaaaaaaaalaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_MainOffset]
Vector 5 [_DetailOffset]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_FadeDist]
Float 12 [_FadeScale]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 121 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c16, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r2.xyz, r0.x, v4
abs r0.xyz, r2
add r1.xyz, r0, -r0.zxyw
add r0.w, r1.x, c15.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r1.xyz, r0.w, r1, r0.zxyw
add r0.w, r0.y, -r1.x
add r0.w, r0, c15.y
add_pp r3.xyz, r0.yxzw, -r1
frc r1.w, r0
add_sat r0.y, r0.w, -r1.w
mad_pp r1.xyz, r0.y, r3, r1
abs_pp r0.z, r1.x
abs r0.y, r2.z
rcp_pp r0.z, r0.z
max r1.x, r0, r0.y
mul_pp r0.zw, r1.xyzy, r0.z
rcp r1.y, r1.x
min r1.x, r0, r0.y
mul r1.z, r1.x, r1.y
mov_pp r1.xy, c5
mad_pp r0.zw, r0, c19.y, r1.xyxy
abs r1.y, r2
mul r1.w, r1.z, r1.z
mad r1.x, r1.w, c17.y, c17.z
mad r1.x, r1, r1.w, c17.w
add r3.x, -r1.y, c15.y
mad r2.w, r1.y, c16.x, c16.y
mad r2.w, r2, r1.y, c15
rsq r3.x, r3.x
mad r1.x, r1, r1.w, c18
mad r1.y, r2.w, r1, c16.z
rcp r3.x, r3.x
mul r2.w, r1.y, r3.x
cmp r1.y, r2, c15.x, c15
mad r3.x, r1, r1.w, c18.y
mul r2.y, r1, r2.w
mad r1.x, -r2.y, c16.w, r2.w
mad r1.x, r1.y, c15.z, r1
mad r1.w, r3.x, r1, c18.z
mul r1.y, r1.w, r1.z
mul r2.y, r1.x, c17.x
add r1.z, r2.y, c4.y
dsy r3.y, r1.z
add r1.x, -r1.y, c18.w
add r0.x, r0, -r0.y
cmp r2.w, -r0.x, r1.y, r1.x
dsx r0.xy, r2.xzzw
mul r0.xy, r0, r0
dsy r1.xy, r2.xzzw
add r0.x, r0, r0.y
mul r1.xy, r1, r1
add r0.y, r1.x, r1
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c19.x
mul r3.x, r0.y, c19
dsx r3.w, r1.z
mul r0.zw, r0, c8.x
texldd r0, r0.zwzw, s1, r3.zwzw, r3
add r3.y, -r2.w, c15.z
cmp r2.z, r2, r2.w, r3.y
cmp r2.x, r2, r2.z, -r2.z
mul r2.w, v2.x, c9.x
mad r2.x, r2, c19, c19.y
add r2.xy, r2, c4
mul_sat r2.z, r2.w, c16.w
add_pp r1, -r0, c15.y
mad_pp r0, r2.z, r1, r0
dp4_pp r1.x, c2, c2
rsq_pp r1.x, r1.x
mul_pp r1.xyz, r1.x, c2
dp3_sat r3.y, v3, r1
dsy r2.w, r2.y
mov r2.z, r3.x
dsx r1.w, r2.y
mov r1.z, r3
texldd r1, r2, s0, r1.zwzw, r2.zwzw
mul_pp r1, r1, r0
add_pp r2.x, r3.y, c19.z
mul_pp r0.y, r2.x, c3.w
mul_pp_sat r0.w, r0.y, c19
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r2.xyz, r0, r0.w, c0
add r3.xyz, -v1, c1
dp3 r0.w, r3, r3
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
rsq r0.y, r0.w
add r3.xyz, -v0, c1
rsq r0.x, r0.x
dp3 r0.w, r3, r3
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.w, -r0.x, c14.x, r0.y
mov r0.xyz, v3
dp3_sat r0.x, v5, r0
rsq r0.y, r0.w
rcp r3.y, r0.y
mul r3.x, r0, c7
pow_sat r0, r3.x, c6.x
mul r0.y, r3, c12.x
add_sat r0.y, r0, -c11.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2.w, c13
mad r0.x, r0, r0.z, r0.y
mul_pp oC0.xyz, r1, r2
mul_pp oC0.w, r1, r0.x
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 352 // 260 used size, 19 vars
Vector 144 [_LightColor0] 4
Vector 192 [_MainOffset] 4
Vector 208 [_DetailOffset] 4
Float 224 [_FalloffPow]
Float 228 [_FalloffScale]
Float 232 [_DetailScale]
Float 236 [_DetailDist]
Float 240 [_MinLight]
Float 244 [_FadeDist]
Float 248 [_FadeScale]
Float 252 [_RimDist]
Float 256 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 102 instructions, 5 temp regs, 0 temp arrays:
// ALU 94 float, 0 int, 4 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedlemiclfpajiakplfkhmimmlhdpnneehfabaaaaaalaaoaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aiaiaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaadaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdaanaaaa
eaaaaaaaemadaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadicbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
bgbgbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
ckaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaaigaabaaaaaaaaaaaigaabaiaebaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaadbaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaabkaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiccaabaaaabaaaaaa
akaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaadkaabaaaaaaaaaaabkaabaaa
abaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjkcdodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjkcdo
bkiacaaaaaaaaaaaamaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaacaaaaaa
egiacaaaaaaaaaaaamaaaaaaalaaaaafccaabaaaacaaaaaabkaabaaaabaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaa
fgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaa
fgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
adaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaa
egaabaaaadaaaaaaaaaaaaalkcaabaaaacaaaaaafgabbaiaibaaaaaaaaaaaaaa
aceaaaaaaaaaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaiccaabaaaacaaaaaa
ckaabaiambaaaaaaaaaaaaaabkaabaaaacaaaaaaebcaaaafccaabaaaacaaaaaa
bkaabaaaacaaaaaaaaaaaaajpcaabaaaaeaaaaaakgabbaiambaaaaaaaaaaaaaa
fgaibaiaibaaaaaaaaaaaaaadcaaaaakpcaabaaaaeaaaaaafgafbaaaacaaaaaa
egaobaaaaeaaaaaakgabbaiaibaaaaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaiaibaaaaaaaaaaaaaajgahbaiaebaaaaaaaeaaaaaaaaaaaaaiccaabaaa
acaaaaaadkaabaaaacaaaaaaakaabaiaebaaaaaaaeaaaaaaebcaaaafccaabaaa
acaaaaaabkaabaaaacaaaaaadcaaaaajhcaabaaaaaaaaaaafgafbaaaacaaaaaa
egacbaaaaaaaaaaajgahbaaaaeaaaaaadiaaaaakgcaabaaaaaaaaaaakgajbaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
aaaaaaaajgafbaaaaaaaaaaaagaabaaaaaaaaaaaaaaaaaaidcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegiacaaaaaaaaaaaanaaaaaadiaaaaaidcaabaaaaaaaaaaa
egaabaaaaaaaaaaakgikcaaaaaaaaaaaaoaaaaaaalaaaaafecaabaaaacaaaaaa
dkaabaaaaaaaaaaaamaaaaafecaabaaaadaaaaaadkaabaaaaaaaaaaaejaaaaan
pcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
igaabaaaacaaaaaaigaabaaaadaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpapcaaaai
bcaabaaaadaaaaaapgbpbaaaabaaaaaapgipcaaaaaaaaaaaaoaaaaaadcaaaaaj
pcaabaaaaaaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaaaaaaaaaa
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaaaaaaaai
ocaabaaaabaaaaaaagbjbaaaabaaaaaaagbjbaiaebaaaaaaacaaaaaabaaaaaah
ccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaaelaaaaafdcaabaaa
abaaaaaaegaabaaaabaaaaaadcaaaaalbcaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabaaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadicaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaaapaaaaaabacaaaahccaabaaa
abaaaaaaegbcbaaaafaaaaaaegbcbaaaadaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaabkiacaaaaaaaaaaaaoaaaaaacpaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaa
aaaaaaaaaoaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafecaabaaa
abaaaaaackaabaaaabaaaaaadccaaaamecaabaaaabaaaaaackiacaaaaaaaaaaa
apaaaaaackaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaaapaaaaaaaaaaaaai
ccaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaadaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaa
aaaaaaaaajaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaaagiacaaa
aaaaaaaaapaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_MainOffset]
Vector 5 [_DetailOffset]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_FadeDist]
Float 12 [_FadeScale]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 121 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c16, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r2.xyz, r0.x, v4
abs r0.xyz, r2
add r1.xyz, r0, -r0.zxyw
add r0.w, r1.x, c15.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r1.xyz, r0.w, r1, r0.zxyw
add r0.w, r0.y, -r1.x
add r0.w, r0, c15.y
add_pp r3.xyz, r0.yxzw, -r1
frc r1.w, r0
add_sat r0.y, r0.w, -r1.w
mad_pp r1.xyz, r0.y, r3, r1
abs_pp r0.z, r1.x
abs r0.y, r2.z
rcp_pp r0.z, r0.z
max r1.x, r0, r0.y
mul_pp r0.zw, r1.xyzy, r0.z
rcp r1.y, r1.x
min r1.x, r0, r0.y
mul r1.z, r1.x, r1.y
mov_pp r1.xy, c5
mad_pp r0.zw, r0, c19.y, r1.xyxy
abs r1.y, r2
mul r1.w, r1.z, r1.z
mad r1.x, r1.w, c17.y, c17.z
mad r1.x, r1, r1.w, c17.w
add r3.x, -r1.y, c15.y
mad r2.w, r1.y, c16.x, c16.y
mad r2.w, r2, r1.y, c15
rsq r3.x, r3.x
mad r1.x, r1, r1.w, c18
mad r1.y, r2.w, r1, c16.z
rcp r3.x, r3.x
mul r2.w, r1.y, r3.x
cmp r1.y, r2, c15.x, c15
mad r3.x, r1, r1.w, c18.y
mul r2.y, r1, r2.w
mad r1.x, -r2.y, c16.w, r2.w
mad r1.x, r1.y, c15.z, r1
mad r1.w, r3.x, r1, c18.z
mul r1.y, r1.w, r1.z
mul r2.y, r1.x, c17.x
add r1.z, r2.y, c4.y
dsy r3.y, r1.z
add r1.x, -r1.y, c18.w
add r0.x, r0, -r0.y
cmp r2.w, -r0.x, r1.y, r1.x
dsx r0.xy, r2.xzzw
mul r0.xy, r0, r0
dsy r1.xy, r2.xzzw
add r0.x, r0, r0.y
mul r1.xy, r1, r1
add r0.y, r1.x, r1
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c19.x
mul r3.x, r0.y, c19
dsx r3.w, r1.z
mul r0.zw, r0, c8.x
texldd r0, r0.zwzw, s1, r3.zwzw, r3
add r3.y, -r2.w, c15.z
cmp r2.z, r2, r2.w, r3.y
cmp r2.x, r2, r2.z, -r2.z
mul r2.w, v2.x, c9.x
mad r2.x, r2, c19, c19.y
add r2.xy, r2, c4
mul_sat r2.z, r2.w, c16.w
add_pp r1, -r0, c15.y
mad_pp r0, r2.z, r1, r0
dp4 r1.x, c2, c2
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r3.y, v3, r1
dsy r2.w, r2.y
mov r2.z, r3.x
dsx r1.w, r2.y
mov r1.z, r3
texldd r1, r2, s0, r1.zwzw, r2.zwzw
mul_pp r1, r1, r0
add_pp r2.x, r3.y, c19.z
mul_pp r0.y, r2.x, c3.w
mul_pp_sat r0.w, r0.y, c19
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r2.xyz, r0, r0.w, c0
add r3.xyz, -v1, c1
dp3 r0.w, r3, r3
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
rsq r0.y, r0.w
add r3.xyz, -v0, c1
rsq r0.x, r0.x
dp3 r0.w, r3, r3
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.w, -r0.x, c14.x, r0.y
mov r0.xyz, v3
dp3_sat r0.x, v5, r0
rsq r0.y, r0.w
rcp r3.y, r0.y
mul r3.x, r0, c7
pow_sat r0, r3.x, c6.x
mul r0.y, r3, c12.x
add_sat r0.y, r0, -c11.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2.w, c13
mad r0.x, r0, r0.z, r0.y
mul_pp oC0.xyz, r1, r2
mul_pp oC0.w, r1, r0.x
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 288 // 196 used size, 18 vars
Vector 80 [_LightColor0] 4
Vector 128 [_MainOffset] 4
Vector 144 [_DetailOffset] 4
Float 160 [_FalloffPow]
Float 164 [_FalloffScale]
Float 168 [_DetailScale]
Float 172 [_DetailDist]
Float 176 [_MinLight]
Float 180 [_FadeDist]
Float 184 [_FadeScale]
Float 188 [_RimDist]
Float 192 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 102 instructions, 5 temp regs, 0 temp arrays:
// ALU 94 float, 0 int, 4 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedkmaehhpoceipnijjinlgddgpmipnnlikabaaaaaalaaoaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aiaiaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdaanaaaa
eaaaaaaaemadaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadicbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
bgbgbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
ckaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaaigaabaaaaaaaaaaaigaabaiaebaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaadbaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaabkaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiccaabaaaabaaaaaa
akaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaadkaabaaaaaaaaaaabkaabaaa
abaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjkcdodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjkcdo
bkiacaaaaaaaaaaaaiaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaacaaaaaa
egiacaaaaaaaaaaaaiaaaaaaalaaaaafccaabaaaacaaaaaabkaabaaaabaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaa
fgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaa
fgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
adaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaa
egaabaaaadaaaaaaaaaaaaalkcaabaaaacaaaaaafgabbaiaibaaaaaaaaaaaaaa
aceaaaaaaaaaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaiccaabaaaacaaaaaa
ckaabaiambaaaaaaaaaaaaaabkaabaaaacaaaaaaebcaaaafccaabaaaacaaaaaa
bkaabaaaacaaaaaaaaaaaaajpcaabaaaaeaaaaaakgabbaiambaaaaaaaaaaaaaa
fgaibaiaibaaaaaaaaaaaaaadcaaaaakpcaabaaaaeaaaaaafgafbaaaacaaaaaa
egaobaaaaeaaaaaakgabbaiaibaaaaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaiaibaaaaaaaaaaaaaajgahbaiaebaaaaaaaeaaaaaaaaaaaaaiccaabaaa
acaaaaaadkaabaaaacaaaaaaakaabaiaebaaaaaaaeaaaaaaebcaaaafccaabaaa
acaaaaaabkaabaaaacaaaaaadcaaaaajhcaabaaaaaaaaaaafgafbaaaacaaaaaa
egacbaaaaaaaaaaajgahbaaaaeaaaaaadiaaaaakgcaabaaaaaaaaaaakgajbaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
aaaaaaaajgafbaaaaaaaaaaaagaabaaaaaaaaaaaaaaaaaaidcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegiacaaaaaaaaaaaajaaaaaadiaaaaaidcaabaaaaaaaaaaa
egaabaaaaaaaaaaakgikcaaaaaaaaaaaakaaaaaaalaaaaafecaabaaaacaaaaaa
dkaabaaaaaaaaaaaamaaaaafecaabaaaadaaaaaadkaabaaaaaaaaaaaejaaaaan
pcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
igaabaaaacaaaaaaigaabaaaadaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpapcaaaai
bcaabaaaadaaaaaapgbpbaaaabaaaaaapgipcaaaaaaaaaaaakaaaaaadcaaaaaj
pcaabaaaaaaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaaaaaaaaaa
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaaaaaaaai
ocaabaaaabaaaaaaagbjbaaaabaaaaaaagbjbaiaebaaaaaaacaaaaaabaaaaaah
ccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaaelaaaaafdcaabaaa
abaaaaaaegaabaaaabaaaaaadcaaaaalbcaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaaamaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadicaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaaalaaaaaabacaaaahccaabaaa
abaaaaaaegbcbaaaafaaaaaaegbcbaaaadaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaabkiacaaaaaaaaaaaakaaaaaacpaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaa
aaaaaaaaakaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafecaabaaa
abaaaaaackaabaaaabaaaaaadccaaaamecaabaaaabaaaaaackiacaaaaaaaaaaa
alaaaaaackaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaaalaaaaaaaaaaaaai
ccaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaadaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaa
aaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaa
aaaaaaaaalaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_MainOffset]
Vector 5 [_DetailOffset]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_FadeDist]
Float 12 [_FadeScale]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 121 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c16, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r2.xyz, r0.x, v4
abs r0.xyz, r2
add r1.xyz, r0, -r0.zxyw
add r0.w, r1.x, c15.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r1.xyz, r0.w, r1, r0.zxyw
add r0.w, r0.y, -r1.x
add r0.w, r0, c15.y
add_pp r3.xyz, r0.yxzw, -r1
frc r1.w, r0
add_sat r0.y, r0.w, -r1.w
mad_pp r1.xyz, r0.y, r3, r1
abs_pp r0.z, r1.x
abs r0.y, r2.z
rcp_pp r0.z, r0.z
max r1.x, r0, r0.y
mul_pp r0.zw, r1.xyzy, r0.z
rcp r1.y, r1.x
min r1.x, r0, r0.y
mul r1.z, r1.x, r1.y
mov_pp r1.xy, c5
mad_pp r0.zw, r0, c19.y, r1.xyxy
abs r1.y, r2
mul r1.w, r1.z, r1.z
mad r1.x, r1.w, c17.y, c17.z
mad r1.x, r1, r1.w, c17.w
add r3.x, -r1.y, c15.y
mad r2.w, r1.y, c16.x, c16.y
mad r2.w, r2, r1.y, c15
rsq r3.x, r3.x
mad r1.x, r1, r1.w, c18
mad r1.y, r2.w, r1, c16.z
rcp r3.x, r3.x
mul r2.w, r1.y, r3.x
cmp r1.y, r2, c15.x, c15
mad r3.x, r1, r1.w, c18.y
mul r2.y, r1, r2.w
mad r1.x, -r2.y, c16.w, r2.w
mad r1.x, r1.y, c15.z, r1
mad r1.w, r3.x, r1, c18.z
mul r1.y, r1.w, r1.z
mul r2.y, r1.x, c17.x
add r1.z, r2.y, c4.y
dsy r3.y, r1.z
add r1.x, -r1.y, c18.w
add r0.x, r0, -r0.y
cmp r2.w, -r0.x, r1.y, r1.x
dsx r0.xy, r2.xzzw
mul r0.xy, r0, r0
dsy r1.xy, r2.xzzw
add r0.x, r0, r0.y
mul r1.xy, r1, r1
add r0.y, r1.x, r1
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c19.x
mul r3.x, r0.y, c19
dsx r3.w, r1.z
mul r0.zw, r0, c8.x
texldd r0, r0.zwzw, s1, r3.zwzw, r3
add r3.y, -r2.w, c15.z
cmp r2.z, r2, r2.w, r3.y
cmp r2.x, r2, r2.z, -r2.z
mul r2.w, v2.x, c9.x
mad r2.x, r2, c19, c19.y
add r2.xy, r2, c4
mul_sat r2.z, r2.w, c16.w
add_pp r1, -r0, c15.y
mad_pp r0, r2.z, r1, r0
dp4 r1.x, c2, c2
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r3.y, v3, r1
dsy r2.w, r2.y
mov r2.z, r3.x
dsx r1.w, r2.y
mov r1.z, r3
texldd r1, r2, s0, r1.zwzw, r2.zwzw
mul_pp r1, r1, r0
add_pp r2.x, r3.y, c19.z
mul_pp r0.y, r2.x, c3.w
mul_pp_sat r0.w, r0.y, c19
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r2.xyz, r0, r0.w, c0
add r3.xyz, -v1, c1
dp3 r0.w, r3, r3
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
rsq r0.y, r0.w
add r3.xyz, -v0, c1
rsq r0.x, r0.x
dp3 r0.w, r3, r3
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.w, -r0.x, c14.x, r0.y
mov r0.xyz, v3
dp3_sat r0.x, v5, r0
rsq r0.y, r0.w
rcp r3.y, r0.y
mul r3.x, r0, c7
pow_sat r0, r3.x, c6.x
mul r0.y, r3, c12.x
add_sat r0.y, r0, -c11.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2.w, c13
mad r0.x, r0, r0.z, r0.y
mul_pp oC0.xyz, r1, r2
mul_pp oC0.w, r1, r0.x
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 288 // 196 used size, 18 vars
Vector 80 [_LightColor0] 4
Vector 128 [_MainOffset] 4
Vector 144 [_DetailOffset] 4
Float 160 [_FalloffPow]
Float 164 [_FalloffScale]
Float 168 [_DetailScale]
Float 172 [_DetailDist]
Float 176 [_MinLight]
Float 180 [_FadeDist]
Float 184 [_FadeScale]
Float 188 [_RimDist]
Float 192 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 102 instructions, 5 temp regs, 0 temp arrays:
// ALU 94 float, 0 int, 4 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedkmaehhpoceipnijjinlgddgpmipnnlikabaaaaaalaaoaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aiaiaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdaanaaaa
eaaaaaaaemadaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadicbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
bgbgbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
ckaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaaigaabaaaaaaaaaaaigaabaiaebaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaadbaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaabkaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiccaabaaaabaaaaaa
akaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaadkaabaaaaaaaaaaabkaabaaa
abaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjkcdodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjkcdo
bkiacaaaaaaaaaaaaiaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaacaaaaaa
egiacaaaaaaaaaaaaiaaaaaaalaaaaafccaabaaaacaaaaaabkaabaaaabaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaa
fgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaa
fgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
adaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaa
egaabaaaadaaaaaaaaaaaaalkcaabaaaacaaaaaafgabbaiaibaaaaaaaaaaaaaa
aceaaaaaaaaaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaiccaabaaaacaaaaaa
ckaabaiambaaaaaaaaaaaaaabkaabaaaacaaaaaaebcaaaafccaabaaaacaaaaaa
bkaabaaaacaaaaaaaaaaaaajpcaabaaaaeaaaaaakgabbaiambaaaaaaaaaaaaaa
fgaibaiaibaaaaaaaaaaaaaadcaaaaakpcaabaaaaeaaaaaafgafbaaaacaaaaaa
egaobaaaaeaaaaaakgabbaiaibaaaaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaiaibaaaaaaaaaaaaaajgahbaiaebaaaaaaaeaaaaaaaaaaaaaiccaabaaa
acaaaaaadkaabaaaacaaaaaaakaabaiaebaaaaaaaeaaaaaaebcaaaafccaabaaa
acaaaaaabkaabaaaacaaaaaadcaaaaajhcaabaaaaaaaaaaafgafbaaaacaaaaaa
egacbaaaaaaaaaaajgahbaaaaeaaaaaadiaaaaakgcaabaaaaaaaaaaakgajbaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
aaaaaaaajgafbaaaaaaaaaaaagaabaaaaaaaaaaaaaaaaaaidcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegiacaaaaaaaaaaaajaaaaaadiaaaaaidcaabaaaaaaaaaaa
egaabaaaaaaaaaaakgikcaaaaaaaaaaaakaaaaaaalaaaaafecaabaaaacaaaaaa
dkaabaaaaaaaaaaaamaaaaafecaabaaaadaaaaaadkaabaaaaaaaaaaaejaaaaan
pcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
igaabaaaacaaaaaaigaabaaaadaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpapcaaaai
bcaabaaaadaaaaaapgbpbaaaabaaaaaapgipcaaaaaaaaaaaakaaaaaadcaaaaaj
pcaabaaaaaaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaaaaaaaaaa
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaaaaaaaai
ocaabaaaabaaaaaaagbjbaaaabaaaaaaagbjbaiaebaaaaaaacaaaaaabaaaaaah
ccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaaelaaaaafdcaabaaa
abaaaaaaegaabaaaabaaaaaadcaaaaalbcaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaaamaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadicaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaaalaaaaaabacaaaahccaabaaa
abaaaaaaegbcbaaaafaaaaaaegbcbaaaadaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaabkiacaaaaaaaaaaaakaaaaaacpaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaa
aaaaaaaaakaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafecaabaaa
abaaaaaackaabaaaabaaaaaadccaaaamecaabaaaabaaaaaackiacaaaaaaaaaaa
alaaaaaackaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaaalaaaaaaaaaaaaai
ccaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaadaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaa
aaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaa
aaaaaaaaalaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_MainOffset]
Vector 5 [_DetailOffset]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_FadeDist]
Float 12 [_FadeScale]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 121 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c16, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r2.xyz, r0.x, v4
abs r0.xyz, r2
add r1.xyz, r0, -r0.zxyw
add r0.w, r1.x, c15.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r1.xyz, r0.w, r1, r0.zxyw
add r0.w, r0.y, -r1.x
add r0.w, r0, c15.y
add_pp r3.xyz, r0.yxzw, -r1
frc r1.w, r0
add_sat r0.y, r0.w, -r1.w
mad_pp r1.xyz, r0.y, r3, r1
abs_pp r0.z, r1.x
abs r0.y, r2.z
rcp_pp r0.z, r0.z
max r1.x, r0, r0.y
mul_pp r0.zw, r1.xyzy, r0.z
rcp r1.y, r1.x
min r1.x, r0, r0.y
mul r1.z, r1.x, r1.y
mov_pp r1.xy, c5
mad_pp r0.zw, r0, c19.y, r1.xyxy
abs r1.y, r2
mul r1.w, r1.z, r1.z
mad r1.x, r1.w, c17.y, c17.z
mad r1.x, r1, r1.w, c17.w
add r3.x, -r1.y, c15.y
mad r2.w, r1.y, c16.x, c16.y
mad r2.w, r2, r1.y, c15
rsq r3.x, r3.x
mad r1.x, r1, r1.w, c18
mad r1.y, r2.w, r1, c16.z
rcp r3.x, r3.x
mul r2.w, r1.y, r3.x
cmp r1.y, r2, c15.x, c15
mad r3.x, r1, r1.w, c18.y
mul r2.y, r1, r2.w
mad r1.x, -r2.y, c16.w, r2.w
mad r1.x, r1.y, c15.z, r1
mad r1.w, r3.x, r1, c18.z
mul r1.y, r1.w, r1.z
mul r2.y, r1.x, c17.x
add r1.z, r2.y, c4.y
dsy r3.y, r1.z
add r1.x, -r1.y, c18.w
add r0.x, r0, -r0.y
cmp r2.w, -r0.x, r1.y, r1.x
dsx r0.xy, r2.xzzw
mul r0.xy, r0, r0
dsy r1.xy, r2.xzzw
add r0.x, r0, r0.y
mul r1.xy, r1, r1
add r0.y, r1.x, r1
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c19.x
mul r3.x, r0.y, c19
dsx r3.w, r1.z
mul r0.zw, r0, c8.x
texldd r0, r0.zwzw, s1, r3.zwzw, r3
add r3.y, -r2.w, c15.z
cmp r2.z, r2, r2.w, r3.y
cmp r2.x, r2, r2.z, -r2.z
mul r2.w, v2.x, c9.x
mad r2.x, r2, c19, c19.y
add r2.xy, r2, c4
mul_sat r2.z, r2.w, c16.w
add_pp r1, -r0, c15.y
mad_pp r0, r2.z, r1, r0
dp4 r1.x, c2, c2
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r3.y, v3, r1
dsy r2.w, r2.y
mov r2.z, r3.x
dsx r1.w, r2.y
mov r1.z, r3
texldd r1, r2, s0, r1.zwzw, r2.zwzw
mul_pp r1, r1, r0
add_pp r2.x, r3.y, c19.z
mul_pp r0.y, r2.x, c3.w
mul_pp_sat r0.w, r0.y, c19
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r2.xyz, r0, r0.w, c0
add r3.xyz, -v1, c1
dp3 r0.w, r3, r3
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
rsq r0.y, r0.w
add r3.xyz, -v0, c1
rsq r0.x, r0.x
dp3 r0.w, r3, r3
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.w, -r0.x, c14.x, r0.y
mov r0.xyz, v3
dp3_sat r0.x, v5, r0
rsq r0.y, r0.w
rcp r3.y, r0.y
mul r3.x, r0, c7
pow_sat r0, r3.x, c6.x
mul r0.y, r3, c12.x
add_sat r0.y, r0, -c11.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2.w, c13
mad r0.x, r0, r0.z, r0.y
mul_pp oC0.xyz, r1, r2
mul_pp oC0.w, r1, r0.x
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 352 // 260 used size, 19 vars
Vector 144 [_LightColor0] 4
Vector 192 [_MainOffset] 4
Vector 208 [_DetailOffset] 4
Float 224 [_FalloffPow]
Float 228 [_FalloffScale]
Float 232 [_DetailScale]
Float 236 [_DetailDist]
Float 240 [_MinLight]
Float 244 [_FadeDist]
Float 248 [_FadeScale]
Float 252 [_RimDist]
Float 256 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 102 instructions, 5 temp regs, 0 temp arrays:
// ALU 94 float, 0 int, 4 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedachdobjdpagepmcaalngnlkihkacoledabaaaaaalaaoaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aiaiaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdaanaaaa
eaaaaaaaemadaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadicbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
bgbgbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
ckaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaaigaabaaaaaaaaaaaigaabaiaebaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaadbaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaabkaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiccaabaaaabaaaaaa
akaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaadkaabaaaaaaaaaaabkaabaaa
abaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjkcdodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjkcdo
bkiacaaaaaaaaaaaamaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaacaaaaaa
egiacaaaaaaaaaaaamaaaaaaalaaaaafccaabaaaacaaaaaabkaabaaaabaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaa
fgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaa
fgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
adaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaa
egaabaaaadaaaaaaaaaaaaalkcaabaaaacaaaaaafgabbaiaibaaaaaaaaaaaaaa
aceaaaaaaaaaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaiccaabaaaacaaaaaa
ckaabaiambaaaaaaaaaaaaaabkaabaaaacaaaaaaebcaaaafccaabaaaacaaaaaa
bkaabaaaacaaaaaaaaaaaaajpcaabaaaaeaaaaaakgabbaiambaaaaaaaaaaaaaa
fgaibaiaibaaaaaaaaaaaaaadcaaaaakpcaabaaaaeaaaaaafgafbaaaacaaaaaa
egaobaaaaeaaaaaakgabbaiaibaaaaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaiaibaaaaaaaaaaaaaajgahbaiaebaaaaaaaeaaaaaaaaaaaaaiccaabaaa
acaaaaaadkaabaaaacaaaaaaakaabaiaebaaaaaaaeaaaaaaebcaaaafccaabaaa
acaaaaaabkaabaaaacaaaaaadcaaaaajhcaabaaaaaaaaaaafgafbaaaacaaaaaa
egacbaaaaaaaaaaajgahbaaaaeaaaaaadiaaaaakgcaabaaaaaaaaaaakgajbaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
aaaaaaaajgafbaaaaaaaaaaaagaabaaaaaaaaaaaaaaaaaaidcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegiacaaaaaaaaaaaanaaaaaadiaaaaaidcaabaaaaaaaaaaa
egaabaaaaaaaaaaakgikcaaaaaaaaaaaaoaaaaaaalaaaaafecaabaaaacaaaaaa
dkaabaaaaaaaaaaaamaaaaafecaabaaaadaaaaaadkaabaaaaaaaaaaaejaaaaan
pcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
igaabaaaacaaaaaaigaabaaaadaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpapcaaaai
bcaabaaaadaaaaaapgbpbaaaabaaaaaapgipcaaaaaaaaaaaaoaaaaaadcaaaaaj
pcaabaaaaaaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaaaaaaaaaa
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaaaaaaaai
ocaabaaaabaaaaaaagbjbaaaabaaaaaaagbjbaiaebaaaaaaacaaaaaabaaaaaah
ccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaaelaaaaafdcaabaaa
abaaaaaaegaabaaaabaaaaaadcaaaaalbcaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabaaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadicaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaaapaaaaaabacaaaahccaabaaa
abaaaaaaegbcbaaaafaaaaaaegbcbaaaadaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaabkiacaaaaaaaaaaaaoaaaaaacpaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaa
aaaaaaaaaoaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafecaabaaa
abaaaaaackaabaaaabaaaaaadccaaaamecaabaaaabaaaaaackiacaaaaaaaaaaa
apaaaaaackaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaaapaaaaaaaaaaaaai
ccaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaadaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaa
aaaaaaaaajaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaaagiacaaa
aaaaaaaaapaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_MainOffset]
Vector 5 [_DetailOffset]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_FadeDist]
Float 12 [_FadeScale]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 121 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c16, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r2.xyz, r0.x, v4
abs r0.xyz, r2
add r1.xyz, r0, -r0.zxyw
add r0.w, r1.x, c15.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r1.xyz, r0.w, r1, r0.zxyw
add r0.w, r0.y, -r1.x
add r0.w, r0, c15.y
add_pp r3.xyz, r0.yxzw, -r1
frc r1.w, r0
add_sat r0.y, r0.w, -r1.w
mad_pp r1.xyz, r0.y, r3, r1
abs_pp r0.z, r1.x
abs r0.y, r2.z
rcp_pp r0.z, r0.z
max r1.x, r0, r0.y
mul_pp r0.zw, r1.xyzy, r0.z
rcp r1.y, r1.x
min r1.x, r0, r0.y
mul r1.z, r1.x, r1.y
mov_pp r1.xy, c5
mad_pp r0.zw, r0, c19.y, r1.xyxy
abs r1.y, r2
mul r1.w, r1.z, r1.z
mad r1.x, r1.w, c17.y, c17.z
mad r1.x, r1, r1.w, c17.w
add r3.x, -r1.y, c15.y
mad r2.w, r1.y, c16.x, c16.y
mad r2.w, r2, r1.y, c15
rsq r3.x, r3.x
mad r1.x, r1, r1.w, c18
mad r1.y, r2.w, r1, c16.z
rcp r3.x, r3.x
mul r2.w, r1.y, r3.x
cmp r1.y, r2, c15.x, c15
mad r3.x, r1, r1.w, c18.y
mul r2.y, r1, r2.w
mad r1.x, -r2.y, c16.w, r2.w
mad r1.x, r1.y, c15.z, r1
mad r1.w, r3.x, r1, c18.z
mul r1.y, r1.w, r1.z
mul r2.y, r1.x, c17.x
add r1.z, r2.y, c4.y
dsy r3.y, r1.z
add r1.x, -r1.y, c18.w
add r0.x, r0, -r0.y
cmp r2.w, -r0.x, r1.y, r1.x
dsx r0.xy, r2.xzzw
mul r0.xy, r0, r0
dsy r1.xy, r2.xzzw
add r0.x, r0, r0.y
mul r1.xy, r1, r1
add r0.y, r1.x, r1
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c19.x
mul r3.x, r0.y, c19
dsx r3.w, r1.z
mul r0.zw, r0, c8.x
texldd r0, r0.zwzw, s1, r3.zwzw, r3
add r3.y, -r2.w, c15.z
cmp r2.z, r2, r2.w, r3.y
cmp r2.x, r2, r2.z, -r2.z
mul r2.w, v2.x, c9.x
mad r2.x, r2, c19, c19.y
add r2.xy, r2, c4
mul_sat r2.z, r2.w, c16.w
add_pp r1, -r0, c15.y
mad_pp r0, r2.z, r1, r0
dp4 r1.x, c2, c2
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r3.y, v3, r1
dsy r2.w, r2.y
mov r2.z, r3.x
dsx r1.w, r2.y
mov r1.z, r3
texldd r1, r2, s0, r1.zwzw, r2.zwzw
mul_pp r1, r1, r0
add_pp r2.x, r3.y, c19.z
mul_pp r0.y, r2.x, c3.w
mul_pp_sat r0.w, r0.y, c19
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r2.xyz, r0, r0.w, c0
add r3.xyz, -v1, c1
dp3 r0.w, r3, r3
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
rsq r0.y, r0.w
add r3.xyz, -v0, c1
rsq r0.x, r0.x
dp3 r0.w, r3, r3
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.w, -r0.x, c14.x, r0.y
mov r0.xyz, v3
dp3_sat r0.x, v5, r0
rsq r0.y, r0.w
rcp r3.y, r0.y
mul r3.x, r0, c7
pow_sat r0, r3.x, c6.x
mul r0.y, r3, c12.x
add_sat r0.y, r0, -c11.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2.w, c13
mad r0.x, r0, r0.z, r0.y
mul_pp oC0.xyz, r1, r2
mul_pp oC0.w, r1, r0.x
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 352 // 260 used size, 19 vars
Vector 144 [_LightColor0] 4
Vector 192 [_MainOffset] 4
Vector 208 [_DetailOffset] 4
Float 224 [_FalloffPow]
Float 228 [_FalloffScale]
Float 232 [_DetailScale]
Float 236 [_DetailDist]
Float 240 [_MinLight]
Float 244 [_FadeDist]
Float 248 [_FadeScale]
Float 252 [_RimDist]
Float 256 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 102 instructions, 5 temp regs, 0 temp arrays:
// ALU 94 float, 0 int, 4 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedachdobjdpagepmcaalngnlkihkacoledabaaaaaalaaoaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aiaiaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdaanaaaa
eaaaaaaaemadaaaafjaaaaaeegiocaaaaaaaaaaabbaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadicbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
bgbgbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
ckaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaaigaabaaaaaaaaaaaigaabaiaebaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaadbaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaabkaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiccaabaaaabaaaaaa
akaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaadkaabaaaaaaaaaaabkaabaaa
abaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjkcdodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjkcdo
bkiacaaaaaaaaaaaamaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaacaaaaaa
egiacaaaaaaaaaaaamaaaaaaalaaaaafccaabaaaacaaaaaabkaabaaaabaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaa
fgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaa
fgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
adaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaa
egaabaaaadaaaaaaaaaaaaalkcaabaaaacaaaaaafgabbaiaibaaaaaaaaaaaaaa
aceaaaaaaaaaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaiccaabaaaacaaaaaa
ckaabaiambaaaaaaaaaaaaaabkaabaaaacaaaaaaebcaaaafccaabaaaacaaaaaa
bkaabaaaacaaaaaaaaaaaaajpcaabaaaaeaaaaaakgabbaiambaaaaaaaaaaaaaa
fgaibaiaibaaaaaaaaaaaaaadcaaaaakpcaabaaaaeaaaaaafgafbaaaacaaaaaa
egaobaaaaeaaaaaakgabbaiaibaaaaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaiaibaaaaaaaaaaaaaajgahbaiaebaaaaaaaeaaaaaaaaaaaaaiccaabaaa
acaaaaaadkaabaaaacaaaaaaakaabaiaebaaaaaaaeaaaaaaebcaaaafccaabaaa
acaaaaaabkaabaaaacaaaaaadcaaaaajhcaabaaaaaaaaaaafgafbaaaacaaaaaa
egacbaaaaaaaaaaajgahbaaaaeaaaaaadiaaaaakgcaabaaaaaaaaaaakgajbaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
aaaaaaaajgafbaaaaaaaaaaaagaabaaaaaaaaaaaaaaaaaaidcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegiacaaaaaaaaaaaanaaaaaadiaaaaaidcaabaaaaaaaaaaa
egaabaaaaaaaaaaakgikcaaaaaaaaaaaaoaaaaaaalaaaaafecaabaaaacaaaaaa
dkaabaaaaaaaaaaaamaaaaafecaabaaaadaaaaaadkaabaaaaaaaaaaaejaaaaan
pcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
igaabaaaacaaaaaaigaabaaaadaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpapcaaaai
bcaabaaaadaaaaaapgbpbaaaabaaaaaapgipcaaaaaaaaaaaaoaaaaaadcaaaaaj
pcaabaaaaaaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaaaaaaaaaa
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaaaaaaaai
ocaabaaaabaaaaaaagbjbaaaabaaaaaaagbjbaiaebaaaaaaacaaaaaabaaaaaah
ccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaaelaaaaafdcaabaaa
abaaaaaaegaabaaaabaaaaaadcaaaaalbcaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabaaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadicaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaaapaaaaaabacaaaahccaabaaa
abaaaaaaegbcbaaaafaaaaaaegbcbaaaadaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaabkiacaaaaaaaaaaaaoaaaaaacpaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaa
aaaaaaaaaoaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafecaabaaa
abaaaaaackaabaaaabaaaaaadccaaaamecaabaaaabaaaaaackiacaaaaaaaaaaa
apaaaaaackaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaaapaaaaaaaaaaaaai
ccaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaadaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaa
aaaaaaaaajaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaaagiacaaa
aaaaaaaaapaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_MainOffset]
Vector 5 [_DetailOffset]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_FadeDist]
Float 12 [_FadeScale]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 121 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c16, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r2.xyz, r0.x, v4
abs r0.xyz, r2
add r1.xyz, r0, -r0.zxyw
add r0.w, r1.x, c15.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r1.xyz, r0.w, r1, r0.zxyw
add r0.w, r0.y, -r1.x
add r0.w, r0, c15.y
add_pp r3.xyz, r0.yxzw, -r1
frc r1.w, r0
add_sat r0.y, r0.w, -r1.w
mad_pp r1.xyz, r0.y, r3, r1
abs_pp r0.z, r1.x
abs r0.y, r2.z
rcp_pp r0.z, r0.z
max r1.x, r0, r0.y
mul_pp r0.zw, r1.xyzy, r0.z
rcp r1.y, r1.x
min r1.x, r0, r0.y
mul r1.z, r1.x, r1.y
mov_pp r1.xy, c5
mad_pp r0.zw, r0, c19.y, r1.xyxy
abs r1.y, r2
mul r1.w, r1.z, r1.z
mad r1.x, r1.w, c17.y, c17.z
mad r1.x, r1, r1.w, c17.w
add r3.x, -r1.y, c15.y
mad r2.w, r1.y, c16.x, c16.y
mad r2.w, r2, r1.y, c15
rsq r3.x, r3.x
mad r1.x, r1, r1.w, c18
mad r1.y, r2.w, r1, c16.z
rcp r3.x, r3.x
mul r2.w, r1.y, r3.x
cmp r1.y, r2, c15.x, c15
mad r3.x, r1, r1.w, c18.y
mul r2.y, r1, r2.w
mad r1.x, -r2.y, c16.w, r2.w
mad r1.x, r1.y, c15.z, r1
mad r1.w, r3.x, r1, c18.z
mul r1.y, r1.w, r1.z
mul r2.y, r1.x, c17.x
add r1.z, r2.y, c4.y
dsy r3.y, r1.z
add r1.x, -r1.y, c18.w
add r0.x, r0, -r0.y
cmp r2.w, -r0.x, r1.y, r1.x
dsx r0.xy, r2.xzzw
mul r0.xy, r0, r0
dsy r1.xy, r2.xzzw
add r0.x, r0, r0.y
mul r1.xy, r1, r1
add r0.y, r1.x, r1
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c19.x
mul r3.x, r0.y, c19
dsx r3.w, r1.z
mul r0.zw, r0, c8.x
texldd r0, r0.zwzw, s1, r3.zwzw, r3
add r3.y, -r2.w, c15.z
cmp r2.z, r2, r2.w, r3.y
cmp r2.x, r2, r2.z, -r2.z
mul r2.w, v2.x, c9.x
mad r2.x, r2, c19, c19.y
add r2.xy, r2, c4
mul_sat r2.z, r2.w, c16.w
add_pp r1, -r0, c15.y
mad_pp r0, r2.z, r1, r0
dp4 r1.x, c2, c2
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r3.y, v3, r1
dsy r2.w, r2.y
mov r2.z, r3.x
dsx r1.w, r2.y
mov r1.z, r3
texldd r1, r2, s0, r1.zwzw, r2.zwzw
mul_pp r1, r1, r0
add_pp r2.x, r3.y, c19.z
mul_pp r0.y, r2.x, c3.w
mul_pp_sat r0.w, r0.y, c19
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r2.xyz, r0, r0.w, c0
add r3.xyz, -v1, c1
dp3 r0.w, r3, r3
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
rsq r0.y, r0.w
add r3.xyz, -v0, c1
rsq r0.x, r0.x
dp3 r0.w, r3, r3
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.w, -r0.x, c14.x, r0.y
mov r0.xyz, v3
dp3_sat r0.x, v5, r0
rsq r0.y, r0.w
rcp r3.y, r0.y
mul r3.x, r0, c7
pow_sat r0, r3.x, c6.x
mul r0.y, r3, c12.x
add_sat r0.y, r0, -c11.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2.w, c13
mad r0.x, r0, r0.z, r0.y
mul_pp oC0.xyz, r1, r2
mul_pp oC0.w, r1, r0.x
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 288 // 196 used size, 18 vars
Vector 80 [_LightColor0] 4
Vector 128 [_MainOffset] 4
Vector 144 [_DetailOffset] 4
Float 160 [_FalloffPow]
Float 164 [_FalloffScale]
Float 168 [_DetailScale]
Float 172 [_DetailDist]
Float 176 [_MinLight]
Float 180 [_FadeDist]
Float 184 [_FadeScale]
Float 188 [_RimDist]
Float 192 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 102 instructions, 5 temp regs, 0 temp arrays:
// ALU 94 float, 0 int, 4 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedkmaehhpoceipnijjinlgddgpmipnnlikabaaaaaalaaoaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aiaiaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdaanaaaa
eaaaaaaaemadaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadicbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
bgbgbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
ckaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaaigaabaaaaaaaaaaaigaabaiaebaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaadbaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaabkaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiccaabaaaabaaaaaa
akaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaadkaabaaaaaaaaaaabkaabaaa
abaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjkcdodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjkcdo
bkiacaaaaaaaaaaaaiaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaacaaaaaa
egiacaaaaaaaaaaaaiaaaaaaalaaaaafccaabaaaacaaaaaabkaabaaaabaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaa
fgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaa
fgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
adaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaa
egaabaaaadaaaaaaaaaaaaalkcaabaaaacaaaaaafgabbaiaibaaaaaaaaaaaaaa
aceaaaaaaaaaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaiccaabaaaacaaaaaa
ckaabaiambaaaaaaaaaaaaaabkaabaaaacaaaaaaebcaaaafccaabaaaacaaaaaa
bkaabaaaacaaaaaaaaaaaaajpcaabaaaaeaaaaaakgabbaiambaaaaaaaaaaaaaa
fgaibaiaibaaaaaaaaaaaaaadcaaaaakpcaabaaaaeaaaaaafgafbaaaacaaaaaa
egaobaaaaeaaaaaakgabbaiaibaaaaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaiaibaaaaaaaaaaaaaajgahbaiaebaaaaaaaeaaaaaaaaaaaaaiccaabaaa
acaaaaaadkaabaaaacaaaaaaakaabaiaebaaaaaaaeaaaaaaebcaaaafccaabaaa
acaaaaaabkaabaaaacaaaaaadcaaaaajhcaabaaaaaaaaaaafgafbaaaacaaaaaa
egacbaaaaaaaaaaajgahbaaaaeaaaaaadiaaaaakgcaabaaaaaaaaaaakgajbaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
aaaaaaaajgafbaaaaaaaaaaaagaabaaaaaaaaaaaaaaaaaaidcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegiacaaaaaaaaaaaajaaaaaadiaaaaaidcaabaaaaaaaaaaa
egaabaaaaaaaaaaakgikcaaaaaaaaaaaakaaaaaaalaaaaafecaabaaaacaaaaaa
dkaabaaaaaaaaaaaamaaaaafecaabaaaadaaaaaadkaabaaaaaaaaaaaejaaaaan
pcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
igaabaaaacaaaaaaigaabaaaadaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpapcaaaai
bcaabaaaadaaaaaapgbpbaaaabaaaaaapgipcaaaaaaaaaaaakaaaaaadcaaaaaj
pcaabaaaaaaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaaaaaaaaaa
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaaaaaaaai
ocaabaaaabaaaaaaagbjbaaaabaaaaaaagbjbaiaebaaaaaaacaaaaaabaaaaaah
ccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaaelaaaaafdcaabaaa
abaaaaaaegaabaaaabaaaaaadcaaaaalbcaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaaamaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadicaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaaalaaaaaabacaaaahccaabaaa
abaaaaaaegbcbaaaafaaaaaaegbcbaaaadaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaabkiacaaaaaaaaaaaakaaaaaacpaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaa
aaaaaaaaakaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafecaabaaa
abaaaaaackaabaaaabaaaaaadccaaaamecaabaaaabaaaaaackiacaaaaaaaaaaa
alaaaaaackaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaaalaaaaaaaaaaaaai
ccaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaadaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaa
aaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaa
aaaaaaaaalaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_MainOffset]
Vector 5 [_DetailOffset]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_FadeDist]
Float 12 [_FadeScale]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 121 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c16, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r2.xyz, r0.x, v4
abs r0.xyz, r2
add r1.xyz, r0, -r0.zxyw
add r0.w, r1.x, c15.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r1.xyz, r0.w, r1, r0.zxyw
add r0.w, r0.y, -r1.x
add r0.w, r0, c15.y
add_pp r3.xyz, r0.yxzw, -r1
frc r1.w, r0
add_sat r0.y, r0.w, -r1.w
mad_pp r1.xyz, r0.y, r3, r1
abs_pp r0.z, r1.x
abs r0.y, r2.z
rcp_pp r0.z, r0.z
max r1.x, r0, r0.y
mul_pp r0.zw, r1.xyzy, r0.z
rcp r1.y, r1.x
min r1.x, r0, r0.y
mul r1.z, r1.x, r1.y
mov_pp r1.xy, c5
mad_pp r0.zw, r0, c19.y, r1.xyxy
abs r1.y, r2
mul r1.w, r1.z, r1.z
mad r1.x, r1.w, c17.y, c17.z
mad r1.x, r1, r1.w, c17.w
add r3.x, -r1.y, c15.y
mad r2.w, r1.y, c16.x, c16.y
mad r2.w, r2, r1.y, c15
rsq r3.x, r3.x
mad r1.x, r1, r1.w, c18
mad r1.y, r2.w, r1, c16.z
rcp r3.x, r3.x
mul r2.w, r1.y, r3.x
cmp r1.y, r2, c15.x, c15
mad r3.x, r1, r1.w, c18.y
mul r2.y, r1, r2.w
mad r1.x, -r2.y, c16.w, r2.w
mad r1.x, r1.y, c15.z, r1
mad r1.w, r3.x, r1, c18.z
mul r1.y, r1.w, r1.z
mul r2.y, r1.x, c17.x
add r1.z, r2.y, c4.y
dsy r3.y, r1.z
add r1.x, -r1.y, c18.w
add r0.x, r0, -r0.y
cmp r2.w, -r0.x, r1.y, r1.x
dsx r0.xy, r2.xzzw
mul r0.xy, r0, r0
dsy r1.xy, r2.xzzw
add r0.x, r0, r0.y
mul r1.xy, r1, r1
add r0.y, r1.x, r1
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c19.x
mul r3.x, r0.y, c19
dsx r3.w, r1.z
mul r0.zw, r0, c8.x
texldd r0, r0.zwzw, s1, r3.zwzw, r3
add r3.y, -r2.w, c15.z
cmp r2.z, r2, r2.w, r3.y
cmp r2.x, r2, r2.z, -r2.z
mul r2.w, v2.x, c9.x
mad r2.x, r2, c19, c19.y
add r2.xy, r2, c4
mul_sat r2.z, r2.w, c16.w
add_pp r1, -r0, c15.y
mad_pp r0, r2.z, r1, r0
dp4 r1.x, c2, c2
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r3.y, v3, r1
dsy r2.w, r2.y
mov r2.z, r3.x
dsx r1.w, r2.y
mov r1.z, r3
texldd r1, r2, s0, r1.zwzw, r2.zwzw
mul_pp r1, r1, r0
add_pp r2.x, r3.y, c19.z
mul_pp r0.y, r2.x, c3.w
mul_pp_sat r0.w, r0.y, c19
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r2.xyz, r0, r0.w, c0
add r3.xyz, -v1, c1
dp3 r0.w, r3, r3
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
rsq r0.y, r0.w
add r3.xyz, -v0, c1
rsq r0.x, r0.x
dp3 r0.w, r3, r3
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.w, -r0.x, c14.x, r0.y
mov r0.xyz, v3
dp3_sat r0.x, v5, r0
rsq r0.y, r0.w
rcp r3.y, r0.y
mul r3.x, r0, c7
pow_sat r0, r3.x, c6.x
mul r0.y, r3, c12.x
add_sat r0.y, r0, -c11.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2.w, c13
mad r0.x, r0, r0.z, r0.y
mul_pp oC0.xyz, r1, r2
mul_pp oC0.w, r1, r0.x
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 288 // 196 used size, 18 vars
Vector 80 [_LightColor0] 4
Vector 128 [_MainOffset] 4
Vector 144 [_DetailOffset] 4
Float 160 [_FalloffPow]
Float 164 [_FalloffScale]
Float 168 [_DetailScale]
Float 172 [_DetailDist]
Float 176 [_MinLight]
Float 180 [_FadeDist]
Float 184 [_FadeScale]
Float 188 [_RimDist]
Float 192 [_RimDistSub]
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 102 instructions, 5 temp regs, 0 temp arrays:
// ALU 94 float, 0 int, 4 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedkmaehhpoceipnijjinlgddgpmipnnlikabaaaaaalaaoaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aiaiaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdaanaaaa
eaaaaaaaemadaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadicbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
bgbgbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
ckaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaaigaabaaaaaaaaaaaigaabaiaebaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaadbaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaabkaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiccaabaaaabaaaaaa
akaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaadkaabaaaaaaaaaaabkaabaaa
abaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjkcdodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjkcdo
bkiacaaaaaaaaaaaaiaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaacaaaaaa
egiacaaaaaaaaaaaaiaaaaaaalaaaaafccaabaaaacaaaaaabkaabaaaabaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaa
fgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaa
fgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
adaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaa
egaabaaaadaaaaaaaaaaaaalkcaabaaaacaaaaaafgabbaiaibaaaaaaaaaaaaaa
aceaaaaaaaaaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaiccaabaaaacaaaaaa
ckaabaiambaaaaaaaaaaaaaabkaabaaaacaaaaaaebcaaaafccaabaaaacaaaaaa
bkaabaaaacaaaaaaaaaaaaajpcaabaaaaeaaaaaakgabbaiambaaaaaaaaaaaaaa
fgaibaiaibaaaaaaaaaaaaaadcaaaaakpcaabaaaaeaaaaaafgafbaaaacaaaaaa
egaobaaaaeaaaaaakgabbaiaibaaaaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaiaibaaaaaaaaaaaaaajgahbaiaebaaaaaaaeaaaaaaaaaaaaaiccaabaaa
acaaaaaadkaabaaaacaaaaaaakaabaiaebaaaaaaaeaaaaaaebcaaaafccaabaaa
acaaaaaabkaabaaaacaaaaaadcaaaaajhcaabaaaaaaaaaaafgafbaaaacaaaaaa
egacbaaaaaaaaaaajgahbaaaaeaaaaaadiaaaaakgcaabaaaaaaaaaaakgajbaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
aaaaaaaajgafbaaaaaaaaaaaagaabaaaaaaaaaaaaaaaaaaidcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegiacaaaaaaaaaaaajaaaaaadiaaaaaidcaabaaaaaaaaaaa
egaabaaaaaaaaaaakgikcaaaaaaaaaaaakaaaaaaalaaaaafecaabaaaacaaaaaa
dkaabaaaaaaaaaaaamaaaaafecaabaaaadaaaaaadkaabaaaaaaaaaaaejaaaaan
pcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
igaabaaaacaaaaaaigaabaaaadaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpapcaaaai
bcaabaaaadaaaaaapgbpbaaaabaaaaaapgipcaaaaaaaaaaaakaaaaaadcaaaaaj
pcaabaaaaaaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaaaaaaaaaa
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaaaaaaaai
ocaabaaaabaaaaaaagbjbaaaabaaaaaaagbjbaiaebaaaaaaacaaaaaabaaaaaah
ccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaaelaaaaafdcaabaaa
abaaaaaaegaabaaaabaaaaaadcaaaaalbcaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaaamaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadicaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaaalaaaaaabacaaaahccaabaaa
abaaaaaaegbcbaaaafaaaaaaegbcbaaaadaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaabkiacaaaaaaaaaaaakaaaaaacpaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaa
aaaaaaaaakaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafecaabaaa
abaaaaaackaabaaaabaaaaaadccaaaamecaabaaaabaaaaaackiacaaaaaaaaaaa
alaaaaaackaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaaalaaaaaaaaaaaaai
ccaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaadaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaa
aaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaa
aaaaaaaaalaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_MainOffset]
Vector 6 [_DetailOffset]
Float 7 [_FalloffPow]
Float 8 [_FalloffScale]
Float 9 [_DetailScale]
Float 10 [_DetailDist]
Float 11 [_MinLight]
Float 12 [_FadeDist]
Float 13 [_FadeScale]
Float 14 [_RimDist]
Float 15 [_RimDistSub]
Float 16 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 126 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c18, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.xyz, r0.x, v4
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c17.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
add r0.w, r0, c17.y
frc r1.w, r0
add_sat r1.w, r0, -r1
add_pp r3.xyz, r1.yxzw, -r2
mad_pp r2.xyz, r1.w, r3, r2
abs r0.w, r0.z
max r1.y, r1.x, r0.w
rcp r1.z, r1.y
min r1.y, r1.x, r0.w
mul r2.w, r1.y, r1.z
abs_pp r1.w, r2.x
rcp_pp r1.z, r1.w
mul_pp r1.zw, r2.xyzy, r1.z
mul r1.y, r2.w, r2.w
mov_pp r2.xy, c6
mad_pp r1.zw, r1, c21.y, r2.xyxy
mad r2.z, r1.y, c19.y, c19
mad r2.z, r2, r1.y, c19.w
mad r2.x, r2.z, r1.y, c20
mad r2.y, r2.x, r1, c20
abs r2.x, r0.y
mad r1.y, r2, r1, c20.z
add r2.z, -r2.x, c17.y
mad r2.y, r2.x, c18.x, c18
mad r2.y, r2, r2.x, c17.w
rsq r2.z, r2.z
rcp r2.z, r2.z
mad r2.x, r2.y, r2, c18.z
mul r2.x, r2, r2.z
cmp r0.y, r0, c17.x, c17
mul r2.z, r1.y, r2.w
mul r2.y, r0, r2.x
mad r1.y, -r2, c18.w, r2.x
mad r0.y, r0, c17.z, r1
add r2.x, -r2.z, c20.w
add r0.w, r1.x, -r0
mul r2.y, r0, c19.x
add r1.x, r2.y, c5.y
cmp r0.w, -r0, r2.z, r2.x
add r0.y, -r0.w, c17.z
cmp r0.y, r0.z, r0.w, r0
cmp r2.x, r0, r0.y, -r0.y
mad r2.x, r2, c21, c21.y
add r2.xy, r2, c5
dsy r2.w, r1.x
dsx r3.y, r1.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
dsy r0.zw, r0.xyxz
mul r0.zw, r0, r0
add r0.w, r0.z, r0
add r1.x, r1, r1.y
rsq r0.z, r1.x
rcp r0.z, r0.z
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r3.x, r0.z, c21
mul r2.z, r0.w, c21.x
mul r1.zw, r1, c9.x
texldd r1, r1.zwzw, s1, r3, r2.zwzw
mul r2.w, v2.x, c10.x
add_pp r0, -r1, c17.y
mul_sat r2.w, r2, c18
mad_pp r0, r2.w, r0, r1
mov r1.x, r3
dsx r1.y, r2
dsy r1.w, r2.y
mov r1.z, r2
texldd r1, r2, s0, r1, r1.zwzw
mul_pp r1, r1, r0
add r2.xyz, -v1, c1
dp3 r0.w, r2, r2
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
rsq r0.y, r0.w
add r2.xyz, -v0, c1
rsq r0.x, r0.x
dp3 r0.w, r2, r2
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.w, -r0.x, c15.x, r0.y
mov r0.xyz, v3
dp3_sat r0.x, v5, r0
rsq r0.y, r0.w
mul r2.x, r0, c8
rcp r2.y, r0.y
pow_sat r0, r2.x, c7.x
mul r0.y, r2, c13.x
add_sat r0.y, r0, -c12.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2.w, c14
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c11
texldp r3.x, v6, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c16.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c21.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 288 // 276 used size, 18 vars
Vector 80 [_LightColor0] 4
Vector 128 [_MainOffset] 4
Vector 144 [_DetailOffset] 4
Float 160 [_FalloffPow]
Float 164 [_FalloffScale]
Float 168 [_DetailScale]
Float 172 [_DetailDist]
Float 176 [_MinLight]
Float 180 [_FadeDist]
Float 184 [_FadeScale]
Float 188 [_RimDist]
Float 192 [_RimDistSub]
Float 272 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 109 instructions, 5 temp regs, 0 temp arrays:
// ALU 100 float, 0 int, 4 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedbdbkcmadolojbjbdhobhobgogjlhiepkabaaaaaalaapaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aiaiaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaahaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefceiaoaaaaeaaaaaaajcadaaaafjaaaaaeegiocaaaaaaaaaaabcaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadicbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadpcbabaaaahaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaabgbgbaaaaeaaaaaadeaaaaajicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackaabaia
ibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
igaabaaaaaaaaaaaigaabaiaebaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaackaabaaaaaaaaaaa
bkaabaaaaaaaaaaadbaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaabkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaiccaabaaaabaaaaaaakaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaa
abaaaaaadkaabaaaaaaaaaaabkaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjkcdodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjkcdobkiacaaaaaaaaaaaaiaaaaaaaaaaaaai
dcaabaaaabaaaaaaegaabaaaacaaaaaaegiacaaaaaaaaaaaaiaaaaaaalaaaaaf
ccaabaaaacaaaaaabkaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoamaaaaafmcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaaaaaaaaalkcaabaaa
acaaaaaafgabbaiaibaaaaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaiadpaaaaaaaa
aaaaiadpaaaaaaaiccaabaaaacaaaaaackaabaiambaaaaaaaaaaaaaabkaabaaa
acaaaaaaebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajpcaabaaa
aeaaaaaakgabbaiambaaaaaaaaaaaaaafgaibaiaibaaaaaaaaaaaaaadcaaaaak
pcaabaaaaeaaaaaafgafbaaaacaaaaaaegaobaaaaeaaaaaakgabbaiaibaaaaaa
aaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaibaaaaaaaaaaaaaajgahbaia
ebaaaaaaaeaaaaaaaaaaaaaiccaabaaaacaaaaaadkaabaaaacaaaaaaakaabaia
ebaaaaaaaeaaaaaaebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaadcaaaaaj
hcaabaaaaaaaaaaafgafbaaaacaaaaaaegacbaaaaaaaaaaajgahbaaaaeaaaaaa
diaaaaakgcaabaaaaaaaaaaakgajbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadp
aaaaaadpaaaaaaaaaoaaaaahdcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaaa
aaaaaaaaaaaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaaegiacaaaaaaaaaaa
ajaaaaaadiaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaakgikcaaaaaaaaaaa
akaaaaaaalaaaaafecaabaaaacaaaaaadkaabaaaaaaaaaaaamaaaaafecaabaaa
adaaaaaadkaabaaaaaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpapcaaaaibcaabaaaadaaaaaapgbpbaaaabaaaaaa
pgipcaaaaaaaaaaaakaaaaaadcaaaaajpcaabaaaaaaaaaaaagaabaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaaaaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegbcbaaaacaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaaiocaabaaaabaaaaaaagbjbaaaabaaaaaa
agbjbaiaebaaaaaaacaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaa
jgahbaaaabaaaaaaelaaaaafdcaabaaaabaaaaaaegaabaaaabaaaaaadcaaaaal
bcaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaaamaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaa
aaaaaaaaalaaaaaabacaaaahccaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaa
adaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaa
akaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaaakaaaaaabjaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaiadpaaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadccaaaam
ecaabaaaabaaaaaackiacaaaaaaaaaaaalaaaaaackaabaaaabaaaaaabkiacaia
ebaaaaaaaaaaaaaaalaaaaaaaaaaaaaiccaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaahaaaaaa
pgbpbaaaahaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaa
ahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaa
aaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaaahaaaaaa
dicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakiacaaaaaaaaaaabbaaaaaa
diaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaadaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaa
aaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaa
aaaaaaaaalaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_MainOffset]
Vector 6 [_DetailOffset]
Float 7 [_FalloffPow]
Float 8 [_FalloffScale]
Float 9 [_DetailScale]
Float 10 [_DetailDist]
Float 11 [_MinLight]
Float 12 [_FadeDist]
Float 13 [_FadeScale]
Float 14 [_RimDist]
Float 15 [_RimDistSub]
Float 16 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 126 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c18, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.xyz, r0.x, v4
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c17.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
add r0.w, r0, c17.y
frc r1.w, r0
add_sat r1.w, r0, -r1
add_pp r3.xyz, r1.yxzw, -r2
mad_pp r2.xyz, r1.w, r3, r2
abs r0.w, r0.z
max r1.y, r1.x, r0.w
rcp r1.z, r1.y
min r1.y, r1.x, r0.w
mul r2.w, r1.y, r1.z
abs_pp r1.w, r2.x
rcp_pp r1.z, r1.w
mul_pp r1.zw, r2.xyzy, r1.z
mul r1.y, r2.w, r2.w
mov_pp r2.xy, c6
mad_pp r1.zw, r1, c21.y, r2.xyxy
mad r2.z, r1.y, c19.y, c19
mad r2.z, r2, r1.y, c19.w
mad r2.x, r2.z, r1.y, c20
mad r2.y, r2.x, r1, c20
abs r2.x, r0.y
mad r1.y, r2, r1, c20.z
add r2.z, -r2.x, c17.y
mad r2.y, r2.x, c18.x, c18
mad r2.y, r2, r2.x, c17.w
rsq r2.z, r2.z
rcp r2.z, r2.z
mad r2.x, r2.y, r2, c18.z
mul r2.x, r2, r2.z
cmp r0.y, r0, c17.x, c17
mul r2.z, r1.y, r2.w
mul r2.y, r0, r2.x
mad r1.y, -r2, c18.w, r2.x
mad r0.y, r0, c17.z, r1
add r2.x, -r2.z, c20.w
add r0.w, r1.x, -r0
mul r2.y, r0, c19.x
add r1.x, r2.y, c5.y
cmp r0.w, -r0, r2.z, r2.x
add r0.y, -r0.w, c17.z
cmp r0.y, r0.z, r0.w, r0
cmp r2.x, r0, r0.y, -r0.y
mad r2.x, r2, c21, c21.y
add r2.xy, r2, c5
dsy r2.w, r1.x
dsx r3.y, r1.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
dsy r0.zw, r0.xyxz
mul r0.zw, r0, r0
add r0.w, r0.z, r0
add r1.x, r1, r1.y
rsq r0.z, r1.x
rcp r0.z, r0.z
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r3.x, r0.z, c21
mul r2.z, r0.w, c21.x
mul r1.zw, r1, c9.x
texldd r1, r1.zwzw, s1, r3, r2.zwzw
mul r2.w, v2.x, c10.x
add_pp r0, -r1, c17.y
mul_sat r2.w, r2, c18
mad_pp r0, r2.w, r0, r1
mov r1.x, r3
dsx r1.y, r2
dsy r1.w, r2.y
mov r1.z, r2
texldd r1, r2, s0, r1, r1.zwzw
mul_pp r1, r1, r0
add r2.xyz, -v1, c1
dp3 r0.w, r2, r2
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
rsq r0.y, r0.w
add r2.xyz, -v0, c1
rsq r0.x, r0.x
dp3 r0.w, r2, r2
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.w, -r0.x, c15.x, r0.y
mov r0.xyz, v3
dp3_sat r0.x, v5, r0
rsq r0.y, r0.w
mul r2.x, r0, c8
rcp r2.y, r0.y
pow_sat r0, r2.x, c7.x
mul r0.y, r2, c13.x
add_sat r0.y, r0, -c12.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2.w, c14
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4_pp r0.y, c3, c3
rsq_pp r1.w, r0.y
mul_pp r2.xyz, r1.w, c3
mov r0.x, c11
texldp r3.x, v6, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c16.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c21.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
ConstBuffer "$Globals" 224 // 212 used size, 17 vars
Vector 16 [_LightColor0] 4
Vector 64 [_MainOffset] 4
Vector 80 [_DetailOffset] 4
Float 96 [_FalloffPow]
Float 100 [_FalloffScale]
Float 104 [_DetailScale]
Float 108 [_DetailDist]
Float 112 [_MinLight]
Float 116 [_FadeDist]
Float 120 [_FadeScale]
Float 124 [_RimDist]
Float 128 [_RimDistSub]
Float 208 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 109 instructions, 5 temp regs, 0 temp arrays:
// ALU 100 float, 0 int, 4 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecediflhgnhieogbnbedknfnbimioifpbfdhabaaaaaajiapaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aiaiaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaaiaaaaaaaaaaaaaaadaaaaaaagaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefceiaoaaaaeaaaaaaajcadaaaafjaaaaaeegiocaaa
aaaaaaaaaoaaaaaafjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaa
acaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadicbabaaa
abaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadpcbabaaaagaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaabgbgbaaaaeaaaaaa
deaaaaajicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaackaabaiaibaaaaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaa
abaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaa
abaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaai
dcaabaaaabaaaaaaigaabaaaaaaaaaaaigaabaiaebaaaaaaaaaaaaaaabaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaa
ckaabaaaaaaaaaaabkaabaaaaaaaaaaadbaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaackaabaaa
aaaaaaaabkaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaa
ckaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaabkaabaaaabaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaa
iedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabeaaaaakeanmjdpaaaaaaaiccaabaaaabaaaaaaakaabaiambaaaaaa
aaaaaaaaabeaaaaaaaaaiadpelaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
diaaaaahecaabaaaabaaaaaadkaabaaaaaaaaaaabkaabaaaabaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahccaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjkcdodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjkcdobkiacaaaaaaaaaaa
aeaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaacaaaaaaegiacaaaaaaaaaaa
aeaaaaaaalaaaaafccaabaaaacaaaaaabkaabaaaabaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafgajbaaaaaaaaaaa
apaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaackaabaaa
abaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaafgajbaaaaaaaaaaa
apaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaa
abaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaa
aaaaaaalkcaabaaaacaaaaaafgabbaiaibaaaaaaaaaaaaaaaceaaaaaaaaaaaaa
aaaaiadpaaaaaaaaaaaaiadpaaaaaaaiccaabaaaacaaaaaackaabaiambaaaaaa
aaaaaaaabkaabaaaacaaaaaaebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaa
aaaaaaajpcaabaaaaeaaaaaakgabbaiambaaaaaaaaaaaaaafgaibaiaibaaaaaa
aaaaaaaadcaaaaakpcaabaaaaeaaaaaafgafbaaaacaaaaaaegaobaaaaeaaaaaa
kgabbaiaibaaaaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaibaaaaaa
aaaaaaaajgahbaiaebaaaaaaaeaaaaaaaaaaaaaiccaabaaaacaaaaaadkaabaaa
acaaaaaaakaabaiaebaaaaaaaeaaaaaaebcaaaafccaabaaaacaaaaaabkaabaaa
acaaaaaadcaaaaajhcaabaaaaaaaaaaafgafbaaaacaaaaaaegacbaaaaaaaaaaa
jgahbaaaaeaaaaaadiaaaaakgcaabaaaaaaaaaaakgajbaaaaaaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaaaaaaaaajgafbaaa
aaaaaaaaagaabaaaaaaaaaaaaaaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaa
egiacaaaaaaaaaaaafaaaaaadiaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaa
kgikcaaaaaaaaaaaagaaaaaaalaaaaafecaabaaaacaaaaaadkaabaaaaaaaaaaa
amaaaaafecaabaaaadaaaaaadkaabaaaaaaaaaaaejaaaaanpcaabaaaaaaaaaaa
egaabaaaaaaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaigaabaaaacaaaaaa
igaabaaaadaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpapcaaaaibcaabaaaadaaaaaa
pgbpbaaaabaaaaaapgipcaaaaaaaaaaaagaaaaaadcaaaaajpcaabaaaaaaaaaaa
agaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaaaaaaaaaadiaaaaahpcaabaaa
aaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egbcbaaaacaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaa
abaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaaaaaaaaiocaabaaaabaaaaaa
agbjbaaaabaaaaaaagbjbaiaebaaaaaaacaaaaaabaaaaaahccaabaaaabaaaaaa
jgahbaaaabaaaaaajgahbaaaabaaaaaaelaaaaafdcaabaaaabaaaaaaegaabaaa
abaaaaaadcaaaaalbcaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaaaiaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaadkiacaaaaaaaaaaaahaaaaaabacaaaahccaabaaaabaaaaaaegbcbaaa
afaaaaaaegbcbaaaadaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaa
bkiacaaaaaaaaaaaagaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
diaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaaagaaaaaa
bjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafecaabaaaabaaaaaackaabaaa
abaaaaaadccaaaamecaabaaaabaaaaaackiacaaaaaaaaaaaahaaaaaackaabaaa
abaaaaaabkiacaiaebaaaaaaaaaaaaaaahaaaaaaaaaaaaaiccaabaaaabaaaaaa
ckaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaa
egbabaaaagaaaaaapgbpbaaaagaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaaabaaaaaa
ckiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaaahaaaaaa
aoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
akaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaackbabaia
ebaaaaaaagaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakiacaaa
aaaaaaaaanaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaah
icaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkiacaaaaaaaaaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaa
abaaaaaaagiacaaaaaaaaaaaahaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_MainOffset]
Vector 6 [_DetailOffset]
Float 7 [_FalloffPow]
Float 8 [_FalloffScale]
Float 9 [_DetailScale]
Float 10 [_DetailDist]
Float 11 [_MinLight]
Float 12 [_FadeDist]
Float 13 [_FadeScale]
Float 14 [_RimDist]
Float 15 [_RimDistSub]
Float 16 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 126 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c18, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.xyz, r0.x, v4
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c17.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
add r0.w, r0, c17.y
frc r1.w, r0
add_sat r1.w, r0, -r1
add_pp r3.xyz, r1.yxzw, -r2
mad_pp r2.xyz, r1.w, r3, r2
abs r0.w, r0.z
max r1.y, r1.x, r0.w
rcp r1.z, r1.y
min r1.y, r1.x, r0.w
mul r2.w, r1.y, r1.z
abs_pp r1.w, r2.x
rcp_pp r1.z, r1.w
mul_pp r1.zw, r2.xyzy, r1.z
mul r1.y, r2.w, r2.w
mov_pp r2.xy, c6
mad_pp r1.zw, r1, c21.y, r2.xyxy
mad r2.z, r1.y, c19.y, c19
mad r2.z, r2, r1.y, c19.w
mad r2.x, r2.z, r1.y, c20
mad r2.y, r2.x, r1, c20
abs r2.x, r0.y
mad r1.y, r2, r1, c20.z
add r2.z, -r2.x, c17.y
mad r2.y, r2.x, c18.x, c18
mad r2.y, r2, r2.x, c17.w
rsq r2.z, r2.z
rcp r2.z, r2.z
mad r2.x, r2.y, r2, c18.z
mul r2.x, r2, r2.z
cmp r0.y, r0, c17.x, c17
mul r2.z, r1.y, r2.w
mul r2.y, r0, r2.x
mad r1.y, -r2, c18.w, r2.x
mad r0.y, r0, c17.z, r1
add r2.x, -r2.z, c20.w
add r0.w, r1.x, -r0
mul r2.y, r0, c19.x
add r1.x, r2.y, c5.y
cmp r0.w, -r0, r2.z, r2.x
add r0.y, -r0.w, c17.z
cmp r0.y, r0.z, r0.w, r0
cmp r2.x, r0, r0.y, -r0.y
mad r2.x, r2, c21, c21.y
add r2.xy, r2, c5
dsy r2.w, r1.x
dsx r3.y, r1.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
dsy r0.zw, r0.xyxz
mul r0.zw, r0, r0
add r0.w, r0.z, r0
add r1.x, r1, r1.y
rsq r0.z, r1.x
rcp r0.z, r0.z
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r3.x, r0.z, c21
mul r2.z, r0.w, c21.x
mul r1.zw, r1, c9.x
texldd r1, r1.zwzw, s1, r3, r2.zwzw
mul r2.w, v2.x, c10.x
add_pp r0, -r1, c17.y
mul_sat r2.w, r2, c18
mad_pp r0, r2.w, r0, r1
mov r1.x, r3
dsx r1.y, r2
dsy r1.w, r2.y
mov r1.z, r2
texldd r1, r2, s0, r1, r1.zwzw
mul_pp r1, r1, r0
add r2.xyz, -v1, c1
dp3 r0.w, r2, r2
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
rsq r0.y, r0.w
add r2.xyz, -v0, c1
rsq r0.x, r0.x
dp3 r0.w, r2, r2
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.w, -r0.x, c15.x, r0.y
mov r0.xyz, v3
dp3_sat r0.x, v5, r0
rsq r0.y, r0.w
mul r2.x, r0, c8
rcp r2.y, r0.y
pow_sat r0, r2.x, c7.x
mul r0.y, r2, c13.x
add_sat r0.y, r0, -c12.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2.w, c14
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c11
texldp r3.x, v6, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c16.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c21.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 288 // 276 used size, 18 vars
Vector 80 [_LightColor0] 4
Vector 128 [_MainOffset] 4
Vector 144 [_DetailOffset] 4
Float 160 [_FalloffPow]
Float 164 [_FalloffScale]
Float 168 [_DetailScale]
Float 172 [_DetailDist]
Float 176 [_MinLight]
Float 180 [_FadeDist]
Float 184 [_FadeScale]
Float 188 [_RimDist]
Float 192 [_RimDistSub]
Float 272 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 109 instructions, 5 temp regs, 0 temp arrays:
// ALU 100 float, 0 int, 4 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedeneoijkpoiajakjbhgmkahlncfdmddodabaaaaaalaapaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aiaiaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaahaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefceiaoaaaaeaaaaaaajcadaaaafjaaaaaeegiocaaaaaaaaaaabcaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadicbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadpcbabaaaahaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaabgbgbaaaaeaaaaaadeaaaaajicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackaabaia
ibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
igaabaaaaaaaaaaaigaabaiaebaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaackaabaaaaaaaaaaa
bkaabaaaaaaaaaaadbaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaabkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaiccaabaaaabaaaaaaakaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaa
abaaaaaadkaabaaaaaaaaaaabkaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjkcdodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjkcdobkiacaaaaaaaaaaaaiaaaaaaaaaaaaai
dcaabaaaabaaaaaaegaabaaaacaaaaaaegiacaaaaaaaaaaaaiaaaaaaalaaaaaf
ccaabaaaacaaaaaabkaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoamaaaaafmcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaaaaaaaaalkcaabaaa
acaaaaaafgabbaiaibaaaaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaiadpaaaaaaaa
aaaaiadpaaaaaaaiccaabaaaacaaaaaackaabaiambaaaaaaaaaaaaaabkaabaaa
acaaaaaaebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajpcaabaaa
aeaaaaaakgabbaiambaaaaaaaaaaaaaafgaibaiaibaaaaaaaaaaaaaadcaaaaak
pcaabaaaaeaaaaaafgafbaaaacaaaaaaegaobaaaaeaaaaaakgabbaiaibaaaaaa
aaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaibaaaaaaaaaaaaaajgahbaia
ebaaaaaaaeaaaaaaaaaaaaaiccaabaaaacaaaaaadkaabaaaacaaaaaaakaabaia
ebaaaaaaaeaaaaaaebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaadcaaaaaj
hcaabaaaaaaaaaaafgafbaaaacaaaaaaegacbaaaaaaaaaaajgahbaaaaeaaaaaa
diaaaaakgcaabaaaaaaaaaaakgajbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadp
aaaaaadpaaaaaaaaaoaaaaahdcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaaa
aaaaaaaaaaaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaaegiacaaaaaaaaaaa
ajaaaaaadiaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaakgikcaaaaaaaaaaa
akaaaaaaalaaaaafecaabaaaacaaaaaadkaabaaaaaaaaaaaamaaaaafecaabaaa
adaaaaaadkaabaaaaaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpapcaaaaibcaabaaaadaaaaaapgbpbaaaabaaaaaa
pgipcaaaaaaaaaaaakaaaaaadcaaaaajpcaabaaaaaaaaaaaagaabaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaaaaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegbcbaaaacaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaaiocaabaaaabaaaaaaagbjbaaaabaaaaaa
agbjbaiaebaaaaaaacaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaa
jgahbaaaabaaaaaaelaaaaafdcaabaaaabaaaaaaegaabaaaabaaaaaadcaaaaal
bcaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaaamaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaa
aaaaaaaaalaaaaaabacaaaahccaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaa
adaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaa
akaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaaakaaaaaabjaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaiadpaaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadccaaaam
ecaabaaaabaaaaaackiacaaaaaaaaaaaalaaaaaackaabaaaabaaaaaabkiacaia
ebaaaaaaaaaaaaaaalaaaaaaaaaaaaaiccaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaahaaaaaa
pgbpbaaaahaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaa
ahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaa
aaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaaahaaaaaa
dicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakiacaaaaaaaaaaabbaaaaaa
diaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaadaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaa
aaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaa
aaaaaaaaalaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_MainOffset]
Vector 6 [_DetailOffset]
Float 7 [_FalloffPow]
Float 8 [_FalloffScale]
Float 9 [_DetailScale]
Float 10 [_DetailDist]
Float 11 [_MinLight]
Float 12 [_FadeDist]
Float 13 [_FadeScale]
Float 14 [_RimDist]
Float 15 [_RimDistSub]
Float 16 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 126 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c18, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.xyz, r0.x, v4
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c17.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
add r0.w, r0, c17.y
frc r1.w, r0
add_sat r1.w, r0, -r1
add_pp r3.xyz, r1.yxzw, -r2
mad_pp r2.xyz, r1.w, r3, r2
abs r0.w, r0.z
max r1.y, r1.x, r0.w
rcp r1.z, r1.y
min r1.y, r1.x, r0.w
mul r2.w, r1.y, r1.z
abs_pp r1.w, r2.x
rcp_pp r1.z, r1.w
mul_pp r1.zw, r2.xyzy, r1.z
mul r1.y, r2.w, r2.w
mov_pp r2.xy, c6
mad_pp r1.zw, r1, c21.y, r2.xyxy
mad r2.z, r1.y, c19.y, c19
mad r2.z, r2, r1.y, c19.w
mad r2.x, r2.z, r1.y, c20
mad r2.y, r2.x, r1, c20
abs r2.x, r0.y
mad r1.y, r2, r1, c20.z
add r2.z, -r2.x, c17.y
mad r2.y, r2.x, c18.x, c18
mad r2.y, r2, r2.x, c17.w
rsq r2.z, r2.z
rcp r2.z, r2.z
mad r2.x, r2.y, r2, c18.z
mul r2.x, r2, r2.z
cmp r0.y, r0, c17.x, c17
mul r2.z, r1.y, r2.w
mul r2.y, r0, r2.x
mad r1.y, -r2, c18.w, r2.x
mad r0.y, r0, c17.z, r1
add r2.x, -r2.z, c20.w
add r0.w, r1.x, -r0
mul r2.y, r0, c19.x
add r1.x, r2.y, c5.y
cmp r0.w, -r0, r2.z, r2.x
add r0.y, -r0.w, c17.z
cmp r0.y, r0.z, r0.w, r0
cmp r2.x, r0, r0.y, -r0.y
mad r2.x, r2, c21, c21.y
add r2.xy, r2, c5
dsy r2.w, r1.x
dsx r3.y, r1.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
dsy r0.zw, r0.xyxz
mul r0.zw, r0, r0
add r0.w, r0.z, r0
add r1.x, r1, r1.y
rsq r0.z, r1.x
rcp r0.z, r0.z
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r3.x, r0.z, c21
mul r2.z, r0.w, c21.x
mul r1.zw, r1, c9.x
texldd r1, r1.zwzw, s1, r3, r2.zwzw
mul r2.w, v2.x, c10.x
add_pp r0, -r1, c17.y
mul_sat r2.w, r2, c18
mad_pp r0, r2.w, r0, r1
mov r1.x, r3
dsx r1.y, r2
dsy r1.w, r2.y
mov r1.z, r2
texldd r1, r2, s0, r1, r1.zwzw
mul_pp r1, r1, r0
add r2.xyz, -v1, c1
dp3 r0.w, r2, r2
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
rsq r0.y, r0.w
add r2.xyz, -v0, c1
rsq r0.x, r0.x
dp3 r0.w, r2, r2
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.w, -r0.x, c15.x, r0.y
mov r0.xyz, v3
dp3_sat r0.x, v5, r0
rsq r0.y, r0.w
mul r2.x, r0, c8
rcp r2.y, r0.y
pow_sat r0, r2.x, c7.x
mul r0.y, r2, c13.x
add_sat r0.y, r0, -c12.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2.w, c14
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c11
texldp r3.x, v6, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c16.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c21.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 288 // 276 used size, 18 vars
Vector 80 [_LightColor0] 4
Vector 128 [_MainOffset] 4
Vector 144 [_DetailOffset] 4
Float 160 [_FalloffPow]
Float 164 [_FalloffScale]
Float 168 [_DetailScale]
Float 172 [_DetailDist]
Float 176 [_MinLight]
Float 180 [_FadeDist]
Float 184 [_FadeScale]
Float 188 [_RimDist]
Float 192 [_RimDistSub]
Float 272 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 109 instructions, 5 temp regs, 0 temp arrays:
// ALU 100 float, 0 int, 4 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedbdbkcmadolojbjbdhobhobgogjlhiepkabaaaaaalaapaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aiaiaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaahaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefceiaoaaaaeaaaaaaajcadaaaafjaaaaaeegiocaaaaaaaaaaabcaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadicbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadpcbabaaaahaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaabgbgbaaaaeaaaaaadeaaaaajicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackaabaia
ibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
igaabaaaaaaaaaaaigaabaiaebaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaackaabaaaaaaaaaaa
bkaabaaaaaaaaaaadbaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaabkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaiccaabaaaabaaaaaaakaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaa
abaaaaaadkaabaaaaaaaaaaabkaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjkcdodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjkcdobkiacaaaaaaaaaaaaiaaaaaaaaaaaaai
dcaabaaaabaaaaaaegaabaaaacaaaaaaegiacaaaaaaaaaaaaiaaaaaaalaaaaaf
ccaabaaaacaaaaaabkaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoamaaaaafmcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaaaaaaaaalkcaabaaa
acaaaaaafgabbaiaibaaaaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaiadpaaaaaaaa
aaaaiadpaaaaaaaiccaabaaaacaaaaaackaabaiambaaaaaaaaaaaaaabkaabaaa
acaaaaaaebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajpcaabaaa
aeaaaaaakgabbaiambaaaaaaaaaaaaaafgaibaiaibaaaaaaaaaaaaaadcaaaaak
pcaabaaaaeaaaaaafgafbaaaacaaaaaaegaobaaaaeaaaaaakgabbaiaibaaaaaa
aaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaibaaaaaaaaaaaaaajgahbaia
ebaaaaaaaeaaaaaaaaaaaaaiccaabaaaacaaaaaadkaabaaaacaaaaaaakaabaia
ebaaaaaaaeaaaaaaebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaadcaaaaaj
hcaabaaaaaaaaaaafgafbaaaacaaaaaaegacbaaaaaaaaaaajgahbaaaaeaaaaaa
diaaaaakgcaabaaaaaaaaaaakgajbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadp
aaaaaadpaaaaaaaaaoaaaaahdcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaaa
aaaaaaaaaaaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaaegiacaaaaaaaaaaa
ajaaaaaadiaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaakgikcaaaaaaaaaaa
akaaaaaaalaaaaafecaabaaaacaaaaaadkaabaaaaaaaaaaaamaaaaafecaabaaa
adaaaaaadkaabaaaaaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpapcaaaaibcaabaaaadaaaaaapgbpbaaaabaaaaaa
pgipcaaaaaaaaaaaakaaaaaadcaaaaajpcaabaaaaaaaaaaaagaabaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaaaaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegbcbaaaacaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaaiocaabaaaabaaaaaaagbjbaaaabaaaaaa
agbjbaiaebaaaaaaacaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaa
jgahbaaaabaaaaaaelaaaaafdcaabaaaabaaaaaaegaabaaaabaaaaaadcaaaaal
bcaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaaamaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaa
aaaaaaaaalaaaaaabacaaaahccaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaa
adaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaa
akaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaaakaaaaaabjaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaiadpaaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadccaaaam
ecaabaaaabaaaaaackiacaaaaaaaaaaaalaaaaaackaabaaaabaaaaaabkiacaia
ebaaaaaaaaaaaaaaalaaaaaaaaaaaaaiccaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaahaaaaaa
pgbpbaaaahaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaa
ahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaa
aaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaaahaaaaaa
dicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakiacaaaaaaaaaaabbaaaaaa
diaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaadaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaa
aaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaa
aaaaaaaaalaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_MainOffset]
Vector 6 [_DetailOffset]
Float 7 [_FalloffPow]
Float 8 [_FalloffScale]
Float 9 [_DetailScale]
Float 10 [_DetailDist]
Float 11 [_MinLight]
Float 12 [_FadeDist]
Float 13 [_FadeScale]
Float 14 [_RimDist]
Float 15 [_RimDistSub]
Float 16 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 126 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c18, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.xyz, r0.x, v4
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c17.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
add r0.w, r0, c17.y
frc r1.w, r0
add_sat r1.w, r0, -r1
add_pp r3.xyz, r1.yxzw, -r2
mad_pp r2.xyz, r1.w, r3, r2
abs r0.w, r0.z
max r1.y, r1.x, r0.w
rcp r1.z, r1.y
min r1.y, r1.x, r0.w
mul r2.w, r1.y, r1.z
abs_pp r1.w, r2.x
rcp_pp r1.z, r1.w
mul_pp r1.zw, r2.xyzy, r1.z
mul r1.y, r2.w, r2.w
mov_pp r2.xy, c6
mad_pp r1.zw, r1, c21.y, r2.xyxy
mad r2.z, r1.y, c19.y, c19
mad r2.z, r2, r1.y, c19.w
mad r2.x, r2.z, r1.y, c20
mad r2.y, r2.x, r1, c20
abs r2.x, r0.y
mad r1.y, r2, r1, c20.z
add r2.z, -r2.x, c17.y
mad r2.y, r2.x, c18.x, c18
mad r2.y, r2, r2.x, c17.w
rsq r2.z, r2.z
rcp r2.z, r2.z
mad r2.x, r2.y, r2, c18.z
mul r2.x, r2, r2.z
cmp r0.y, r0, c17.x, c17
mul r2.z, r1.y, r2.w
mul r2.y, r0, r2.x
mad r1.y, -r2, c18.w, r2.x
mad r0.y, r0, c17.z, r1
add r2.x, -r2.z, c20.w
add r0.w, r1.x, -r0
mul r2.y, r0, c19.x
add r1.x, r2.y, c5.y
cmp r0.w, -r0, r2.z, r2.x
add r0.y, -r0.w, c17.z
cmp r0.y, r0.z, r0.w, r0
cmp r2.x, r0, r0.y, -r0.y
mad r2.x, r2, c21, c21.y
add r2.xy, r2, c5
dsy r2.w, r1.x
dsx r3.y, r1.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
dsy r0.zw, r0.xyxz
mul r0.zw, r0, r0
add r0.w, r0.z, r0
add r1.x, r1, r1.y
rsq r0.z, r1.x
rcp r0.z, r0.z
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r3.x, r0.z, c21
mul r2.z, r0.w, c21.x
mul r1.zw, r1, c9.x
texldd r1, r1.zwzw, s1, r3, r2.zwzw
mul r2.w, v2.x, c10.x
add_pp r0, -r1, c17.y
mul_sat r2.w, r2, c18
mad_pp r0, r2.w, r0, r1
mov r1.x, r3
dsx r1.y, r2
dsy r1.w, r2.y
mov r1.z, r2
texldd r1, r2, s0, r1, r1.zwzw
mul_pp r1, r1, r0
add r2.xyz, -v1, c1
dp3 r0.w, r2, r2
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
rsq r0.y, r0.w
add r2.xyz, -v0, c1
rsq r0.x, r0.x
dp3 r0.w, r2, r2
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.w, -r0.x, c15.x, r0.y
mov r0.xyz, v3
dp3_sat r0.x, v5, r0
rsq r0.y, r0.w
mul r2.x, r0, c8
rcp r2.y, r0.y
pow_sat r0, r2.x, c7.x
mul r0.y, r2, c13.x
add_sat r0.y, r0, -c12.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2.w, c14
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4_pp r0.y, c3, c3
rsq_pp r1.w, r0.y
mul_pp r2.xyz, r1.w, c3
mov r0.x, c11
texldp r3.x, v6, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c16.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c21.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 288 // 276 used size, 18 vars
Vector 80 [_LightColor0] 4
Vector 128 [_MainOffset] 4
Vector 144 [_DetailOffset] 4
Float 160 [_FalloffPow]
Float 164 [_FalloffScale]
Float 168 [_DetailScale]
Float 172 [_DetailDist]
Float 176 [_MinLight]
Float 180 [_FadeDist]
Float 184 [_FadeScale]
Float 188 [_RimDist]
Float 192 [_RimDistSub]
Float 272 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 109 instructions, 5 temp regs, 0 temp arrays:
// ALU 100 float, 0 int, 4 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednabooiacjdhloebakchcgfpbpniockojabaaaaaalaapaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aiaiaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaadaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaahaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefceiaoaaaaeaaaaaaajcadaaaafjaaaaaeegiocaaaaaaaaaaabcaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadicbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadpcbabaaaahaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaabgbgbaaaaeaaaaaadeaaaaajicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackaabaia
ibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
igaabaaaaaaaaaaaigaabaiaebaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaackaabaaaaaaaaaaa
bkaabaaaaaaaaaaadbaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaabkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaiccaabaaaabaaaaaaakaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaa
abaaaaaadkaabaaaaaaaaaaabkaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjkcdodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjkcdobkiacaaaaaaaaaaaaiaaaaaaaaaaaaai
dcaabaaaabaaaaaaegaabaaaacaaaaaaegiacaaaaaaaaaaaaiaaaaaaalaaaaaf
ccaabaaaacaaaaaabkaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoamaaaaafmcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaaaaaaaaalkcaabaaa
acaaaaaafgabbaiaibaaaaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaiadpaaaaaaaa
aaaaiadpaaaaaaaiccaabaaaacaaaaaackaabaiambaaaaaaaaaaaaaabkaabaaa
acaaaaaaebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajpcaabaaa
aeaaaaaakgabbaiambaaaaaaaaaaaaaafgaibaiaibaaaaaaaaaaaaaadcaaaaak
pcaabaaaaeaaaaaafgafbaaaacaaaaaaegaobaaaaeaaaaaakgabbaiaibaaaaaa
aaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaibaaaaaaaaaaaaaajgahbaia
ebaaaaaaaeaaaaaaaaaaaaaiccaabaaaacaaaaaadkaabaaaacaaaaaaakaabaia
ebaaaaaaaeaaaaaaebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaadcaaaaaj
hcaabaaaaaaaaaaafgafbaaaacaaaaaaegacbaaaaaaaaaaajgahbaaaaeaaaaaa
diaaaaakgcaabaaaaaaaaaaakgajbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadp
aaaaaadpaaaaaaaaaoaaaaahdcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaaa
aaaaaaaaaaaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaaegiacaaaaaaaaaaa
ajaaaaaadiaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaakgikcaaaaaaaaaaa
akaaaaaaalaaaaafecaabaaaacaaaaaadkaabaaaaaaaaaaaamaaaaafecaabaaa
adaaaaaadkaabaaaaaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpapcaaaaibcaabaaaadaaaaaapgbpbaaaabaaaaaa
pgipcaaaaaaaaaaaakaaaaaadcaaaaajpcaabaaaaaaaaaaaagaabaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaaaaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegbcbaaaacaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaaiocaabaaaabaaaaaaagbjbaaaabaaaaaa
agbjbaiaebaaaaaaacaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaa
jgahbaaaabaaaaaaelaaaaafdcaabaaaabaaaaaaegaabaaaabaaaaaadcaaaaal
bcaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaaamaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaa
aaaaaaaaalaaaaaabacaaaahccaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaa
adaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaa
akaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaaakaaaaaabjaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaiadpaaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadccaaaam
ecaabaaaabaaaaaackiacaaaaaaaaaaaalaaaaaackaabaaaabaaaaaabkiacaia
ebaaaaaaaaaaaaaaalaaaaaaaaaaaaaiccaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaahaaaaaa
pgbpbaaaahaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaa
ahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaa
aaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaaahaaaaaa
dicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakiacaaaaaaaaaaabbaaaaaa
diaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaadaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaa
aaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaa
aaaaaaaaalaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_MainOffset]
Vector 6 [_DetailOffset]
Float 7 [_FalloffPow]
Float 8 [_FalloffScale]
Float 9 [_DetailScale]
Float 10 [_DetailDist]
Float 11 [_MinLight]
Float 12 [_FadeDist]
Float 13 [_FadeScale]
Float 14 [_RimDist]
Float 15 [_RimDistSub]
Float 16 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 126 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c18, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.xyz, r0.x, v4
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c17.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
add r0.w, r0, c17.y
frc r1.w, r0
add_sat r1.w, r0, -r1
add_pp r3.xyz, r1.yxzw, -r2
mad_pp r2.xyz, r1.w, r3, r2
abs r0.w, r0.z
max r1.y, r1.x, r0.w
rcp r1.z, r1.y
min r1.y, r1.x, r0.w
mul r2.w, r1.y, r1.z
abs_pp r1.w, r2.x
rcp_pp r1.z, r1.w
mul_pp r1.zw, r2.xyzy, r1.z
mul r1.y, r2.w, r2.w
mov_pp r2.xy, c6
mad_pp r1.zw, r1, c21.y, r2.xyxy
mad r2.z, r1.y, c19.y, c19
mad r2.z, r2, r1.y, c19.w
mad r2.x, r2.z, r1.y, c20
mad r2.y, r2.x, r1, c20
abs r2.x, r0.y
mad r1.y, r2, r1, c20.z
add r2.z, -r2.x, c17.y
mad r2.y, r2.x, c18.x, c18
mad r2.y, r2, r2.x, c17.w
rsq r2.z, r2.z
rcp r2.z, r2.z
mad r2.x, r2.y, r2, c18.z
mul r2.x, r2, r2.z
cmp r0.y, r0, c17.x, c17
mul r2.z, r1.y, r2.w
mul r2.y, r0, r2.x
mad r1.y, -r2, c18.w, r2.x
mad r0.y, r0, c17.z, r1
add r2.x, -r2.z, c20.w
add r0.w, r1.x, -r0
mul r2.y, r0, c19.x
add r1.x, r2.y, c5.y
cmp r0.w, -r0, r2.z, r2.x
add r0.y, -r0.w, c17.z
cmp r0.y, r0.z, r0.w, r0
cmp r2.x, r0, r0.y, -r0.y
mad r2.x, r2, c21, c21.y
add r2.xy, r2, c5
dsy r2.w, r1.x
dsx r3.y, r1.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
dsy r0.zw, r0.xyxz
mul r0.zw, r0, r0
add r0.w, r0.z, r0
add r1.x, r1, r1.y
rsq r0.z, r1.x
rcp r0.z, r0.z
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r3.x, r0.z, c21
mul r2.z, r0.w, c21.x
mul r1.zw, r1, c9.x
texldd r1, r1.zwzw, s1, r3, r2.zwzw
mul r2.w, v2.x, c10.x
add_pp r0, -r1, c17.y
mul_sat r2.w, r2, c18
mad_pp r0, r2.w, r0, r1
mov r1.x, r3
dsx r1.y, r2
dsy r1.w, r2.y
mov r1.z, r2
texldd r1, r2, s0, r1, r1.zwzw
mul_pp r1, r1, r0
add r2.xyz, -v1, c1
dp3 r0.w, r2, r2
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
rsq r0.y, r0.w
add r2.xyz, -v0, c1
rsq r0.x, r0.x
dp3 r0.w, r2, r2
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.w, -r0.x, c15.x, r0.y
mov r0.xyz, v3
dp3_sat r0.x, v5, r0
rsq r0.y, r0.w
mul r2.x, r0, c8
rcp r2.y, r0.y
pow_sat r0, r2.x, c7.x
mul r0.y, r2, c13.x
add_sat r0.y, r0, -c12.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2.w, c14
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c11
texldp r3.x, v6, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c16.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c21.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
ConstBuffer "$Globals" 288 // 276 used size, 18 vars
Vector 80 [_LightColor0] 4
Vector 128 [_MainOffset] 4
Vector 144 [_DetailOffset] 4
Float 160 [_FalloffPow]
Float 164 [_FalloffScale]
Float 168 [_DetailScale]
Float 172 [_DetailDist]
Float 176 [_MinLight]
Float 180 [_FadeDist]
Float 184 [_FadeScale]
Float 188 [_RimDist]
Float 192 [_RimDistSub]
Float 272 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 109 instructions, 5 temp regs, 0 temp arrays:
// ALU 100 float, 0 int, 4 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedlikbjcmeolmplomhnmiikejfpclkdcjcabaaaaaamiapaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aiaiaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefceiaoaaaa
eaaaaaaajcadaaaafjaaaaaeegiocaaaaaaaaaaabcaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadicbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaabgbgbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaaigaabaaaaaaaaaaa
igaabaiaebaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaa
dbaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaabkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ccaabaaaabaaaaaaakaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaackaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjkcdodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjkcdobkiacaaaaaaaaaaaaiaaaaaaaaaaaaaidcaabaaaabaaaaaa
egaabaaaacaaaaaaegiacaaaaaaaaaaaaiaaaaaaalaaaaafccaabaaaacaaaaaa
bkaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaacaaaaaaegaabaaaadaaaaaaaaaaaaalkcaabaaaacaaaaaafgabbaia
ibaaaaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaai
ccaabaaaacaaaaaackaabaiambaaaaaaaaaaaaaabkaabaaaacaaaaaaebcaaaaf
ccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajpcaabaaaaeaaaaaakgabbaia
mbaaaaaaaaaaaaaafgaibaiaibaaaaaaaaaaaaaadcaaaaakpcaabaaaaeaaaaaa
fgafbaaaacaaaaaaegaobaaaaeaaaaaakgabbaiaibaaaaaaaaaaaaaaaaaaaaaj
hcaabaaaaaaaaaaaegacbaiaibaaaaaaaaaaaaaajgahbaiaebaaaaaaaeaaaaaa
aaaaaaaiccaabaaaacaaaaaadkaabaaaacaaaaaaakaabaiaebaaaaaaaeaaaaaa
ebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaadcaaaaajhcaabaaaaaaaaaaa
fgafbaaaacaaaaaaegacbaaaaaaaaaaajgahbaaaaeaaaaaadiaaaaakgcaabaaa
aaaaaaaakgajbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaaaaaaaaaaaaaaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaegiacaaaaaaaaaaaajaaaaaadiaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaakgikcaaaaaaaaaaaakaaaaaaalaaaaaf
ecaabaaaacaaaaaadkaabaaaaaaaaaaaamaaaaafecaabaaaadaaaaaadkaabaaa
aaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpapcaaaaibcaabaaaadaaaaaapgbpbaaaabaaaaaapgipcaaaaaaaaaaa
akaaaaaadcaaaaajpcaabaaaaaaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaaaaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaaaaaaaaiocaabaaaabaaaaaaagbjbaaaabaaaaaaagbjbaiaebaaaaaa
acaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaa
elaaaaafdcaabaaaabaaaaaaegaabaaaabaaaaaadcaaaaalbcaabaaaabaaaaaa
akiacaiaebaaaaaaaaaaaaaaamaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaaalaaaaaa
bacaaaahccaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaadaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaaakaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaaakiacaaaaaaaaaaaakaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadccaaaamecaabaaaabaaaaaa
ckiacaaaaaaaaaaaalaaaaaackaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaa
alaaaaaaaaaaaaaiccaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaa
abaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakiacaaaaaaaaaaabbaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaaalaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_MainOffset]
Vector 6 [_DetailOffset]
Float 7 [_FalloffPow]
Float 8 [_FalloffScale]
Float 9 [_DetailScale]
Float 10 [_DetailDist]
Float 11 [_MinLight]
Float 12 [_FadeDist]
Float 13 [_FadeScale]
Float 14 [_RimDist]
Float 15 [_RimDistSub]
Float 16 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 126 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c18, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.xyz, r0.x, v4
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c17.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
add r0.w, r0, c17.y
frc r1.w, r0
add_sat r1.w, r0, -r1
add_pp r3.xyz, r1.yxzw, -r2
mad_pp r2.xyz, r1.w, r3, r2
abs r0.w, r0.z
max r1.y, r1.x, r0.w
rcp r1.z, r1.y
min r1.y, r1.x, r0.w
mul r2.w, r1.y, r1.z
abs_pp r1.w, r2.x
rcp_pp r1.z, r1.w
mul_pp r1.zw, r2.xyzy, r1.z
mul r1.y, r2.w, r2.w
mov_pp r2.xy, c6
mad_pp r1.zw, r1, c21.y, r2.xyxy
mad r2.z, r1.y, c19.y, c19
mad r2.z, r2, r1.y, c19.w
mad r2.x, r2.z, r1.y, c20
mad r2.y, r2.x, r1, c20
abs r2.x, r0.y
mad r1.y, r2, r1, c20.z
add r2.z, -r2.x, c17.y
mad r2.y, r2.x, c18.x, c18
mad r2.y, r2, r2.x, c17.w
rsq r2.z, r2.z
rcp r2.z, r2.z
mad r2.x, r2.y, r2, c18.z
mul r2.x, r2, r2.z
cmp r0.y, r0, c17.x, c17
mul r2.z, r1.y, r2.w
mul r2.y, r0, r2.x
mad r1.y, -r2, c18.w, r2.x
mad r0.y, r0, c17.z, r1
add r2.x, -r2.z, c20.w
add r0.w, r1.x, -r0
mul r2.y, r0, c19.x
add r1.x, r2.y, c5.y
cmp r0.w, -r0, r2.z, r2.x
add r0.y, -r0.w, c17.z
cmp r0.y, r0.z, r0.w, r0
cmp r2.x, r0, r0.y, -r0.y
mad r2.x, r2, c21, c21.y
add r2.xy, r2, c5
dsy r2.w, r1.x
dsx r3.y, r1.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
dsy r0.zw, r0.xyxz
mul r0.zw, r0, r0
add r0.w, r0.z, r0
add r1.x, r1, r1.y
rsq r0.z, r1.x
rcp r0.z, r0.z
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r3.x, r0.z, c21
mul r2.z, r0.w, c21.x
mul r1.zw, r1, c9.x
texldd r1, r1.zwzw, s1, r3, r2.zwzw
mul r2.w, v2.x, c10.x
add_pp r0, -r1, c17.y
mul_sat r2.w, r2, c18
mad_pp r0, r2.w, r0, r1
mov r1.x, r3
dsx r1.y, r2
dsy r1.w, r2.y
mov r1.z, r2
texldd r1, r2, s0, r1, r1.zwzw
mul_pp r1, r1, r0
add r2.xyz, -v1, c1
dp3 r0.w, r2, r2
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
rsq r0.y, r0.w
add r2.xyz, -v0, c1
rsq r0.x, r0.x
dp3 r0.w, r2, r2
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.w, -r0.x, c15.x, r0.y
mov r0.xyz, v3
dp3_sat r0.x, v5, r0
rsq r0.y, r0.w
mul r2.x, r0, c8
rcp r2.y, r0.y
pow_sat r0, r2.x, c7.x
mul r0.y, r2, c13.x
add_sat r0.y, r0, -c12.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2.w, c14
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c11
texldp r3.x, v6, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c16.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c21.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 288 // 276 used size, 18 vars
Vector 80 [_LightColor0] 4
Vector 128 [_MainOffset] 4
Vector 144 [_DetailOffset] 4
Float 160 [_FalloffPow]
Float 164 [_FalloffScale]
Float 168 [_DetailScale]
Float 172 [_DetailDist]
Float 176 [_MinLight]
Float 180 [_FadeDist]
Float 184 [_FadeScale]
Float 188 [_RimDist]
Float 192 [_RimDistSub]
Float 272 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 109 instructions, 5 temp regs, 0 temp arrays:
// ALU 100 float, 0 int, 4 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedlikbjcmeolmplomhnmiikejfpclkdcjcabaaaaaamiapaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aiaiaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefceiaoaaaa
eaaaaaaajcadaaaafjaaaaaeegiocaaaaaaaaaaabcaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadicbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaabgbgbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaaigaabaaaaaaaaaaa
igaabaiaebaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaa
dbaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaabkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ccaabaaaabaaaaaaakaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaackaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjkcdodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjkcdobkiacaaaaaaaaaaaaiaaaaaaaaaaaaaidcaabaaaabaaaaaa
egaabaaaacaaaaaaegiacaaaaaaaaaaaaiaaaaaaalaaaaafccaabaaaacaaaaaa
bkaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaacaaaaaaegaabaaaadaaaaaaaaaaaaalkcaabaaaacaaaaaafgabbaia
ibaaaaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaai
ccaabaaaacaaaaaackaabaiambaaaaaaaaaaaaaabkaabaaaacaaaaaaebcaaaaf
ccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajpcaabaaaaeaaaaaakgabbaia
mbaaaaaaaaaaaaaafgaibaiaibaaaaaaaaaaaaaadcaaaaakpcaabaaaaeaaaaaa
fgafbaaaacaaaaaaegaobaaaaeaaaaaakgabbaiaibaaaaaaaaaaaaaaaaaaaaaj
hcaabaaaaaaaaaaaegacbaiaibaaaaaaaaaaaaaajgahbaiaebaaaaaaaeaaaaaa
aaaaaaaiccaabaaaacaaaaaadkaabaaaacaaaaaaakaabaiaebaaaaaaaeaaaaaa
ebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaadcaaaaajhcaabaaaaaaaaaaa
fgafbaaaacaaaaaaegacbaaaaaaaaaaajgahbaaaaeaaaaaadiaaaaakgcaabaaa
aaaaaaaakgajbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaaaaaaaaaaaaaaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaegiacaaaaaaaaaaaajaaaaaadiaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaakgikcaaaaaaaaaaaakaaaaaaalaaaaaf
ecaabaaaacaaaaaadkaabaaaaaaaaaaaamaaaaafecaabaaaadaaaaaadkaabaaa
aaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpapcaaaaibcaabaaaadaaaaaapgbpbaaaabaaaaaapgipcaaaaaaaaaaa
akaaaaaadcaaaaajpcaabaaaaaaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaaaaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaaaaaaaaiocaabaaaabaaaaaaagbjbaaaabaaaaaaagbjbaiaebaaaaaa
acaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaa
elaaaaafdcaabaaaabaaaaaaegaabaaaabaaaaaadcaaaaalbcaabaaaabaaaaaa
akiacaiaebaaaaaaaaaaaaaaamaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaaalaaaaaa
bacaaaahccaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaadaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaaakaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaaakiacaaaaaaaaaaaakaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadccaaaamecaabaaaabaaaaaa
ckiacaaaaaaaaaaaalaaaaaackaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaa
alaaaaaaaaaaaaaiccaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaa
abaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakiacaaaaaaaaaaabbaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaaalaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_MainOffset]
Vector 6 [_DetailOffset]
Float 7 [_FalloffPow]
Float 8 [_FalloffScale]
Float 9 [_DetailScale]
Float 10 [_DetailDist]
Float 11 [_MinLight]
Float 12 [_FadeDist]
Float 13 [_FadeScale]
Float 14 [_RimDist]
Float 15 [_RimDistSub]
Float 16 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 126 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c18, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.xyz, r0.x, v4
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c17.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
add r0.w, r0, c17.y
frc r1.w, r0
add_sat r1.w, r0, -r1
add_pp r3.xyz, r1.yxzw, -r2
mad_pp r2.xyz, r1.w, r3, r2
abs r0.w, r0.z
max r1.y, r1.x, r0.w
rcp r1.z, r1.y
min r1.y, r1.x, r0.w
mul r2.w, r1.y, r1.z
abs_pp r1.w, r2.x
rcp_pp r1.z, r1.w
mul_pp r1.zw, r2.xyzy, r1.z
mul r1.y, r2.w, r2.w
mov_pp r2.xy, c6
mad_pp r1.zw, r1, c21.y, r2.xyxy
mad r2.z, r1.y, c19.y, c19
mad r2.z, r2, r1.y, c19.w
mad r2.x, r2.z, r1.y, c20
mad r2.y, r2.x, r1, c20
abs r2.x, r0.y
mad r1.y, r2, r1, c20.z
add r2.z, -r2.x, c17.y
mad r2.y, r2.x, c18.x, c18
mad r2.y, r2, r2.x, c17.w
rsq r2.z, r2.z
rcp r2.z, r2.z
mad r2.x, r2.y, r2, c18.z
mul r2.x, r2, r2.z
cmp r0.y, r0, c17.x, c17
mul r2.z, r1.y, r2.w
mul r2.y, r0, r2.x
mad r1.y, -r2, c18.w, r2.x
mad r0.y, r0, c17.z, r1
add r2.x, -r2.z, c20.w
add r0.w, r1.x, -r0
mul r2.y, r0, c19.x
add r1.x, r2.y, c5.y
cmp r0.w, -r0, r2.z, r2.x
add r0.y, -r0.w, c17.z
cmp r0.y, r0.z, r0.w, r0
cmp r2.x, r0, r0.y, -r0.y
mad r2.x, r2, c21, c21.y
add r2.xy, r2, c5
dsy r2.w, r1.x
dsx r3.y, r1.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
dsy r0.zw, r0.xyxz
mul r0.zw, r0, r0
add r0.w, r0.z, r0
add r1.x, r1, r1.y
rsq r0.z, r1.x
rcp r0.z, r0.z
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r3.x, r0.z, c21
mul r2.z, r0.w, c21.x
mul r1.zw, r1, c9.x
texldd r1, r1.zwzw, s1, r3, r2.zwzw
mul r2.w, v2.x, c10.x
add_pp r0, -r1, c17.y
mul_sat r2.w, r2, c18
mad_pp r0, r2.w, r0, r1
mov r1.x, r3
dsx r1.y, r2
dsy r1.w, r2.y
mov r1.z, r2
texldd r1, r2, s0, r1, r1.zwzw
mul_pp r1, r1, r0
add r2.xyz, -v1, c1
dp3 r0.w, r2, r2
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
rsq r0.y, r0.w
add r2.xyz, -v0, c1
rsq r0.x, r0.x
dp3 r0.w, r2, r2
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.w, -r0.x, c15.x, r0.y
mov r0.xyz, v3
dp3_sat r0.x, v5, r0
rsq r0.y, r0.w
mul r2.x, r0, c8
rcp r2.y, r0.y
pow_sat r0, r2.x, c7.x
mul r0.y, r2, c13.x
add_sat r0.y, r0, -c12.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2.w, c14
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4_pp r0.y, c3, c3
rsq_pp r1.w, r0.y
mul_pp r2.xyz, r1.w, c3
mov r0.x, c11
texldp r3.x, v6, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c16.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c21.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 288 // 276 used size, 18 vars
Vector 80 [_LightColor0] 4
Vector 128 [_MainOffset] 4
Vector 144 [_DetailOffset] 4
Float 160 [_FalloffPow]
Float 164 [_FalloffScale]
Float 168 [_DetailScale]
Float 172 [_DetailDist]
Float 176 [_MinLight]
Float 180 [_FadeDist]
Float 184 [_FadeScale]
Float 188 [_RimDist]
Float 192 [_RimDistSub]
Float 272 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 109 instructions, 5 temp regs, 0 temp arrays:
// ALU 100 float, 0 int, 4 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedeneoijkpoiajakjbhgmkahlncfdmddodabaaaaaalaapaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aiaiaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaahaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefceiaoaaaaeaaaaaaajcadaaaafjaaaaaeegiocaaaaaaaaaaabcaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadicbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadpcbabaaaahaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaabgbgbaaaaeaaaaaadeaaaaajicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackaabaia
ibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
igaabaaaaaaaaaaaigaabaiaebaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaackaabaaaaaaaaaaa
bkaabaaaaaaaaaaadbaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaabkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaiccaabaaaabaaaaaaakaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaa
abaaaaaadkaabaaaaaaaaaaabkaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjkcdodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjkcdobkiacaaaaaaaaaaaaiaaaaaaaaaaaaai
dcaabaaaabaaaaaaegaabaaaacaaaaaaegiacaaaaaaaaaaaaiaaaaaaalaaaaaf
ccaabaaaacaaaaaabkaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoamaaaaafmcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaaaaaaaaalkcaabaaa
acaaaaaafgabbaiaibaaaaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaiadpaaaaaaaa
aaaaiadpaaaaaaaiccaabaaaacaaaaaackaabaiambaaaaaaaaaaaaaabkaabaaa
acaaaaaaebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajpcaabaaa
aeaaaaaakgabbaiambaaaaaaaaaaaaaafgaibaiaibaaaaaaaaaaaaaadcaaaaak
pcaabaaaaeaaaaaafgafbaaaacaaaaaaegaobaaaaeaaaaaakgabbaiaibaaaaaa
aaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaibaaaaaaaaaaaaaajgahbaia
ebaaaaaaaeaaaaaaaaaaaaaiccaabaaaacaaaaaadkaabaaaacaaaaaaakaabaia
ebaaaaaaaeaaaaaaebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaadcaaaaaj
hcaabaaaaaaaaaaafgafbaaaacaaaaaaegacbaaaaaaaaaaajgahbaaaaeaaaaaa
diaaaaakgcaabaaaaaaaaaaakgajbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadp
aaaaaadpaaaaaaaaaoaaaaahdcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaaa
aaaaaaaaaaaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaaegiacaaaaaaaaaaa
ajaaaaaadiaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaakgikcaaaaaaaaaaa
akaaaaaaalaaaaafecaabaaaacaaaaaadkaabaaaaaaaaaaaamaaaaafecaabaaa
adaaaaaadkaabaaaaaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpapcaaaaibcaabaaaadaaaaaapgbpbaaaabaaaaaa
pgipcaaaaaaaaaaaakaaaaaadcaaaaajpcaabaaaaaaaaaaaagaabaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaaaaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegbcbaaaacaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaaiocaabaaaabaaaaaaagbjbaaaabaaaaaa
agbjbaiaebaaaaaaacaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaa
jgahbaaaabaaaaaaelaaaaafdcaabaaaabaaaaaaegaabaaaabaaaaaadcaaaaal
bcaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaaamaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaa
aaaaaaaaalaaaaaabacaaaahccaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaa
adaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaa
akaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaaakaaaaaabjaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaiadpaaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadccaaaam
ecaabaaaabaaaaaackiacaaaaaaaaaaaalaaaaaackaabaaaabaaaaaabkiacaia
ebaaaaaaaaaaaaaaalaaaaaaaaaaaaaiccaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaahaaaaaa
pgbpbaaaahaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaa
ahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaa
aaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaaahaaaaaa
dicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakiacaaaaaaaaaaabbaaaaaa
diaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaadaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaa
aaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaa
aaaaaaaaalaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_MainOffset]
Vector 6 [_DetailOffset]
Float 7 [_FalloffPow]
Float 8 [_FalloffScale]
Float 9 [_DetailScale]
Float 10 [_DetailDist]
Float 11 [_MinLight]
Float 12 [_FadeDist]
Float 13 [_FadeScale]
Float 14 [_RimDist]
Float 15 [_RimDistSub]
Float 16 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 126 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c18, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.xyz, r0.x, v4
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c17.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
add r0.w, r0, c17.y
frc r1.w, r0
add_sat r1.w, r0, -r1
add_pp r3.xyz, r1.yxzw, -r2
mad_pp r2.xyz, r1.w, r3, r2
abs r0.w, r0.z
max r1.y, r1.x, r0.w
rcp r1.z, r1.y
min r1.y, r1.x, r0.w
mul r2.w, r1.y, r1.z
abs_pp r1.w, r2.x
rcp_pp r1.z, r1.w
mul_pp r1.zw, r2.xyzy, r1.z
mul r1.y, r2.w, r2.w
mov_pp r2.xy, c6
mad_pp r1.zw, r1, c21.y, r2.xyxy
mad r2.z, r1.y, c19.y, c19
mad r2.z, r2, r1.y, c19.w
mad r2.x, r2.z, r1.y, c20
mad r2.y, r2.x, r1, c20
abs r2.x, r0.y
mad r1.y, r2, r1, c20.z
add r2.z, -r2.x, c17.y
mad r2.y, r2.x, c18.x, c18
mad r2.y, r2, r2.x, c17.w
rsq r2.z, r2.z
rcp r2.z, r2.z
mad r2.x, r2.y, r2, c18.z
mul r2.x, r2, r2.z
cmp r0.y, r0, c17.x, c17
mul r2.z, r1.y, r2.w
mul r2.y, r0, r2.x
mad r1.y, -r2, c18.w, r2.x
mad r0.y, r0, c17.z, r1
add r2.x, -r2.z, c20.w
add r0.w, r1.x, -r0
mul r2.y, r0, c19.x
add r1.x, r2.y, c5.y
cmp r0.w, -r0, r2.z, r2.x
add r0.y, -r0.w, c17.z
cmp r0.y, r0.z, r0.w, r0
cmp r2.x, r0, r0.y, -r0.y
mad r2.x, r2, c21, c21.y
add r2.xy, r2, c5
dsy r2.w, r1.x
dsx r3.y, r1.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
dsy r0.zw, r0.xyxz
mul r0.zw, r0, r0
add r0.w, r0.z, r0
add r1.x, r1, r1.y
rsq r0.z, r1.x
rcp r0.z, r0.z
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r3.x, r0.z, c21
mul r2.z, r0.w, c21.x
mul r1.zw, r1, c9.x
texldd r1, r1.zwzw, s1, r3, r2.zwzw
mul r2.w, v2.x, c10.x
add_pp r0, -r1, c17.y
mul_sat r2.w, r2, c18
mad_pp r0, r2.w, r0, r1
mov r1.x, r3
dsx r1.y, r2
dsy r1.w, r2.y
mov r1.z, r2
texldd r1, r2, s0, r1, r1.zwzw
mul_pp r1, r1, r0
add r2.xyz, -v1, c1
dp3 r0.w, r2, r2
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
rsq r0.y, r0.w
add r2.xyz, -v0, c1
rsq r0.x, r0.x
dp3 r0.w, r2, r2
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.w, -r0.x, c15.x, r0.y
mov r0.xyz, v3
dp3_sat r0.x, v5, r0
rsq r0.y, r0.w
mul r2.x, r0, c8
rcp r2.y, r0.y
pow_sat r0, r2.x, c7.x
mul r0.y, r2, c13.x
add_sat r0.y, r0, -c12.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2.w, c14
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4_pp r0.y, c3, c3
rsq_pp r1.w, r0.y
mul_pp r2.xyz, r1.w, c3
mov r0.x, c11
texldp r3.x, v6, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c16.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c21.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 352 // 340 used size, 19 vars
Vector 144 [_LightColor0] 4
Vector 192 [_MainOffset] 4
Vector 208 [_DetailOffset] 4
Float 224 [_FalloffPow]
Float 228 [_FalloffScale]
Float 232 [_DetailScale]
Float 236 [_DetailDist]
Float 240 [_MinLight]
Float 244 [_FadeDist]
Float 248 [_FadeScale]
Float 252 [_RimDist]
Float 256 [_RimDistSub]
Float 336 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 109 instructions, 5 temp regs, 0 temp arrays:
// ALU 100 float, 0 int, 4 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedpgepnjmbcofhhknlknldiolmhhjnneibabaaaaaamiapaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aiaiaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaadaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefceiaoaaaa
eaaaaaaajcadaaaafjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadicbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaabgbgbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaaigaabaaaaaaaaaaa
igaabaiaebaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaa
dbaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaabkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ccaabaaaabaaaaaaakaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaackaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjkcdodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjkcdobkiacaaaaaaaaaaaamaaaaaaaaaaaaaidcaabaaaabaaaaaa
egaabaaaacaaaaaaegiacaaaaaaaaaaaamaaaaaaalaaaaafccaabaaaacaaaaaa
bkaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaacaaaaaaegaabaaaadaaaaaaaaaaaaalkcaabaaaacaaaaaafgabbaia
ibaaaaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaai
ccaabaaaacaaaaaackaabaiambaaaaaaaaaaaaaabkaabaaaacaaaaaaebcaaaaf
ccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajpcaabaaaaeaaaaaakgabbaia
mbaaaaaaaaaaaaaafgaibaiaibaaaaaaaaaaaaaadcaaaaakpcaabaaaaeaaaaaa
fgafbaaaacaaaaaaegaobaaaaeaaaaaakgabbaiaibaaaaaaaaaaaaaaaaaaaaaj
hcaabaaaaaaaaaaaegacbaiaibaaaaaaaaaaaaaajgahbaiaebaaaaaaaeaaaaaa
aaaaaaaiccaabaaaacaaaaaadkaabaaaacaaaaaaakaabaiaebaaaaaaaeaaaaaa
ebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaadcaaaaajhcaabaaaaaaaaaaa
fgafbaaaacaaaaaaegacbaaaaaaaaaaajgahbaaaaeaaaaaadiaaaaakgcaabaaa
aaaaaaaakgajbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaaaaaaaaaaaaaaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaegiacaaaaaaaaaaaanaaaaaadiaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaakgikcaaaaaaaaaaaaoaaaaaaalaaaaaf
ecaabaaaacaaaaaadkaabaaaaaaaaaaaamaaaaafecaabaaaadaaaaaadkaabaaa
aaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpapcaaaaibcaabaaaadaaaaaapgbpbaaaabaaaaaapgipcaaaaaaaaaaa
aoaaaaaadcaaaaajpcaabaaaaaaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaaaaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaaaaaaaaiocaabaaaabaaaaaaagbjbaaaabaaaaaaagbjbaiaebaaaaaa
acaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaa
elaaaaafdcaabaaaabaaaaaaegaabaaaabaaaaaadcaaaaalbcaabaaaabaaaaaa
akiacaiaebaaaaaaaaaaaaaabaaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaaapaaaaaa
bacaaaahccaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaadaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaaaoaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaaakiacaaaaaaaaaaaaoaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadccaaaamecaabaaaabaaaaaa
ckiacaaaaaaaaaaaapaaaaaackaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaa
apaaaaaaaaaaaaaiccaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaa
abaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakiacaaaaaaaaaaabfaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaajaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaaagiacaaaaaaaaaaaapaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_MainOffset]
Vector 6 [_DetailOffset]
Float 7 [_FalloffPow]
Float 8 [_FalloffScale]
Float 9 [_DetailScale]
Float 10 [_DetailDist]
Float 11 [_MinLight]
Float 12 [_FadeDist]
Float 13 [_FadeScale]
Float 14 [_RimDist]
Float 15 [_RimDistSub]
Float 16 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 126 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c18, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.xyz, r0.x, v4
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c17.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
add r0.w, r0, c17.y
frc r1.w, r0
add_sat r1.w, r0, -r1
add_pp r3.xyz, r1.yxzw, -r2
mad_pp r2.xyz, r1.w, r3, r2
abs r0.w, r0.z
max r1.y, r1.x, r0.w
rcp r1.z, r1.y
min r1.y, r1.x, r0.w
mul r2.w, r1.y, r1.z
abs_pp r1.w, r2.x
rcp_pp r1.z, r1.w
mul_pp r1.zw, r2.xyzy, r1.z
mul r1.y, r2.w, r2.w
mov_pp r2.xy, c6
mad_pp r1.zw, r1, c21.y, r2.xyxy
mad r2.z, r1.y, c19.y, c19
mad r2.z, r2, r1.y, c19.w
mad r2.x, r2.z, r1.y, c20
mad r2.y, r2.x, r1, c20
abs r2.x, r0.y
mad r1.y, r2, r1, c20.z
add r2.z, -r2.x, c17.y
mad r2.y, r2.x, c18.x, c18
mad r2.y, r2, r2.x, c17.w
rsq r2.z, r2.z
rcp r2.z, r2.z
mad r2.x, r2.y, r2, c18.z
mul r2.x, r2, r2.z
cmp r0.y, r0, c17.x, c17
mul r2.z, r1.y, r2.w
mul r2.y, r0, r2.x
mad r1.y, -r2, c18.w, r2.x
mad r0.y, r0, c17.z, r1
add r2.x, -r2.z, c20.w
add r0.w, r1.x, -r0
mul r2.y, r0, c19.x
add r1.x, r2.y, c5.y
cmp r0.w, -r0, r2.z, r2.x
add r0.y, -r0.w, c17.z
cmp r0.y, r0.z, r0.w, r0
cmp r2.x, r0, r0.y, -r0.y
mad r2.x, r2, c21, c21.y
add r2.xy, r2, c5
dsy r2.w, r1.x
dsx r3.y, r1.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
dsy r0.zw, r0.xyxz
mul r0.zw, r0, r0
add r0.w, r0.z, r0
add r1.x, r1, r1.y
rsq r0.z, r1.x
rcp r0.z, r0.z
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r3.x, r0.z, c21
mul r2.z, r0.w, c21.x
mul r1.zw, r1, c9.x
texldd r1, r1.zwzw, s1, r3, r2.zwzw
mul r2.w, v2.x, c10.x
add_pp r0, -r1, c17.y
mul_sat r2.w, r2, c18
mad_pp r0, r2.w, r0, r1
mov r1.x, r3
dsx r1.y, r2
dsy r1.w, r2.y
mov r1.z, r2
texldd r1, r2, s0, r1, r1.zwzw
mul_pp r1, r1, r0
add r2.xyz, -v1, c1
dp3 r0.w, r2, r2
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
rsq r0.y, r0.w
add r2.xyz, -v0, c1
rsq r0.x, r0.x
dp3 r0.w, r2, r2
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.w, -r0.x, c15.x, r0.y
mov r0.xyz, v3
dp3_sat r0.x, v5, r0
rsq r0.y, r0.w
mul r2.x, r0, c8
rcp r2.y, r0.y
pow_sat r0, r2.x, c7.x
mul r0.y, r2, c13.x
add_sat r0.y, r0, -c12.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2.w, c14
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c11
texldp r3.x, v6, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c16.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c21.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 288 // 276 used size, 18 vars
Vector 80 [_LightColor0] 4
Vector 128 [_MainOffset] 4
Vector 144 [_DetailOffset] 4
Float 160 [_FalloffPow]
Float 164 [_FalloffScale]
Float 168 [_DetailScale]
Float 172 [_DetailDist]
Float 176 [_MinLight]
Float 180 [_FadeDist]
Float 184 [_FadeScale]
Float 188 [_RimDist]
Float 192 [_RimDistSub]
Float 272 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 109 instructions, 5 temp regs, 0 temp arrays:
// ALU 100 float, 0 int, 4 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedcikmhmcdgnhdlnkapnkhpgnjhdppimfkabaaaaaamiapaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aiaiaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefceiaoaaaa
eaaaaaaajcadaaaafjaaaaaeegiocaaaaaaaaaaabcaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadicbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaabgbgbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaaigaabaaaaaaaaaaa
igaabaiaebaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaa
dbaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaabkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ccaabaaaabaaaaaaakaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaackaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjkcdodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjkcdobkiacaaaaaaaaaaaaiaaaaaaaaaaaaaidcaabaaaabaaaaaa
egaabaaaacaaaaaaegiacaaaaaaaaaaaaiaaaaaaalaaaaafccaabaaaacaaaaaa
bkaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaacaaaaaaegaabaaaadaaaaaaaaaaaaalkcaabaaaacaaaaaafgabbaia
ibaaaaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaai
ccaabaaaacaaaaaackaabaiambaaaaaaaaaaaaaabkaabaaaacaaaaaaebcaaaaf
ccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajpcaabaaaaeaaaaaakgabbaia
mbaaaaaaaaaaaaaafgaibaiaibaaaaaaaaaaaaaadcaaaaakpcaabaaaaeaaaaaa
fgafbaaaacaaaaaaegaobaaaaeaaaaaakgabbaiaibaaaaaaaaaaaaaaaaaaaaaj
hcaabaaaaaaaaaaaegacbaiaibaaaaaaaaaaaaaajgahbaiaebaaaaaaaeaaaaaa
aaaaaaaiccaabaaaacaaaaaadkaabaaaacaaaaaaakaabaiaebaaaaaaaeaaaaaa
ebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaadcaaaaajhcaabaaaaaaaaaaa
fgafbaaaacaaaaaaegacbaaaaaaaaaaajgahbaaaaeaaaaaadiaaaaakgcaabaaa
aaaaaaaakgajbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaaaaaaaaaaaaaaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaegiacaaaaaaaaaaaajaaaaaadiaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaakgikcaaaaaaaaaaaakaaaaaaalaaaaaf
ecaabaaaacaaaaaadkaabaaaaaaaaaaaamaaaaafecaabaaaadaaaaaadkaabaaa
aaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpapcaaaaibcaabaaaadaaaaaapgbpbaaaabaaaaaapgipcaaaaaaaaaaa
akaaaaaadcaaaaajpcaabaaaaaaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaaaaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaaaaaaaaiocaabaaaabaaaaaaagbjbaaaabaaaaaaagbjbaiaebaaaaaa
acaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaa
elaaaaafdcaabaaaabaaaaaaegaabaaaabaaaaaadcaaaaalbcaabaaaabaaaaaa
akiacaiaebaaaaaaaaaaaaaaamaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaaalaaaaaa
bacaaaahccaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaadaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaaakaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaaakiacaaaaaaaaaaaakaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadccaaaamecaabaaaabaaaaaa
ckiacaaaaaaaaaaaalaaaaaackaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaa
alaaaaaaaaaaaaaiccaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaa
abaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakiacaaaaaaaaaaabbaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaaalaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_MainOffset]
Vector 6 [_DetailOffset]
Float 7 [_FalloffPow]
Float 8 [_FalloffScale]
Float 9 [_DetailScale]
Float 10 [_DetailDist]
Float 11 [_MinLight]
Float 12 [_FadeDist]
Float 13 [_FadeScale]
Float 14 [_RimDist]
Float 15 [_RimDistSub]
Float 16 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 126 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c18, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.xyz, r0.x, v4
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c17.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
add r0.w, r0, c17.y
frc r1.w, r0
add_sat r1.w, r0, -r1
add_pp r3.xyz, r1.yxzw, -r2
mad_pp r2.xyz, r1.w, r3, r2
abs r0.w, r0.z
max r1.y, r1.x, r0.w
rcp r1.z, r1.y
min r1.y, r1.x, r0.w
mul r2.w, r1.y, r1.z
abs_pp r1.w, r2.x
rcp_pp r1.z, r1.w
mul_pp r1.zw, r2.xyzy, r1.z
mul r1.y, r2.w, r2.w
mov_pp r2.xy, c6
mad_pp r1.zw, r1, c21.y, r2.xyxy
mad r2.z, r1.y, c19.y, c19
mad r2.z, r2, r1.y, c19.w
mad r2.x, r2.z, r1.y, c20
mad r2.y, r2.x, r1, c20
abs r2.x, r0.y
mad r1.y, r2, r1, c20.z
add r2.z, -r2.x, c17.y
mad r2.y, r2.x, c18.x, c18
mad r2.y, r2, r2.x, c17.w
rsq r2.z, r2.z
rcp r2.z, r2.z
mad r2.x, r2.y, r2, c18.z
mul r2.x, r2, r2.z
cmp r0.y, r0, c17.x, c17
mul r2.z, r1.y, r2.w
mul r2.y, r0, r2.x
mad r1.y, -r2, c18.w, r2.x
mad r0.y, r0, c17.z, r1
add r2.x, -r2.z, c20.w
add r0.w, r1.x, -r0
mul r2.y, r0, c19.x
add r1.x, r2.y, c5.y
cmp r0.w, -r0, r2.z, r2.x
add r0.y, -r0.w, c17.z
cmp r0.y, r0.z, r0.w, r0
cmp r2.x, r0, r0.y, -r0.y
mad r2.x, r2, c21, c21.y
add r2.xy, r2, c5
dsy r2.w, r1.x
dsx r3.y, r1.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
dsy r0.zw, r0.xyxz
mul r0.zw, r0, r0
add r0.w, r0.z, r0
add r1.x, r1, r1.y
rsq r0.z, r1.x
rcp r0.z, r0.z
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r3.x, r0.z, c21
mul r2.z, r0.w, c21.x
mul r1.zw, r1, c9.x
texldd r1, r1.zwzw, s1, r3, r2.zwzw
mul r2.w, v2.x, c10.x
add_pp r0, -r1, c17.y
mul_sat r2.w, r2, c18
mad_pp r0, r2.w, r0, r1
mov r1.x, r3
dsx r1.y, r2
dsy r1.w, r2.y
mov r1.z, r2
texldd r1, r2, s0, r1, r1.zwzw
mul_pp r1, r1, r0
add r2.xyz, -v1, c1
dp3 r0.w, r2, r2
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
rsq r0.y, r0.w
add r2.xyz, -v0, c1
rsq r0.x, r0.x
dp3 r0.w, r2, r2
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.w, -r0.x, c15.x, r0.y
mov r0.xyz, v3
dp3_sat r0.x, v5, r0
rsq r0.y, r0.w
mul r2.x, r0, c8
rcp r2.y, r0.y
pow_sat r0, r2.x, c7.x
mul r0.y, r2, c13.x
add_sat r0.y, r0, -c12.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2.w, c14
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c11
texldp r3.x, v6, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c16.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c21.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 288 // 276 used size, 18 vars
Vector 80 [_LightColor0] 4
Vector 128 [_MainOffset] 4
Vector 144 [_DetailOffset] 4
Float 160 [_FalloffPow]
Float 164 [_FalloffScale]
Float 168 [_DetailScale]
Float 172 [_DetailDist]
Float 176 [_MinLight]
Float 180 [_FadeDist]
Float 184 [_FadeScale]
Float 188 [_RimDist]
Float 192 [_RimDistSub]
Float 272 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 109 instructions, 5 temp regs, 0 temp arrays:
// ALU 100 float, 0 int, 4 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedcikmhmcdgnhdlnkapnkhpgnjhdppimfkabaaaaaamiapaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aiaiaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefceiaoaaaa
eaaaaaaajcadaaaafjaaaaaeegiocaaaaaaaaaaabcaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadicbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaabgbgbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaaigaabaaaaaaaaaaa
igaabaiaebaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaa
dbaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaabkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ccaabaaaabaaaaaaakaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaackaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjkcdodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjkcdobkiacaaaaaaaaaaaaiaaaaaaaaaaaaaidcaabaaaabaaaaaa
egaabaaaacaaaaaaegiacaaaaaaaaaaaaiaaaaaaalaaaaafccaabaaaacaaaaaa
bkaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaacaaaaaaegaabaaaadaaaaaaaaaaaaalkcaabaaaacaaaaaafgabbaia
ibaaaaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaai
ccaabaaaacaaaaaackaabaiambaaaaaaaaaaaaaabkaabaaaacaaaaaaebcaaaaf
ccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajpcaabaaaaeaaaaaakgabbaia
mbaaaaaaaaaaaaaafgaibaiaibaaaaaaaaaaaaaadcaaaaakpcaabaaaaeaaaaaa
fgafbaaaacaaaaaaegaobaaaaeaaaaaakgabbaiaibaaaaaaaaaaaaaaaaaaaaaj
hcaabaaaaaaaaaaaegacbaiaibaaaaaaaaaaaaaajgahbaiaebaaaaaaaeaaaaaa
aaaaaaaiccaabaaaacaaaaaadkaabaaaacaaaaaaakaabaiaebaaaaaaaeaaaaaa
ebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaadcaaaaajhcaabaaaaaaaaaaa
fgafbaaaacaaaaaaegacbaaaaaaaaaaajgahbaaaaeaaaaaadiaaaaakgcaabaaa
aaaaaaaakgajbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaaaaaaaaaaaaaaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaegiacaaaaaaaaaaaajaaaaaadiaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaakgikcaaaaaaaaaaaakaaaaaaalaaaaaf
ecaabaaaacaaaaaadkaabaaaaaaaaaaaamaaaaafecaabaaaadaaaaaadkaabaaa
aaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpapcaaaaibcaabaaaadaaaaaapgbpbaaaabaaaaaapgipcaaaaaaaaaaa
akaaaaaadcaaaaajpcaabaaaaaaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaaaaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaaaaaaaaiocaabaaaabaaaaaaagbjbaaaabaaaaaaagbjbaiaebaaaaaa
acaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaa
elaaaaafdcaabaaaabaaaaaaegaabaaaabaaaaaadcaaaaalbcaabaaaabaaaaaa
akiacaiaebaaaaaaaaaaaaaaamaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaaalaaaaaa
bacaaaahccaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaadaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaaakaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaaakiacaaaaaaaaaaaakaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadccaaaamecaabaaaabaaaaaa
ckiacaaaaaaaaaaaalaaaaaackaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaa
alaaaaaaaaaaaaaiccaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaa
abaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakiacaaaaaaaaaaabbaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaaalaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_MainOffset]
Vector 6 [_DetailOffset]
Float 7 [_FalloffPow]
Float 8 [_FalloffScale]
Float 9 [_DetailScale]
Float 10 [_DetailDist]
Float 11 [_MinLight]
Float 12 [_FadeDist]
Float 13 [_FadeScale]
Float 14 [_RimDist]
Float 15 [_RimDistSub]
Float 16 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 126 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c18, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.xyz, r0.x, v4
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c17.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
add r0.w, r0, c17.y
frc r1.w, r0
add_sat r1.w, r0, -r1
add_pp r3.xyz, r1.yxzw, -r2
mad_pp r2.xyz, r1.w, r3, r2
abs r0.w, r0.z
max r1.y, r1.x, r0.w
rcp r1.z, r1.y
min r1.y, r1.x, r0.w
mul r2.w, r1.y, r1.z
abs_pp r1.w, r2.x
rcp_pp r1.z, r1.w
mul_pp r1.zw, r2.xyzy, r1.z
mul r1.y, r2.w, r2.w
mov_pp r2.xy, c6
mad_pp r1.zw, r1, c21.y, r2.xyxy
mad r2.z, r1.y, c19.y, c19
mad r2.z, r2, r1.y, c19.w
mad r2.x, r2.z, r1.y, c20
mad r2.y, r2.x, r1, c20
abs r2.x, r0.y
mad r1.y, r2, r1, c20.z
add r2.z, -r2.x, c17.y
mad r2.y, r2.x, c18.x, c18
mad r2.y, r2, r2.x, c17.w
rsq r2.z, r2.z
rcp r2.z, r2.z
mad r2.x, r2.y, r2, c18.z
mul r2.x, r2, r2.z
cmp r0.y, r0, c17.x, c17
mul r2.z, r1.y, r2.w
mul r2.y, r0, r2.x
mad r1.y, -r2, c18.w, r2.x
mad r0.y, r0, c17.z, r1
add r2.x, -r2.z, c20.w
add r0.w, r1.x, -r0
mul r2.y, r0, c19.x
add r1.x, r2.y, c5.y
cmp r0.w, -r0, r2.z, r2.x
add r0.y, -r0.w, c17.z
cmp r0.y, r0.z, r0.w, r0
cmp r2.x, r0, r0.y, -r0.y
mad r2.x, r2, c21, c21.y
add r2.xy, r2, c5
dsy r2.w, r1.x
dsx r3.y, r1.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
dsy r0.zw, r0.xyxz
mul r0.zw, r0, r0
add r0.w, r0.z, r0
add r1.x, r1, r1.y
rsq r0.z, r1.x
rcp r0.z, r0.z
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r3.x, r0.z, c21
mul r2.z, r0.w, c21.x
mul r1.zw, r1, c9.x
texldd r1, r1.zwzw, s1, r3, r2.zwzw
mul r2.w, v2.x, c10.x
add_pp r0, -r1, c17.y
mul_sat r2.w, r2, c18
mad_pp r0, r2.w, r0, r1
mov r1.x, r3
dsx r1.y, r2
dsy r1.w, r2.y
mov r1.z, r2
texldd r1, r2, s0, r1, r1.zwzw
mul_pp r1, r1, r0
add r2.xyz, -v1, c1
dp3 r0.w, r2, r2
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
rsq r0.y, r0.w
add r2.xyz, -v0, c1
rsq r0.x, r0.x
dp3 r0.w, r2, r2
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.w, -r0.x, c15.x, r0.y
mov r0.xyz, v3
dp3_sat r0.x, v5, r0
rsq r0.y, r0.w
mul r2.x, r0, c8
rcp r2.y, r0.y
pow_sat r0, r2.x, c7.x
mul r0.y, r2, c13.x
add_sat r0.y, r0, -c12.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2.w, c14
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c11
texldp r3.x, v6, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c16.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c21.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 352 // 340 used size, 19 vars
Vector 144 [_LightColor0] 4
Vector 192 [_MainOffset] 4
Vector 208 [_DetailOffset] 4
Float 224 [_FalloffPow]
Float 228 [_FalloffScale]
Float 232 [_DetailScale]
Float 236 [_DetailDist]
Float 240 [_MinLight]
Float 244 [_FadeDist]
Float 248 [_FadeScale]
Float 252 [_RimDist]
Float 256 [_RimDistSub]
Float 336 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 109 instructions, 5 temp regs, 0 temp arrays:
// ALU 100 float, 0 int, 4 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedecdfncmkpgjgdjneegidnmbpaalfkimkabaaaaaamiapaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aiaiaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefceiaoaaaa
eaaaaaaajcadaaaafjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadicbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaabgbgbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaaigaabaaaaaaaaaaa
igaabaiaebaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaa
dbaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaabkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ccaabaaaabaaaaaaakaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaackaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjkcdodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjkcdobkiacaaaaaaaaaaaamaaaaaaaaaaaaaidcaabaaaabaaaaaa
egaabaaaacaaaaaaegiacaaaaaaaaaaaamaaaaaaalaaaaafccaabaaaacaaaaaa
bkaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaacaaaaaaegaabaaaadaaaaaaaaaaaaalkcaabaaaacaaaaaafgabbaia
ibaaaaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaai
ccaabaaaacaaaaaackaabaiambaaaaaaaaaaaaaabkaabaaaacaaaaaaebcaaaaf
ccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajpcaabaaaaeaaaaaakgabbaia
mbaaaaaaaaaaaaaafgaibaiaibaaaaaaaaaaaaaadcaaaaakpcaabaaaaeaaaaaa
fgafbaaaacaaaaaaegaobaaaaeaaaaaakgabbaiaibaaaaaaaaaaaaaaaaaaaaaj
hcaabaaaaaaaaaaaegacbaiaibaaaaaaaaaaaaaajgahbaiaebaaaaaaaeaaaaaa
aaaaaaaiccaabaaaacaaaaaadkaabaaaacaaaaaaakaabaiaebaaaaaaaeaaaaaa
ebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaadcaaaaajhcaabaaaaaaaaaaa
fgafbaaaacaaaaaaegacbaaaaaaaaaaajgahbaaaaeaaaaaadiaaaaakgcaabaaa
aaaaaaaakgajbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaaaaaaaaaaaaaaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaegiacaaaaaaaaaaaanaaaaaadiaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaakgikcaaaaaaaaaaaaoaaaaaaalaaaaaf
ecaabaaaacaaaaaadkaabaaaaaaaaaaaamaaaaafecaabaaaadaaaaaadkaabaaa
aaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpapcaaaaibcaabaaaadaaaaaapgbpbaaaabaaaaaapgipcaaaaaaaaaaa
aoaaaaaadcaaaaajpcaabaaaaaaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaaaaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaaaaaaaaiocaabaaaabaaaaaaagbjbaaaabaaaaaaagbjbaiaebaaaaaa
acaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaa
elaaaaafdcaabaaaabaaaaaaegaabaaaabaaaaaadcaaaaalbcaabaaaabaaaaaa
akiacaiaebaaaaaaaaaaaaaabaaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaaapaaaaaa
bacaaaahccaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaadaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaaaoaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaaakiacaaaaaaaaaaaaoaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadccaaaamecaabaaaabaaaaaa
ckiacaaaaaaaaaaaapaaaaaackaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaa
apaaaaaaaaaaaaaiccaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaa
abaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakiacaaaaaaaaaaabfaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaajaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaaagiacaaaaaaaaaaaapaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_MainOffset]
Vector 6 [_DetailOffset]
Float 7 [_FalloffPow]
Float 8 [_FalloffScale]
Float 9 [_DetailScale]
Float 10 [_DetailDist]
Float 11 [_MinLight]
Float 12 [_FadeDist]
Float 13 [_FadeScale]
Float 14 [_RimDist]
Float 15 [_RimDistSub]
Float 16 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 126 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c18, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.xyz, r0.x, v4
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c17.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
add r0.w, r0, c17.y
frc r1.w, r0
add_sat r1.w, r0, -r1
add_pp r3.xyz, r1.yxzw, -r2
mad_pp r2.xyz, r1.w, r3, r2
abs r0.w, r0.z
max r1.y, r1.x, r0.w
rcp r1.z, r1.y
min r1.y, r1.x, r0.w
mul r2.w, r1.y, r1.z
abs_pp r1.w, r2.x
rcp_pp r1.z, r1.w
mul_pp r1.zw, r2.xyzy, r1.z
mul r1.y, r2.w, r2.w
mov_pp r2.xy, c6
mad_pp r1.zw, r1, c21.y, r2.xyxy
mad r2.z, r1.y, c19.y, c19
mad r2.z, r2, r1.y, c19.w
mad r2.x, r2.z, r1.y, c20
mad r2.y, r2.x, r1, c20
abs r2.x, r0.y
mad r1.y, r2, r1, c20.z
add r2.z, -r2.x, c17.y
mad r2.y, r2.x, c18.x, c18
mad r2.y, r2, r2.x, c17.w
rsq r2.z, r2.z
rcp r2.z, r2.z
mad r2.x, r2.y, r2, c18.z
mul r2.x, r2, r2.z
cmp r0.y, r0, c17.x, c17
mul r2.z, r1.y, r2.w
mul r2.y, r0, r2.x
mad r1.y, -r2, c18.w, r2.x
mad r0.y, r0, c17.z, r1
add r2.x, -r2.z, c20.w
add r0.w, r1.x, -r0
mul r2.y, r0, c19.x
add r1.x, r2.y, c5.y
cmp r0.w, -r0, r2.z, r2.x
add r0.y, -r0.w, c17.z
cmp r0.y, r0.z, r0.w, r0
cmp r2.x, r0, r0.y, -r0.y
mad r2.x, r2, c21, c21.y
add r2.xy, r2, c5
dsy r2.w, r1.x
dsx r3.y, r1.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
dsy r0.zw, r0.xyxz
mul r0.zw, r0, r0
add r0.w, r0.z, r0
add r1.x, r1, r1.y
rsq r0.z, r1.x
rcp r0.z, r0.z
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r3.x, r0.z, c21
mul r2.z, r0.w, c21.x
mul r1.zw, r1, c9.x
texldd r1, r1.zwzw, s1, r3, r2.zwzw
mul r2.w, v2.x, c10.x
add_pp r0, -r1, c17.y
mul_sat r2.w, r2, c18
mad_pp r0, r2.w, r0, r1
mov r1.x, r3
dsx r1.y, r2
dsy r1.w, r2.y
mov r1.z, r2
texldd r1, r2, s0, r1, r1.zwzw
mul_pp r1, r1, r0
add r2.xyz, -v1, c1
dp3 r0.w, r2, r2
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
rsq r0.y, r0.w
add r2.xyz, -v0, c1
rsq r0.x, r0.x
dp3 r0.w, r2, r2
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.w, -r0.x, c15.x, r0.y
mov r0.xyz, v3
dp3_sat r0.x, v5, r0
rsq r0.y, r0.w
mul r2.x, r0, c8
rcp r2.y, r0.y
pow_sat r0, r2.x, c7.x
mul r0.y, r2, c13.x
add_sat r0.y, r0, -c12.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2.w, c14
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c11
texldp r3.x, v6, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c16.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c21.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 352 // 340 used size, 19 vars
Vector 144 [_LightColor0] 4
Vector 192 [_MainOffset] 4
Vector 208 [_DetailOffset] 4
Float 224 [_FalloffPow]
Float 228 [_FalloffScale]
Float 232 [_DetailScale]
Float 236 [_DetailDist]
Float 240 [_MinLight]
Float 244 [_FadeDist]
Float 248 [_FadeScale]
Float 252 [_RimDist]
Float 256 [_RimDistSub]
Float 336 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 109 instructions, 5 temp regs, 0 temp arrays:
// ALU 100 float, 0 int, 4 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedecdfncmkpgjgdjneegidnmbpaalfkimkabaaaaaamiapaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aiaiaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefceiaoaaaa
eaaaaaaajcadaaaafjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadicbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaabgbgbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaaigaabaaaaaaaaaaa
igaabaiaebaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaa
dbaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaabkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ccaabaaaabaaaaaaakaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaackaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjkcdodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjkcdobkiacaaaaaaaaaaaamaaaaaaaaaaaaaidcaabaaaabaaaaaa
egaabaaaacaaaaaaegiacaaaaaaaaaaaamaaaaaaalaaaaafccaabaaaacaaaaaa
bkaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaacaaaaaaegaabaaaadaaaaaaaaaaaaalkcaabaaaacaaaaaafgabbaia
ibaaaaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaai
ccaabaaaacaaaaaackaabaiambaaaaaaaaaaaaaabkaabaaaacaaaaaaebcaaaaf
ccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajpcaabaaaaeaaaaaakgabbaia
mbaaaaaaaaaaaaaafgaibaiaibaaaaaaaaaaaaaadcaaaaakpcaabaaaaeaaaaaa
fgafbaaaacaaaaaaegaobaaaaeaaaaaakgabbaiaibaaaaaaaaaaaaaaaaaaaaaj
hcaabaaaaaaaaaaaegacbaiaibaaaaaaaaaaaaaajgahbaiaebaaaaaaaeaaaaaa
aaaaaaaiccaabaaaacaaaaaadkaabaaaacaaaaaaakaabaiaebaaaaaaaeaaaaaa
ebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaadcaaaaajhcaabaaaaaaaaaaa
fgafbaaaacaaaaaaegacbaaaaaaaaaaajgahbaaaaeaaaaaadiaaaaakgcaabaaa
aaaaaaaakgajbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaaaaaaaaaaaaaaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaegiacaaaaaaaaaaaanaaaaaadiaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaakgikcaaaaaaaaaaaaoaaaaaaalaaaaaf
ecaabaaaacaaaaaadkaabaaaaaaaaaaaamaaaaafecaabaaaadaaaaaadkaabaaa
aaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpapcaaaaibcaabaaaadaaaaaapgbpbaaaabaaaaaapgipcaaaaaaaaaaa
aoaaaaaadcaaaaajpcaabaaaaaaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaaaaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaaaaaaaaiocaabaaaabaaaaaaagbjbaaaabaaaaaaagbjbaiaebaaaaaa
acaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaa
elaaaaafdcaabaaaabaaaaaaegaabaaaabaaaaaadcaaaaalbcaabaaaabaaaaaa
akiacaiaebaaaaaaaaaaaaaabaaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaaapaaaaaa
bacaaaahccaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaadaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaaaoaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaaakiacaaaaaaaaaaaaoaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadccaaaamecaabaaaabaaaaaa
ckiacaaaaaaaaaaaapaaaaaackaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaa
apaaaaaaaaaaaaaiccaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaa
abaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakiacaaaaaaaaaaabfaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaajaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaaagiacaaaaaaaaaaaapaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_MainOffset]
Vector 6 [_DetailOffset]
Float 7 [_FalloffPow]
Float 8 [_FalloffScale]
Float 9 [_DetailScale]
Float 10 [_DetailDist]
Float 11 [_MinLight]
Float 12 [_FadeDist]
Float 13 [_FadeScale]
Float 14 [_RimDist]
Float 15 [_RimDistSub]
Float 16 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 126 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c18, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.xyz, r0.x, v4
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c17.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
add r0.w, r0, c17.y
frc r1.w, r0
add_sat r1.w, r0, -r1
add_pp r3.xyz, r1.yxzw, -r2
mad_pp r2.xyz, r1.w, r3, r2
abs r0.w, r0.z
max r1.y, r1.x, r0.w
rcp r1.z, r1.y
min r1.y, r1.x, r0.w
mul r2.w, r1.y, r1.z
abs_pp r1.w, r2.x
rcp_pp r1.z, r1.w
mul_pp r1.zw, r2.xyzy, r1.z
mul r1.y, r2.w, r2.w
mov_pp r2.xy, c6
mad_pp r1.zw, r1, c21.y, r2.xyxy
mad r2.z, r1.y, c19.y, c19
mad r2.z, r2, r1.y, c19.w
mad r2.x, r2.z, r1.y, c20
mad r2.y, r2.x, r1, c20
abs r2.x, r0.y
mad r1.y, r2, r1, c20.z
add r2.z, -r2.x, c17.y
mad r2.y, r2.x, c18.x, c18
mad r2.y, r2, r2.x, c17.w
rsq r2.z, r2.z
rcp r2.z, r2.z
mad r2.x, r2.y, r2, c18.z
mul r2.x, r2, r2.z
cmp r0.y, r0, c17.x, c17
mul r2.z, r1.y, r2.w
mul r2.y, r0, r2.x
mad r1.y, -r2, c18.w, r2.x
mad r0.y, r0, c17.z, r1
add r2.x, -r2.z, c20.w
add r0.w, r1.x, -r0
mul r2.y, r0, c19.x
add r1.x, r2.y, c5.y
cmp r0.w, -r0, r2.z, r2.x
add r0.y, -r0.w, c17.z
cmp r0.y, r0.z, r0.w, r0
cmp r2.x, r0, r0.y, -r0.y
mad r2.x, r2, c21, c21.y
add r2.xy, r2, c5
dsy r2.w, r1.x
dsx r3.y, r1.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
dsy r0.zw, r0.xyxz
mul r0.zw, r0, r0
add r0.w, r0.z, r0
add r1.x, r1, r1.y
rsq r0.z, r1.x
rcp r0.z, r0.z
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r3.x, r0.z, c21
mul r2.z, r0.w, c21.x
mul r1.zw, r1, c9.x
texldd r1, r1.zwzw, s1, r3, r2.zwzw
mul r2.w, v2.x, c10.x
add_pp r0, -r1, c17.y
mul_sat r2.w, r2, c18
mad_pp r0, r2.w, r0, r1
mov r1.x, r3
dsx r1.y, r2
dsy r1.w, r2.y
mov r1.z, r2
texldd r1, r2, s0, r1, r1.zwzw
mul_pp r1, r1, r0
add r2.xyz, -v1, c1
dp3 r0.w, r2, r2
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
rsq r0.y, r0.w
add r2.xyz, -v0, c1
rsq r0.x, r0.x
dp3 r0.w, r2, r2
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.w, -r0.x, c15.x, r0.y
mov r0.xyz, v3
dp3_sat r0.x, v5, r0
rsq r0.y, r0.w
mul r2.x, r0, c8
rcp r2.y, r0.y
pow_sat r0, r2.x, c7.x
mul r0.y, r2, c13.x
add_sat r0.y, r0, -c12.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2.w, c14
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c11
texldp r3.x, v6, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c16.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c21.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 288 // 276 used size, 18 vars
Vector 80 [_LightColor0] 4
Vector 128 [_MainOffset] 4
Vector 144 [_DetailOffset] 4
Float 160 [_FalloffPow]
Float 164 [_FalloffScale]
Float 168 [_DetailScale]
Float 172 [_DetailDist]
Float 176 [_MinLight]
Float 180 [_FadeDist]
Float 184 [_FadeScale]
Float 188 [_RimDist]
Float 192 [_RimDistSub]
Float 272 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 109 instructions, 5 temp regs, 0 temp arrays:
// ALU 100 float, 0 int, 4 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedcikmhmcdgnhdlnkapnkhpgnjhdppimfkabaaaaaamiapaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aiaiaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefceiaoaaaa
eaaaaaaajcadaaaafjaaaaaeegiocaaaaaaaaaaabcaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadicbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaabgbgbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaaigaabaaaaaaaaaaa
igaabaiaebaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaa
dbaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaabkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ccaabaaaabaaaaaaakaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaackaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjkcdodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjkcdobkiacaaaaaaaaaaaaiaaaaaaaaaaaaaidcaabaaaabaaaaaa
egaabaaaacaaaaaaegiacaaaaaaaaaaaaiaaaaaaalaaaaafccaabaaaacaaaaaa
bkaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaacaaaaaaegaabaaaadaaaaaaaaaaaaalkcaabaaaacaaaaaafgabbaia
ibaaaaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaai
ccaabaaaacaaaaaackaabaiambaaaaaaaaaaaaaabkaabaaaacaaaaaaebcaaaaf
ccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajpcaabaaaaeaaaaaakgabbaia
mbaaaaaaaaaaaaaafgaibaiaibaaaaaaaaaaaaaadcaaaaakpcaabaaaaeaaaaaa
fgafbaaaacaaaaaaegaobaaaaeaaaaaakgabbaiaibaaaaaaaaaaaaaaaaaaaaaj
hcaabaaaaaaaaaaaegacbaiaibaaaaaaaaaaaaaajgahbaiaebaaaaaaaeaaaaaa
aaaaaaaiccaabaaaacaaaaaadkaabaaaacaaaaaaakaabaiaebaaaaaaaeaaaaaa
ebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaadcaaaaajhcaabaaaaaaaaaaa
fgafbaaaacaaaaaaegacbaaaaaaaaaaajgahbaaaaeaaaaaadiaaaaakgcaabaaa
aaaaaaaakgajbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaaaaaaaaaaaaaaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaegiacaaaaaaaaaaaajaaaaaadiaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaakgikcaaaaaaaaaaaakaaaaaaalaaaaaf
ecaabaaaacaaaaaadkaabaaaaaaaaaaaamaaaaafecaabaaaadaaaaaadkaabaaa
aaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpapcaaaaibcaabaaaadaaaaaapgbpbaaaabaaaaaapgipcaaaaaaaaaaa
akaaaaaadcaaaaajpcaabaaaaaaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaaaaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaaaaaaaaiocaabaaaabaaaaaaagbjbaaaabaaaaaaagbjbaiaebaaaaaa
acaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaa
elaaaaafdcaabaaaabaaaaaaegaabaaaabaaaaaadcaaaaalbcaabaaaabaaaaaa
akiacaiaebaaaaaaaaaaaaaaamaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaaalaaaaaa
bacaaaahccaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaadaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaaakaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaaakiacaaaaaaaaaaaakaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadccaaaamecaabaaaabaaaaaa
ckiacaaaaaaaaaaaalaaaaaackaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaa
alaaaaaaaaaaaaaiccaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaa
abaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakiacaaaaaaaaaaabbaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaaalaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_MainOffset]
Vector 6 [_DetailOffset]
Float 7 [_FalloffPow]
Float 8 [_FalloffScale]
Float 9 [_DetailScale]
Float 10 [_DetailDist]
Float 11 [_MinLight]
Float 12 [_FadeDist]
Float 13 [_FadeScale]
Float 14 [_RimDist]
Float 15 [_RimDistSub]
Float 16 [_InvFade]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 126 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 0.00000000, 1.00000000, 3.14159298, -0.21211439
def c18, -0.01872930, 0.07426100, 1.57072902, 2.00000000
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, -0.01000214, 4.03944778
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.xyz, r0.x, v4
abs r1.xyz, r0
add r2.xyz, r1, -r1.zxyw
add r0.w, r2.x, c17.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r2.xyz, r0.w, r2, r1.zxyw
add r0.w, r1.y, -r2.x
add r0.w, r0, c17.y
frc r1.w, r0
add_sat r1.w, r0, -r1
add_pp r3.xyz, r1.yxzw, -r2
mad_pp r2.xyz, r1.w, r3, r2
abs r0.w, r0.z
max r1.y, r1.x, r0.w
rcp r1.z, r1.y
min r1.y, r1.x, r0.w
mul r2.w, r1.y, r1.z
abs_pp r1.w, r2.x
rcp_pp r1.z, r1.w
mul_pp r1.zw, r2.xyzy, r1.z
mul r1.y, r2.w, r2.w
mov_pp r2.xy, c6
mad_pp r1.zw, r1, c21.y, r2.xyxy
mad r2.z, r1.y, c19.y, c19
mad r2.z, r2, r1.y, c19.w
mad r2.x, r2.z, r1.y, c20
mad r2.y, r2.x, r1, c20
abs r2.x, r0.y
mad r1.y, r2, r1, c20.z
add r2.z, -r2.x, c17.y
mad r2.y, r2.x, c18.x, c18
mad r2.y, r2, r2.x, c17.w
rsq r2.z, r2.z
rcp r2.z, r2.z
mad r2.x, r2.y, r2, c18.z
mul r2.x, r2, r2.z
cmp r0.y, r0, c17.x, c17
mul r2.z, r1.y, r2.w
mul r2.y, r0, r2.x
mad r1.y, -r2, c18.w, r2.x
mad r0.y, r0, c17.z, r1
add r2.x, -r2.z, c20.w
add r0.w, r1.x, -r0
mul r2.y, r0, c19.x
add r1.x, r2.y, c5.y
cmp r0.w, -r0, r2.z, r2.x
add r0.y, -r0.w, c17.z
cmp r0.y, r0.z, r0.w, r0
cmp r2.x, r0, r0.y, -r0.y
mad r2.x, r2, c21, c21.y
add r2.xy, r2, c5
dsy r2.w, r1.x
dsx r3.y, r1.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
dsy r0.zw, r0.xyxz
mul r0.zw, r0, r0
add r0.w, r0.z, r0
add r1.x, r1, r1.y
rsq r0.z, r1.x
rcp r0.z, r0.z
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r3.x, r0.z, c21
mul r2.z, r0.w, c21.x
mul r1.zw, r1, c9.x
texldd r1, r1.zwzw, s1, r3, r2.zwzw
mul r2.w, v2.x, c10.x
add_pp r0, -r1, c17.y
mul_sat r2.w, r2, c18
mad_pp r0, r2.w, r0, r1
mov r1.x, r3
dsx r1.y, r2
dsy r1.w, r2.y
mov r1.z, r2
texldd r1, r2, s0, r1, r1.zwzw
mul_pp r1, r1, r0
add r2.xyz, -v1, c1
dp3 r0.w, r2, r2
mov r0.xyz, v0
add r0.xyz, v1, -r0
dp3 r0.x, r0, r0
rsq r0.y, r0.w
add r2.xyz, -v0, c1
rsq r0.x, r0.x
dp3 r0.w, r2, r2
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.w, -r0.x, c15.x, r0.y
mov r0.xyz, v3
dp3_sat r0.x, v5, r0
rsq r0.y, r0.w
mul r2.x, r0, c8
rcp r2.y, r0.y
pow_sat r0, r2.x, c7.x
mul r0.y, r2, c13.x
add_sat r0.y, r0, -c12.x
add r0.z, r0.x, -r0.y
mul_sat r0.x, r2.w, c14
mad r0.x, r0, r0.z, r0.y
mul_pp r0.w, r0.x, r1
dp4 r0.y, c3, c3
rsq r1.w, r0.y
mul r2.xyz, r1.w, c3
mov r0.x, c11
texldp r3.x, v6, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.z
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v6.z
mul_sat r1.w, r1, c16.x
add r0.xyz, c4, r0.x
mul_pp_sat r2.x, r2, c21.w
mad_sat r0.xyz, r0, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 288 // 276 used size, 18 vars
Vector 80 [_LightColor0] 4
Vector 128 [_MainOffset] 4
Vector 144 [_DetailOffset] 4
Float 160 [_FalloffPow]
Float 164 [_FalloffScale]
Float 168 [_DetailScale]
Float 172 [_DetailDist]
Float 176 [_MinLight]
Float 180 [_FadeDist]
Float 184 [_FadeScale]
Float 188 [_RimDist]
Float 192 [_RimDistSub]
Float 272 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 109 instructions, 5 temp regs, 0 temp arrays:
// ALU 100 float, 0 int, 4 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedcikmhmcdgnhdlnkapnkhpgnjhdppimfkabaaaaaamiapaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aiaiaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefceiaoaaaa
eaaaaaaajcadaaaafjaaaaaeegiocaaaaaaaaaaabcaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadicbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaabgbgbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaaigaabaaaaaaaaaaa
igaabaiaebaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaa
dbaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaabkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ccaabaaaabaaaaaaakaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaackaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjkcdodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjkcdobkiacaaaaaaaaaaaaiaaaaaaaaaaaaaidcaabaaaabaaaaaa
egaabaaaacaaaaaaegiacaaaaaaaaaaaaiaaaaaaalaaaaafccaabaaaacaaaaaa
bkaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaafgajbaaaaaaaaaaaapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaacaaaaaaegaabaaaadaaaaaaaaaaaaalkcaabaaaacaaaaaafgabbaia
ibaaaaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaai
ccaabaaaacaaaaaackaabaiambaaaaaaaaaaaaaabkaabaaaacaaaaaaebcaaaaf
ccaabaaaacaaaaaabkaabaaaacaaaaaaaaaaaaajpcaabaaaaeaaaaaakgabbaia
mbaaaaaaaaaaaaaafgaibaiaibaaaaaaaaaaaaaadcaaaaakpcaabaaaaeaaaaaa
fgafbaaaacaaaaaaegaobaaaaeaaaaaakgabbaiaibaaaaaaaaaaaaaaaaaaaaaj
hcaabaaaaaaaaaaaegacbaiaibaaaaaaaaaaaaaajgahbaiaebaaaaaaaeaaaaaa
aaaaaaaiccaabaaaacaaaaaadkaabaaaacaaaaaaakaabaiaebaaaaaaaeaaaaaa
ebcaaaafccaabaaaacaaaaaabkaabaaaacaaaaaadcaaaaajhcaabaaaaaaaaaaa
fgafbaaaacaaaaaaegacbaaaaaaaaaaajgahbaaaaeaaaaaadiaaaaakgcaabaaa
aaaaaaaakgajbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaaaaaaaaaaaaaaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaegiacaaaaaaaaaaaajaaaaaadiaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaakgikcaaaaaaaaaaaakaaaaaaalaaaaaf
ecaabaaaacaaaaaadkaabaaaaaaaaaaaamaaaaafecaabaaaadaaaaaadkaabaaa
aaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpapcaaaaibcaabaaaadaaaaaapgbpbaaaabaaaaaapgipcaaaaaaaaaaa
akaaaaaadcaaaaajpcaabaaaaaaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaaaaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegbcbaaaacaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaaaaaaaaiocaabaaaabaaaaaaagbjbaaaabaaaaaaagbjbaiaebaaaaaa
acaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaajgahbaaaabaaaaaa
elaaaaafdcaabaaaabaaaaaaegaabaaaabaaaaaadcaaaaalbcaabaaaabaaaaaa
akiacaiaebaaaaaaaaaaaaaaamaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaaalaaaaaa
bacaaaahccaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaadaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaaakaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaaakiacaaaaaaaaaaaakaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadccaaaamecaabaaaabaaaaaa
ckiacaaaaaaaaaaaalaaaaaackaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaa
alaaaaaaaaaaaaaiccaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaa
abaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakiacaaaaaaaaaaabbaaaaaadiaaaaahiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaaalaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

}

#LINE 157

	
		}
		
	} 
	
}
}

Shader "EVE/Terrain" {
	Properties {
		_Color ("Color Tint", Color) = (1,1,1,1)
		_MainTex ("Main (RGB)", 2D) = "white" {}
		_BumpMap ("Normalmap", 2D) = "bump" {}
		_MainTexHandoverDist ("Handover Distance", Float) = 1
		_midTex ("Detail (RGB)", 2D) = "white" {}
		_steepTex ("Detail for Vertical Surfaces (RGB)", 2D) = "white" {}
		_DetailScale ("Detail Scale", Range(0,1000)) = 200
		_DetailVertScale ("Detail Scale", Range(0,1000)) = 200
		_DetailOffset ("Detail Offset", Vector) = (.5,.5,0,0)
		_DetailDist ("Detail Distance", Range(0,1)) = 0.00875
		_MinLight ("Minimum Light", Range(0,1)) = .5
		_Albedo ("Albedo Index", Range(0,5)) = 1.2
		_CityOverlayTex ("Overlay (RGB)", 2D) = "white" {}
		_CityOverlayDetailScale ("Overlay Detail Scale", Range(0,1000)) = 80
		_CityDarkOverlayDetailTex ("Overlay Detail (RGB) (A)", 2D) = "white" {}
		_CityLightOverlayDetailTex ("Overlay Detail (RGB) (A)", 2D) = "white" {}
		_SunDir ("Sun Direction", Vector) = (1,1,1,1)
		_PlanetOpacity ("PlanetOpacity", Float) = 1
		_OceanRadius ("Ocean Radius", Float) = 63000
		_OceanColor ("Ocean Color Tint", Color) = (1,1,1,1)
		_OceanDepthFactor ("Ocean Depth Factor", Float) = .002
		_PlanetOrigin ("Planet Center", Vector) = (0,0,0,1)
	}


	
SubShader {

Tags { "Queue"="Geometry" "RenderType"="Opaque" }
	Fog { Mode Global}
	ColorMask RGB
	Cull Back Lighting On ZWrite On
	
	Pass {

		Lighting On
		Tags { "LightMode"="ForwardBase"}
		
		Program "vp" {
// Vertex combos: 60
//   d3d9 - ALU: 42 to 51
SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.y = tmpvar_22.y;
  localCoords_2.x = (tmpvar_22.x * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_23;
  norm_1.z = cos((6.28319 * tmpvar_23.x));
  norm_1.x = sin((6.28319 * tmpvar_23.x));
  norm_1.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_1);
  norm_1 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_26;
  tmpvar_26 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_25 * tmpvar_25)));
  float tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_25 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_26, 2.0)))), (float((_OceanRadius >= tmpvar_26)) * float((tmpvar_25 >= 0.0)))));
  float tmpvar_28;
  tmpvar_28 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_16.xy, tmpvar_16.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_18), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_27 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_27)), 0.0, 1.0))))), tmpvar_17, vec4(tmpvar_28)) * _Color);
  color_4.w = tmpvar_29.w;
  vec3 tmpvar_30;
  tmpvar_30 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0), tmpvar_28)) * 2.0) * texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2))).w), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_4.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_30));
  color_4.xyz = (color_4.xyz * tmpvar_30);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 46 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o4.xyz, r0.x, r2
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
mad o6.x, r0, r0.y, c16
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
mov o5.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  mediump float sphereCheck_7;
  mediump float detailLevel_8;
  mediump vec3 norm_9;
  highp vec2 localCoords_10;
  mediump vec4 encnorm_11;
  mediump vec4 vert_12;
  mediump vec4 detail_13;
  mediump float nylerp_14;
  mediump vec3 detailCoords_15;
  mediump float zxlerp_16;
  mediump float vertLerp_17;
  mediump vec4 main_18;
  highp vec2 uv_19;
  mediump vec4 color_20;
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * r_21));
  uv_19.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_29;
  tmpvar_29 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  main_18 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_35;
  tmpvar_35 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_34), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = abs(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_36.x) - tmpvar_36.z)), 0.0, 1.0);
  zxlerp_16 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_36.zxy, tmpvar_36, vec3(zxlerp_16));
  detailCoords_15 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (floor(((1.0 + tmpvar_36.y) - mix (tmpvar_36.z, tmpvar_36.x, zxlerp_16))), 0.0, 1.0);
  nylerp_14 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (detailCoords_15, tmpvar_36.yxz, vec3(nylerp_14));
  detailCoords_15 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = abs(detailCoords_15.x);
  highp vec2 coord_42;
  coord_42 = ((((0.5 * detailCoords_15.zy) / tmpvar_41) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2DGradEXT (_midTex, coord_42, tmpvar_32.xy, tmpvar_32.zw);
  detail_13 = tmpvar_43;
  mediump float tmpvar_44;
  tmpvar_44 = abs(detailCoords_15.x);
  highp vec2 coord_45;
  coord_45 = ((((0.5 * detailCoords_15.zy) / tmpvar_44) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_steepTex, coord_45, tmpvar_32.xy, tmpvar_32.zw);
  vert_12 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (vert_12, detail_13, vec4(vertLerp_17));
  detail_13 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  encnorm_11 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_11.wy;
  localCoords_10 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_10 - vec2(0.5, 0.5));
  localCoords_10.y = tmpvar_50.y;
  localCoords_10.x = (tmpvar_50.x * 0.5);
  uv_19.x = (uv_19.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_19 + localCoords_10);
  uv_19 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_9.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_9.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_9.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_9);
  norm_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_58;
  tmpvar_58 = (xlv_TEXCOORD0 * tmpvar_57);
  color_20 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_60;
  tmpvar_60 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_59 * tmpvar_59)));
  highp float tmpvar_61;
  tmpvar_61 = (float((_OceanRadius >= tmpvar_60)) * float((tmpvar_59 >= 0.0)));
  sphereCheck_7 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_59 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_60, 2.0)))), sphereCheck_7));
  highp vec4 tmpvar_63;
  tmpvar_63 = mix (color_20, _OceanColor, vec4((clamp ((tmpvar_62 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_62)), 0.0, 1.0)))));
  color_20 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (mix (color_20, main_18, vec4(handoff_6)) * _Color);
  color_20.w = tmpvar_65.w;
  highp vec3 tmpvar_66;
  tmpvar_66 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_70;
  tmpvar_70 = texture2D (_LightTexture0, vec2(tmpvar_69)).w;
  mediump float tmpvar_71;
  tmpvar_71 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_70), 0.0, 1.0);
  highp vec3 tmpvar_72;
  tmpvar_72 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_71)), 0.0, 1.0);
  light_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_65.xyz + (_Albedo * light_2));
  color_20.xyz = tmpvar_74;
  color_20.xyz = (color_20.xyz * light_2);
  color_20.w = 1.0;
  tmpvar_1 = color_20;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  mediump float sphereCheck_7;
  mediump float detailLevel_8;
  mediump vec3 norm_9;
  highp vec2 localCoords_10;
  mediump vec4 encnorm_11;
  mediump vec4 vert_12;
  mediump vec4 detail_13;
  mediump float nylerp_14;
  mediump vec3 detailCoords_15;
  mediump float zxlerp_16;
  mediump float vertLerp_17;
  mediump vec4 main_18;
  highp vec2 uv_19;
  mediump vec4 color_20;
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * r_21));
  uv_19.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_29;
  tmpvar_29 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  main_18 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_35;
  tmpvar_35 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_34), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = abs(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_36.x) - tmpvar_36.z)), 0.0, 1.0);
  zxlerp_16 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_36.zxy, tmpvar_36, vec3(zxlerp_16));
  detailCoords_15 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (floor(((1.0 + tmpvar_36.y) - mix (tmpvar_36.z, tmpvar_36.x, zxlerp_16))), 0.0, 1.0);
  nylerp_14 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (detailCoords_15, tmpvar_36.yxz, vec3(nylerp_14));
  detailCoords_15 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = abs(detailCoords_15.x);
  highp vec2 coord_42;
  coord_42 = ((((0.5 * detailCoords_15.zy) / tmpvar_41) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2DGradEXT (_midTex, coord_42, tmpvar_32.xy, tmpvar_32.zw);
  detail_13 = tmpvar_43;
  mediump float tmpvar_44;
  tmpvar_44 = abs(detailCoords_15.x);
  highp vec2 coord_45;
  coord_45 = ((((0.5 * detailCoords_15.zy) / tmpvar_44) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_steepTex, coord_45, tmpvar_32.xy, tmpvar_32.zw);
  vert_12 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (vert_12, detail_13, vec4(vertLerp_17));
  detail_13 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  encnorm_11 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_11.wy;
  localCoords_10 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_10 - vec2(0.5, 0.5));
  localCoords_10.y = tmpvar_50.y;
  localCoords_10.x = (tmpvar_50.x * 0.5);
  uv_19.x = (uv_19.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_19 + localCoords_10);
  uv_19 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_9.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_9.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_9.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_9);
  norm_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_58;
  tmpvar_58 = (xlv_TEXCOORD0 * tmpvar_57);
  color_20 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_60;
  tmpvar_60 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_59 * tmpvar_59)));
  highp float tmpvar_61;
  tmpvar_61 = (float((_OceanRadius >= tmpvar_60)) * float((tmpvar_59 >= 0.0)));
  sphereCheck_7 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_59 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_60, 2.0)))), sphereCheck_7));
  highp vec4 tmpvar_63;
  tmpvar_63 = mix (color_20, _OceanColor, vec4((clamp ((tmpvar_62 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_62)), 0.0, 1.0)))));
  color_20 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (mix (color_20, main_18, vec4(handoff_6)) * _Color);
  color_20.w = tmpvar_65.w;
  highp vec3 tmpvar_66;
  tmpvar_66 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_70;
  tmpvar_70 = texture2D (_LightTexture0, vec2(tmpvar_69)).w;
  mediump float tmpvar_71;
  tmpvar_71 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_70), 0.0, 1.0);
  highp vec3 tmpvar_72;
  tmpvar_72 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_71)), 0.0, 1.0);
  light_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_65.xyz + (_Albedo * light_2));
  color_20.xyz = tmpvar_74;
  color_20.xyz = (color_20.xyz * light_2);
  color_20.w = 1.0;
  tmpvar_1 = color_20;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 407
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 411
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 436
#line 465
#line 436
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 440
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 444
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 448
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 453
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 407
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 411
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 436
#line 465
#line 455
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 457
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    #line 461
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 465
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 469
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 473
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    #line 477
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    #line 481
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 485
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    #line 489
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    #line 493
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    #line 497
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    #line 501
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 505
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 509
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 513
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 517
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.y = tmpvar_22.y;
  localCoords_2.x = (tmpvar_22.x * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_23;
  norm_1.z = cos((6.28319 * tmpvar_23.x));
  norm_1.x = sin((6.28319 * tmpvar_23.x));
  norm_1.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_1);
  norm_1 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_26;
  tmpvar_26 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_25 * tmpvar_25)));
  float tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_25 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_26, 2.0)))), (float((_OceanRadius >= tmpvar_26)) * float((tmpvar_25 >= 0.0)))));
  float tmpvar_28;
  tmpvar_28 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_16.xy, tmpvar_16.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_18), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_27 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_27)), 0.0, 1.0))))), tmpvar_17, vec4(tmpvar_28)) * _Color);
  color_4.w = tmpvar_29.w;
  vec3 tmpvar_30;
  tmpvar_30 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0), tmpvar_28)) * 2.0), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_4.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_30));
  color_4.xyz = (color_4.xyz * tmpvar_30);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Vector 9 [_SunDir]
Vector 10 [_PlanetOrigin]
"vs_3_0
; 42 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord4 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c11, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c12, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c9, c9
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c9
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c11.x
dp4 r2.x, r0, c4
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
add r2.w, r1, c11.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o3.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
add r2.x, r0.y, c11.w
mul_sat r0.w, -r1, c11.y
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r0.xyz, -r0, c8
mad o5.x, r0.w, r2, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o7.xyz, r0.w, -r0
mov r0.xyz, c10
mov o4.xyz, -r1
mov o1, v1
mov o2.xyz, v2
rcp o2.w, r0.w
add o6.xyz, -c8, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  mediump float sphereCheck_7;
  mediump float detailLevel_8;
  mediump vec3 norm_9;
  highp vec2 localCoords_10;
  mediump vec4 encnorm_11;
  mediump vec4 vert_12;
  mediump vec4 detail_13;
  mediump float nylerp_14;
  mediump vec3 detailCoords_15;
  mediump float zxlerp_16;
  mediump float vertLerp_17;
  mediump vec4 main_18;
  highp vec2 uv_19;
  mediump vec4 color_20;
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * r_21));
  uv_19.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_29;
  tmpvar_29 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  main_18 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_35;
  tmpvar_35 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_34), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = abs(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_36.x) - tmpvar_36.z)), 0.0, 1.0);
  zxlerp_16 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_36.zxy, tmpvar_36, vec3(zxlerp_16));
  detailCoords_15 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (floor(((1.0 + tmpvar_36.y) - mix (tmpvar_36.z, tmpvar_36.x, zxlerp_16))), 0.0, 1.0);
  nylerp_14 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (detailCoords_15, tmpvar_36.yxz, vec3(nylerp_14));
  detailCoords_15 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = abs(detailCoords_15.x);
  highp vec2 coord_42;
  coord_42 = ((((0.5 * detailCoords_15.zy) / tmpvar_41) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2DGradEXT (_midTex, coord_42, tmpvar_32.xy, tmpvar_32.zw);
  detail_13 = tmpvar_43;
  mediump float tmpvar_44;
  tmpvar_44 = abs(detailCoords_15.x);
  highp vec2 coord_45;
  coord_45 = ((((0.5 * detailCoords_15.zy) / tmpvar_44) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_steepTex, coord_45, tmpvar_32.xy, tmpvar_32.zw);
  vert_12 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (vert_12, detail_13, vec4(vertLerp_17));
  detail_13 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  encnorm_11 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_11.wy;
  localCoords_10 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_10 - vec2(0.5, 0.5));
  localCoords_10.y = tmpvar_50.y;
  localCoords_10.x = (tmpvar_50.x * 0.5);
  uv_19.x = (uv_19.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_19 + localCoords_10);
  uv_19 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_9.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_9.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_9.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_9);
  norm_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_58;
  tmpvar_58 = (xlv_TEXCOORD0 * tmpvar_57);
  color_20 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_60;
  tmpvar_60 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_59 * tmpvar_59)));
  highp float tmpvar_61;
  tmpvar_61 = (float((_OceanRadius >= tmpvar_60)) * float((tmpvar_59 >= 0.0)));
  sphereCheck_7 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_59 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_60, 2.0)))), sphereCheck_7));
  highp vec4 tmpvar_63;
  tmpvar_63 = mix (color_20, _OceanColor, vec4((clamp ((tmpvar_62 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_62)), 0.0, 1.0)))));
  color_20 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (mix (color_20, main_18, vec4(handoff_6)) * _Color);
  color_20.w = tmpvar_65.w;
  highp vec3 tmpvar_66;
  tmpvar_66 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_68;
  mediump float tmpvar_69;
  tmpvar_69 = clamp (((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0), 0.0, 1.0);
  highp vec3 tmpvar_70;
  tmpvar_70 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_69)), 0.0, 1.0);
  light_2 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (tmpvar_65.xyz + (_Albedo * light_2));
  color_20.xyz = tmpvar_72;
  color_20.xyz = (color_20.xyz * light_2);
  color_20.w = 1.0;
  tmpvar_1 = color_20;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  mediump float sphereCheck_7;
  mediump float detailLevel_8;
  mediump vec3 norm_9;
  highp vec2 localCoords_10;
  mediump vec4 encnorm_11;
  mediump vec4 vert_12;
  mediump vec4 detail_13;
  mediump float nylerp_14;
  mediump vec3 detailCoords_15;
  mediump float zxlerp_16;
  mediump float vertLerp_17;
  mediump vec4 main_18;
  highp vec2 uv_19;
  mediump vec4 color_20;
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * r_21));
  uv_19.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_29;
  tmpvar_29 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  main_18 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_35;
  tmpvar_35 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_34), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = abs(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_36.x) - tmpvar_36.z)), 0.0, 1.0);
  zxlerp_16 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_36.zxy, tmpvar_36, vec3(zxlerp_16));
  detailCoords_15 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (floor(((1.0 + tmpvar_36.y) - mix (tmpvar_36.z, tmpvar_36.x, zxlerp_16))), 0.0, 1.0);
  nylerp_14 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (detailCoords_15, tmpvar_36.yxz, vec3(nylerp_14));
  detailCoords_15 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = abs(detailCoords_15.x);
  highp vec2 coord_42;
  coord_42 = ((((0.5 * detailCoords_15.zy) / tmpvar_41) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2DGradEXT (_midTex, coord_42, tmpvar_32.xy, tmpvar_32.zw);
  detail_13 = tmpvar_43;
  mediump float tmpvar_44;
  tmpvar_44 = abs(detailCoords_15.x);
  highp vec2 coord_45;
  coord_45 = ((((0.5 * detailCoords_15.zy) / tmpvar_44) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_steepTex, coord_45, tmpvar_32.xy, tmpvar_32.zw);
  vert_12 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (vert_12, detail_13, vec4(vertLerp_17));
  detail_13 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  encnorm_11 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_11.wy;
  localCoords_10 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_10 - vec2(0.5, 0.5));
  localCoords_10.y = tmpvar_50.y;
  localCoords_10.x = (tmpvar_50.x * 0.5);
  uv_19.x = (uv_19.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_19 + localCoords_10);
  uv_19 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_9.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_9.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_9.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_9);
  norm_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_58;
  tmpvar_58 = (xlv_TEXCOORD0 * tmpvar_57);
  color_20 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_60;
  tmpvar_60 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_59 * tmpvar_59)));
  highp float tmpvar_61;
  tmpvar_61 = (float((_OceanRadius >= tmpvar_60)) * float((tmpvar_59 >= 0.0)));
  sphereCheck_7 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_59 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_60, 2.0)))), sphereCheck_7));
  highp vec4 tmpvar_63;
  tmpvar_63 = mix (color_20, _OceanColor, vec4((clamp ((tmpvar_62 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_62)), 0.0, 1.0)))));
  color_20 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (mix (color_20, main_18, vec4(handoff_6)) * _Color);
  color_20.w = tmpvar_65.w;
  highp vec3 tmpvar_66;
  tmpvar_66 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_68;
  mediump float tmpvar_69;
  tmpvar_69 = clamp (((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0), 0.0, 1.0);
  highp vec3 tmpvar_70;
  tmpvar_70 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_69)), 0.0, 1.0);
  light_2 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (tmpvar_65.xyz + (_Albedo * light_2));
  color_20.xyz = tmpvar_72;
  color_20.xyz = (color_20.xyz * light_2);
  color_20.w = 1.0;
  tmpvar_1 = color_20;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 411
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 397
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 401
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 405
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 409
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 433
#line 461
#line 433
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 437
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 441
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 445
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 449
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 411
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 397
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 401
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 405
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 409
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 433
#line 461
#line 451
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 453
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    #line 457
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 461
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 465
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 469
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    #line 473
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    #line 477
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 481
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    #line 485
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    #line 489
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    #line 493
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    #line 497
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 501
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 505
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 509
    lowp float atten = 1.0;
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 513
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.y = tmpvar_22.y;
  localCoords_2.x = (tmpvar_22.x * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_23;
  norm_1.z = cos((6.28319 * tmpvar_23.x));
  norm_1.x = sin((6.28319 * tmpvar_23.x));
  norm_1.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_1);
  norm_1 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_26;
  tmpvar_26 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_25 * tmpvar_25)));
  float tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_25 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_26, 2.0)))), (float((_OceanRadius >= tmpvar_26)) * float((tmpvar_25 >= 0.0)))));
  float tmpvar_28;
  tmpvar_28 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_16.xy, tmpvar_16.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_18), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_27 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_27)), 0.0, 1.0))))), tmpvar_17, vec4(tmpvar_28)) * _Color);
  color_4.w = tmpvar_29.w;
  vec3 tmpvar_30;
  tmpvar_30 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0), tmpvar_28)) * 2.0) * ((float((xlv_TEXCOORD2.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz))).w)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_4.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_30));
  color_4.xyz = (color_4.xyz * tmpvar_30);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o4.xyz, r0.x, r2
dp4 r0.z, v0, c6
dp4 r0.w, v0, c7
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
mad o6.x, r0, r0.y, c16
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o5.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.w, r0, c11
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  lowp vec4 tmpvar_70;
  highp vec2 P_71;
  P_71 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_70 = texture2D (_LightTexture0, P_71);
  highp float tmpvar_72;
  tmpvar_72 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture2D (_LightTextureB0, vec2(tmpvar_72));
  highp float tmpvar_74;
  tmpvar_74 = ((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_70.w) * tmpvar_73.w);
  atten_3 = tmpvar_74;
  mediump float tmpvar_75;
  tmpvar_75 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_76;
  tmpvar_76 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_75)), 0.0, 1.0);
  light_2 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_78;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  lowp vec4 tmpvar_70;
  highp vec2 P_71;
  P_71 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_70 = texture2D (_LightTexture0, P_71);
  highp float tmpvar_72;
  tmpvar_72 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture2D (_LightTextureB0, vec2(tmpvar_72));
  highp float tmpvar_74;
  tmpvar_74 = ((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_70.w) * tmpvar_73.w);
  atten_3 = tmpvar_74;
  mediump float tmpvar_75;
  tmpvar_75 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_76;
  tmpvar_76 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_75)), 0.0, 1.0);
  light_2 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_78;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 408
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 412
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 416
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 420
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 445
#line 474
#line 445
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 449
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 453
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 457
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 462
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 408
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 412
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 416
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 420
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 445
#line 474
#line 464
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 466
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    #line 470
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 474
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 478
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 482
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    #line 486
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    #line 490
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 494
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    #line 498
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    #line 502
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    #line 506
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    #line 510
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 514
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 518
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 522
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 526
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.y = tmpvar_22.y;
  localCoords_2.x = (tmpvar_22.x * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_23;
  norm_1.z = cos((6.28319 * tmpvar_23.x));
  norm_1.x = sin((6.28319 * tmpvar_23.x));
  norm_1.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_1);
  norm_1 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_26;
  tmpvar_26 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_25 * tmpvar_25)));
  float tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_25 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_26, 2.0)))), (float((_OceanRadius >= tmpvar_26)) * float((tmpvar_25 >= 0.0)))));
  float tmpvar_28;
  tmpvar_28 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_16.xy, tmpvar_16.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_18), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_27 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_27)), 0.0, 1.0))))), tmpvar_17, vec4(tmpvar_28)) * _Color);
  color_4.w = tmpvar_29.w;
  vec3 tmpvar_30;
  tmpvar_30 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0), tmpvar_28)) * 2.0) * (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2))).w * textureCube (_LightTexture0, xlv_TEXCOORD2).w)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_4.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_30));
  color_4.xyz = (color_4.xyz * tmpvar_30);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 46 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o4.xyz, r0.x, r2
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
mad o6.x, r0, r0.y, c16
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
mov o5.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  mediump float sphereCheck_7;
  mediump float detailLevel_8;
  mediump vec3 norm_9;
  highp vec2 localCoords_10;
  mediump vec4 encnorm_11;
  mediump vec4 vert_12;
  mediump vec4 detail_13;
  mediump float nylerp_14;
  mediump vec3 detailCoords_15;
  mediump float zxlerp_16;
  mediump float vertLerp_17;
  mediump vec4 main_18;
  highp vec2 uv_19;
  mediump vec4 color_20;
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * r_21));
  uv_19.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_29;
  tmpvar_29 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  main_18 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_35;
  tmpvar_35 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_34), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = abs(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_36.x) - tmpvar_36.z)), 0.0, 1.0);
  zxlerp_16 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_36.zxy, tmpvar_36, vec3(zxlerp_16));
  detailCoords_15 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (floor(((1.0 + tmpvar_36.y) - mix (tmpvar_36.z, tmpvar_36.x, zxlerp_16))), 0.0, 1.0);
  nylerp_14 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (detailCoords_15, tmpvar_36.yxz, vec3(nylerp_14));
  detailCoords_15 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = abs(detailCoords_15.x);
  highp vec2 coord_42;
  coord_42 = ((((0.5 * detailCoords_15.zy) / tmpvar_41) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2DGradEXT (_midTex, coord_42, tmpvar_32.xy, tmpvar_32.zw);
  detail_13 = tmpvar_43;
  mediump float tmpvar_44;
  tmpvar_44 = abs(detailCoords_15.x);
  highp vec2 coord_45;
  coord_45 = ((((0.5 * detailCoords_15.zy) / tmpvar_44) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_steepTex, coord_45, tmpvar_32.xy, tmpvar_32.zw);
  vert_12 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (vert_12, detail_13, vec4(vertLerp_17));
  detail_13 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  encnorm_11 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_11.wy;
  localCoords_10 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_10 - vec2(0.5, 0.5));
  localCoords_10.y = tmpvar_50.y;
  localCoords_10.x = (tmpvar_50.x * 0.5);
  uv_19.x = (uv_19.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_19 + localCoords_10);
  uv_19 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_9.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_9.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_9.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_9);
  norm_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_58;
  tmpvar_58 = (xlv_TEXCOORD0 * tmpvar_57);
  color_20 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_60;
  tmpvar_60 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_59 * tmpvar_59)));
  highp float tmpvar_61;
  tmpvar_61 = (float((_OceanRadius >= tmpvar_60)) * float((tmpvar_59 >= 0.0)));
  sphereCheck_7 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_59 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_60, 2.0)))), sphereCheck_7));
  highp vec4 tmpvar_63;
  tmpvar_63 = mix (color_20, _OceanColor, vec4((clamp ((tmpvar_62 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_62)), 0.0, 1.0)))));
  color_20 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (mix (color_20, main_18, vec4(handoff_6)) * _Color);
  color_20.w = tmpvar_65.w;
  highp vec3 tmpvar_66;
  tmpvar_66 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_70;
  tmpvar_70 = (texture2D (_LightTextureB0, vec2(tmpvar_69)).w * textureCube (_LightTexture0, xlv_TEXCOORD2).w);
  mediump float tmpvar_71;
  tmpvar_71 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_70), 0.0, 1.0);
  highp vec3 tmpvar_72;
  tmpvar_72 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_71)), 0.0, 1.0);
  light_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_65.xyz + (_Albedo * light_2));
  color_20.xyz = tmpvar_74;
  color_20.xyz = (color_20.xyz * light_2);
  color_20.w = 1.0;
  tmpvar_1 = color_20;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  mediump float sphereCheck_7;
  mediump float detailLevel_8;
  mediump vec3 norm_9;
  highp vec2 localCoords_10;
  mediump vec4 encnorm_11;
  mediump vec4 vert_12;
  mediump vec4 detail_13;
  mediump float nylerp_14;
  mediump vec3 detailCoords_15;
  mediump float zxlerp_16;
  mediump float vertLerp_17;
  mediump vec4 main_18;
  highp vec2 uv_19;
  mediump vec4 color_20;
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * r_21));
  uv_19.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_29;
  tmpvar_29 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  main_18 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_35;
  tmpvar_35 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_34), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = abs(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_36.x) - tmpvar_36.z)), 0.0, 1.0);
  zxlerp_16 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_36.zxy, tmpvar_36, vec3(zxlerp_16));
  detailCoords_15 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (floor(((1.0 + tmpvar_36.y) - mix (tmpvar_36.z, tmpvar_36.x, zxlerp_16))), 0.0, 1.0);
  nylerp_14 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (detailCoords_15, tmpvar_36.yxz, vec3(nylerp_14));
  detailCoords_15 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = abs(detailCoords_15.x);
  highp vec2 coord_42;
  coord_42 = ((((0.5 * detailCoords_15.zy) / tmpvar_41) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2DGradEXT (_midTex, coord_42, tmpvar_32.xy, tmpvar_32.zw);
  detail_13 = tmpvar_43;
  mediump float tmpvar_44;
  tmpvar_44 = abs(detailCoords_15.x);
  highp vec2 coord_45;
  coord_45 = ((((0.5 * detailCoords_15.zy) / tmpvar_44) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_steepTex, coord_45, tmpvar_32.xy, tmpvar_32.zw);
  vert_12 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (vert_12, detail_13, vec4(vertLerp_17));
  detail_13 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  encnorm_11 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_11.wy;
  localCoords_10 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_10 - vec2(0.5, 0.5));
  localCoords_10.y = tmpvar_50.y;
  localCoords_10.x = (tmpvar_50.x * 0.5);
  uv_19.x = (uv_19.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_19 + localCoords_10);
  uv_19 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_9.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_9.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_9.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_9);
  norm_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_58;
  tmpvar_58 = (xlv_TEXCOORD0 * tmpvar_57);
  color_20 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_60;
  tmpvar_60 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_59 * tmpvar_59)));
  highp float tmpvar_61;
  tmpvar_61 = (float((_OceanRadius >= tmpvar_60)) * float((tmpvar_59 >= 0.0)));
  sphereCheck_7 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_59 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_60, 2.0)))), sphereCheck_7));
  highp vec4 tmpvar_63;
  tmpvar_63 = mix (color_20, _OceanColor, vec4((clamp ((tmpvar_62 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_62)), 0.0, 1.0)))));
  color_20 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (mix (color_20, main_18, vec4(handoff_6)) * _Color);
  color_20.w = tmpvar_65.w;
  highp vec3 tmpvar_66;
  tmpvar_66 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_70;
  tmpvar_70 = (texture2D (_LightTextureB0, vec2(tmpvar_69)).w * textureCube (_LightTexture0, xlv_TEXCOORD2).w);
  mediump float tmpvar_71;
  tmpvar_71 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_70), 0.0, 1.0);
  highp vec3 tmpvar_72;
  tmpvar_72 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_71)), 0.0, 1.0);
  light_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_65.xyz + (_Albedo * light_2));
  color_20.xyz = tmpvar_74;
  color_20.xyz = (color_20.xyz * light_2);
  color_20.w = 1.0;
  tmpvar_1 = color_20;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 400
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 404
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 408
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 412
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 437
#line 466
#line 437
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 441
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 445
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 449
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 454
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 400
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 404
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 408
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 412
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 437
#line 466
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 458
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    #line 462
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 466
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 470
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 474
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    #line 478
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    #line 482
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 486
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    #line 490
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    #line 494
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    #line 498
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    #line 502
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 506
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 510
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 514
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 518
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.y = tmpvar_22.y;
  localCoords_2.x = (tmpvar_22.x * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_23;
  norm_1.z = cos((6.28319 * tmpvar_23.x));
  norm_1.x = sin((6.28319 * tmpvar_23.x));
  norm_1.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_1);
  norm_1 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_26;
  tmpvar_26 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_25 * tmpvar_25)));
  float tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_25 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_26, 2.0)))), (float((_OceanRadius >= tmpvar_26)) * float((tmpvar_25 >= 0.0)))));
  float tmpvar_28;
  tmpvar_28 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_16.xy, tmpvar_16.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_18), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_27 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_27)), 0.0, 1.0))))), tmpvar_17, vec4(tmpvar_28)) * _Color);
  color_4.w = tmpvar_29.w;
  vec3 tmpvar_30;
  tmpvar_30 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0), tmpvar_28)) * 2.0) * texture2D (_LightTexture0, xlv_TEXCOORD2).w), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_4.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_30));
  color_4.xyz = (color_4.xyz * tmpvar_30);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 45 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o4.xyz, r0.x, r2
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
mad o6.x, r0, r0.y, c16
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
mov o5.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  mediump float sphereCheck_7;
  mediump float detailLevel_8;
  mediump vec3 norm_9;
  highp vec2 localCoords_10;
  mediump vec4 encnorm_11;
  mediump vec4 vert_12;
  mediump vec4 detail_13;
  mediump float nylerp_14;
  mediump vec3 detailCoords_15;
  mediump float zxlerp_16;
  mediump float vertLerp_17;
  mediump vec4 main_18;
  highp vec2 uv_19;
  mediump vec4 color_20;
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * r_21));
  uv_19.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_29;
  tmpvar_29 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  main_18 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_35;
  tmpvar_35 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_34), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = abs(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_36.x) - tmpvar_36.z)), 0.0, 1.0);
  zxlerp_16 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_36.zxy, tmpvar_36, vec3(zxlerp_16));
  detailCoords_15 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (floor(((1.0 + tmpvar_36.y) - mix (tmpvar_36.z, tmpvar_36.x, zxlerp_16))), 0.0, 1.0);
  nylerp_14 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (detailCoords_15, tmpvar_36.yxz, vec3(nylerp_14));
  detailCoords_15 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = abs(detailCoords_15.x);
  highp vec2 coord_42;
  coord_42 = ((((0.5 * detailCoords_15.zy) / tmpvar_41) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2DGradEXT (_midTex, coord_42, tmpvar_32.xy, tmpvar_32.zw);
  detail_13 = tmpvar_43;
  mediump float tmpvar_44;
  tmpvar_44 = abs(detailCoords_15.x);
  highp vec2 coord_45;
  coord_45 = ((((0.5 * detailCoords_15.zy) / tmpvar_44) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_steepTex, coord_45, tmpvar_32.xy, tmpvar_32.zw);
  vert_12 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (vert_12, detail_13, vec4(vertLerp_17));
  detail_13 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  encnorm_11 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_11.wy;
  localCoords_10 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_10 - vec2(0.5, 0.5));
  localCoords_10.y = tmpvar_50.y;
  localCoords_10.x = (tmpvar_50.x * 0.5);
  uv_19.x = (uv_19.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_19 + localCoords_10);
  uv_19 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_9.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_9.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_9.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_9);
  norm_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_58;
  tmpvar_58 = (xlv_TEXCOORD0 * tmpvar_57);
  color_20 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_60;
  tmpvar_60 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_59 * tmpvar_59)));
  highp float tmpvar_61;
  tmpvar_61 = (float((_OceanRadius >= tmpvar_60)) * float((tmpvar_59 >= 0.0)));
  sphereCheck_7 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_59 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_60, 2.0)))), sphereCheck_7));
  highp vec4 tmpvar_63;
  tmpvar_63 = mix (color_20, _OceanColor, vec4((clamp ((tmpvar_62 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_62)), 0.0, 1.0)))));
  color_20 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (mix (color_20, main_18, vec4(handoff_6)) * _Color);
  color_20.w = tmpvar_65.w;
  highp vec3 tmpvar_66;
  tmpvar_66 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_68;
  lowp float tmpvar_69;
  tmpvar_69 = texture2D (_LightTexture0, xlv_TEXCOORD2).w;
  mediump float tmpvar_70;
  tmpvar_70 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_69), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (tmpvar_65.xyz + (_Albedo * light_2));
  color_20.xyz = tmpvar_73;
  color_20.xyz = (color_20.xyz * light_2);
  color_20.w = 1.0;
  tmpvar_1 = color_20;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  mediump float sphereCheck_7;
  mediump float detailLevel_8;
  mediump vec3 norm_9;
  highp vec2 localCoords_10;
  mediump vec4 encnorm_11;
  mediump vec4 vert_12;
  mediump vec4 detail_13;
  mediump float nylerp_14;
  mediump vec3 detailCoords_15;
  mediump float zxlerp_16;
  mediump float vertLerp_17;
  mediump vec4 main_18;
  highp vec2 uv_19;
  mediump vec4 color_20;
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * r_21));
  uv_19.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_29;
  tmpvar_29 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  main_18 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_35;
  tmpvar_35 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_34), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = abs(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_36.x) - tmpvar_36.z)), 0.0, 1.0);
  zxlerp_16 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_36.zxy, tmpvar_36, vec3(zxlerp_16));
  detailCoords_15 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (floor(((1.0 + tmpvar_36.y) - mix (tmpvar_36.z, tmpvar_36.x, zxlerp_16))), 0.0, 1.0);
  nylerp_14 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (detailCoords_15, tmpvar_36.yxz, vec3(nylerp_14));
  detailCoords_15 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = abs(detailCoords_15.x);
  highp vec2 coord_42;
  coord_42 = ((((0.5 * detailCoords_15.zy) / tmpvar_41) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2DGradEXT (_midTex, coord_42, tmpvar_32.xy, tmpvar_32.zw);
  detail_13 = tmpvar_43;
  mediump float tmpvar_44;
  tmpvar_44 = abs(detailCoords_15.x);
  highp vec2 coord_45;
  coord_45 = ((((0.5 * detailCoords_15.zy) / tmpvar_44) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_steepTex, coord_45, tmpvar_32.xy, tmpvar_32.zw);
  vert_12 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (vert_12, detail_13, vec4(vertLerp_17));
  detail_13 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  encnorm_11 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_11.wy;
  localCoords_10 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_10 - vec2(0.5, 0.5));
  localCoords_10.y = tmpvar_50.y;
  localCoords_10.x = (tmpvar_50.x * 0.5);
  uv_19.x = (uv_19.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_19 + localCoords_10);
  uv_19 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_9.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_9.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_9.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_9);
  norm_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_58;
  tmpvar_58 = (xlv_TEXCOORD0 * tmpvar_57);
  color_20 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_60;
  tmpvar_60 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_59 * tmpvar_59)));
  highp float tmpvar_61;
  tmpvar_61 = (float((_OceanRadius >= tmpvar_60)) * float((tmpvar_59 >= 0.0)));
  sphereCheck_7 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_59 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_60, 2.0)))), sphereCheck_7));
  highp vec4 tmpvar_63;
  tmpvar_63 = mix (color_20, _OceanColor, vec4((clamp ((tmpvar_62 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_62)), 0.0, 1.0)))));
  color_20 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (mix (color_20, main_18, vec4(handoff_6)) * _Color);
  color_20.w = tmpvar_65.w;
  highp vec3 tmpvar_66;
  tmpvar_66 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_68;
  lowp float tmpvar_69;
  tmpvar_69 = texture2D (_LightTexture0, xlv_TEXCOORD2).w;
  mediump float tmpvar_70;
  tmpvar_70 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_69), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (tmpvar_65.xyz + (_Albedo * light_2));
  color_20.xyz = tmpvar_73;
  color_20.xyz = (color_20.xyz * light_2);
  color_20.w = 1.0;
  tmpvar_1 = color_20;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 407
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 411
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 436
#line 465
#line 436
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 440
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 444
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 448
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 453
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 407
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 411
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 436
#line 465
#line 455
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 457
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    #line 461
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 465
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 469
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 473
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    #line 477
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    #line 481
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 485
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    #line 489
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    #line 493
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    #line 497
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    #line 501
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 505
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 509
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 513
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 517
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.y = tmpvar_22.y;
  localCoords_2.x = (tmpvar_22.x * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_23;
  norm_1.z = cos((6.28319 * tmpvar_23.x));
  norm_1.x = sin((6.28319 * tmpvar_23.x));
  norm_1.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_1);
  norm_1 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_26;
  tmpvar_26 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_25 * tmpvar_25)));
  float tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_25 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_26, 2.0)))), (float((_OceanRadius >= tmpvar_26)) * float((tmpvar_25 >= 0.0)))));
  float tmpvar_28;
  tmpvar_28 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_16.xy, tmpvar_16.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_18), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_27 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_27)), 0.0, 1.0))))), tmpvar_17, vec4(tmpvar_28)) * _Color);
  color_4 = tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0), tmpvar_28);
  vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5));
  vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz)));
  vec4 tmpvar_33;
  tmpvar_33 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  float tmpvar_34;
  if ((tmpvar_33.x < (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))) {
    tmpvar_34 = _LightShadowData.x;
  } else {
    tmpvar_34 = 1.0;
  };
  vec3 tmpvar_35;
  tmpvar_35 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_30) * 2.0) * (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_31.w) * tmpvar_32.w) * tmpvar_34)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_4.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_35));
  color_4.xyz = (color_4.xyz * tmpvar_35);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 51 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c10
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
mad o7.x, r0, r0.y, c20
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov o6.xyz, -r1
add r1.xyz, -r0, c16
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7);
  lowp vec4 tmpvar_71;
  highp vec2 P_72;
  P_72 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_71 = texture2D (_LightTexture0, P_72);
  highp float tmpvar_73;
  tmpvar_73 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_74;
  tmpvar_74 = texture2D (_LightTextureB0, vec2(tmpvar_73));
  lowp float tmpvar_75;
  mediump float shadow_76;
  lowp vec4 tmpvar_77;
  tmpvar_77 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  highp float tmpvar_78;
  if ((tmpvar_77.x < (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))) {
    tmpvar_78 = _LightShadowData.x;
  } else {
    tmpvar_78 = 1.0;
  };
  shadow_76 = tmpvar_78;
  tmpvar_75 = shadow_76;
  highp float tmpvar_79;
  tmpvar_79 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_71.w) * tmpvar_74.w) * tmpvar_75);
  atten_3 = tmpvar_79;
  mediump float tmpvar_80;
  tmpvar_80 = clamp ((((_LightColor0.w * tmpvar_70) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_81;
  tmpvar_81 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_80)), 0.0, 1.0);
  light_2 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_83;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7);
  lowp vec4 tmpvar_71;
  highp vec2 P_72;
  P_72 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_71 = texture2D (_LightTexture0, P_72);
  highp float tmpvar_73;
  tmpvar_73 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_74;
  tmpvar_74 = texture2D (_LightTextureB0, vec2(tmpvar_73));
  lowp float tmpvar_75;
  mediump float shadow_76;
  lowp vec4 tmpvar_77;
  tmpvar_77 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  highp float tmpvar_78;
  if ((tmpvar_77.x < (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))) {
    tmpvar_78 = _LightShadowData.x;
  } else {
    tmpvar_78 = 1.0;
  };
  shadow_76 = tmpvar_78;
  tmpvar_75 = shadow_76;
  highp float tmpvar_79;
  tmpvar_79 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_71.w) * tmpvar_74.w) * tmpvar_75);
  atten_3 = tmpvar_79;
  mediump float tmpvar_80;
  tmpvar_80 = clamp ((((_LightColor0.w * tmpvar_70) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_81;
  tmpvar_81 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_80)), 0.0, 1.0);
  light_2 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_83;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 438
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 414
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 418
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 422
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 426
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 452
#line 472
#line 452
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 456
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 460
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 464
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 468
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 438
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 414
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 418
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 422
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 426
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 452
#line 472
#line 472
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 476
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 480
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 482
lowp vec4 frag( in v2f IN ) {
    #line 484
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 488
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 492
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 496
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 500
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 504
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 508
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 512
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    #line 516
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    #line 520
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    #line 524
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 528
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 532
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 536
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.y = tmpvar_22.y;
  localCoords_2.x = (tmpvar_22.x * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_23;
  norm_1.z = cos((6.28319 * tmpvar_23.x));
  norm_1.x = sin((6.28319 * tmpvar_23.x));
  norm_1.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_1);
  norm_1 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_26;
  tmpvar_26 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_25 * tmpvar_25)));
  float tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_25 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_26, 2.0)))), (float((_OceanRadius >= tmpvar_26)) * float((tmpvar_25 >= 0.0)))));
  float tmpvar_28;
  tmpvar_28 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_16.xy, tmpvar_16.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_18), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_27 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_27)), 0.0, 1.0))))), tmpvar_17, vec4(tmpvar_28)) * _Color);
  color_4.w = tmpvar_29.w;
  vec3 tmpvar_30;
  tmpvar_30 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0), tmpvar_28)) * 2.0) * (((float((xlv_TEXCOORD2.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x * (1.0 - _LightShadowData.x))))), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_4.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_30));
  color_4.xyz = (color_4.xyz * tmpvar_30);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 51 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c10
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
mad o7.x, r0, r0.y, c20
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov o6.xyz, -r1
add r1.xyz, -r0, c16
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  lowp vec4 tmpvar_70;
  highp vec2 P_71;
  P_71 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_70 = texture2D (_LightTexture0, P_71);
  highp float tmpvar_72;
  tmpvar_72 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture2D (_LightTextureB0, vec2(tmpvar_72));
  lowp float tmpvar_74;
  mediump float shadow_75;
  lowp float tmpvar_76;
  tmpvar_76 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD3);
  shadow_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (_LightShadowData.x + (shadow_75 * (1.0 - _LightShadowData.x)));
  shadow_75 = tmpvar_77;
  tmpvar_74 = shadow_75;
  highp float tmpvar_78;
  tmpvar_78 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_70.w) * tmpvar_73.w) * tmpvar_74);
  atten_3 = tmpvar_78;
  mediump float tmpvar_79;
  tmpvar_79 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_80;
  tmpvar_80 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_79)), 0.0, 1.0);
  light_2 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_82;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 415
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 419
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 423
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 427
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 453
#line 473
#line 453
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 457
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 461
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 465
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 469
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 415
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 419
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 423
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 427
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 453
#line 473
#line 473
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 477
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 481
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 483
lowp vec4 frag( in v2f IN ) {
    #line 485
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 489
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 493
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 497
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 501
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 505
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 509
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 513
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    #line 517
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    #line 521
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    #line 525
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 529
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 533
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 537
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex).xyz;
  vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_4, p_4));
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = gl_Normal;
  vec4 tmpvar_6;
  tmpvar_6.x = gl_MultiTexCoord0.x;
  tmpvar_6.y = gl_MultiTexCoord0.y;
  tmpvar_6.z = gl_MultiTexCoord1.x;
  tmpvar_6.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_7;
  tmpvar_7 = -(normalize(tmpvar_6).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_8;
  tmpvar_8 = dot (tmpvar_7, normalize(_SunDir));
  vec4 o_9;
  vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_2 * 0.5);
  vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_8)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_8)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_3 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.y = tmpvar_22.y;
  localCoords_2.x = (tmpvar_22.x * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_23;
  norm_1.z = cos((6.28319 * tmpvar_23.x));
  norm_1.x = sin((6.28319 * tmpvar_23.x));
  norm_1.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_1);
  norm_1 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_26;
  tmpvar_26 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_25 * tmpvar_25)));
  float tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_25 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_26, 2.0)))), (float((_OceanRadius >= tmpvar_26)) * float((tmpvar_25 >= 0.0)))));
  float tmpvar_28;
  tmpvar_28 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_16.xy, tmpvar_16.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_18), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_27 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_27)), 0.0, 1.0))))), tmpvar_17, vec4(tmpvar_28)) * _Color);
  color_4.w = tmpvar_29.w;
  vec3 tmpvar_30;
  tmpvar_30 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0), tmpvar_28)) * 2.0) * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_4.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_30));
  color_4.xyz = (color_4.xyz * tmpvar_30);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Matrix 4 [_Object2World]
Vector 11 [_SunDir]
Vector 12 [_PlanetOrigin]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
def c13, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c14, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c11, c11
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c11
dp3 r1.w, -r1, r0
mov o5.xyz, -r1
mov r0.xyz, v2
mov r0.w, c13.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c13.z
dp3 r0.x, r2, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
add r2.w, r0.y, c13
mul_sat r0.z, -r1.w, c13.y
mad o6.x, r0.z, r2.w, c14.y
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r2.xyz, r0.xyww, c14.x
mul r2.y, r2, c9.x
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
mov o0, r0
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o8.xyz, r0.x, -r1
mov r1.xyz, c12
mad o3.xy, r2.z, c10.zwzw, r2
mov o1, v1
mov o3.zw, r0
mov o2.xyz, v2
rcp o2.w, r0.x
add o7.xyz, -c8, r1
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  mediump float sphereCheck_7;
  mediump float detailLevel_8;
  mediump vec3 norm_9;
  highp vec2 localCoords_10;
  mediump vec4 encnorm_11;
  mediump vec4 vert_12;
  mediump vec4 detail_13;
  mediump float nylerp_14;
  mediump vec3 detailCoords_15;
  mediump float zxlerp_16;
  mediump float vertLerp_17;
  mediump vec4 main_18;
  highp vec2 uv_19;
  mediump vec4 color_20;
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * r_21));
  uv_19.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_29;
  tmpvar_29 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  main_18 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_35;
  tmpvar_35 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_34), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = abs(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_36.x) - tmpvar_36.z)), 0.0, 1.0);
  zxlerp_16 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_36.zxy, tmpvar_36, vec3(zxlerp_16));
  detailCoords_15 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (floor(((1.0 + tmpvar_36.y) - mix (tmpvar_36.z, tmpvar_36.x, zxlerp_16))), 0.0, 1.0);
  nylerp_14 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (detailCoords_15, tmpvar_36.yxz, vec3(nylerp_14));
  detailCoords_15 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = abs(detailCoords_15.x);
  highp vec2 coord_42;
  coord_42 = ((((0.5 * detailCoords_15.zy) / tmpvar_41) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2DGradEXT (_midTex, coord_42, tmpvar_32.xy, tmpvar_32.zw);
  detail_13 = tmpvar_43;
  mediump float tmpvar_44;
  tmpvar_44 = abs(detailCoords_15.x);
  highp vec2 coord_45;
  coord_45 = ((((0.5 * detailCoords_15.zy) / tmpvar_44) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_steepTex, coord_45, tmpvar_32.xy, tmpvar_32.zw);
  vert_12 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (vert_12, detail_13, vec4(vertLerp_17));
  detail_13 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  encnorm_11 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_11.wy;
  localCoords_10 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_10 - vec2(0.5, 0.5));
  localCoords_10.y = tmpvar_50.y;
  localCoords_10.x = (tmpvar_50.x * 0.5);
  uv_19.x = (uv_19.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_19 + localCoords_10);
  uv_19 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_9.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_9.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_9.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_9);
  norm_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_58;
  tmpvar_58 = (xlv_TEXCOORD0 * tmpvar_57);
  color_20 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_60;
  tmpvar_60 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_59 * tmpvar_59)));
  highp float tmpvar_61;
  tmpvar_61 = (float((_OceanRadius >= tmpvar_60)) * float((tmpvar_59 >= 0.0)));
  sphereCheck_7 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_59 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_60, 2.0)))), sphereCheck_7));
  highp vec4 tmpvar_63;
  tmpvar_63 = mix (color_20, _OceanColor, vec4((clamp ((tmpvar_62 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_62)), 0.0, 1.0)))));
  color_20 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (mix (color_20, main_18, vec4(handoff_6)) * _Color);
  color_20.w = tmpvar_65.w;
  highp vec3 tmpvar_66;
  tmpvar_66 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_68;
  lowp float tmpvar_69;
  mediump float lightShadowDataX_70;
  highp float dist_71;
  lowp float tmpvar_72;
  tmpvar_72 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_71 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = _LightShadowData.x;
  lightShadowDataX_70 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = max (float((dist_71 > (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w))), lightShadowDataX_70);
  tmpvar_69 = tmpvar_74;
  mediump float tmpvar_75;
  tmpvar_75 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_69), 0.0, 1.0);
  highp vec3 tmpvar_76;
  tmpvar_76 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_75)), 0.0, 1.0);
  light_2 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (tmpvar_65.xyz + (_Albedo * light_2));
  color_20.xyz = tmpvar_78;
  color_20.xyz = (color_20.xyz * light_2);
  color_20.w = 1.0;
  tmpvar_1 = color_20;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 tmpvar_6;
  tmpvar_6 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_7;
  p_7 = (tmpvar_6 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_7, p_7));
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_1;
  highp vec4 tmpvar_9;
  tmpvar_9.x = _glesMultiTexCoord0.x;
  tmpvar_9.y = _glesMultiTexCoord0.y;
  tmpvar_9.z = _glesMultiTexCoord1.x;
  tmpvar_9.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_10;
  tmpvar_10 = -(normalize(tmpvar_9).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_11;
  tmpvar_11 = normalize(_SunDir);
  highp float tmpvar_12;
  tmpvar_12 = dot (tmpvar_10, tmpvar_11);
  NdotL_2 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_13;
  highp vec4 o_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = o_14;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_8).xyz);
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_6 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  mediump float sphereCheck_7;
  mediump float detailLevel_8;
  mediump vec3 norm_9;
  highp vec2 localCoords_10;
  mediump vec4 encnorm_11;
  mediump vec4 vert_12;
  mediump vec4 detail_13;
  mediump float nylerp_14;
  mediump vec3 detailCoords_15;
  mediump float zxlerp_16;
  mediump float vertLerp_17;
  mediump vec4 main_18;
  highp vec2 uv_19;
  mediump vec4 color_20;
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * r_21));
  uv_19.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_29;
  tmpvar_29 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  main_18 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_35;
  tmpvar_35 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_34), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = abs(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_36.x) - tmpvar_36.z)), 0.0, 1.0);
  zxlerp_16 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_36.zxy, tmpvar_36, vec3(zxlerp_16));
  detailCoords_15 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (floor(((1.0 + tmpvar_36.y) - mix (tmpvar_36.z, tmpvar_36.x, zxlerp_16))), 0.0, 1.0);
  nylerp_14 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (detailCoords_15, tmpvar_36.yxz, vec3(nylerp_14));
  detailCoords_15 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = abs(detailCoords_15.x);
  highp vec2 coord_42;
  coord_42 = ((((0.5 * detailCoords_15.zy) / tmpvar_41) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2DGradEXT (_midTex, coord_42, tmpvar_32.xy, tmpvar_32.zw);
  detail_13 = tmpvar_43;
  mediump float tmpvar_44;
  tmpvar_44 = abs(detailCoords_15.x);
  highp vec2 coord_45;
  coord_45 = ((((0.5 * detailCoords_15.zy) / tmpvar_44) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_steepTex, coord_45, tmpvar_32.xy, tmpvar_32.zw);
  vert_12 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (vert_12, detail_13, vec4(vertLerp_17));
  detail_13 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  encnorm_11 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_11.wy;
  localCoords_10 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_10 - vec2(0.5, 0.5));
  localCoords_10.y = tmpvar_50.y;
  localCoords_10.x = (tmpvar_50.x * 0.5);
  uv_19.x = (uv_19.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_19 + localCoords_10);
  uv_19 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_9.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_9.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_9.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_9);
  norm_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_58;
  tmpvar_58 = (xlv_TEXCOORD0 * tmpvar_57);
  color_20 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_60;
  tmpvar_60 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_59 * tmpvar_59)));
  highp float tmpvar_61;
  tmpvar_61 = (float((_OceanRadius >= tmpvar_60)) * float((tmpvar_59 >= 0.0)));
  sphereCheck_7 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_59 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_60, 2.0)))), sphereCheck_7));
  highp vec4 tmpvar_63;
  tmpvar_63 = mix (color_20, _OceanColor, vec4((clamp ((tmpvar_62 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_62)), 0.0, 1.0)))));
  color_20 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (mix (color_20, main_18, vec4(handoff_6)) * _Color);
  color_20.w = tmpvar_65.w;
  highp vec3 tmpvar_66;
  tmpvar_66 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_68;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2);
  mediump float tmpvar_70;
  tmpvar_70 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_69.x), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (tmpvar_65.xyz + (_Albedo * light_2));
  color_20.xyz = tmpvar_73;
  color_20.xyz = (color_20.xyz * light_2);
  color_20.w = 1.0;
  tmpvar_1 = color_20;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 405
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 409
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 413
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 417
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 442
#line 471
#line 442
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 446
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 450
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 454
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 459
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 405
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 409
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 413
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 417
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 442
#line 471
#line 461
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 463
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    #line 467
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 471
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 475
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 479
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    #line 483
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    #line 487
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 491
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    #line 495
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    #line 499
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    #line 503
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    #line 507
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 511
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 515
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 519
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 523
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex).xyz;
  vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_4, p_4));
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = gl_Normal;
  vec4 tmpvar_6;
  tmpvar_6.x = gl_MultiTexCoord0.x;
  tmpvar_6.y = gl_MultiTexCoord0.y;
  tmpvar_6.z = gl_MultiTexCoord1.x;
  tmpvar_6.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_7;
  tmpvar_7 = -(normalize(tmpvar_6).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_8;
  tmpvar_8 = dot (tmpvar_7, normalize(_SunDir));
  vec4 o_9;
  vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_2 * 0.5);
  vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_8)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_8)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_3 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.y = tmpvar_22.y;
  localCoords_2.x = (tmpvar_22.x * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_23;
  norm_1.z = cos((6.28319 * tmpvar_23.x));
  norm_1.x = sin((6.28319 * tmpvar_23.x));
  norm_1.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_1);
  norm_1 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_26;
  tmpvar_26 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_25 * tmpvar_25)));
  float tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_25 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_26, 2.0)))), (float((_OceanRadius >= tmpvar_26)) * float((tmpvar_25 >= 0.0)))));
  float tmpvar_28;
  tmpvar_28 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_16.xy, tmpvar_16.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_18), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_27 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_27)), 0.0, 1.0))))), tmpvar_17, vec4(tmpvar_28)) * _Color);
  color_4.w = tmpvar_29.w;
  vec3 tmpvar_30;
  tmpvar_30 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0), tmpvar_28)) * 2.0) * (texture2D (_LightTexture0, xlv_TEXCOORD2).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_4.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_30));
  color_4.xyz = (color_4.xyz * tmpvar_30);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 15 [_SunDir]
Vector 16 [_PlanetOrigin]
"vs_3_0
; 50 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c17, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c18, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r1.x, c15, c15
rsq r1.x, r1.x
mov r1.w, c17.x
mov r0.xy, v3
mov r0.zw, v4.xyxy
dp4 r0.w, r0, r0
rsq r0.w, r0.w
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c15
dp3 r0.w, -r0, r1
mov r1.xyz, v2
mov o6.xyz, -r0
add r2.w, r0, c17.z
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
dp3 r1.x, r2, r2
frc r1.y, r2.w
add_sat r1.y, r2.w, -r1
rsq r1.x, r1.x
mul o5.xyz, r1.x, r2
dp4 r0.x, v0, c4
add r1.w, r1.y, c17
mul_sat r0.w, -r0, c17.y
mad o7.x, r0.w, r1.w, c18.y
dp4 r2.w, v0, c3
dp4 r2.z, v0, c2
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
dp4 r2.x, v0, c0
dp4 r2.y, v0, c1
mul r1.xyz, r2.xyww, c18.x
mul r1.y, r1, c13.x
mad o4.xy, r1.z, c14.zwzw, r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
rsq r0.x, r1.w
mul o9.xyz, r0.x, -r1
mov r1.xyz, c16
mov o0, r2
mov o1, v1
mov o4.zw, r2
mov o2.xyz, v2
rcp o2.w, r0.x
add o8.xyz, -c12, r1
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  mediump float sphereCheck_7;
  mediump float detailLevel_8;
  mediump vec3 norm_9;
  highp vec2 localCoords_10;
  mediump vec4 encnorm_11;
  mediump vec4 vert_12;
  mediump vec4 detail_13;
  mediump float nylerp_14;
  mediump vec3 detailCoords_15;
  mediump float zxlerp_16;
  mediump float vertLerp_17;
  mediump vec4 main_18;
  highp vec2 uv_19;
  mediump vec4 color_20;
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * r_21));
  uv_19.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_29;
  tmpvar_29 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  main_18 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_35;
  tmpvar_35 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_34), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = abs(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_36.x) - tmpvar_36.z)), 0.0, 1.0);
  zxlerp_16 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_36.zxy, tmpvar_36, vec3(zxlerp_16));
  detailCoords_15 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (floor(((1.0 + tmpvar_36.y) - mix (tmpvar_36.z, tmpvar_36.x, zxlerp_16))), 0.0, 1.0);
  nylerp_14 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (detailCoords_15, tmpvar_36.yxz, vec3(nylerp_14));
  detailCoords_15 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = abs(detailCoords_15.x);
  highp vec2 coord_42;
  coord_42 = ((((0.5 * detailCoords_15.zy) / tmpvar_41) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2DGradEXT (_midTex, coord_42, tmpvar_32.xy, tmpvar_32.zw);
  detail_13 = tmpvar_43;
  mediump float tmpvar_44;
  tmpvar_44 = abs(detailCoords_15.x);
  highp vec2 coord_45;
  coord_45 = ((((0.5 * detailCoords_15.zy) / tmpvar_44) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_steepTex, coord_45, tmpvar_32.xy, tmpvar_32.zw);
  vert_12 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (vert_12, detail_13, vec4(vertLerp_17));
  detail_13 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  encnorm_11 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_11.wy;
  localCoords_10 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_10 - vec2(0.5, 0.5));
  localCoords_10.y = tmpvar_50.y;
  localCoords_10.x = (tmpvar_50.x * 0.5);
  uv_19.x = (uv_19.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_19 + localCoords_10);
  uv_19 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_9.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_9.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_9.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_9);
  norm_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_58;
  tmpvar_58 = (xlv_TEXCOORD0 * tmpvar_57);
  color_20 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_60;
  tmpvar_60 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_59 * tmpvar_59)));
  highp float tmpvar_61;
  tmpvar_61 = (float((_OceanRadius >= tmpvar_60)) * float((tmpvar_59 >= 0.0)));
  sphereCheck_7 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_59 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_60, 2.0)))), sphereCheck_7));
  highp vec4 tmpvar_63;
  tmpvar_63 = mix (color_20, _OceanColor, vec4((clamp ((tmpvar_62 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_62)), 0.0, 1.0)))));
  color_20 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (mix (color_20, main_18, vec4(handoff_6)) * _Color);
  color_20.w = tmpvar_65.w;
  highp vec3 tmpvar_66;
  tmpvar_66 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_68;
  lowp float tmpvar_69;
  mediump float lightShadowDataX_70;
  highp float dist_71;
  lowp float tmpvar_72;
  tmpvar_72 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_71 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = _LightShadowData.x;
  lightShadowDataX_70 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = max (float((dist_71 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_70);
  tmpvar_69 = tmpvar_74;
  lowp float tmpvar_75;
  tmpvar_75 = (texture2D (_LightTexture0, xlv_TEXCOORD2).w * tmpvar_69);
  mediump float tmpvar_76;
  tmpvar_76 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_75), 0.0, 1.0);
  highp vec3 tmpvar_77;
  tmpvar_77 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_76)), 0.0, 1.0);
  light_2 = tmpvar_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (tmpvar_65.xyz + (_Albedo * light_2));
  color_20.xyz = tmpvar_79;
  color_20.xyz = (color_20.xyz * light_2);
  color_20.w = 1.0;
  tmpvar_1 = color_20;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 tmpvar_6;
  tmpvar_6 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_7;
  p_7 = (tmpvar_6 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_7, p_7));
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_1;
  highp vec4 tmpvar_9;
  tmpvar_9.x = _glesMultiTexCoord0.x;
  tmpvar_9.y = _glesMultiTexCoord0.y;
  tmpvar_9.z = _glesMultiTexCoord1.x;
  tmpvar_9.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_10;
  tmpvar_10 = -(normalize(tmpvar_9).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_11;
  tmpvar_11 = normalize(_SunDir);
  highp float tmpvar_12;
  tmpvar_12 = dot (tmpvar_10, tmpvar_11);
  NdotL_2 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_13;
  highp vec4 o_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD3 = o_14;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_8).xyz);
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_6 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  mediump float sphereCheck_7;
  mediump float detailLevel_8;
  mediump vec3 norm_9;
  highp vec2 localCoords_10;
  mediump vec4 encnorm_11;
  mediump vec4 vert_12;
  mediump vec4 detail_13;
  mediump float nylerp_14;
  mediump vec3 detailCoords_15;
  mediump float zxlerp_16;
  mediump float vertLerp_17;
  mediump vec4 main_18;
  highp vec2 uv_19;
  mediump vec4 color_20;
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * r_21));
  uv_19.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_29;
  tmpvar_29 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  main_18 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_35;
  tmpvar_35 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_34), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = abs(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_36.x) - tmpvar_36.z)), 0.0, 1.0);
  zxlerp_16 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_36.zxy, tmpvar_36, vec3(zxlerp_16));
  detailCoords_15 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (floor(((1.0 + tmpvar_36.y) - mix (tmpvar_36.z, tmpvar_36.x, zxlerp_16))), 0.0, 1.0);
  nylerp_14 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (detailCoords_15, tmpvar_36.yxz, vec3(nylerp_14));
  detailCoords_15 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = abs(detailCoords_15.x);
  highp vec2 coord_42;
  coord_42 = ((((0.5 * detailCoords_15.zy) / tmpvar_41) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2DGradEXT (_midTex, coord_42, tmpvar_32.xy, tmpvar_32.zw);
  detail_13 = tmpvar_43;
  mediump float tmpvar_44;
  tmpvar_44 = abs(detailCoords_15.x);
  highp vec2 coord_45;
  coord_45 = ((((0.5 * detailCoords_15.zy) / tmpvar_44) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_steepTex, coord_45, tmpvar_32.xy, tmpvar_32.zw);
  vert_12 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (vert_12, detail_13, vec4(vertLerp_17));
  detail_13 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  encnorm_11 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_11.wy;
  localCoords_10 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_10 - vec2(0.5, 0.5));
  localCoords_10.y = tmpvar_50.y;
  localCoords_10.x = (tmpvar_50.x * 0.5);
  uv_19.x = (uv_19.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_19 + localCoords_10);
  uv_19 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_9.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_9.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_9.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_9);
  norm_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_58;
  tmpvar_58 = (xlv_TEXCOORD0 * tmpvar_57);
  color_20 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_60;
  tmpvar_60 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_59 * tmpvar_59)));
  highp float tmpvar_61;
  tmpvar_61 = (float((_OceanRadius >= tmpvar_60)) * float((tmpvar_59 >= 0.0)));
  sphereCheck_7 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_59 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_60, 2.0)))), sphereCheck_7));
  highp vec4 tmpvar_63;
  tmpvar_63 = mix (color_20, _OceanColor, vec4((clamp ((tmpvar_62 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_62)), 0.0, 1.0)))));
  color_20 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (mix (color_20, main_18, vec4(handoff_6)) * _Color);
  color_20.w = tmpvar_65.w;
  highp vec3 tmpvar_66;
  tmpvar_66 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_68;
  lowp float tmpvar_69;
  tmpvar_69 = (texture2D (_LightTexture0, xlv_TEXCOORD2).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x);
  mediump float tmpvar_70;
  tmpvar_70 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_69), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (tmpvar_65.xyz + (_Albedo * light_2));
  color_20.xyz = tmpvar_73;
  color_20.xyz = (color_20.xyz * light_2);
  color_20.w = 1.0;
  tmpvar_1 = color_20;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 407
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 411
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 415
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 419
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 445
#line 465
#line 445
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 449
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 453
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 457
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 461
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 407
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 411
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 415
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 419
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 445
#line 465
#line 465
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 469
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 473
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 475
lowp vec4 frag( in v2f IN ) {
    #line 477
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 481
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 485
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 489
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 493
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 497
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 501
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 505
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    #line 509
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    #line 513
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    #line 517
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 521
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 525
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 529
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.y = tmpvar_22.y;
  localCoords_2.x = (tmpvar_22.x * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_23;
  norm_1.z = cos((6.28319 * tmpvar_23.x));
  norm_1.x = sin((6.28319 * tmpvar_23.x));
  norm_1.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_1);
  norm_1 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_26;
  tmpvar_26 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_25 * tmpvar_25)));
  float tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_25 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_26, 2.0)))), (float((_OceanRadius >= tmpvar_26)) * float((tmpvar_25 >= 0.0)))));
  float tmpvar_28;
  tmpvar_28 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_16.xy, tmpvar_16.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_18), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_27 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_27)), 0.0, 1.0))))), tmpvar_17, vec4(tmpvar_28)) * _Color);
  color_4 = tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0), tmpvar_28);
  vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  float tmpvar_32;
  tmpvar_32 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  float tmpvar_33;
  tmpvar_33 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD3), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_34;
  if ((tmpvar_33 < tmpvar_32)) {
    tmpvar_34 = _LightShadowData.x;
  } else {
    tmpvar_34 = 1.0;
  };
  vec3 tmpvar_35;
  tmpvar_35 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_30) * 2.0) * (tmpvar_31.w * tmpvar_34)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_4.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_35));
  color_4.xyz = (color_4.xyz * tmpvar_35);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
mad o7.x, r0, r0.y, c17
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
mov o6.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
mul o9.xyz, r1.w, -r1
mov r1.xyz, c15
mov o1, v1
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r0, -c13
add o8.xyz, -c12, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_72;
  tmpvar_72 = texture2D (_LightTexture0, vec2(tmpvar_71));
  highp float tmpvar_73;
  tmpvar_73 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_74 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = dot (packDist_74, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_77;
  if ((tmpvar_76 < tmpvar_73)) {
    tmpvar_77 = _LightShadowData.x;
  } else {
    tmpvar_77 = 1.0;
  };
  highp float tmpvar_78;
  tmpvar_78 = (tmpvar_72.w * tmpvar_77);
  atten_3 = tmpvar_78;
  mediump float tmpvar_79;
  tmpvar_79 = clamp ((((_LightColor0.w * tmpvar_70) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_80;
  tmpvar_80 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_79)), 0.0, 1.0);
  light_2 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_82;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_72;
  tmpvar_72 = texture2D (_LightTexture0, vec2(tmpvar_71));
  highp float tmpvar_73;
  tmpvar_73 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_74 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = dot (packDist_74, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_77;
  if ((tmpvar_76 < tmpvar_73)) {
    tmpvar_77 = _LightShadowData.x;
  } else {
    tmpvar_77 = 1.0;
  };
  highp float tmpvar_78;
  tmpvar_78 = (tmpvar_72.w * tmpvar_77);
  atten_3 = tmpvar_78;
  mediump float tmpvar_79;
  tmpvar_79 = clamp ((((_LightColor0.w * tmpvar_70) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_80;
  tmpvar_80 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_79)), 0.0, 1.0);
  light_2 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_82;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 426
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 412
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 416
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 420
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 424
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 450
#line 470
#line 450
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 454
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 458
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 462
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 466
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 426
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 412
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 416
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 420
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 424
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 450
#line 470
#line 470
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 474
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 478
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 480
lowp vec4 frag( in v2f IN ) {
    #line 482
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 486
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 490
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 494
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 498
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 502
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 506
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 510
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    #line 514
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    #line 518
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    #line 522
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 526
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 530
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 534
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.y = tmpvar_22.y;
  localCoords_2.x = (tmpvar_22.x * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_23;
  norm_1.z = cos((6.28319 * tmpvar_23.x));
  norm_1.x = sin((6.28319 * tmpvar_23.x));
  norm_1.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_1);
  norm_1 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_26;
  tmpvar_26 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_25 * tmpvar_25)));
  float tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_25 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_26, 2.0)))), (float((_OceanRadius >= tmpvar_26)) * float((tmpvar_25 >= 0.0)))));
  float tmpvar_28;
  tmpvar_28 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_16.xy, tmpvar_16.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_18), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_27 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_27)), 0.0, 1.0))))), tmpvar_17, vec4(tmpvar_28)) * _Color);
  color_4 = tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0), tmpvar_28);
  vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  vec4 tmpvar_32;
  tmpvar_32 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  float tmpvar_33;
  tmpvar_33 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  float tmpvar_34;
  tmpvar_34 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD3), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_35;
  if ((tmpvar_34 < tmpvar_33)) {
    tmpvar_35 = _LightShadowData.x;
  } else {
    tmpvar_35 = 1.0;
  };
  vec3 tmpvar_36;
  tmpvar_36 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_30) * 2.0) * ((tmpvar_31.w * tmpvar_32.w) * tmpvar_35)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_4.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_36));
  color_4.xyz = (color_4.xyz * tmpvar_36);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
mad o7.x, r0, r0.y, c17
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
mov o6.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
mul o9.xyz, r1.w, -r1
mov r1.xyz, c15
mov o1, v1
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r0, -c13
add o8.xyz, -c12, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_72;
  tmpvar_72 = texture2D (_LightTextureB0, vec2(tmpvar_71));
  lowp vec4 tmpvar_73;
  tmpvar_73 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_74;
  tmpvar_74 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_75;
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = dot (packDist_75, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_78;
  if ((tmpvar_77 < tmpvar_74)) {
    tmpvar_78 = _LightShadowData.x;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  tmpvar_79 = ((tmpvar_72.w * tmpvar_73.w) * tmpvar_78);
  atten_3 = tmpvar_79;
  mediump float tmpvar_80;
  tmpvar_80 = clamp ((((_LightColor0.w * tmpvar_70) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_81;
  tmpvar_81 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_80)), 0.0, 1.0);
  light_2 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_83;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_72;
  tmpvar_72 = texture2D (_LightTextureB0, vec2(tmpvar_71));
  lowp vec4 tmpvar_73;
  tmpvar_73 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_74;
  tmpvar_74 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_75;
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = dot (packDist_75, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_78;
  if ((tmpvar_77 < tmpvar_74)) {
    tmpvar_78 = _LightShadowData.x;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  tmpvar_79 = ((tmpvar_72.w * tmpvar_73.w) * tmpvar_78);
  atten_3 = tmpvar_79;
  mediump float tmpvar_80;
  tmpvar_80 = clamp ((((_LightColor0.w * tmpvar_70) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_81;
  tmpvar_81 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_80)), 0.0, 1.0);
  light_2 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_83;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 437
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 413
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 417
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 421
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 425
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 451
#line 471
#line 451
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 455
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 459
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 463
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 467
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 437
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 413
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 417
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 421
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 425
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 451
#line 471
#line 471
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 475
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 479
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 481
lowp vec4 frag( in v2f IN ) {
    #line 483
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 487
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 491
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 495
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 499
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 503
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 507
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 511
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    #line 515
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    #line 519
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    #line 523
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 527
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 531
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 535
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.y = tmpvar_22.y;
  localCoords_2.x = (tmpvar_22.x * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_23;
  norm_1.z = cos((6.28319 * tmpvar_23.x));
  norm_1.x = sin((6.28319 * tmpvar_23.x));
  norm_1.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_1);
  norm_1 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_26;
  tmpvar_26 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_25 * tmpvar_25)));
  float tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_25 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_26, 2.0)))), (float((_OceanRadius >= tmpvar_26)) * float((tmpvar_25 >= 0.0)))));
  float tmpvar_28;
  tmpvar_28 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_16.xy, tmpvar_16.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_18), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_27 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_27)), 0.0, 1.0))))), tmpvar_17, vec4(tmpvar_28)) * _Color);
  color_4 = tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0), tmpvar_28);
  vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5));
  vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz)));
  vec4 shadowVals_33;
  vec3 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  shadowVals_33.x = texture2D (_ShadowMapTexture, (tmpvar_34.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_33.y = texture2D (_ShadowMapTexture, (tmpvar_34.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_33.z = texture2D (_ShadowMapTexture, (tmpvar_34.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_33.w = texture2D (_ShadowMapTexture, (tmpvar_34.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_35;
  tmpvar_35 = lessThan (shadowVals_33, tmpvar_34.zzzz);
  vec4 tmpvar_36;
  tmpvar_36 = _LightShadowData.xxxx;
  float tmpvar_37;
  if (tmpvar_35.x) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = 1.0;
  };
  float tmpvar_38;
  if (tmpvar_35.y) {
    tmpvar_38 = tmpvar_36.y;
  } else {
    tmpvar_38 = 1.0;
  };
  float tmpvar_39;
  if (tmpvar_35.z) {
    tmpvar_39 = tmpvar_36.z;
  } else {
    tmpvar_39 = 1.0;
  };
  float tmpvar_40;
  if (tmpvar_35.w) {
    tmpvar_40 = tmpvar_36.w;
  } else {
    tmpvar_40 = 1.0;
  };
  vec4 tmpvar_41;
  tmpvar_41.x = tmpvar_37;
  tmpvar_41.y = tmpvar_38;
  tmpvar_41.z = tmpvar_39;
  tmpvar_41.w = tmpvar_40;
  vec3 tmpvar_42;
  tmpvar_42 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_30) * 2.0) * (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_31.w) * tmpvar_32.w) * dot (tmpvar_41, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_4.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_42));
  color_4.xyz = (color_4.xyz * tmpvar_42);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 51 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c10
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
mad o7.x, r0, r0.y, c20
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov o6.xyz, -r1
add r1.xyz, -r0, c16
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7);
  lowp vec4 tmpvar_71;
  highp vec2 P_72;
  P_72 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_71 = texture2D (_LightTexture0, P_72);
  highp float tmpvar_73;
  tmpvar_73 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_74;
  tmpvar_74 = texture2D (_LightTextureB0, vec2(tmpvar_73));
  lowp float tmpvar_75;
  mediump vec4 shadows_76;
  highp vec4 shadowVals_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  highp vec2 P_79;
  P_79 = (tmpvar_78.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_80;
  tmpvar_80 = texture2D (_ShadowMapTexture, P_79).x;
  shadowVals_77.x = tmpvar_80;
  highp vec2 P_81;
  P_81 = (tmpvar_78.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_82;
  tmpvar_82 = texture2D (_ShadowMapTexture, P_81).x;
  shadowVals_77.y = tmpvar_82;
  highp vec2 P_83;
  P_83 = (tmpvar_78.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_84;
  tmpvar_84 = texture2D (_ShadowMapTexture, P_83).x;
  shadowVals_77.z = tmpvar_84;
  highp vec2 P_85;
  P_85 = (tmpvar_78.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_86;
  tmpvar_86 = texture2D (_ShadowMapTexture, P_85).x;
  shadowVals_77.w = tmpvar_86;
  bvec4 tmpvar_87;
  tmpvar_87 = lessThan (shadowVals_77, tmpvar_78.zzzz);
  highp vec4 tmpvar_88;
  tmpvar_88 = _LightShadowData.xxxx;
  highp float tmpvar_89;
  if (tmpvar_87.x) {
    tmpvar_89 = tmpvar_88.x;
  } else {
    tmpvar_89 = 1.0;
  };
  highp float tmpvar_90;
  if (tmpvar_87.y) {
    tmpvar_90 = tmpvar_88.y;
  } else {
    tmpvar_90 = 1.0;
  };
  highp float tmpvar_91;
  if (tmpvar_87.z) {
    tmpvar_91 = tmpvar_88.z;
  } else {
    tmpvar_91 = 1.0;
  };
  highp float tmpvar_92;
  if (tmpvar_87.w) {
    tmpvar_92 = tmpvar_88.w;
  } else {
    tmpvar_92 = 1.0;
  };
  highp vec4 tmpvar_93;
  tmpvar_93.x = tmpvar_89;
  tmpvar_93.y = tmpvar_90;
  tmpvar_93.z = tmpvar_91;
  tmpvar_93.w = tmpvar_92;
  shadows_76 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = dot (shadows_76, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_75 = tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_71.w) * tmpvar_74.w) * tmpvar_75);
  atten_3 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = clamp ((((_LightColor0.w * tmpvar_70) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_96)), 0.0, 1.0);
  light_2 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_99;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7);
  lowp vec4 tmpvar_71;
  highp vec2 P_72;
  P_72 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_71 = texture2D (_LightTexture0, P_72);
  highp float tmpvar_73;
  tmpvar_73 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_74;
  tmpvar_74 = texture2D (_LightTextureB0, vec2(tmpvar_73));
  lowp float tmpvar_75;
  mediump vec4 shadows_76;
  highp vec4 shadowVals_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  highp vec2 P_79;
  P_79 = (tmpvar_78.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_80;
  tmpvar_80 = texture2D (_ShadowMapTexture, P_79).x;
  shadowVals_77.x = tmpvar_80;
  highp vec2 P_81;
  P_81 = (tmpvar_78.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_82;
  tmpvar_82 = texture2D (_ShadowMapTexture, P_81).x;
  shadowVals_77.y = tmpvar_82;
  highp vec2 P_83;
  P_83 = (tmpvar_78.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_84;
  tmpvar_84 = texture2D (_ShadowMapTexture, P_83).x;
  shadowVals_77.z = tmpvar_84;
  highp vec2 P_85;
  P_85 = (tmpvar_78.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_86;
  tmpvar_86 = texture2D (_ShadowMapTexture, P_85).x;
  shadowVals_77.w = tmpvar_86;
  bvec4 tmpvar_87;
  tmpvar_87 = lessThan (shadowVals_77, tmpvar_78.zzzz);
  highp vec4 tmpvar_88;
  tmpvar_88 = _LightShadowData.xxxx;
  highp float tmpvar_89;
  if (tmpvar_87.x) {
    tmpvar_89 = tmpvar_88.x;
  } else {
    tmpvar_89 = 1.0;
  };
  highp float tmpvar_90;
  if (tmpvar_87.y) {
    tmpvar_90 = tmpvar_88.y;
  } else {
    tmpvar_90 = 1.0;
  };
  highp float tmpvar_91;
  if (tmpvar_87.z) {
    tmpvar_91 = tmpvar_88.z;
  } else {
    tmpvar_91 = 1.0;
  };
  highp float tmpvar_92;
  if (tmpvar_87.w) {
    tmpvar_92 = tmpvar_88.w;
  } else {
    tmpvar_92 = 1.0;
  };
  highp vec4 tmpvar_93;
  tmpvar_93.x = tmpvar_89;
  tmpvar_93.y = tmpvar_90;
  tmpvar_93.z = tmpvar_91;
  tmpvar_93.w = tmpvar_92;
  shadows_76 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = dot (shadows_76, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_75 = tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_71.w) * tmpvar_74.w) * tmpvar_75);
  atten_3 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = clamp ((((_LightColor0.w * tmpvar_70) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_96)), 0.0, 1.0);
  light_2 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_99;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 446
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 436
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 430
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 434
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 460
#line 480
#line 460
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 464
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 468
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 472
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 476
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 446
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 436
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 430
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 434
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 460
#line 480
#line 480
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 484
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 488
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 490
lowp vec4 frag( in v2f IN ) {
    #line 492
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 496
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 500
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 504
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 508
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 512
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 516
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 520
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    #line 524
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    #line 528
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    #line 532
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 536
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 540
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 544
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.y = tmpvar_22.y;
  localCoords_2.x = (tmpvar_22.x * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_23;
  norm_1.z = cos((6.28319 * tmpvar_23.x));
  norm_1.x = sin((6.28319 * tmpvar_23.x));
  norm_1.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_1);
  norm_1 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_26;
  tmpvar_26 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_25 * tmpvar_25)));
  float tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_25 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_26, 2.0)))), (float((_OceanRadius >= tmpvar_26)) * float((tmpvar_25 >= 0.0)))));
  float tmpvar_28;
  tmpvar_28 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_16.xy, tmpvar_16.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_18), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_27 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_27)), 0.0, 1.0))))), tmpvar_17, vec4(tmpvar_28)) * _Color);
  color_4.w = tmpvar_29.w;
  vec4 shadows_30;
  vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  shadows_30.x = shadow2D (_ShadowMapTexture, (tmpvar_31 + _ShadowOffsets[0].xyz)).x;
  shadows_30.y = shadow2D (_ShadowMapTexture, (tmpvar_31 + _ShadowOffsets[1].xyz)).x;
  shadows_30.z = shadow2D (_ShadowMapTexture, (tmpvar_31 + _ShadowOffsets[2].xyz)).x;
  shadows_30.w = shadow2D (_ShadowMapTexture, (tmpvar_31 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_32;
  tmpvar_32 = (_LightShadowData.xxxx + (shadows_30 * (1.0 - _LightShadowData.xxxx)));
  shadows_30 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0), tmpvar_28)) * 2.0) * (((float((xlv_TEXCOORD2.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz))).w) * dot (tmpvar_32, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_4.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_33));
  color_4.xyz = (color_4.xyz * tmpvar_33);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 51 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c10
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
mad o7.x, r0, r0.y, c20
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov o6.xyz, -r1
add r1.xyz, -r0, c16
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  lowp vec4 tmpvar_70;
  highp vec2 P_71;
  P_71 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_70 = texture2D (_LightTexture0, P_71);
  highp float tmpvar_72;
  tmpvar_72 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture2D (_LightTextureB0, vec2(tmpvar_72));
  lowp float tmpvar_74;
  mediump vec4 shadows_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  highp vec3 coord_77;
  coord_77 = (tmpvar_76 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_78;
  tmpvar_78 = shadow2DEXT (_ShadowMapTexture, coord_77);
  shadows_75.x = tmpvar_78;
  highp vec3 coord_79;
  coord_79 = (tmpvar_76 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_80;
  tmpvar_80 = shadow2DEXT (_ShadowMapTexture, coord_79);
  shadows_75.y = tmpvar_80;
  highp vec3 coord_81;
  coord_81 = (tmpvar_76 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_82;
  tmpvar_82 = shadow2DEXT (_ShadowMapTexture, coord_81);
  shadows_75.z = tmpvar_82;
  highp vec3 coord_83;
  coord_83 = (tmpvar_76 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_84;
  tmpvar_84 = shadow2DEXT (_ShadowMapTexture, coord_83);
  shadows_75.w = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = (_LightShadowData.xxxx + (shadows_75 * (1.0 - _LightShadowData.xxxx)));
  shadows_75 = tmpvar_85;
  mediump float tmpvar_86;
  tmpvar_86 = dot (shadows_75, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_74 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_70.w) * tmpvar_73.w) * tmpvar_74);
  atten_3 = tmpvar_87;
  mediump float tmpvar_88;
  tmpvar_88 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_89;
  tmpvar_89 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_88)), 0.0, 1.0);
  light_2 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_91;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 446
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 436
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 430
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 434
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 460
#line 480
#line 460
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 464
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 468
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 472
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 476
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 446
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 436
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 430
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 434
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 460
#line 480
#line 480
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 484
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 488
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 490
lowp vec4 frag( in v2f IN ) {
    #line 492
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 496
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 500
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 504
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 508
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 512
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 516
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 520
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    #line 524
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    #line 528
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    #line 532
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 536
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 540
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 544
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.y = tmpvar_22.y;
  localCoords_2.x = (tmpvar_22.x * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_23;
  norm_1.z = cos((6.28319 * tmpvar_23.x));
  norm_1.x = sin((6.28319 * tmpvar_23.x));
  norm_1.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_1);
  norm_1 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_26;
  tmpvar_26 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_25 * tmpvar_25)));
  float tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_25 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_26, 2.0)))), (float((_OceanRadius >= tmpvar_26)) * float((tmpvar_25 >= 0.0)))));
  float tmpvar_28;
  tmpvar_28 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_16.xy, tmpvar_16.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_18), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_27 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_27)), 0.0, 1.0))))), tmpvar_17, vec4(tmpvar_28)) * _Color);
  color_4 = tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0), tmpvar_28);
  vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  vec4 shadowVals_32;
  shadowVals_32.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_32.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_32.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_32.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_33;
  tmpvar_33 = lessThan (shadowVals_32, vec4(((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_34;
  tmpvar_34 = _LightShadowData.xxxx;
  float tmpvar_35;
  if (tmpvar_33.x) {
    tmpvar_35 = tmpvar_34.x;
  } else {
    tmpvar_35 = 1.0;
  };
  float tmpvar_36;
  if (tmpvar_33.y) {
    tmpvar_36 = tmpvar_34.y;
  } else {
    tmpvar_36 = 1.0;
  };
  float tmpvar_37;
  if (tmpvar_33.z) {
    tmpvar_37 = tmpvar_34.z;
  } else {
    tmpvar_37 = 1.0;
  };
  float tmpvar_38;
  if (tmpvar_33.w) {
    tmpvar_38 = tmpvar_34.w;
  } else {
    tmpvar_38 = 1.0;
  };
  vec4 tmpvar_39;
  tmpvar_39.x = tmpvar_35;
  tmpvar_39.y = tmpvar_36;
  tmpvar_39.z = tmpvar_37;
  tmpvar_39.w = tmpvar_38;
  vec3 tmpvar_40;
  tmpvar_40 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_30) * 2.0) * (tmpvar_31.w * dot (tmpvar_39, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_4.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_40));
  color_4.xyz = (color_4.xyz * tmpvar_40);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
mad o7.x, r0, r0.y, c17
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
mov o6.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
mul o9.xyz, r1.w, -r1
mov r1.xyz, c15
mov o1, v1
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r0, -c13
add o8.xyz, -c12, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_72;
  tmpvar_72 = texture2D (_LightTexture0, vec2(tmpvar_71));
  highp float tmpvar_73;
  mediump vec4 shadows_74;
  highp vec4 shadowVals_75;
  highp float tmpvar_76;
  tmpvar_76 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_77;
  vec_77 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = textureCube (_ShadowMapTexture, vec_77);
  packDist_78 = tmpvar_79;
  shadowVals_75.x = dot (packDist_78, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_80;
  vec_80 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_81;
  lowp vec4 tmpvar_82;
  tmpvar_82 = textureCube (_ShadowMapTexture, vec_80);
  packDist_81 = tmpvar_82;
  shadowVals_75.y = dot (packDist_81, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_83;
  vec_83 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_84;
  lowp vec4 tmpvar_85;
  tmpvar_85 = textureCube (_ShadowMapTexture, vec_83);
  packDist_84 = tmpvar_85;
  shadowVals_75.z = dot (packDist_84, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_86;
  vec_86 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_87;
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_ShadowMapTexture, vec_86);
  packDist_87 = tmpvar_88;
  shadowVals_75.w = dot (packDist_87, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_89;
  tmpvar_89 = lessThan (shadowVals_75, vec4(tmpvar_76));
  highp vec4 tmpvar_90;
  tmpvar_90 = _LightShadowData.xxxx;
  highp float tmpvar_91;
  if (tmpvar_89.x) {
    tmpvar_91 = tmpvar_90.x;
  } else {
    tmpvar_91 = 1.0;
  };
  highp float tmpvar_92;
  if (tmpvar_89.y) {
    tmpvar_92 = tmpvar_90.y;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  if (tmpvar_89.z) {
    tmpvar_93 = tmpvar_90.z;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  if (tmpvar_89.w) {
    tmpvar_94 = tmpvar_90.w;
  } else {
    tmpvar_94 = 1.0;
  };
  highp vec4 tmpvar_95;
  tmpvar_95.x = tmpvar_91;
  tmpvar_95.y = tmpvar_92;
  tmpvar_95.z = tmpvar_93;
  tmpvar_95.w = tmpvar_94;
  shadows_74 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = dot (shadows_74, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_73 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = (tmpvar_72.w * tmpvar_73);
  atten_3 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = clamp ((((_LightColor0.w * tmpvar_70) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_99;
  tmpvar_99 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_98)), 0.0, 1.0);
  light_2 = tmpvar_99;
  highp vec3 tmpvar_100;
  tmpvar_100 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_101;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_72;
  tmpvar_72 = texture2D (_LightTexture0, vec2(tmpvar_71));
  highp float tmpvar_73;
  mediump vec4 shadows_74;
  highp vec4 shadowVals_75;
  highp float tmpvar_76;
  tmpvar_76 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_77;
  vec_77 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = textureCube (_ShadowMapTexture, vec_77);
  packDist_78 = tmpvar_79;
  shadowVals_75.x = dot (packDist_78, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_80;
  vec_80 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_81;
  lowp vec4 tmpvar_82;
  tmpvar_82 = textureCube (_ShadowMapTexture, vec_80);
  packDist_81 = tmpvar_82;
  shadowVals_75.y = dot (packDist_81, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_83;
  vec_83 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_84;
  lowp vec4 tmpvar_85;
  tmpvar_85 = textureCube (_ShadowMapTexture, vec_83);
  packDist_84 = tmpvar_85;
  shadowVals_75.z = dot (packDist_84, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_86;
  vec_86 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_87;
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_ShadowMapTexture, vec_86);
  packDist_87 = tmpvar_88;
  shadowVals_75.w = dot (packDist_87, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_89;
  tmpvar_89 = lessThan (shadowVals_75, vec4(tmpvar_76));
  highp vec4 tmpvar_90;
  tmpvar_90 = _LightShadowData.xxxx;
  highp float tmpvar_91;
  if (tmpvar_89.x) {
    tmpvar_91 = tmpvar_90.x;
  } else {
    tmpvar_91 = 1.0;
  };
  highp float tmpvar_92;
  if (tmpvar_89.y) {
    tmpvar_92 = tmpvar_90.y;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  if (tmpvar_89.z) {
    tmpvar_93 = tmpvar_90.z;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  if (tmpvar_89.w) {
    tmpvar_94 = tmpvar_90.w;
  } else {
    tmpvar_94 = 1.0;
  };
  highp vec4 tmpvar_95;
  tmpvar_95.x = tmpvar_91;
  tmpvar_95.y = tmpvar_92;
  tmpvar_95.z = tmpvar_93;
  tmpvar_95.w = tmpvar_94;
  shadows_74 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = dot (shadows_74, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_73 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = (tmpvar_72.w * tmpvar_73);
  atten_3 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = clamp ((((_LightColor0.w * tmpvar_70) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_99;
  tmpvar_99 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_98)), 0.0, 1.0);
  light_2 = tmpvar_99;
  highp vec3 tmpvar_100;
  tmpvar_100 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_101;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 442
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 432
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 418
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 422
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 426
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 430
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 456
#line 476
#line 456
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 460
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 464
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 468
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 472
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 442
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 432
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 418
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 422
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 426
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 430
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 456
#line 476
#line 476
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 480
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 484
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 486
lowp vec4 frag( in v2f IN ) {
    #line 488
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 492
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 496
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 500
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 504
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 508
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 512
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 516
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    #line 520
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    #line 524
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    #line 528
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 532
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 536
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 540
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.y = tmpvar_22.y;
  localCoords_2.x = (tmpvar_22.x * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_23;
  norm_1.z = cos((6.28319 * tmpvar_23.x));
  norm_1.x = sin((6.28319 * tmpvar_23.x));
  norm_1.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_1);
  norm_1 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_26;
  tmpvar_26 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_25 * tmpvar_25)));
  float tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_25 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_26, 2.0)))), (float((_OceanRadius >= tmpvar_26)) * float((tmpvar_25 >= 0.0)))));
  float tmpvar_28;
  tmpvar_28 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_16.xy, tmpvar_16.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_18), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_27 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_27)), 0.0, 1.0))))), tmpvar_17, vec4(tmpvar_28)) * _Color);
  color_4 = tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0), tmpvar_28);
  vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  vec4 tmpvar_32;
  tmpvar_32 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  vec4 shadowVals_33;
  shadowVals_33.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_33.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_33.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_33.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_34;
  tmpvar_34 = lessThan (shadowVals_33, vec4(((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_35;
  tmpvar_35 = _LightShadowData.xxxx;
  float tmpvar_36;
  if (tmpvar_34.x) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = 1.0;
  };
  float tmpvar_37;
  if (tmpvar_34.y) {
    tmpvar_37 = tmpvar_35.y;
  } else {
    tmpvar_37 = 1.0;
  };
  float tmpvar_38;
  if (tmpvar_34.z) {
    tmpvar_38 = tmpvar_35.z;
  } else {
    tmpvar_38 = 1.0;
  };
  float tmpvar_39;
  if (tmpvar_34.w) {
    tmpvar_39 = tmpvar_35.w;
  } else {
    tmpvar_39 = 1.0;
  };
  vec4 tmpvar_40;
  tmpvar_40.x = tmpvar_36;
  tmpvar_40.y = tmpvar_37;
  tmpvar_40.z = tmpvar_38;
  tmpvar_40.w = tmpvar_39;
  vec3 tmpvar_41;
  tmpvar_41 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_30) * 2.0) * ((tmpvar_31.w * tmpvar_32.w) * dot (tmpvar_40, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_4.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_41));
  color_4.xyz = (color_4.xyz * tmpvar_41);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
mad o7.x, r0, r0.y, c17
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
mov o6.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
mul o9.xyz, r1.w, -r1
mov r1.xyz, c15
mov o1, v1
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r0, -c13
add o8.xyz, -c12, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_72;
  tmpvar_72 = texture2D (_LightTextureB0, vec2(tmpvar_71));
  lowp vec4 tmpvar_73;
  tmpvar_73 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_74;
  mediump vec4 shadows_75;
  highp vec4 shadowVals_76;
  highp float tmpvar_77;
  tmpvar_77 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_78;
  vec_78 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = textureCube (_ShadowMapTexture, vec_78);
  packDist_79 = tmpvar_80;
  shadowVals_76.x = dot (packDist_79, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_81;
  vec_81 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_82;
  lowp vec4 tmpvar_83;
  tmpvar_83 = textureCube (_ShadowMapTexture, vec_81);
  packDist_82 = tmpvar_83;
  shadowVals_76.y = dot (packDist_82, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_84;
  vec_84 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_85;
  lowp vec4 tmpvar_86;
  tmpvar_86 = textureCube (_ShadowMapTexture, vec_84);
  packDist_85 = tmpvar_86;
  shadowVals_76.z = dot (packDist_85, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_87;
  vec_87 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_88;
  lowp vec4 tmpvar_89;
  tmpvar_89 = textureCube (_ShadowMapTexture, vec_87);
  packDist_88 = tmpvar_89;
  shadowVals_76.w = dot (packDist_88, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_90;
  tmpvar_90 = lessThan (shadowVals_76, vec4(tmpvar_77));
  highp vec4 tmpvar_91;
  tmpvar_91 = _LightShadowData.xxxx;
  highp float tmpvar_92;
  if (tmpvar_90.x) {
    tmpvar_92 = tmpvar_91.x;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  if (tmpvar_90.y) {
    tmpvar_93 = tmpvar_91.y;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  if (tmpvar_90.z) {
    tmpvar_94 = tmpvar_91.z;
  } else {
    tmpvar_94 = 1.0;
  };
  highp float tmpvar_95;
  if (tmpvar_90.w) {
    tmpvar_95 = tmpvar_91.w;
  } else {
    tmpvar_95 = 1.0;
  };
  highp vec4 tmpvar_96;
  tmpvar_96.x = tmpvar_92;
  tmpvar_96.y = tmpvar_93;
  tmpvar_96.z = tmpvar_94;
  tmpvar_96.w = tmpvar_95;
  shadows_75 = tmpvar_96;
  mediump float tmpvar_97;
  tmpvar_97 = dot (shadows_75, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_74 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = ((tmpvar_72.w * tmpvar_73.w) * tmpvar_74);
  atten_3 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp ((((_LightColor0.w * tmpvar_70) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_100;
  tmpvar_100 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_99)), 0.0, 1.0);
  light_2 = tmpvar_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_102;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_72;
  tmpvar_72 = texture2D (_LightTextureB0, vec2(tmpvar_71));
  lowp vec4 tmpvar_73;
  tmpvar_73 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_74;
  mediump vec4 shadows_75;
  highp vec4 shadowVals_76;
  highp float tmpvar_77;
  tmpvar_77 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_78;
  vec_78 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = textureCube (_ShadowMapTexture, vec_78);
  packDist_79 = tmpvar_80;
  shadowVals_76.x = dot (packDist_79, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_81;
  vec_81 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_82;
  lowp vec4 tmpvar_83;
  tmpvar_83 = textureCube (_ShadowMapTexture, vec_81);
  packDist_82 = tmpvar_83;
  shadowVals_76.y = dot (packDist_82, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_84;
  vec_84 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_85;
  lowp vec4 tmpvar_86;
  tmpvar_86 = textureCube (_ShadowMapTexture, vec_84);
  packDist_85 = tmpvar_86;
  shadowVals_76.z = dot (packDist_85, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_87;
  vec_87 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_88;
  lowp vec4 tmpvar_89;
  tmpvar_89 = textureCube (_ShadowMapTexture, vec_87);
  packDist_88 = tmpvar_89;
  shadowVals_76.w = dot (packDist_88, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_90;
  tmpvar_90 = lessThan (shadowVals_76, vec4(tmpvar_77));
  highp vec4 tmpvar_91;
  tmpvar_91 = _LightShadowData.xxxx;
  highp float tmpvar_92;
  if (tmpvar_90.x) {
    tmpvar_92 = tmpvar_91.x;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  if (tmpvar_90.y) {
    tmpvar_93 = tmpvar_91.y;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  if (tmpvar_90.z) {
    tmpvar_94 = tmpvar_91.z;
  } else {
    tmpvar_94 = 1.0;
  };
  highp float tmpvar_95;
  if (tmpvar_90.w) {
    tmpvar_95 = tmpvar_91.w;
  } else {
    tmpvar_95 = 1.0;
  };
  highp vec4 tmpvar_96;
  tmpvar_96.x = tmpvar_92;
  tmpvar_96.y = tmpvar_93;
  tmpvar_96.z = tmpvar_94;
  tmpvar_96.w = tmpvar_95;
  shadows_75 = tmpvar_96;
  mediump float tmpvar_97;
  tmpvar_97 = dot (shadows_75, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_74 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = ((tmpvar_72.w * tmpvar_73.w) * tmpvar_74);
  atten_3 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp ((((_LightColor0.w * tmpvar_70) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_100;
  tmpvar_100 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_99)), 0.0, 1.0);
  light_2 = tmpvar_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_102;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 443
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 433
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 419
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 423
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 427
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 431
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 457
#line 477
#line 457
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 461
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 465
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 469
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 473
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 443
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 433
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 419
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 423
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 427
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 431
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 457
#line 477
#line 477
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 481
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 485
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 487
lowp vec4 frag( in v2f IN ) {
    #line 489
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 493
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 497
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 501
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 505
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 509
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 513
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 517
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    #line 521
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    #line 525
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    #line 529
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 533
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 537
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 541
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.y = tmpvar_22.y;
  localCoords_2.x = (tmpvar_22.x * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_23;
  norm_1.z = cos((6.28319 * tmpvar_23.x));
  norm_1.x = sin((6.28319 * tmpvar_23.x));
  norm_1.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_1);
  norm_1 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_26;
  tmpvar_26 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_25 * tmpvar_25)));
  float tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_25 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_26, 2.0)))), (float((_OceanRadius >= tmpvar_26)) * float((tmpvar_25 >= 0.0)))));
  float tmpvar_28;
  tmpvar_28 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_16.xy, tmpvar_16.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_18), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_27 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_27)), 0.0, 1.0))))), tmpvar_17, vec4(tmpvar_28)) * _Color);
  color_4.w = tmpvar_29.w;
  vec3 tmpvar_30;
  tmpvar_30 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0), tmpvar_28)) * 2.0) * texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2))).w), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_4.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_30));
  color_4.xyz = (color_4.xyz * tmpvar_30);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 46 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o4.xyz, r0.x, r2
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
mad o6.x, r0, r0.y, c16
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
mov o5.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  mediump float sphereCheck_7;
  mediump float detailLevel_8;
  mediump vec3 norm_9;
  highp vec2 localCoords_10;
  mediump vec4 encnorm_11;
  mediump vec4 vert_12;
  mediump vec4 detail_13;
  mediump float nylerp_14;
  mediump vec3 detailCoords_15;
  mediump float zxlerp_16;
  mediump float vertLerp_17;
  mediump vec4 main_18;
  highp vec2 uv_19;
  mediump vec4 color_20;
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * r_21));
  uv_19.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_29;
  tmpvar_29 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  main_18 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_35;
  tmpvar_35 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_34), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = abs(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_36.x) - tmpvar_36.z)), 0.0, 1.0);
  zxlerp_16 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_36.zxy, tmpvar_36, vec3(zxlerp_16));
  detailCoords_15 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (floor(((1.0 + tmpvar_36.y) - mix (tmpvar_36.z, tmpvar_36.x, zxlerp_16))), 0.0, 1.0);
  nylerp_14 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (detailCoords_15, tmpvar_36.yxz, vec3(nylerp_14));
  detailCoords_15 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = abs(detailCoords_15.x);
  highp vec2 coord_42;
  coord_42 = ((((0.5 * detailCoords_15.zy) / tmpvar_41) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2DGradEXT (_midTex, coord_42, tmpvar_32.xy, tmpvar_32.zw);
  detail_13 = tmpvar_43;
  mediump float tmpvar_44;
  tmpvar_44 = abs(detailCoords_15.x);
  highp vec2 coord_45;
  coord_45 = ((((0.5 * detailCoords_15.zy) / tmpvar_44) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_steepTex, coord_45, tmpvar_32.xy, tmpvar_32.zw);
  vert_12 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (vert_12, detail_13, vec4(vertLerp_17));
  detail_13 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  encnorm_11 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_11.wy;
  localCoords_10 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_10 - vec2(0.5, 0.5));
  localCoords_10.y = tmpvar_50.y;
  localCoords_10.x = (tmpvar_50.x * 0.5);
  uv_19.x = (uv_19.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_19 + localCoords_10);
  uv_19 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_9.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_9.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_9.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_9);
  norm_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_58;
  tmpvar_58 = (xlv_TEXCOORD0 * tmpvar_57);
  color_20 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_60;
  tmpvar_60 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_59 * tmpvar_59)));
  highp float tmpvar_61;
  tmpvar_61 = (float((_OceanRadius >= tmpvar_60)) * float((tmpvar_59 >= 0.0)));
  sphereCheck_7 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_59 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_60, 2.0)))), sphereCheck_7));
  highp vec4 tmpvar_63;
  tmpvar_63 = mix (color_20, _OceanColor, vec4((clamp ((tmpvar_62 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_62)), 0.0, 1.0)))));
  color_20 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (mix (color_20, main_18, vec4(handoff_6)) * _Color);
  color_20.w = tmpvar_65.w;
  highp vec3 tmpvar_66;
  tmpvar_66 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_70;
  tmpvar_70 = texture2D (_LightTexture0, vec2(tmpvar_69)).w;
  mediump float tmpvar_71;
  tmpvar_71 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_70), 0.0, 1.0);
  highp vec3 tmpvar_72;
  tmpvar_72 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_71)), 0.0, 1.0);
  light_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_65.xyz + (_Albedo * light_2));
  color_20.xyz = tmpvar_74;
  color_20.xyz = (color_20.xyz * light_2);
  color_20.w = 1.0;
  tmpvar_1 = color_20;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  mediump float sphereCheck_7;
  mediump float detailLevel_8;
  mediump vec3 norm_9;
  highp vec2 localCoords_10;
  mediump vec4 encnorm_11;
  mediump vec4 vert_12;
  mediump vec4 detail_13;
  mediump float nylerp_14;
  mediump vec3 detailCoords_15;
  mediump float zxlerp_16;
  mediump float vertLerp_17;
  mediump vec4 main_18;
  highp vec2 uv_19;
  mediump vec4 color_20;
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * r_21));
  uv_19.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_29;
  tmpvar_29 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  main_18 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_35;
  tmpvar_35 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_34), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = abs(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_36.x) - tmpvar_36.z)), 0.0, 1.0);
  zxlerp_16 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_36.zxy, tmpvar_36, vec3(zxlerp_16));
  detailCoords_15 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (floor(((1.0 + tmpvar_36.y) - mix (tmpvar_36.z, tmpvar_36.x, zxlerp_16))), 0.0, 1.0);
  nylerp_14 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (detailCoords_15, tmpvar_36.yxz, vec3(nylerp_14));
  detailCoords_15 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = abs(detailCoords_15.x);
  highp vec2 coord_42;
  coord_42 = ((((0.5 * detailCoords_15.zy) / tmpvar_41) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2DGradEXT (_midTex, coord_42, tmpvar_32.xy, tmpvar_32.zw);
  detail_13 = tmpvar_43;
  mediump float tmpvar_44;
  tmpvar_44 = abs(detailCoords_15.x);
  highp vec2 coord_45;
  coord_45 = ((((0.5 * detailCoords_15.zy) / tmpvar_44) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_steepTex, coord_45, tmpvar_32.xy, tmpvar_32.zw);
  vert_12 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (vert_12, detail_13, vec4(vertLerp_17));
  detail_13 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  encnorm_11 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_11.wy;
  localCoords_10 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_10 - vec2(0.5, 0.5));
  localCoords_10.y = tmpvar_50.y;
  localCoords_10.x = (tmpvar_50.x * 0.5);
  uv_19.x = (uv_19.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_19 + localCoords_10);
  uv_19 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_9.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_9.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_9.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_9);
  norm_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_58;
  tmpvar_58 = (xlv_TEXCOORD0 * tmpvar_57);
  color_20 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_60;
  tmpvar_60 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_59 * tmpvar_59)));
  highp float tmpvar_61;
  tmpvar_61 = (float((_OceanRadius >= tmpvar_60)) * float((tmpvar_59 >= 0.0)));
  sphereCheck_7 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_59 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_60, 2.0)))), sphereCheck_7));
  highp vec4 tmpvar_63;
  tmpvar_63 = mix (color_20, _OceanColor, vec4((clamp ((tmpvar_62 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_62)), 0.0, 1.0)))));
  color_20 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (mix (color_20, main_18, vec4(handoff_6)) * _Color);
  color_20.w = tmpvar_65.w;
  highp vec3 tmpvar_66;
  tmpvar_66 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_70;
  tmpvar_70 = texture2D (_LightTexture0, vec2(tmpvar_69)).w;
  mediump float tmpvar_71;
  tmpvar_71 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_70), 0.0, 1.0);
  highp vec3 tmpvar_72;
  tmpvar_72 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_71)), 0.0, 1.0);
  light_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_65.xyz + (_Albedo * light_2));
  color_20.xyz = tmpvar_74;
  color_20.xyz = (color_20.xyz * light_2);
  color_20.w = 1.0;
  tmpvar_1 = color_20;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 407
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 411
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 436
#line 465
#line 436
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 440
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 444
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 448
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 453
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 407
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 411
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 436
#line 465
#line 455
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 457
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    #line 461
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 465
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 469
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 473
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    #line 477
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    #line 481
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 485
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    #line 489
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    #line 493
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    #line 497
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    #line 501
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 505
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 509
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 513
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 517
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.y = tmpvar_22.y;
  localCoords_2.x = (tmpvar_22.x * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_23;
  norm_1.z = cos((6.28319 * tmpvar_23.x));
  norm_1.x = sin((6.28319 * tmpvar_23.x));
  norm_1.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_1);
  norm_1 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_26;
  tmpvar_26 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_25 * tmpvar_25)));
  float tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_25 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_26, 2.0)))), (float((_OceanRadius >= tmpvar_26)) * float((tmpvar_25 >= 0.0)))));
  float tmpvar_28;
  tmpvar_28 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_16.xy, tmpvar_16.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_18), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_27 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_27)), 0.0, 1.0))))), tmpvar_17, vec4(tmpvar_28)) * _Color);
  color_4.w = tmpvar_29.w;
  vec3 tmpvar_30;
  tmpvar_30 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0), tmpvar_28)) * 2.0), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_4.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_30));
  color_4.xyz = (color_4.xyz * tmpvar_30);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Vector 9 [_SunDir]
Vector 10 [_PlanetOrigin]
"vs_3_0
; 42 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord4 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c11, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c12, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c9, c9
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c9
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c11.x
dp4 r2.x, r0, c4
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
add r2.w, r1, c11.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o3.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
add r2.x, r0.y, c11.w
mul_sat r0.w, -r1, c11.y
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r0.xyz, -r0, c8
mad o5.x, r0.w, r2, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o7.xyz, r0.w, -r0
mov r0.xyz, c10
mov o4.xyz, -r1
mov o1, v1
mov o2.xyz, v2
rcp o2.w, r0.w
add o6.xyz, -c8, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  mediump float sphereCheck_7;
  mediump float detailLevel_8;
  mediump vec3 norm_9;
  highp vec2 localCoords_10;
  mediump vec4 encnorm_11;
  mediump vec4 vert_12;
  mediump vec4 detail_13;
  mediump float nylerp_14;
  mediump vec3 detailCoords_15;
  mediump float zxlerp_16;
  mediump float vertLerp_17;
  mediump vec4 main_18;
  highp vec2 uv_19;
  mediump vec4 color_20;
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * r_21));
  uv_19.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_29;
  tmpvar_29 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  main_18 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_35;
  tmpvar_35 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_34), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = abs(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_36.x) - tmpvar_36.z)), 0.0, 1.0);
  zxlerp_16 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_36.zxy, tmpvar_36, vec3(zxlerp_16));
  detailCoords_15 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (floor(((1.0 + tmpvar_36.y) - mix (tmpvar_36.z, tmpvar_36.x, zxlerp_16))), 0.0, 1.0);
  nylerp_14 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (detailCoords_15, tmpvar_36.yxz, vec3(nylerp_14));
  detailCoords_15 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = abs(detailCoords_15.x);
  highp vec2 coord_42;
  coord_42 = ((((0.5 * detailCoords_15.zy) / tmpvar_41) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2DGradEXT (_midTex, coord_42, tmpvar_32.xy, tmpvar_32.zw);
  detail_13 = tmpvar_43;
  mediump float tmpvar_44;
  tmpvar_44 = abs(detailCoords_15.x);
  highp vec2 coord_45;
  coord_45 = ((((0.5 * detailCoords_15.zy) / tmpvar_44) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_steepTex, coord_45, tmpvar_32.xy, tmpvar_32.zw);
  vert_12 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (vert_12, detail_13, vec4(vertLerp_17));
  detail_13 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  encnorm_11 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_11.wy;
  localCoords_10 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_10 - vec2(0.5, 0.5));
  localCoords_10.y = tmpvar_50.y;
  localCoords_10.x = (tmpvar_50.x * 0.5);
  uv_19.x = (uv_19.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_19 + localCoords_10);
  uv_19 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_9.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_9.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_9.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_9);
  norm_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_58;
  tmpvar_58 = (xlv_TEXCOORD0 * tmpvar_57);
  color_20 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_60;
  tmpvar_60 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_59 * tmpvar_59)));
  highp float tmpvar_61;
  tmpvar_61 = (float((_OceanRadius >= tmpvar_60)) * float((tmpvar_59 >= 0.0)));
  sphereCheck_7 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_59 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_60, 2.0)))), sphereCheck_7));
  highp vec4 tmpvar_63;
  tmpvar_63 = mix (color_20, _OceanColor, vec4((clamp ((tmpvar_62 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_62)), 0.0, 1.0)))));
  color_20 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (mix (color_20, main_18, vec4(handoff_6)) * _Color);
  color_20.w = tmpvar_65.w;
  highp vec3 tmpvar_66;
  tmpvar_66 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_68;
  mediump float tmpvar_69;
  tmpvar_69 = clamp (((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0), 0.0, 1.0);
  highp vec3 tmpvar_70;
  tmpvar_70 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_69)), 0.0, 1.0);
  light_2 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (tmpvar_65.xyz + (_Albedo * light_2));
  color_20.xyz = tmpvar_72;
  color_20.xyz = (color_20.xyz * light_2);
  color_20.w = 1.0;
  tmpvar_1 = color_20;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  mediump float sphereCheck_7;
  mediump float detailLevel_8;
  mediump vec3 norm_9;
  highp vec2 localCoords_10;
  mediump vec4 encnorm_11;
  mediump vec4 vert_12;
  mediump vec4 detail_13;
  mediump float nylerp_14;
  mediump vec3 detailCoords_15;
  mediump float zxlerp_16;
  mediump float vertLerp_17;
  mediump vec4 main_18;
  highp vec2 uv_19;
  mediump vec4 color_20;
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * r_21));
  uv_19.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_29;
  tmpvar_29 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  main_18 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_35;
  tmpvar_35 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_34), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = abs(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_36.x) - tmpvar_36.z)), 0.0, 1.0);
  zxlerp_16 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_36.zxy, tmpvar_36, vec3(zxlerp_16));
  detailCoords_15 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (floor(((1.0 + tmpvar_36.y) - mix (tmpvar_36.z, tmpvar_36.x, zxlerp_16))), 0.0, 1.0);
  nylerp_14 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (detailCoords_15, tmpvar_36.yxz, vec3(nylerp_14));
  detailCoords_15 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = abs(detailCoords_15.x);
  highp vec2 coord_42;
  coord_42 = ((((0.5 * detailCoords_15.zy) / tmpvar_41) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2DGradEXT (_midTex, coord_42, tmpvar_32.xy, tmpvar_32.zw);
  detail_13 = tmpvar_43;
  mediump float tmpvar_44;
  tmpvar_44 = abs(detailCoords_15.x);
  highp vec2 coord_45;
  coord_45 = ((((0.5 * detailCoords_15.zy) / tmpvar_44) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_steepTex, coord_45, tmpvar_32.xy, tmpvar_32.zw);
  vert_12 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (vert_12, detail_13, vec4(vertLerp_17));
  detail_13 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  encnorm_11 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_11.wy;
  localCoords_10 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_10 - vec2(0.5, 0.5));
  localCoords_10.y = tmpvar_50.y;
  localCoords_10.x = (tmpvar_50.x * 0.5);
  uv_19.x = (uv_19.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_19 + localCoords_10);
  uv_19 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_9.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_9.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_9.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_9);
  norm_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_58;
  tmpvar_58 = (xlv_TEXCOORD0 * tmpvar_57);
  color_20 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_60;
  tmpvar_60 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_59 * tmpvar_59)));
  highp float tmpvar_61;
  tmpvar_61 = (float((_OceanRadius >= tmpvar_60)) * float((tmpvar_59 >= 0.0)));
  sphereCheck_7 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_59 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_60, 2.0)))), sphereCheck_7));
  highp vec4 tmpvar_63;
  tmpvar_63 = mix (color_20, _OceanColor, vec4((clamp ((tmpvar_62 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_62)), 0.0, 1.0)))));
  color_20 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (mix (color_20, main_18, vec4(handoff_6)) * _Color);
  color_20.w = tmpvar_65.w;
  highp vec3 tmpvar_66;
  tmpvar_66 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_68;
  mediump float tmpvar_69;
  tmpvar_69 = clamp (((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0), 0.0, 1.0);
  highp vec3 tmpvar_70;
  tmpvar_70 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_69)), 0.0, 1.0);
  light_2 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (tmpvar_65.xyz + (_Albedo * light_2));
  color_20.xyz = tmpvar_72;
  color_20.xyz = (color_20.xyz * light_2);
  color_20.w = 1.0;
  tmpvar_1 = color_20;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 411
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 397
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 401
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 405
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 409
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 433
#line 461
#line 433
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 437
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 441
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 445
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 449
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 411
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 397
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 401
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 405
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 409
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 433
#line 461
#line 451
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 453
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    #line 457
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 461
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 465
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 469
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    #line 473
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    #line 477
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 481
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    #line 485
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    #line 489
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    #line 493
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    #line 497
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 501
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 505
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 509
    lowp float atten = 1.0;
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 513
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.y = tmpvar_22.y;
  localCoords_2.x = (tmpvar_22.x * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_23;
  norm_1.z = cos((6.28319 * tmpvar_23.x));
  norm_1.x = sin((6.28319 * tmpvar_23.x));
  norm_1.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_1);
  norm_1 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_26;
  tmpvar_26 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_25 * tmpvar_25)));
  float tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_25 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_26, 2.0)))), (float((_OceanRadius >= tmpvar_26)) * float((tmpvar_25 >= 0.0)))));
  float tmpvar_28;
  tmpvar_28 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_16.xy, tmpvar_16.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_18), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_27 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_27)), 0.0, 1.0))))), tmpvar_17, vec4(tmpvar_28)) * _Color);
  color_4.w = tmpvar_29.w;
  vec3 tmpvar_30;
  tmpvar_30 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0), tmpvar_28)) * 2.0) * ((float((xlv_TEXCOORD2.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz))).w)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_4.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_30));
  color_4.xyz = (color_4.xyz * tmpvar_30);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o4.xyz, r0.x, r2
dp4 r0.z, v0, c6
dp4 r0.w, v0, c7
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
mad o6.x, r0, r0.y, c16
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o5.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.w, r0, c11
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  lowp vec4 tmpvar_70;
  highp vec2 P_71;
  P_71 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_70 = texture2D (_LightTexture0, P_71);
  highp float tmpvar_72;
  tmpvar_72 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture2D (_LightTextureB0, vec2(tmpvar_72));
  highp float tmpvar_74;
  tmpvar_74 = ((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_70.w) * tmpvar_73.w);
  atten_3 = tmpvar_74;
  mediump float tmpvar_75;
  tmpvar_75 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_76;
  tmpvar_76 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_75)), 0.0, 1.0);
  light_2 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_78;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  lowp vec4 tmpvar_70;
  highp vec2 P_71;
  P_71 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_70 = texture2D (_LightTexture0, P_71);
  highp float tmpvar_72;
  tmpvar_72 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture2D (_LightTextureB0, vec2(tmpvar_72));
  highp float tmpvar_74;
  tmpvar_74 = ((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_70.w) * tmpvar_73.w);
  atten_3 = tmpvar_74;
  mediump float tmpvar_75;
  tmpvar_75 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_76;
  tmpvar_76 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_75)), 0.0, 1.0);
  light_2 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_78;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 408
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 412
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 416
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 420
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 445
#line 474
#line 445
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 449
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 453
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 457
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 462
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 408
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 412
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 416
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 420
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 445
#line 474
#line 464
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 466
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    #line 470
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 474
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 478
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 482
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    #line 486
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    #line 490
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 494
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    #line 498
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    #line 502
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    #line 506
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    #line 510
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 514
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 518
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 522
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 526
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.y = tmpvar_22.y;
  localCoords_2.x = (tmpvar_22.x * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_23;
  norm_1.z = cos((6.28319 * tmpvar_23.x));
  norm_1.x = sin((6.28319 * tmpvar_23.x));
  norm_1.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_1);
  norm_1 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_26;
  tmpvar_26 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_25 * tmpvar_25)));
  float tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_25 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_26, 2.0)))), (float((_OceanRadius >= tmpvar_26)) * float((tmpvar_25 >= 0.0)))));
  float tmpvar_28;
  tmpvar_28 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_16.xy, tmpvar_16.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_18), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_27 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_27)), 0.0, 1.0))))), tmpvar_17, vec4(tmpvar_28)) * _Color);
  color_4.w = tmpvar_29.w;
  vec3 tmpvar_30;
  tmpvar_30 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0), tmpvar_28)) * 2.0) * (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2))).w * textureCube (_LightTexture0, xlv_TEXCOORD2).w)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_4.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_30));
  color_4.xyz = (color_4.xyz * tmpvar_30);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 46 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o4.xyz, r0.x, r2
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
mad o6.x, r0, r0.y, c16
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
mov o5.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  mediump float sphereCheck_7;
  mediump float detailLevel_8;
  mediump vec3 norm_9;
  highp vec2 localCoords_10;
  mediump vec4 encnorm_11;
  mediump vec4 vert_12;
  mediump vec4 detail_13;
  mediump float nylerp_14;
  mediump vec3 detailCoords_15;
  mediump float zxlerp_16;
  mediump float vertLerp_17;
  mediump vec4 main_18;
  highp vec2 uv_19;
  mediump vec4 color_20;
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * r_21));
  uv_19.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_29;
  tmpvar_29 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  main_18 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_35;
  tmpvar_35 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_34), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = abs(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_36.x) - tmpvar_36.z)), 0.0, 1.0);
  zxlerp_16 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_36.zxy, tmpvar_36, vec3(zxlerp_16));
  detailCoords_15 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (floor(((1.0 + tmpvar_36.y) - mix (tmpvar_36.z, tmpvar_36.x, zxlerp_16))), 0.0, 1.0);
  nylerp_14 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (detailCoords_15, tmpvar_36.yxz, vec3(nylerp_14));
  detailCoords_15 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = abs(detailCoords_15.x);
  highp vec2 coord_42;
  coord_42 = ((((0.5 * detailCoords_15.zy) / tmpvar_41) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2DGradEXT (_midTex, coord_42, tmpvar_32.xy, tmpvar_32.zw);
  detail_13 = tmpvar_43;
  mediump float tmpvar_44;
  tmpvar_44 = abs(detailCoords_15.x);
  highp vec2 coord_45;
  coord_45 = ((((0.5 * detailCoords_15.zy) / tmpvar_44) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_steepTex, coord_45, tmpvar_32.xy, tmpvar_32.zw);
  vert_12 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (vert_12, detail_13, vec4(vertLerp_17));
  detail_13 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  encnorm_11 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_11.wy;
  localCoords_10 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_10 - vec2(0.5, 0.5));
  localCoords_10.y = tmpvar_50.y;
  localCoords_10.x = (tmpvar_50.x * 0.5);
  uv_19.x = (uv_19.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_19 + localCoords_10);
  uv_19 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_9.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_9.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_9.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_9);
  norm_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_58;
  tmpvar_58 = (xlv_TEXCOORD0 * tmpvar_57);
  color_20 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_60;
  tmpvar_60 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_59 * tmpvar_59)));
  highp float tmpvar_61;
  tmpvar_61 = (float((_OceanRadius >= tmpvar_60)) * float((tmpvar_59 >= 0.0)));
  sphereCheck_7 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_59 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_60, 2.0)))), sphereCheck_7));
  highp vec4 tmpvar_63;
  tmpvar_63 = mix (color_20, _OceanColor, vec4((clamp ((tmpvar_62 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_62)), 0.0, 1.0)))));
  color_20 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (mix (color_20, main_18, vec4(handoff_6)) * _Color);
  color_20.w = tmpvar_65.w;
  highp vec3 tmpvar_66;
  tmpvar_66 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_70;
  tmpvar_70 = (texture2D (_LightTextureB0, vec2(tmpvar_69)).w * textureCube (_LightTexture0, xlv_TEXCOORD2).w);
  mediump float tmpvar_71;
  tmpvar_71 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_70), 0.0, 1.0);
  highp vec3 tmpvar_72;
  tmpvar_72 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_71)), 0.0, 1.0);
  light_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_65.xyz + (_Albedo * light_2));
  color_20.xyz = tmpvar_74;
  color_20.xyz = (color_20.xyz * light_2);
  color_20.w = 1.0;
  tmpvar_1 = color_20;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  mediump float sphereCheck_7;
  mediump float detailLevel_8;
  mediump vec3 norm_9;
  highp vec2 localCoords_10;
  mediump vec4 encnorm_11;
  mediump vec4 vert_12;
  mediump vec4 detail_13;
  mediump float nylerp_14;
  mediump vec3 detailCoords_15;
  mediump float zxlerp_16;
  mediump float vertLerp_17;
  mediump vec4 main_18;
  highp vec2 uv_19;
  mediump vec4 color_20;
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * r_21));
  uv_19.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_29;
  tmpvar_29 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  main_18 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_35;
  tmpvar_35 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_34), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = abs(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_36.x) - tmpvar_36.z)), 0.0, 1.0);
  zxlerp_16 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_36.zxy, tmpvar_36, vec3(zxlerp_16));
  detailCoords_15 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (floor(((1.0 + tmpvar_36.y) - mix (tmpvar_36.z, tmpvar_36.x, zxlerp_16))), 0.0, 1.0);
  nylerp_14 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (detailCoords_15, tmpvar_36.yxz, vec3(nylerp_14));
  detailCoords_15 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = abs(detailCoords_15.x);
  highp vec2 coord_42;
  coord_42 = ((((0.5 * detailCoords_15.zy) / tmpvar_41) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2DGradEXT (_midTex, coord_42, tmpvar_32.xy, tmpvar_32.zw);
  detail_13 = tmpvar_43;
  mediump float tmpvar_44;
  tmpvar_44 = abs(detailCoords_15.x);
  highp vec2 coord_45;
  coord_45 = ((((0.5 * detailCoords_15.zy) / tmpvar_44) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_steepTex, coord_45, tmpvar_32.xy, tmpvar_32.zw);
  vert_12 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (vert_12, detail_13, vec4(vertLerp_17));
  detail_13 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  encnorm_11 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_11.wy;
  localCoords_10 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_10 - vec2(0.5, 0.5));
  localCoords_10.y = tmpvar_50.y;
  localCoords_10.x = (tmpvar_50.x * 0.5);
  uv_19.x = (uv_19.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_19 + localCoords_10);
  uv_19 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_9.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_9.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_9.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_9);
  norm_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_58;
  tmpvar_58 = (xlv_TEXCOORD0 * tmpvar_57);
  color_20 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_60;
  tmpvar_60 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_59 * tmpvar_59)));
  highp float tmpvar_61;
  tmpvar_61 = (float((_OceanRadius >= tmpvar_60)) * float((tmpvar_59 >= 0.0)));
  sphereCheck_7 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_59 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_60, 2.0)))), sphereCheck_7));
  highp vec4 tmpvar_63;
  tmpvar_63 = mix (color_20, _OceanColor, vec4((clamp ((tmpvar_62 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_62)), 0.0, 1.0)))));
  color_20 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (mix (color_20, main_18, vec4(handoff_6)) * _Color);
  color_20.w = tmpvar_65.w;
  highp vec3 tmpvar_66;
  tmpvar_66 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_70;
  tmpvar_70 = (texture2D (_LightTextureB0, vec2(tmpvar_69)).w * textureCube (_LightTexture0, xlv_TEXCOORD2).w);
  mediump float tmpvar_71;
  tmpvar_71 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_70), 0.0, 1.0);
  highp vec3 tmpvar_72;
  tmpvar_72 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_71)), 0.0, 1.0);
  light_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_65.xyz + (_Albedo * light_2));
  color_20.xyz = tmpvar_74;
  color_20.xyz = (color_20.xyz * light_2);
  color_20.w = 1.0;
  tmpvar_1 = color_20;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 400
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 404
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 408
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 412
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 437
#line 466
#line 437
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 441
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 445
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 449
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 454
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 400
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 404
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 408
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 412
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 437
#line 466
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 458
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    #line 462
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 466
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 470
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 474
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    #line 478
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    #line 482
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 486
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    #line 490
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    #line 494
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    #line 498
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    #line 502
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 506
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 510
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 514
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 518
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.y = tmpvar_22.y;
  localCoords_2.x = (tmpvar_22.x * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_23;
  norm_1.z = cos((6.28319 * tmpvar_23.x));
  norm_1.x = sin((6.28319 * tmpvar_23.x));
  norm_1.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_1);
  norm_1 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_26;
  tmpvar_26 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_25 * tmpvar_25)));
  float tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_25 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_26, 2.0)))), (float((_OceanRadius >= tmpvar_26)) * float((tmpvar_25 >= 0.0)))));
  float tmpvar_28;
  tmpvar_28 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_16.xy, tmpvar_16.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_18), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_27 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_27)), 0.0, 1.0))))), tmpvar_17, vec4(tmpvar_28)) * _Color);
  color_4.w = tmpvar_29.w;
  vec3 tmpvar_30;
  tmpvar_30 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0), tmpvar_28)) * 2.0) * texture2D (_LightTexture0, xlv_TEXCOORD2).w), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_4.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_30));
  color_4.xyz = (color_4.xyz * tmpvar_30);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 45 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o4.xyz, r0.x, r2
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
mad o6.x, r0, r0.y, c16
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
mov o5.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  mediump float sphereCheck_7;
  mediump float detailLevel_8;
  mediump vec3 norm_9;
  highp vec2 localCoords_10;
  mediump vec4 encnorm_11;
  mediump vec4 vert_12;
  mediump vec4 detail_13;
  mediump float nylerp_14;
  mediump vec3 detailCoords_15;
  mediump float zxlerp_16;
  mediump float vertLerp_17;
  mediump vec4 main_18;
  highp vec2 uv_19;
  mediump vec4 color_20;
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * r_21));
  uv_19.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_29;
  tmpvar_29 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  main_18 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_35;
  tmpvar_35 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_34), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = abs(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_36.x) - tmpvar_36.z)), 0.0, 1.0);
  zxlerp_16 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_36.zxy, tmpvar_36, vec3(zxlerp_16));
  detailCoords_15 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (floor(((1.0 + tmpvar_36.y) - mix (tmpvar_36.z, tmpvar_36.x, zxlerp_16))), 0.0, 1.0);
  nylerp_14 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (detailCoords_15, tmpvar_36.yxz, vec3(nylerp_14));
  detailCoords_15 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = abs(detailCoords_15.x);
  highp vec2 coord_42;
  coord_42 = ((((0.5 * detailCoords_15.zy) / tmpvar_41) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2DGradEXT (_midTex, coord_42, tmpvar_32.xy, tmpvar_32.zw);
  detail_13 = tmpvar_43;
  mediump float tmpvar_44;
  tmpvar_44 = abs(detailCoords_15.x);
  highp vec2 coord_45;
  coord_45 = ((((0.5 * detailCoords_15.zy) / tmpvar_44) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_steepTex, coord_45, tmpvar_32.xy, tmpvar_32.zw);
  vert_12 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (vert_12, detail_13, vec4(vertLerp_17));
  detail_13 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  encnorm_11 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_11.wy;
  localCoords_10 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_10 - vec2(0.5, 0.5));
  localCoords_10.y = tmpvar_50.y;
  localCoords_10.x = (tmpvar_50.x * 0.5);
  uv_19.x = (uv_19.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_19 + localCoords_10);
  uv_19 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_9.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_9.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_9.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_9);
  norm_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_58;
  tmpvar_58 = (xlv_TEXCOORD0 * tmpvar_57);
  color_20 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_60;
  tmpvar_60 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_59 * tmpvar_59)));
  highp float tmpvar_61;
  tmpvar_61 = (float((_OceanRadius >= tmpvar_60)) * float((tmpvar_59 >= 0.0)));
  sphereCheck_7 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_59 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_60, 2.0)))), sphereCheck_7));
  highp vec4 tmpvar_63;
  tmpvar_63 = mix (color_20, _OceanColor, vec4((clamp ((tmpvar_62 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_62)), 0.0, 1.0)))));
  color_20 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (mix (color_20, main_18, vec4(handoff_6)) * _Color);
  color_20.w = tmpvar_65.w;
  highp vec3 tmpvar_66;
  tmpvar_66 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_68;
  lowp float tmpvar_69;
  tmpvar_69 = texture2D (_LightTexture0, xlv_TEXCOORD2).w;
  mediump float tmpvar_70;
  tmpvar_70 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_69), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (tmpvar_65.xyz + (_Albedo * light_2));
  color_20.xyz = tmpvar_73;
  color_20.xyz = (color_20.xyz * light_2);
  color_20.w = 1.0;
  tmpvar_1 = color_20;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  mediump float sphereCheck_7;
  mediump float detailLevel_8;
  mediump vec3 norm_9;
  highp vec2 localCoords_10;
  mediump vec4 encnorm_11;
  mediump vec4 vert_12;
  mediump vec4 detail_13;
  mediump float nylerp_14;
  mediump vec3 detailCoords_15;
  mediump float zxlerp_16;
  mediump float vertLerp_17;
  mediump vec4 main_18;
  highp vec2 uv_19;
  mediump vec4 color_20;
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * r_21));
  uv_19.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_29;
  tmpvar_29 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  main_18 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_35;
  tmpvar_35 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_34), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = abs(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_36.x) - tmpvar_36.z)), 0.0, 1.0);
  zxlerp_16 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_36.zxy, tmpvar_36, vec3(zxlerp_16));
  detailCoords_15 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (floor(((1.0 + tmpvar_36.y) - mix (tmpvar_36.z, tmpvar_36.x, zxlerp_16))), 0.0, 1.0);
  nylerp_14 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (detailCoords_15, tmpvar_36.yxz, vec3(nylerp_14));
  detailCoords_15 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = abs(detailCoords_15.x);
  highp vec2 coord_42;
  coord_42 = ((((0.5 * detailCoords_15.zy) / tmpvar_41) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2DGradEXT (_midTex, coord_42, tmpvar_32.xy, tmpvar_32.zw);
  detail_13 = tmpvar_43;
  mediump float tmpvar_44;
  tmpvar_44 = abs(detailCoords_15.x);
  highp vec2 coord_45;
  coord_45 = ((((0.5 * detailCoords_15.zy) / tmpvar_44) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_steepTex, coord_45, tmpvar_32.xy, tmpvar_32.zw);
  vert_12 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (vert_12, detail_13, vec4(vertLerp_17));
  detail_13 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  encnorm_11 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_11.wy;
  localCoords_10 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_10 - vec2(0.5, 0.5));
  localCoords_10.y = tmpvar_50.y;
  localCoords_10.x = (tmpvar_50.x * 0.5);
  uv_19.x = (uv_19.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_19 + localCoords_10);
  uv_19 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_9.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_9.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_9.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_9);
  norm_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_58;
  tmpvar_58 = (xlv_TEXCOORD0 * tmpvar_57);
  color_20 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_60;
  tmpvar_60 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_59 * tmpvar_59)));
  highp float tmpvar_61;
  tmpvar_61 = (float((_OceanRadius >= tmpvar_60)) * float((tmpvar_59 >= 0.0)));
  sphereCheck_7 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_59 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_60, 2.0)))), sphereCheck_7));
  highp vec4 tmpvar_63;
  tmpvar_63 = mix (color_20, _OceanColor, vec4((clamp ((tmpvar_62 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_62)), 0.0, 1.0)))));
  color_20 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (mix (color_20, main_18, vec4(handoff_6)) * _Color);
  color_20.w = tmpvar_65.w;
  highp vec3 tmpvar_66;
  tmpvar_66 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_68;
  lowp float tmpvar_69;
  tmpvar_69 = texture2D (_LightTexture0, xlv_TEXCOORD2).w;
  mediump float tmpvar_70;
  tmpvar_70 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_69), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (tmpvar_65.xyz + (_Albedo * light_2));
  color_20.xyz = tmpvar_73;
  color_20.xyz = (color_20.xyz * light_2);
  color_20.w = 1.0;
  tmpvar_1 = color_20;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 407
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 411
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 436
#line 465
#line 436
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 440
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 444
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 448
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 453
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 407
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 411
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 436
#line 465
#line 455
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 457
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    #line 461
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 465
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 469
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 473
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    #line 477
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    #line 481
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 485
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    #line 489
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    #line 493
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    #line 497
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    #line 501
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 505
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 509
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 513
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 517
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.y = tmpvar_22.y;
  localCoords_2.x = (tmpvar_22.x * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_23;
  norm_1.z = cos((6.28319 * tmpvar_23.x));
  norm_1.x = sin((6.28319 * tmpvar_23.x));
  norm_1.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_1);
  norm_1 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_26;
  tmpvar_26 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_25 * tmpvar_25)));
  float tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_25 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_26, 2.0)))), (float((_OceanRadius >= tmpvar_26)) * float((tmpvar_25 >= 0.0)))));
  float tmpvar_28;
  tmpvar_28 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_16.xy, tmpvar_16.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_18), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_27 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_27)), 0.0, 1.0))))), tmpvar_17, vec4(tmpvar_28)) * _Color);
  color_4 = tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0), tmpvar_28);
  vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5));
  vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz)));
  vec4 tmpvar_33;
  tmpvar_33 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  float tmpvar_34;
  if ((tmpvar_33.x < (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))) {
    tmpvar_34 = _LightShadowData.x;
  } else {
    tmpvar_34 = 1.0;
  };
  vec3 tmpvar_35;
  tmpvar_35 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_30) * 2.0) * (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_31.w) * tmpvar_32.w) * tmpvar_34)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_4.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_35));
  color_4.xyz = (color_4.xyz * tmpvar_35);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 51 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c10
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
mad o7.x, r0, r0.y, c20
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov o6.xyz, -r1
add r1.xyz, -r0, c16
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7);
  lowp vec4 tmpvar_71;
  highp vec2 P_72;
  P_72 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_71 = texture2D (_LightTexture0, P_72);
  highp float tmpvar_73;
  tmpvar_73 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_74;
  tmpvar_74 = texture2D (_LightTextureB0, vec2(tmpvar_73));
  lowp float tmpvar_75;
  mediump float shadow_76;
  lowp vec4 tmpvar_77;
  tmpvar_77 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  highp float tmpvar_78;
  if ((tmpvar_77.x < (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))) {
    tmpvar_78 = _LightShadowData.x;
  } else {
    tmpvar_78 = 1.0;
  };
  shadow_76 = tmpvar_78;
  tmpvar_75 = shadow_76;
  highp float tmpvar_79;
  tmpvar_79 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_71.w) * tmpvar_74.w) * tmpvar_75);
  atten_3 = tmpvar_79;
  mediump float tmpvar_80;
  tmpvar_80 = clamp ((((_LightColor0.w * tmpvar_70) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_81;
  tmpvar_81 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_80)), 0.0, 1.0);
  light_2 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_83;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7);
  lowp vec4 tmpvar_71;
  highp vec2 P_72;
  P_72 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_71 = texture2D (_LightTexture0, P_72);
  highp float tmpvar_73;
  tmpvar_73 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_74;
  tmpvar_74 = texture2D (_LightTextureB0, vec2(tmpvar_73));
  lowp float tmpvar_75;
  mediump float shadow_76;
  lowp vec4 tmpvar_77;
  tmpvar_77 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  highp float tmpvar_78;
  if ((tmpvar_77.x < (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))) {
    tmpvar_78 = _LightShadowData.x;
  } else {
    tmpvar_78 = 1.0;
  };
  shadow_76 = tmpvar_78;
  tmpvar_75 = shadow_76;
  highp float tmpvar_79;
  tmpvar_79 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_71.w) * tmpvar_74.w) * tmpvar_75);
  atten_3 = tmpvar_79;
  mediump float tmpvar_80;
  tmpvar_80 = clamp ((((_LightColor0.w * tmpvar_70) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_81;
  tmpvar_81 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_80)), 0.0, 1.0);
  light_2 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_83;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 438
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 414
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 418
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 422
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 426
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 452
#line 472
#line 452
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 456
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 460
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 464
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 468
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 438
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 414
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 418
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 422
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 426
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 452
#line 472
#line 472
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 476
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 480
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 482
lowp vec4 frag( in v2f IN ) {
    #line 484
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 488
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 492
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 496
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 500
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 504
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 508
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 512
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    #line 516
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    #line 520
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    #line 524
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 528
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 532
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 536
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.y = tmpvar_22.y;
  localCoords_2.x = (tmpvar_22.x * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_23;
  norm_1.z = cos((6.28319 * tmpvar_23.x));
  norm_1.x = sin((6.28319 * tmpvar_23.x));
  norm_1.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_1);
  norm_1 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_26;
  tmpvar_26 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_25 * tmpvar_25)));
  float tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_25 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_26, 2.0)))), (float((_OceanRadius >= tmpvar_26)) * float((tmpvar_25 >= 0.0)))));
  float tmpvar_28;
  tmpvar_28 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_16.xy, tmpvar_16.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_18), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_27 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_27)), 0.0, 1.0))))), tmpvar_17, vec4(tmpvar_28)) * _Color);
  color_4.w = tmpvar_29.w;
  vec3 tmpvar_30;
  tmpvar_30 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0), tmpvar_28)) * 2.0) * (((float((xlv_TEXCOORD2.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x * (1.0 - _LightShadowData.x))))), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_4.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_30));
  color_4.xyz = (color_4.xyz * tmpvar_30);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 51 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c10
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
mad o7.x, r0, r0.y, c20
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov o6.xyz, -r1
add r1.xyz, -r0, c16
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  lowp vec4 tmpvar_70;
  highp vec2 P_71;
  P_71 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_70 = texture2D (_LightTexture0, P_71);
  highp float tmpvar_72;
  tmpvar_72 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture2D (_LightTextureB0, vec2(tmpvar_72));
  lowp float tmpvar_74;
  mediump float shadow_75;
  lowp float tmpvar_76;
  tmpvar_76 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD3);
  shadow_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (_LightShadowData.x + (shadow_75 * (1.0 - _LightShadowData.x)));
  shadow_75 = tmpvar_77;
  tmpvar_74 = shadow_75;
  highp float tmpvar_78;
  tmpvar_78 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_70.w) * tmpvar_73.w) * tmpvar_74);
  atten_3 = tmpvar_78;
  mediump float tmpvar_79;
  tmpvar_79 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_80;
  tmpvar_80 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_79)), 0.0, 1.0);
  light_2 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_82;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 415
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 419
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 423
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 427
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 453
#line 473
#line 453
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 457
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 461
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 465
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 469
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 415
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 419
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 423
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 427
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 453
#line 473
#line 473
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 477
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 481
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 483
lowp vec4 frag( in v2f IN ) {
    #line 485
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 489
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 493
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 497
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 501
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 505
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 509
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 513
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    #line 517
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    #line 521
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    #line 525
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 529
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 533
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 537
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex).xyz;
  vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_4, p_4));
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = gl_Normal;
  vec4 tmpvar_6;
  tmpvar_6.x = gl_MultiTexCoord0.x;
  tmpvar_6.y = gl_MultiTexCoord0.y;
  tmpvar_6.z = gl_MultiTexCoord1.x;
  tmpvar_6.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_7;
  tmpvar_7 = -(normalize(tmpvar_6).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_8;
  tmpvar_8 = dot (tmpvar_7, normalize(_SunDir));
  vec4 o_9;
  vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_2 * 0.5);
  vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_8)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_8)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_3 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.y = tmpvar_22.y;
  localCoords_2.x = (tmpvar_22.x * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_23;
  norm_1.z = cos((6.28319 * tmpvar_23.x));
  norm_1.x = sin((6.28319 * tmpvar_23.x));
  norm_1.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_1);
  norm_1 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_26;
  tmpvar_26 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_25 * tmpvar_25)));
  float tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_25 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_26, 2.0)))), (float((_OceanRadius >= tmpvar_26)) * float((tmpvar_25 >= 0.0)))));
  float tmpvar_28;
  tmpvar_28 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_16.xy, tmpvar_16.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_18), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_27 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_27)), 0.0, 1.0))))), tmpvar_17, vec4(tmpvar_28)) * _Color);
  color_4.w = tmpvar_29.w;
  vec3 tmpvar_30;
  tmpvar_30 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0), tmpvar_28)) * 2.0) * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_4.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_30));
  color_4.xyz = (color_4.xyz * tmpvar_30);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Matrix 4 [_Object2World]
Vector 11 [_SunDir]
Vector 12 [_PlanetOrigin]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
def c13, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c14, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c11, c11
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c11
dp3 r1.w, -r1, r0
mov o5.xyz, -r1
mov r0.xyz, v2
mov r0.w, c13.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c13.z
dp3 r0.x, r2, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
add r2.w, r0.y, c13
mul_sat r0.z, -r1.w, c13.y
mad o6.x, r0.z, r2.w, c14.y
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r2.xyz, r0.xyww, c14.x
mul r2.y, r2, c9.x
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
mov o0, r0
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o8.xyz, r0.x, -r1
mov r1.xyz, c12
mad o3.xy, r2.z, c10.zwzw, r2
mov o1, v1
mov o3.zw, r0
mov o2.xyz, v2
rcp o2.w, r0.x
add o7.xyz, -c8, r1
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  mediump float sphereCheck_7;
  mediump float detailLevel_8;
  mediump vec3 norm_9;
  highp vec2 localCoords_10;
  mediump vec4 encnorm_11;
  mediump vec4 vert_12;
  mediump vec4 detail_13;
  mediump float nylerp_14;
  mediump vec3 detailCoords_15;
  mediump float zxlerp_16;
  mediump float vertLerp_17;
  mediump vec4 main_18;
  highp vec2 uv_19;
  mediump vec4 color_20;
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * r_21));
  uv_19.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_29;
  tmpvar_29 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  main_18 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_35;
  tmpvar_35 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_34), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = abs(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_36.x) - tmpvar_36.z)), 0.0, 1.0);
  zxlerp_16 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_36.zxy, tmpvar_36, vec3(zxlerp_16));
  detailCoords_15 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (floor(((1.0 + tmpvar_36.y) - mix (tmpvar_36.z, tmpvar_36.x, zxlerp_16))), 0.0, 1.0);
  nylerp_14 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (detailCoords_15, tmpvar_36.yxz, vec3(nylerp_14));
  detailCoords_15 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = abs(detailCoords_15.x);
  highp vec2 coord_42;
  coord_42 = ((((0.5 * detailCoords_15.zy) / tmpvar_41) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2DGradEXT (_midTex, coord_42, tmpvar_32.xy, tmpvar_32.zw);
  detail_13 = tmpvar_43;
  mediump float tmpvar_44;
  tmpvar_44 = abs(detailCoords_15.x);
  highp vec2 coord_45;
  coord_45 = ((((0.5 * detailCoords_15.zy) / tmpvar_44) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_steepTex, coord_45, tmpvar_32.xy, tmpvar_32.zw);
  vert_12 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (vert_12, detail_13, vec4(vertLerp_17));
  detail_13 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  encnorm_11 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_11.wy;
  localCoords_10 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_10 - vec2(0.5, 0.5));
  localCoords_10.y = tmpvar_50.y;
  localCoords_10.x = (tmpvar_50.x * 0.5);
  uv_19.x = (uv_19.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_19 + localCoords_10);
  uv_19 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_9.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_9.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_9.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_9);
  norm_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_58;
  tmpvar_58 = (xlv_TEXCOORD0 * tmpvar_57);
  color_20 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_60;
  tmpvar_60 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_59 * tmpvar_59)));
  highp float tmpvar_61;
  tmpvar_61 = (float((_OceanRadius >= tmpvar_60)) * float((tmpvar_59 >= 0.0)));
  sphereCheck_7 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_59 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_60, 2.0)))), sphereCheck_7));
  highp vec4 tmpvar_63;
  tmpvar_63 = mix (color_20, _OceanColor, vec4((clamp ((tmpvar_62 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_62)), 0.0, 1.0)))));
  color_20 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (mix (color_20, main_18, vec4(handoff_6)) * _Color);
  color_20.w = tmpvar_65.w;
  highp vec3 tmpvar_66;
  tmpvar_66 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_68;
  lowp float tmpvar_69;
  mediump float lightShadowDataX_70;
  highp float dist_71;
  lowp float tmpvar_72;
  tmpvar_72 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_71 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = _LightShadowData.x;
  lightShadowDataX_70 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = max (float((dist_71 > (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w))), lightShadowDataX_70);
  tmpvar_69 = tmpvar_74;
  mediump float tmpvar_75;
  tmpvar_75 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_69), 0.0, 1.0);
  highp vec3 tmpvar_76;
  tmpvar_76 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_75)), 0.0, 1.0);
  light_2 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (tmpvar_65.xyz + (_Albedo * light_2));
  color_20.xyz = tmpvar_78;
  color_20.xyz = (color_20.xyz * light_2);
  color_20.w = 1.0;
  tmpvar_1 = color_20;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 tmpvar_6;
  tmpvar_6 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_7;
  p_7 = (tmpvar_6 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_7, p_7));
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_1;
  highp vec4 tmpvar_9;
  tmpvar_9.x = _glesMultiTexCoord0.x;
  tmpvar_9.y = _glesMultiTexCoord0.y;
  tmpvar_9.z = _glesMultiTexCoord1.x;
  tmpvar_9.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_10;
  tmpvar_10 = -(normalize(tmpvar_9).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_11;
  tmpvar_11 = normalize(_SunDir);
  highp float tmpvar_12;
  tmpvar_12 = dot (tmpvar_10, tmpvar_11);
  NdotL_2 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_13;
  highp vec4 o_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = o_14;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_8).xyz);
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_6 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  mediump float sphereCheck_7;
  mediump float detailLevel_8;
  mediump vec3 norm_9;
  highp vec2 localCoords_10;
  mediump vec4 encnorm_11;
  mediump vec4 vert_12;
  mediump vec4 detail_13;
  mediump float nylerp_14;
  mediump vec3 detailCoords_15;
  mediump float zxlerp_16;
  mediump float vertLerp_17;
  mediump vec4 main_18;
  highp vec2 uv_19;
  mediump vec4 color_20;
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * r_21));
  uv_19.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_29;
  tmpvar_29 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  main_18 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_35;
  tmpvar_35 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_34), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = abs(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_36.x) - tmpvar_36.z)), 0.0, 1.0);
  zxlerp_16 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_36.zxy, tmpvar_36, vec3(zxlerp_16));
  detailCoords_15 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (floor(((1.0 + tmpvar_36.y) - mix (tmpvar_36.z, tmpvar_36.x, zxlerp_16))), 0.0, 1.0);
  nylerp_14 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (detailCoords_15, tmpvar_36.yxz, vec3(nylerp_14));
  detailCoords_15 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = abs(detailCoords_15.x);
  highp vec2 coord_42;
  coord_42 = ((((0.5 * detailCoords_15.zy) / tmpvar_41) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2DGradEXT (_midTex, coord_42, tmpvar_32.xy, tmpvar_32.zw);
  detail_13 = tmpvar_43;
  mediump float tmpvar_44;
  tmpvar_44 = abs(detailCoords_15.x);
  highp vec2 coord_45;
  coord_45 = ((((0.5 * detailCoords_15.zy) / tmpvar_44) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_steepTex, coord_45, tmpvar_32.xy, tmpvar_32.zw);
  vert_12 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (vert_12, detail_13, vec4(vertLerp_17));
  detail_13 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  encnorm_11 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_11.wy;
  localCoords_10 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_10 - vec2(0.5, 0.5));
  localCoords_10.y = tmpvar_50.y;
  localCoords_10.x = (tmpvar_50.x * 0.5);
  uv_19.x = (uv_19.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_19 + localCoords_10);
  uv_19 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_9.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_9.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_9.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_9);
  norm_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_58;
  tmpvar_58 = (xlv_TEXCOORD0 * tmpvar_57);
  color_20 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_60;
  tmpvar_60 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_59 * tmpvar_59)));
  highp float tmpvar_61;
  tmpvar_61 = (float((_OceanRadius >= tmpvar_60)) * float((tmpvar_59 >= 0.0)));
  sphereCheck_7 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_59 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_60, 2.0)))), sphereCheck_7));
  highp vec4 tmpvar_63;
  tmpvar_63 = mix (color_20, _OceanColor, vec4((clamp ((tmpvar_62 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_62)), 0.0, 1.0)))));
  color_20 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (mix (color_20, main_18, vec4(handoff_6)) * _Color);
  color_20.w = tmpvar_65.w;
  highp vec3 tmpvar_66;
  tmpvar_66 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_68;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2);
  mediump float tmpvar_70;
  tmpvar_70 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_69.x), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (tmpvar_65.xyz + (_Albedo * light_2));
  color_20.xyz = tmpvar_73;
  color_20.xyz = (color_20.xyz * light_2);
  color_20.w = 1.0;
  tmpvar_1 = color_20;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 405
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 409
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 413
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 417
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 442
#line 471
#line 442
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 446
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 450
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 454
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 459
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 405
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 409
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 413
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 417
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 442
#line 471
#line 461
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 463
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    #line 467
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 471
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 475
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 479
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    #line 483
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    #line 487
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 491
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    #line 495
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    #line 499
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    #line 503
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    #line 507
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 511
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 515
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 519
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 523
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex).xyz;
  vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_4, p_4));
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = gl_Normal;
  vec4 tmpvar_6;
  tmpvar_6.x = gl_MultiTexCoord0.x;
  tmpvar_6.y = gl_MultiTexCoord0.y;
  tmpvar_6.z = gl_MultiTexCoord1.x;
  tmpvar_6.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_7;
  tmpvar_7 = -(normalize(tmpvar_6).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_8;
  tmpvar_8 = dot (tmpvar_7, normalize(_SunDir));
  vec4 o_9;
  vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_2 * 0.5);
  vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_8)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_8)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_3 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.y = tmpvar_22.y;
  localCoords_2.x = (tmpvar_22.x * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_23;
  norm_1.z = cos((6.28319 * tmpvar_23.x));
  norm_1.x = sin((6.28319 * tmpvar_23.x));
  norm_1.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_1);
  norm_1 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_26;
  tmpvar_26 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_25 * tmpvar_25)));
  float tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_25 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_26, 2.0)))), (float((_OceanRadius >= tmpvar_26)) * float((tmpvar_25 >= 0.0)))));
  float tmpvar_28;
  tmpvar_28 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_16.xy, tmpvar_16.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_18), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_27 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_27)), 0.0, 1.0))))), tmpvar_17, vec4(tmpvar_28)) * _Color);
  color_4.w = tmpvar_29.w;
  vec3 tmpvar_30;
  tmpvar_30 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0), tmpvar_28)) * 2.0) * (texture2D (_LightTexture0, xlv_TEXCOORD2).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_4.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_30));
  color_4.xyz = (color_4.xyz * tmpvar_30);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 15 [_SunDir]
Vector 16 [_PlanetOrigin]
"vs_3_0
; 50 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c17, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c18, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r1.x, c15, c15
rsq r1.x, r1.x
mov r1.w, c17.x
mov r0.xy, v3
mov r0.zw, v4.xyxy
dp4 r0.w, r0, r0
rsq r0.w, r0.w
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c15
dp3 r0.w, -r0, r1
mov r1.xyz, v2
mov o6.xyz, -r0
add r2.w, r0, c17.z
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
dp3 r1.x, r2, r2
frc r1.y, r2.w
add_sat r1.y, r2.w, -r1
rsq r1.x, r1.x
mul o5.xyz, r1.x, r2
dp4 r0.x, v0, c4
add r1.w, r1.y, c17
mul_sat r0.w, -r0, c17.y
mad o7.x, r0.w, r1.w, c18.y
dp4 r2.w, v0, c3
dp4 r2.z, v0, c2
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
dp4 r2.x, v0, c0
dp4 r2.y, v0, c1
mul r1.xyz, r2.xyww, c18.x
mul r1.y, r1, c13.x
mad o4.xy, r1.z, c14.zwzw, r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
rsq r0.x, r1.w
mul o9.xyz, r0.x, -r1
mov r1.xyz, c16
mov o0, r2
mov o1, v1
mov o4.zw, r2
mov o2.xyz, v2
rcp o2.w, r0.x
add o8.xyz, -c12, r1
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  mediump float sphereCheck_7;
  mediump float detailLevel_8;
  mediump vec3 norm_9;
  highp vec2 localCoords_10;
  mediump vec4 encnorm_11;
  mediump vec4 vert_12;
  mediump vec4 detail_13;
  mediump float nylerp_14;
  mediump vec3 detailCoords_15;
  mediump float zxlerp_16;
  mediump float vertLerp_17;
  mediump vec4 main_18;
  highp vec2 uv_19;
  mediump vec4 color_20;
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * r_21));
  uv_19.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_29;
  tmpvar_29 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  main_18 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_35;
  tmpvar_35 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_34), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = abs(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_36.x) - tmpvar_36.z)), 0.0, 1.0);
  zxlerp_16 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_36.zxy, tmpvar_36, vec3(zxlerp_16));
  detailCoords_15 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (floor(((1.0 + tmpvar_36.y) - mix (tmpvar_36.z, tmpvar_36.x, zxlerp_16))), 0.0, 1.0);
  nylerp_14 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (detailCoords_15, tmpvar_36.yxz, vec3(nylerp_14));
  detailCoords_15 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = abs(detailCoords_15.x);
  highp vec2 coord_42;
  coord_42 = ((((0.5 * detailCoords_15.zy) / tmpvar_41) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2DGradEXT (_midTex, coord_42, tmpvar_32.xy, tmpvar_32.zw);
  detail_13 = tmpvar_43;
  mediump float tmpvar_44;
  tmpvar_44 = abs(detailCoords_15.x);
  highp vec2 coord_45;
  coord_45 = ((((0.5 * detailCoords_15.zy) / tmpvar_44) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_steepTex, coord_45, tmpvar_32.xy, tmpvar_32.zw);
  vert_12 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (vert_12, detail_13, vec4(vertLerp_17));
  detail_13 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  encnorm_11 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_11.wy;
  localCoords_10 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_10 - vec2(0.5, 0.5));
  localCoords_10.y = tmpvar_50.y;
  localCoords_10.x = (tmpvar_50.x * 0.5);
  uv_19.x = (uv_19.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_19 + localCoords_10);
  uv_19 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_9.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_9.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_9.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_9);
  norm_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_58;
  tmpvar_58 = (xlv_TEXCOORD0 * tmpvar_57);
  color_20 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_60;
  tmpvar_60 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_59 * tmpvar_59)));
  highp float tmpvar_61;
  tmpvar_61 = (float((_OceanRadius >= tmpvar_60)) * float((tmpvar_59 >= 0.0)));
  sphereCheck_7 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_59 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_60, 2.0)))), sphereCheck_7));
  highp vec4 tmpvar_63;
  tmpvar_63 = mix (color_20, _OceanColor, vec4((clamp ((tmpvar_62 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_62)), 0.0, 1.0)))));
  color_20 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (mix (color_20, main_18, vec4(handoff_6)) * _Color);
  color_20.w = tmpvar_65.w;
  highp vec3 tmpvar_66;
  tmpvar_66 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_68;
  lowp float tmpvar_69;
  mediump float lightShadowDataX_70;
  highp float dist_71;
  lowp float tmpvar_72;
  tmpvar_72 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_71 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = _LightShadowData.x;
  lightShadowDataX_70 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = max (float((dist_71 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_70);
  tmpvar_69 = tmpvar_74;
  lowp float tmpvar_75;
  tmpvar_75 = (texture2D (_LightTexture0, xlv_TEXCOORD2).w * tmpvar_69);
  mediump float tmpvar_76;
  tmpvar_76 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_75), 0.0, 1.0);
  highp vec3 tmpvar_77;
  tmpvar_77 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_76)), 0.0, 1.0);
  light_2 = tmpvar_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (tmpvar_65.xyz + (_Albedo * light_2));
  color_20.xyz = tmpvar_79;
  color_20.xyz = (color_20.xyz * light_2);
  color_20.w = 1.0;
  tmpvar_1 = color_20;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 tmpvar_6;
  tmpvar_6 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_7;
  p_7 = (tmpvar_6 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_7, p_7));
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_1;
  highp vec4 tmpvar_9;
  tmpvar_9.x = _glesMultiTexCoord0.x;
  tmpvar_9.y = _glesMultiTexCoord0.y;
  tmpvar_9.z = _glesMultiTexCoord1.x;
  tmpvar_9.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_10;
  tmpvar_10 = -(normalize(tmpvar_9).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_11;
  tmpvar_11 = normalize(_SunDir);
  highp float tmpvar_12;
  tmpvar_12 = dot (tmpvar_10, tmpvar_11);
  NdotL_2 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_13;
  highp vec4 o_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD3 = o_14;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_8).xyz);
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_6 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  mediump float sphereCheck_7;
  mediump float detailLevel_8;
  mediump vec3 norm_9;
  highp vec2 localCoords_10;
  mediump vec4 encnorm_11;
  mediump vec4 vert_12;
  mediump vec4 detail_13;
  mediump float nylerp_14;
  mediump vec3 detailCoords_15;
  mediump float zxlerp_16;
  mediump float vertLerp_17;
  mediump vec4 main_18;
  highp vec2 uv_19;
  mediump vec4 color_20;
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * r_21));
  uv_19.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_29;
  tmpvar_29 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_MainTex, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  main_18 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34.w = 0.0;
  tmpvar_34.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_35;
  tmpvar_35 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_34), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = abs(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_36.x) - tmpvar_36.z)), 0.0, 1.0);
  zxlerp_16 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_36.zxy, tmpvar_36, vec3(zxlerp_16));
  detailCoords_15 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (floor(((1.0 + tmpvar_36.y) - mix (tmpvar_36.z, tmpvar_36.x, zxlerp_16))), 0.0, 1.0);
  nylerp_14 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (detailCoords_15, tmpvar_36.yxz, vec3(nylerp_14));
  detailCoords_15 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = abs(detailCoords_15.x);
  highp vec2 coord_42;
  coord_42 = ((((0.5 * detailCoords_15.zy) / tmpvar_41) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2DGradEXT (_midTex, coord_42, tmpvar_32.xy, tmpvar_32.zw);
  detail_13 = tmpvar_43;
  mediump float tmpvar_44;
  tmpvar_44 = abs(detailCoords_15.x);
  highp vec2 coord_45;
  coord_45 = ((((0.5 * detailCoords_15.zy) / tmpvar_44) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_steepTex, coord_45, tmpvar_32.xy, tmpvar_32.zw);
  vert_12 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (vert_12, detail_13, vec4(vertLerp_17));
  detail_13 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_19, tmpvar_32.xy, tmpvar_32.zw);
  encnorm_11 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_11.wy;
  localCoords_10 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_10 - vec2(0.5, 0.5));
  localCoords_10.y = tmpvar_50.y;
  localCoords_10.x = (tmpvar_50.x * 0.5);
  uv_19.x = (uv_19.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_19 + localCoords_10);
  uv_19 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_9.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_9.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_9.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_9);
  norm_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_58;
  tmpvar_58 = (xlv_TEXCOORD0 * tmpvar_57);
  color_20 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_60;
  tmpvar_60 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_59 * tmpvar_59)));
  highp float tmpvar_61;
  tmpvar_61 = (float((_OceanRadius >= tmpvar_60)) * float((tmpvar_59 >= 0.0)));
  sphereCheck_7 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_59 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_60, 2.0)))), sphereCheck_7));
  highp vec4 tmpvar_63;
  tmpvar_63 = mix (color_20, _OceanColor, vec4((clamp ((tmpvar_62 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_62)), 0.0, 1.0)))));
  color_20 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (mix (color_20, main_18, vec4(handoff_6)) * _Color);
  color_20.w = tmpvar_65.w;
  highp vec3 tmpvar_66;
  tmpvar_66 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_68;
  lowp float tmpvar_69;
  tmpvar_69 = (texture2D (_LightTexture0, xlv_TEXCOORD2).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x);
  mediump float tmpvar_70;
  tmpvar_70 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_69), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (tmpvar_65.xyz + (_Albedo * light_2));
  color_20.xyz = tmpvar_73;
  color_20.xyz = (color_20.xyz * light_2);
  color_20.w = 1.0;
  tmpvar_1 = color_20;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 407
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 411
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 415
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 419
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 445
#line 465
#line 445
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 449
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 453
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 457
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 461
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 407
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 411
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 415
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 419
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 445
#line 465
#line 465
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 469
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 473
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 475
lowp vec4 frag( in v2f IN ) {
    #line 477
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 481
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 485
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 489
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 493
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 497
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 501
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 505
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    #line 509
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    #line 513
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    #line 517
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 521
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 525
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 529
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.y = tmpvar_22.y;
  localCoords_2.x = (tmpvar_22.x * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_23;
  norm_1.z = cos((6.28319 * tmpvar_23.x));
  norm_1.x = sin((6.28319 * tmpvar_23.x));
  norm_1.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_1);
  norm_1 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_26;
  tmpvar_26 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_25 * tmpvar_25)));
  float tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_25 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_26, 2.0)))), (float((_OceanRadius >= tmpvar_26)) * float((tmpvar_25 >= 0.0)))));
  float tmpvar_28;
  tmpvar_28 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_16.xy, tmpvar_16.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_18), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_27 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_27)), 0.0, 1.0))))), tmpvar_17, vec4(tmpvar_28)) * _Color);
  color_4 = tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0), tmpvar_28);
  vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  float tmpvar_32;
  tmpvar_32 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  float tmpvar_33;
  tmpvar_33 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD3), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_34;
  if ((tmpvar_33 < tmpvar_32)) {
    tmpvar_34 = _LightShadowData.x;
  } else {
    tmpvar_34 = 1.0;
  };
  vec3 tmpvar_35;
  tmpvar_35 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_30) * 2.0) * (tmpvar_31.w * tmpvar_34)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_4.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_35));
  color_4.xyz = (color_4.xyz * tmpvar_35);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
mad o7.x, r0, r0.y, c17
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
mov o6.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
mul o9.xyz, r1.w, -r1
mov r1.xyz, c15
mov o1, v1
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r0, -c13
add o8.xyz, -c12, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_72;
  tmpvar_72 = texture2D (_LightTexture0, vec2(tmpvar_71));
  highp float tmpvar_73;
  tmpvar_73 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_74 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = dot (packDist_74, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_77;
  if ((tmpvar_76 < tmpvar_73)) {
    tmpvar_77 = _LightShadowData.x;
  } else {
    tmpvar_77 = 1.0;
  };
  highp float tmpvar_78;
  tmpvar_78 = (tmpvar_72.w * tmpvar_77);
  atten_3 = tmpvar_78;
  mediump float tmpvar_79;
  tmpvar_79 = clamp ((((_LightColor0.w * tmpvar_70) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_80;
  tmpvar_80 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_79)), 0.0, 1.0);
  light_2 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_82;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_72;
  tmpvar_72 = texture2D (_LightTexture0, vec2(tmpvar_71));
  highp float tmpvar_73;
  tmpvar_73 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_74 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = dot (packDist_74, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_77;
  if ((tmpvar_76 < tmpvar_73)) {
    tmpvar_77 = _LightShadowData.x;
  } else {
    tmpvar_77 = 1.0;
  };
  highp float tmpvar_78;
  tmpvar_78 = (tmpvar_72.w * tmpvar_77);
  atten_3 = tmpvar_78;
  mediump float tmpvar_79;
  tmpvar_79 = clamp ((((_LightColor0.w * tmpvar_70) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_80;
  tmpvar_80 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_79)), 0.0, 1.0);
  light_2 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_82;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 426
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 412
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 416
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 420
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 424
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 450
#line 470
#line 450
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 454
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 458
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 462
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 466
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 426
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 412
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 416
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 420
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 424
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 450
#line 470
#line 470
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 474
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 478
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 480
lowp vec4 frag( in v2f IN ) {
    #line 482
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 486
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 490
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 494
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 498
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 502
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 506
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 510
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    #line 514
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    #line 518
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    #line 522
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 526
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 530
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 534
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.y = tmpvar_22.y;
  localCoords_2.x = (tmpvar_22.x * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_23;
  norm_1.z = cos((6.28319 * tmpvar_23.x));
  norm_1.x = sin((6.28319 * tmpvar_23.x));
  norm_1.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_1);
  norm_1 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_26;
  tmpvar_26 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_25 * tmpvar_25)));
  float tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_25 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_26, 2.0)))), (float((_OceanRadius >= tmpvar_26)) * float((tmpvar_25 >= 0.0)))));
  float tmpvar_28;
  tmpvar_28 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_16.xy, tmpvar_16.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_18), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_27 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_27)), 0.0, 1.0))))), tmpvar_17, vec4(tmpvar_28)) * _Color);
  color_4 = tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0), tmpvar_28);
  vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  vec4 tmpvar_32;
  tmpvar_32 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  float tmpvar_33;
  tmpvar_33 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  float tmpvar_34;
  tmpvar_34 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD3), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_35;
  if ((tmpvar_34 < tmpvar_33)) {
    tmpvar_35 = _LightShadowData.x;
  } else {
    tmpvar_35 = 1.0;
  };
  vec3 tmpvar_36;
  tmpvar_36 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_30) * 2.0) * ((tmpvar_31.w * tmpvar_32.w) * tmpvar_35)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_4.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_36));
  color_4.xyz = (color_4.xyz * tmpvar_36);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
mad o7.x, r0, r0.y, c17
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
mov o6.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
mul o9.xyz, r1.w, -r1
mov r1.xyz, c15
mov o1, v1
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r0, -c13
add o8.xyz, -c12, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_72;
  tmpvar_72 = texture2D (_LightTextureB0, vec2(tmpvar_71));
  lowp vec4 tmpvar_73;
  tmpvar_73 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_74;
  tmpvar_74 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_75;
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = dot (packDist_75, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_78;
  if ((tmpvar_77 < tmpvar_74)) {
    tmpvar_78 = _LightShadowData.x;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  tmpvar_79 = ((tmpvar_72.w * tmpvar_73.w) * tmpvar_78);
  atten_3 = tmpvar_79;
  mediump float tmpvar_80;
  tmpvar_80 = clamp ((((_LightColor0.w * tmpvar_70) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_81;
  tmpvar_81 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_80)), 0.0, 1.0);
  light_2 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_83;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_72;
  tmpvar_72 = texture2D (_LightTextureB0, vec2(tmpvar_71));
  lowp vec4 tmpvar_73;
  tmpvar_73 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_74;
  tmpvar_74 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_75;
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = dot (packDist_75, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_78;
  if ((tmpvar_77 < tmpvar_74)) {
    tmpvar_78 = _LightShadowData.x;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  tmpvar_79 = ((tmpvar_72.w * tmpvar_73.w) * tmpvar_78);
  atten_3 = tmpvar_79;
  mediump float tmpvar_80;
  tmpvar_80 = clamp ((((_LightColor0.w * tmpvar_70) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_81;
  tmpvar_81 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_80)), 0.0, 1.0);
  light_2 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_83;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 437
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 413
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 417
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 421
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 425
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 451
#line 471
#line 451
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 455
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 459
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 463
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 467
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 437
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 413
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 417
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 421
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 425
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 451
#line 471
#line 471
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 475
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 479
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 481
lowp vec4 frag( in v2f IN ) {
    #line 483
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 487
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 491
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 495
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 499
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 503
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 507
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 511
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    #line 515
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    #line 519
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    #line 523
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 527
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 531
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 535
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.y = tmpvar_22.y;
  localCoords_2.x = (tmpvar_22.x * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_23;
  norm_1.z = cos((6.28319 * tmpvar_23.x));
  norm_1.x = sin((6.28319 * tmpvar_23.x));
  norm_1.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_1);
  norm_1 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_26;
  tmpvar_26 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_25 * tmpvar_25)));
  float tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_25 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_26, 2.0)))), (float((_OceanRadius >= tmpvar_26)) * float((tmpvar_25 >= 0.0)))));
  float tmpvar_28;
  tmpvar_28 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_16.xy, tmpvar_16.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_18), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_27 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_27)), 0.0, 1.0))))), tmpvar_17, vec4(tmpvar_28)) * _Color);
  color_4 = tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0), tmpvar_28);
  vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5));
  vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz)));
  vec4 shadowVals_33;
  vec3 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  shadowVals_33.x = texture2D (_ShadowMapTexture, (tmpvar_34.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_33.y = texture2D (_ShadowMapTexture, (tmpvar_34.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_33.z = texture2D (_ShadowMapTexture, (tmpvar_34.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_33.w = texture2D (_ShadowMapTexture, (tmpvar_34.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_35;
  tmpvar_35 = lessThan (shadowVals_33, tmpvar_34.zzzz);
  vec4 tmpvar_36;
  tmpvar_36 = _LightShadowData.xxxx;
  float tmpvar_37;
  if (tmpvar_35.x) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = 1.0;
  };
  float tmpvar_38;
  if (tmpvar_35.y) {
    tmpvar_38 = tmpvar_36.y;
  } else {
    tmpvar_38 = 1.0;
  };
  float tmpvar_39;
  if (tmpvar_35.z) {
    tmpvar_39 = tmpvar_36.z;
  } else {
    tmpvar_39 = 1.0;
  };
  float tmpvar_40;
  if (tmpvar_35.w) {
    tmpvar_40 = tmpvar_36.w;
  } else {
    tmpvar_40 = 1.0;
  };
  vec4 tmpvar_41;
  tmpvar_41.x = tmpvar_37;
  tmpvar_41.y = tmpvar_38;
  tmpvar_41.z = tmpvar_39;
  tmpvar_41.w = tmpvar_40;
  vec3 tmpvar_42;
  tmpvar_42 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_30) * 2.0) * (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_31.w) * tmpvar_32.w) * dot (tmpvar_41, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_4.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_42));
  color_4.xyz = (color_4.xyz * tmpvar_42);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 51 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c10
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
mad o7.x, r0, r0.y, c20
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov o6.xyz, -r1
add r1.xyz, -r0, c16
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7);
  lowp vec4 tmpvar_71;
  highp vec2 P_72;
  P_72 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_71 = texture2D (_LightTexture0, P_72);
  highp float tmpvar_73;
  tmpvar_73 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_74;
  tmpvar_74 = texture2D (_LightTextureB0, vec2(tmpvar_73));
  lowp float tmpvar_75;
  mediump vec4 shadows_76;
  highp vec4 shadowVals_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  highp vec2 P_79;
  P_79 = (tmpvar_78.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_80;
  tmpvar_80 = texture2D (_ShadowMapTexture, P_79).x;
  shadowVals_77.x = tmpvar_80;
  highp vec2 P_81;
  P_81 = (tmpvar_78.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_82;
  tmpvar_82 = texture2D (_ShadowMapTexture, P_81).x;
  shadowVals_77.y = tmpvar_82;
  highp vec2 P_83;
  P_83 = (tmpvar_78.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_84;
  tmpvar_84 = texture2D (_ShadowMapTexture, P_83).x;
  shadowVals_77.z = tmpvar_84;
  highp vec2 P_85;
  P_85 = (tmpvar_78.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_86;
  tmpvar_86 = texture2D (_ShadowMapTexture, P_85).x;
  shadowVals_77.w = tmpvar_86;
  bvec4 tmpvar_87;
  tmpvar_87 = lessThan (shadowVals_77, tmpvar_78.zzzz);
  highp vec4 tmpvar_88;
  tmpvar_88 = _LightShadowData.xxxx;
  highp float tmpvar_89;
  if (tmpvar_87.x) {
    tmpvar_89 = tmpvar_88.x;
  } else {
    tmpvar_89 = 1.0;
  };
  highp float tmpvar_90;
  if (tmpvar_87.y) {
    tmpvar_90 = tmpvar_88.y;
  } else {
    tmpvar_90 = 1.0;
  };
  highp float tmpvar_91;
  if (tmpvar_87.z) {
    tmpvar_91 = tmpvar_88.z;
  } else {
    tmpvar_91 = 1.0;
  };
  highp float tmpvar_92;
  if (tmpvar_87.w) {
    tmpvar_92 = tmpvar_88.w;
  } else {
    tmpvar_92 = 1.0;
  };
  highp vec4 tmpvar_93;
  tmpvar_93.x = tmpvar_89;
  tmpvar_93.y = tmpvar_90;
  tmpvar_93.z = tmpvar_91;
  tmpvar_93.w = tmpvar_92;
  shadows_76 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = dot (shadows_76, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_75 = tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_71.w) * tmpvar_74.w) * tmpvar_75);
  atten_3 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = clamp ((((_LightColor0.w * tmpvar_70) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_96)), 0.0, 1.0);
  light_2 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_99;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7);
  lowp vec4 tmpvar_71;
  highp vec2 P_72;
  P_72 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_71 = texture2D (_LightTexture0, P_72);
  highp float tmpvar_73;
  tmpvar_73 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_74;
  tmpvar_74 = texture2D (_LightTextureB0, vec2(tmpvar_73));
  lowp float tmpvar_75;
  mediump vec4 shadows_76;
  highp vec4 shadowVals_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  highp vec2 P_79;
  P_79 = (tmpvar_78.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_80;
  tmpvar_80 = texture2D (_ShadowMapTexture, P_79).x;
  shadowVals_77.x = tmpvar_80;
  highp vec2 P_81;
  P_81 = (tmpvar_78.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_82;
  tmpvar_82 = texture2D (_ShadowMapTexture, P_81).x;
  shadowVals_77.y = tmpvar_82;
  highp vec2 P_83;
  P_83 = (tmpvar_78.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_84;
  tmpvar_84 = texture2D (_ShadowMapTexture, P_83).x;
  shadowVals_77.z = tmpvar_84;
  highp vec2 P_85;
  P_85 = (tmpvar_78.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_86;
  tmpvar_86 = texture2D (_ShadowMapTexture, P_85).x;
  shadowVals_77.w = tmpvar_86;
  bvec4 tmpvar_87;
  tmpvar_87 = lessThan (shadowVals_77, tmpvar_78.zzzz);
  highp vec4 tmpvar_88;
  tmpvar_88 = _LightShadowData.xxxx;
  highp float tmpvar_89;
  if (tmpvar_87.x) {
    tmpvar_89 = tmpvar_88.x;
  } else {
    tmpvar_89 = 1.0;
  };
  highp float tmpvar_90;
  if (tmpvar_87.y) {
    tmpvar_90 = tmpvar_88.y;
  } else {
    tmpvar_90 = 1.0;
  };
  highp float tmpvar_91;
  if (tmpvar_87.z) {
    tmpvar_91 = tmpvar_88.z;
  } else {
    tmpvar_91 = 1.0;
  };
  highp float tmpvar_92;
  if (tmpvar_87.w) {
    tmpvar_92 = tmpvar_88.w;
  } else {
    tmpvar_92 = 1.0;
  };
  highp vec4 tmpvar_93;
  tmpvar_93.x = tmpvar_89;
  tmpvar_93.y = tmpvar_90;
  tmpvar_93.z = tmpvar_91;
  tmpvar_93.w = tmpvar_92;
  shadows_76 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = dot (shadows_76, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_75 = tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_71.w) * tmpvar_74.w) * tmpvar_75);
  atten_3 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = clamp ((((_LightColor0.w * tmpvar_70) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_96)), 0.0, 1.0);
  light_2 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_99;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 446
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 436
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 430
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 434
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 460
#line 480
#line 460
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 464
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 468
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 472
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 476
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 446
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 436
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 430
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 434
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 460
#line 480
#line 480
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 484
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 488
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 490
lowp vec4 frag( in v2f IN ) {
    #line 492
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 496
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 500
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 504
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 508
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 512
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 516
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 520
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    #line 524
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    #line 528
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    #line 532
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 536
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 540
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 544
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.y = tmpvar_22.y;
  localCoords_2.x = (tmpvar_22.x * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_23;
  norm_1.z = cos((6.28319 * tmpvar_23.x));
  norm_1.x = sin((6.28319 * tmpvar_23.x));
  norm_1.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_1);
  norm_1 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_26;
  tmpvar_26 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_25 * tmpvar_25)));
  float tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_25 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_26, 2.0)))), (float((_OceanRadius >= tmpvar_26)) * float((tmpvar_25 >= 0.0)))));
  float tmpvar_28;
  tmpvar_28 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_16.xy, tmpvar_16.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_18), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_27 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_27)), 0.0, 1.0))))), tmpvar_17, vec4(tmpvar_28)) * _Color);
  color_4.w = tmpvar_29.w;
  vec4 shadows_30;
  vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  shadows_30.x = shadow2D (_ShadowMapTexture, (tmpvar_31 + _ShadowOffsets[0].xyz)).x;
  shadows_30.y = shadow2D (_ShadowMapTexture, (tmpvar_31 + _ShadowOffsets[1].xyz)).x;
  shadows_30.z = shadow2D (_ShadowMapTexture, (tmpvar_31 + _ShadowOffsets[2].xyz)).x;
  shadows_30.w = shadow2D (_ShadowMapTexture, (tmpvar_31 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_32;
  tmpvar_32 = (_LightShadowData.xxxx + (shadows_30 * (1.0 - _LightShadowData.xxxx)));
  shadows_30 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0), tmpvar_28)) * 2.0) * (((float((xlv_TEXCOORD2.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz))).w) * dot (tmpvar_32, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_4.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_33));
  color_4.xyz = (color_4.xyz * tmpvar_33);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 51 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c10
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
mad o7.x, r0, r0.y, c20
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov o6.xyz, -r1
add r1.xyz, -r0, c16
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  lowp vec4 tmpvar_70;
  highp vec2 P_71;
  P_71 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_70 = texture2D (_LightTexture0, P_71);
  highp float tmpvar_72;
  tmpvar_72 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture2D (_LightTextureB0, vec2(tmpvar_72));
  lowp float tmpvar_74;
  mediump vec4 shadows_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  highp vec3 coord_77;
  coord_77 = (tmpvar_76 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_78;
  tmpvar_78 = shadow2DEXT (_ShadowMapTexture, coord_77);
  shadows_75.x = tmpvar_78;
  highp vec3 coord_79;
  coord_79 = (tmpvar_76 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_80;
  tmpvar_80 = shadow2DEXT (_ShadowMapTexture, coord_79);
  shadows_75.y = tmpvar_80;
  highp vec3 coord_81;
  coord_81 = (tmpvar_76 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_82;
  tmpvar_82 = shadow2DEXT (_ShadowMapTexture, coord_81);
  shadows_75.z = tmpvar_82;
  highp vec3 coord_83;
  coord_83 = (tmpvar_76 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_84;
  tmpvar_84 = shadow2DEXT (_ShadowMapTexture, coord_83);
  shadows_75.w = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = (_LightShadowData.xxxx + (shadows_75 * (1.0 - _LightShadowData.xxxx)));
  shadows_75 = tmpvar_85;
  mediump float tmpvar_86;
  tmpvar_86 = dot (shadows_75, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_74 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_70.w) * tmpvar_73.w) * tmpvar_74);
  atten_3 = tmpvar_87;
  mediump float tmpvar_88;
  tmpvar_88 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_89;
  tmpvar_89 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_88)), 0.0, 1.0);
  light_2 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_91;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 446
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 436
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 430
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 434
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 460
#line 480
#line 460
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 464
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 468
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 472
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 476
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 446
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 436
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 430
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 434
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 460
#line 480
#line 480
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 484
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 488
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 490
lowp vec4 frag( in v2f IN ) {
    #line 492
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 496
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 500
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 504
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 508
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 512
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 516
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 520
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    #line 524
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    #line 528
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    #line 532
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 536
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 540
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 544
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.y = tmpvar_22.y;
  localCoords_2.x = (tmpvar_22.x * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_23;
  norm_1.z = cos((6.28319 * tmpvar_23.x));
  norm_1.x = sin((6.28319 * tmpvar_23.x));
  norm_1.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_1);
  norm_1 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_26;
  tmpvar_26 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_25 * tmpvar_25)));
  float tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_25 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_26, 2.0)))), (float((_OceanRadius >= tmpvar_26)) * float((tmpvar_25 >= 0.0)))));
  float tmpvar_28;
  tmpvar_28 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_16.xy, tmpvar_16.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_18), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_27 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_27)), 0.0, 1.0))))), tmpvar_17, vec4(tmpvar_28)) * _Color);
  color_4 = tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0), tmpvar_28);
  vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  vec4 shadowVals_32;
  shadowVals_32.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_32.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_32.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_32.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_33;
  tmpvar_33 = lessThan (shadowVals_32, vec4(((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_34;
  tmpvar_34 = _LightShadowData.xxxx;
  float tmpvar_35;
  if (tmpvar_33.x) {
    tmpvar_35 = tmpvar_34.x;
  } else {
    tmpvar_35 = 1.0;
  };
  float tmpvar_36;
  if (tmpvar_33.y) {
    tmpvar_36 = tmpvar_34.y;
  } else {
    tmpvar_36 = 1.0;
  };
  float tmpvar_37;
  if (tmpvar_33.z) {
    tmpvar_37 = tmpvar_34.z;
  } else {
    tmpvar_37 = 1.0;
  };
  float tmpvar_38;
  if (tmpvar_33.w) {
    tmpvar_38 = tmpvar_34.w;
  } else {
    tmpvar_38 = 1.0;
  };
  vec4 tmpvar_39;
  tmpvar_39.x = tmpvar_35;
  tmpvar_39.y = tmpvar_36;
  tmpvar_39.z = tmpvar_37;
  tmpvar_39.w = tmpvar_38;
  vec3 tmpvar_40;
  tmpvar_40 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_30) * 2.0) * (tmpvar_31.w * dot (tmpvar_39, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_4.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_40));
  color_4.xyz = (color_4.xyz * tmpvar_40);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
mad o7.x, r0, r0.y, c17
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
mov o6.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
mul o9.xyz, r1.w, -r1
mov r1.xyz, c15
mov o1, v1
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r0, -c13
add o8.xyz, -c12, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_72;
  tmpvar_72 = texture2D (_LightTexture0, vec2(tmpvar_71));
  highp float tmpvar_73;
  mediump vec4 shadows_74;
  highp vec4 shadowVals_75;
  highp float tmpvar_76;
  tmpvar_76 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_77;
  vec_77 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = textureCube (_ShadowMapTexture, vec_77);
  packDist_78 = tmpvar_79;
  shadowVals_75.x = dot (packDist_78, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_80;
  vec_80 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_81;
  lowp vec4 tmpvar_82;
  tmpvar_82 = textureCube (_ShadowMapTexture, vec_80);
  packDist_81 = tmpvar_82;
  shadowVals_75.y = dot (packDist_81, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_83;
  vec_83 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_84;
  lowp vec4 tmpvar_85;
  tmpvar_85 = textureCube (_ShadowMapTexture, vec_83);
  packDist_84 = tmpvar_85;
  shadowVals_75.z = dot (packDist_84, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_86;
  vec_86 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_87;
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_ShadowMapTexture, vec_86);
  packDist_87 = tmpvar_88;
  shadowVals_75.w = dot (packDist_87, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_89;
  tmpvar_89 = lessThan (shadowVals_75, vec4(tmpvar_76));
  highp vec4 tmpvar_90;
  tmpvar_90 = _LightShadowData.xxxx;
  highp float tmpvar_91;
  if (tmpvar_89.x) {
    tmpvar_91 = tmpvar_90.x;
  } else {
    tmpvar_91 = 1.0;
  };
  highp float tmpvar_92;
  if (tmpvar_89.y) {
    tmpvar_92 = tmpvar_90.y;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  if (tmpvar_89.z) {
    tmpvar_93 = tmpvar_90.z;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  if (tmpvar_89.w) {
    tmpvar_94 = tmpvar_90.w;
  } else {
    tmpvar_94 = 1.0;
  };
  highp vec4 tmpvar_95;
  tmpvar_95.x = tmpvar_91;
  tmpvar_95.y = tmpvar_92;
  tmpvar_95.z = tmpvar_93;
  tmpvar_95.w = tmpvar_94;
  shadows_74 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = dot (shadows_74, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_73 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = (tmpvar_72.w * tmpvar_73);
  atten_3 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = clamp ((((_LightColor0.w * tmpvar_70) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_99;
  tmpvar_99 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_98)), 0.0, 1.0);
  light_2 = tmpvar_99;
  highp vec3 tmpvar_100;
  tmpvar_100 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_101;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_72;
  tmpvar_72 = texture2D (_LightTexture0, vec2(tmpvar_71));
  highp float tmpvar_73;
  mediump vec4 shadows_74;
  highp vec4 shadowVals_75;
  highp float tmpvar_76;
  tmpvar_76 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_77;
  vec_77 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = textureCube (_ShadowMapTexture, vec_77);
  packDist_78 = tmpvar_79;
  shadowVals_75.x = dot (packDist_78, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_80;
  vec_80 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_81;
  lowp vec4 tmpvar_82;
  tmpvar_82 = textureCube (_ShadowMapTexture, vec_80);
  packDist_81 = tmpvar_82;
  shadowVals_75.y = dot (packDist_81, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_83;
  vec_83 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_84;
  lowp vec4 tmpvar_85;
  tmpvar_85 = textureCube (_ShadowMapTexture, vec_83);
  packDist_84 = tmpvar_85;
  shadowVals_75.z = dot (packDist_84, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_86;
  vec_86 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_87;
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_ShadowMapTexture, vec_86);
  packDist_87 = tmpvar_88;
  shadowVals_75.w = dot (packDist_87, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_89;
  tmpvar_89 = lessThan (shadowVals_75, vec4(tmpvar_76));
  highp vec4 tmpvar_90;
  tmpvar_90 = _LightShadowData.xxxx;
  highp float tmpvar_91;
  if (tmpvar_89.x) {
    tmpvar_91 = tmpvar_90.x;
  } else {
    tmpvar_91 = 1.0;
  };
  highp float tmpvar_92;
  if (tmpvar_89.y) {
    tmpvar_92 = tmpvar_90.y;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  if (tmpvar_89.z) {
    tmpvar_93 = tmpvar_90.z;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  if (tmpvar_89.w) {
    tmpvar_94 = tmpvar_90.w;
  } else {
    tmpvar_94 = 1.0;
  };
  highp vec4 tmpvar_95;
  tmpvar_95.x = tmpvar_91;
  tmpvar_95.y = tmpvar_92;
  tmpvar_95.z = tmpvar_93;
  tmpvar_95.w = tmpvar_94;
  shadows_74 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = dot (shadows_74, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_73 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = (tmpvar_72.w * tmpvar_73);
  atten_3 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = clamp ((((_LightColor0.w * tmpvar_70) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_99;
  tmpvar_99 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_98)), 0.0, 1.0);
  light_2 = tmpvar_99;
  highp vec3 tmpvar_100;
  tmpvar_100 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_101;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 442
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 432
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 418
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 422
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 426
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 430
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 456
#line 476
#line 456
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 460
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 464
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 468
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 472
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 442
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 432
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 418
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 422
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 426
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 430
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 456
#line 476
#line 476
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 480
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 484
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 486
lowp vec4 frag( in v2f IN ) {
    #line 488
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 492
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 496
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 500
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 504
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 508
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 512
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 516
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    #line 520
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    #line 524
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    #line 528
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 532
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 536
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 540
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.y = tmpvar_22.y;
  localCoords_2.x = (tmpvar_22.x * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_23;
  norm_1.z = cos((6.28319 * tmpvar_23.x));
  norm_1.x = sin((6.28319 * tmpvar_23.x));
  norm_1.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_1);
  norm_1 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_26;
  tmpvar_26 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_25 * tmpvar_25)));
  float tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_25 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_26, 2.0)))), (float((_OceanRadius >= tmpvar_26)) * float((tmpvar_25 >= 0.0)))));
  float tmpvar_28;
  tmpvar_28 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_16.xy, tmpvar_16.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_18), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_27 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_27)), 0.0, 1.0))))), tmpvar_17, vec4(tmpvar_28)) * _Color);
  color_4 = tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0), tmpvar_28);
  vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  vec4 tmpvar_32;
  tmpvar_32 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  vec4 shadowVals_33;
  shadowVals_33.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_33.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_33.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_33.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_34;
  tmpvar_34 = lessThan (shadowVals_33, vec4(((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_35;
  tmpvar_35 = _LightShadowData.xxxx;
  float tmpvar_36;
  if (tmpvar_34.x) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = 1.0;
  };
  float tmpvar_37;
  if (tmpvar_34.y) {
    tmpvar_37 = tmpvar_35.y;
  } else {
    tmpvar_37 = 1.0;
  };
  float tmpvar_38;
  if (tmpvar_34.z) {
    tmpvar_38 = tmpvar_35.z;
  } else {
    tmpvar_38 = 1.0;
  };
  float tmpvar_39;
  if (tmpvar_34.w) {
    tmpvar_39 = tmpvar_35.w;
  } else {
    tmpvar_39 = 1.0;
  };
  vec4 tmpvar_40;
  tmpvar_40.x = tmpvar_36;
  tmpvar_40.y = tmpvar_37;
  tmpvar_40.z = tmpvar_38;
  tmpvar_40.w = tmpvar_39;
  vec3 tmpvar_41;
  tmpvar_41 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_30) * 2.0) * ((tmpvar_31.w * tmpvar_32.w) * dot (tmpvar_40, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_4.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_41));
  color_4.xyz = (color_4.xyz * tmpvar_41);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
mad o7.x, r0, r0.y, c17
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
mov o6.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
mul o9.xyz, r1.w, -r1
mov r1.xyz, c15
mov o1, v1
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r0, -c13
add o8.xyz, -c12, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_72;
  tmpvar_72 = texture2D (_LightTextureB0, vec2(tmpvar_71));
  lowp vec4 tmpvar_73;
  tmpvar_73 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_74;
  mediump vec4 shadows_75;
  highp vec4 shadowVals_76;
  highp float tmpvar_77;
  tmpvar_77 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_78;
  vec_78 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = textureCube (_ShadowMapTexture, vec_78);
  packDist_79 = tmpvar_80;
  shadowVals_76.x = dot (packDist_79, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_81;
  vec_81 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_82;
  lowp vec4 tmpvar_83;
  tmpvar_83 = textureCube (_ShadowMapTexture, vec_81);
  packDist_82 = tmpvar_83;
  shadowVals_76.y = dot (packDist_82, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_84;
  vec_84 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_85;
  lowp vec4 tmpvar_86;
  tmpvar_86 = textureCube (_ShadowMapTexture, vec_84);
  packDist_85 = tmpvar_86;
  shadowVals_76.z = dot (packDist_85, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_87;
  vec_87 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_88;
  lowp vec4 tmpvar_89;
  tmpvar_89 = textureCube (_ShadowMapTexture, vec_87);
  packDist_88 = tmpvar_89;
  shadowVals_76.w = dot (packDist_88, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_90;
  tmpvar_90 = lessThan (shadowVals_76, vec4(tmpvar_77));
  highp vec4 tmpvar_91;
  tmpvar_91 = _LightShadowData.xxxx;
  highp float tmpvar_92;
  if (tmpvar_90.x) {
    tmpvar_92 = tmpvar_91.x;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  if (tmpvar_90.y) {
    tmpvar_93 = tmpvar_91.y;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  if (tmpvar_90.z) {
    tmpvar_94 = tmpvar_91.z;
  } else {
    tmpvar_94 = 1.0;
  };
  highp float tmpvar_95;
  if (tmpvar_90.w) {
    tmpvar_95 = tmpvar_91.w;
  } else {
    tmpvar_95 = 1.0;
  };
  highp vec4 tmpvar_96;
  tmpvar_96.x = tmpvar_92;
  tmpvar_96.y = tmpvar_93;
  tmpvar_96.z = tmpvar_94;
  tmpvar_96.w = tmpvar_95;
  shadows_75 = tmpvar_96;
  mediump float tmpvar_97;
  tmpvar_97 = dot (shadows_75, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_74 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = ((tmpvar_72.w * tmpvar_73.w) * tmpvar_74);
  atten_3 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp ((((_LightColor0.w * tmpvar_70) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_100;
  tmpvar_100 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_99)), 0.0, 1.0);
  light_2 = tmpvar_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_102;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 vert_13;
  mediump vec4 detail_14;
  mediump float nylerp_15;
  mediump vec3 detailCoords_16;
  mediump float zxlerp_17;
  mediump float vertLerp_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 0.0;
  tmpvar_35.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_35), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (floor(((1.0 + tmpvar_37.x) - tmpvar_37.z)), 0.0, 1.0);
  zxlerp_17 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37.zxy, tmpvar_37, vec3(zxlerp_17));
  detailCoords_16 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (floor(((1.0 + tmpvar_37.y) - mix (tmpvar_37.z, tmpvar_37.x, zxlerp_17))), 0.0, 1.0);
  nylerp_15 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (detailCoords_16, tmpvar_37.yxz, vec3(nylerp_15));
  detailCoords_16 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_16.x);
  highp vec2 coord_43;
  coord_43 = ((((0.5 * detailCoords_16.zy) / tmpvar_42) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DGradEXT (_midTex, coord_43, tmpvar_33.xy, tmpvar_33.zw);
  detail_14 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_16.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_16.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_steepTex, coord_46, tmpvar_33.xy, tmpvar_33.zw);
  vert_13 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (vert_13, detail_14, vec4(vertLerp_18));
  detail_14 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_BumpMap, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  encnorm_12 = tmpvar_49;
  mediump vec2 tmpvar_50;
  tmpvar_50 = encnorm_12.wy;
  localCoords_11 = tmpvar_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_51.y;
  localCoords_11.x = (tmpvar_51.x * 0.5);
  uv_20.x = (uv_20.x - 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_20 + localCoords_11);
  uv_20 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((6.28319 * tmpvar_52.x));
  norm_10.z = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = sin((6.28319 * tmpvar_52.x));
  norm_10.x = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = cos((3.14159 * tmpvar_52.y));
  norm_10.y = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = -(norm_10);
  norm_10 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (tmpvar_48, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD0 * tmpvar_58);
  color_21 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_61;
  tmpvar_61 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_60 * tmpvar_60)));
  highp float tmpvar_62;
  tmpvar_62 = (float((_OceanRadius >= tmpvar_61)) * float((tmpvar_60 >= 0.0)));
  sphereCheck_8 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_60 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_61, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_21, _OceanColor, vec4((clamp ((tmpvar_63 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_63)), 0.0, 1.0)))));
  color_21 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_21, main_19, vec4(handoff_7)) * _Color);
  color_21 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = mix (TNdotL_4, clamp (dot (tmpvar_56, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_72;
  tmpvar_72 = texture2D (_LightTextureB0, vec2(tmpvar_71));
  lowp vec4 tmpvar_73;
  tmpvar_73 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_74;
  mediump vec4 shadows_75;
  highp vec4 shadowVals_76;
  highp float tmpvar_77;
  tmpvar_77 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_78;
  vec_78 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = textureCube (_ShadowMapTexture, vec_78);
  packDist_79 = tmpvar_80;
  shadowVals_76.x = dot (packDist_79, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_81;
  vec_81 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_82;
  lowp vec4 tmpvar_83;
  tmpvar_83 = textureCube (_ShadowMapTexture, vec_81);
  packDist_82 = tmpvar_83;
  shadowVals_76.y = dot (packDist_82, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_84;
  vec_84 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_85;
  lowp vec4 tmpvar_86;
  tmpvar_86 = textureCube (_ShadowMapTexture, vec_84);
  packDist_85 = tmpvar_86;
  shadowVals_76.z = dot (packDist_85, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_87;
  vec_87 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_88;
  lowp vec4 tmpvar_89;
  tmpvar_89 = textureCube (_ShadowMapTexture, vec_87);
  packDist_88 = tmpvar_89;
  shadowVals_76.w = dot (packDist_88, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_90;
  tmpvar_90 = lessThan (shadowVals_76, vec4(tmpvar_77));
  highp vec4 tmpvar_91;
  tmpvar_91 = _LightShadowData.xxxx;
  highp float tmpvar_92;
  if (tmpvar_90.x) {
    tmpvar_92 = tmpvar_91.x;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  if (tmpvar_90.y) {
    tmpvar_93 = tmpvar_91.y;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  if (tmpvar_90.z) {
    tmpvar_94 = tmpvar_91.z;
  } else {
    tmpvar_94 = 1.0;
  };
  highp float tmpvar_95;
  if (tmpvar_90.w) {
    tmpvar_95 = tmpvar_91.w;
  } else {
    tmpvar_95 = 1.0;
  };
  highp vec4 tmpvar_96;
  tmpvar_96.x = tmpvar_92;
  tmpvar_96.y = tmpvar_93;
  tmpvar_96.z = tmpvar_94;
  tmpvar_96.w = tmpvar_95;
  shadows_75 = tmpvar_96;
  mediump float tmpvar_97;
  tmpvar_97 = dot (shadows_75, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_74 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = ((tmpvar_72.w * tmpvar_73.w) * tmpvar_74);
  atten_3 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp ((((_LightColor0.w * tmpvar_70) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_100;
  tmpvar_100 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_99)), 0.0, 1.0);
  light_2 = tmpvar_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_21.xyz = tmpvar_102;
  color_21.xyz = (color_21.xyz * light_2);
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 443
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 433
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 419
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 423
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 427
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 431
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 457
#line 477
#line 457
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 461
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 465
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 469
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 473
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 443
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 433
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 419
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 423
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 427
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 431
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
#line 457
#line 477
#line 477
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 481
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 485
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 487
lowp vec4 frag( in v2f IN ) {
    #line 489
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 493
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 497
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 501
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 505
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 509
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 513
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 517
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    #line 521
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    #line 525
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    #line 529
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 533
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 537
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 541
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (floor(((1.0 + tmpvar_21.x) - tmpvar_21.z)), 0.0, 1.0);
  vec3 tmpvar_23;
  tmpvar_23 = mix (mix (tmpvar_21.zxy, tmpvar_21, vec3(tmpvar_22)), tmpvar_21.yxz, vec3(clamp (floor(((1.0 + tmpvar_21.y) - mix (tmpvar_21.z, tmpvar_21.x, tmpvar_22))), 0.0, 1.0)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_24.xyz;
  vec2 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_25.y;
  localCoords_3.x = (tmpvar_25.x * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_26;
  tmpvar_26 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_26;
  norm_2.z = cos((6.28319 * tmpvar_26.x));
  norm_2.x = sin((6.28319 * tmpvar_26.x));
  norm_2.y = cos((3.14159 * tmpvar_26.y));
  vec3 tmpvar_27;
  tmpvar_27 = -(norm_2);
  norm_2 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_29;
  tmpvar_29 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_28 * tmpvar_28)));
  float tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_28 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_29, 2.0)))), (float((_OceanRadius >= tmpvar_29)) * float((tmpvar_28 >= 0.0)))));
  float tmpvar_31;
  tmpvar_31 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_24.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_32;
  tmpvar_32 = (cityoverlay_4 * texture2DGradARB (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  citydarkoverlay_1.xyz = tmpvar_32.xyz;
  vec4 tmpvar_33;
  tmpvar_33 = (cityoverlay_4 * texture2DGradARB (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  vec4 tmpvar_34;
  tmpvar_34 = (mix (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_18.xy, tmpvar_18.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_18.xy, tmpvar_18.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_20), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_30 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_30)), 0.0, 1.0))))), tmpvar_19, vec4(tmpvar_31)), tmpvar_33, tmpvar_33.wwww) * _Color);
  color_6.w = tmpvar_34.w;
  float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_27, -(_SunDir)), 0.0, 1.0);
  float tmpvar_36;
  tmpvar_36 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2))).w;
  vec3 tmpvar_37;
  tmpvar_37 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_35, tmpvar_31)) * 2.0) * tmpvar_36), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_6.xyz = (tmpvar_34.xyz + (_Albedo * tmpvar_37));
  color_6.xyz = (color_6.xyz * tmpvar_37);
  citydarkoverlay_1.w = (tmpvar_32.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_35 - 0.01)) / 0.99) * 4.0) * tmpvar_36), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 46 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o4.xyz, r0.x, r2
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
mad o6.x, r0, r0.y, c16
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
mov o5.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 citylightoverlaydetail_13;
  mediump vec4 citydarkoverlaydetail_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 vert_16;
  mediump vec4 detail_17;
  mediump float nylerp_18;
  mediump vec3 detailCoords_19;
  mediump float zxlerp_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec4 tmpvar_38;
  tmpvar_38.w = 0.0;
  tmpvar_38.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_38), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = abs(xlv_TEXCOORD5);
  highp float tmpvar_41;
  tmpvar_41 = clamp (floor(((1.0 + tmpvar_40.x) - tmpvar_40.z)), 0.0, 1.0);
  zxlerp_20 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.zxy, tmpvar_40, vec3(zxlerp_20));
  detailCoords_19 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (floor(((1.0 + tmpvar_40.y) - mix (tmpvar_40.z, tmpvar_40.x, zxlerp_20))), 0.0, 1.0);
  nylerp_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (detailCoords_19, tmpvar_40.yxz, vec3(nylerp_18));
  detailCoords_19 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_19.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_19.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_midTex, coord_46, tmpvar_36.xy, tmpvar_36.zw);
  detail_17 = tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = abs(detailCoords_19.x);
  highp vec2 coord_49;
  coord_49 = ((((0.5 * detailCoords_19.zy) / tmpvar_48) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2DGradEXT (_steepTex, coord_49, tmpvar_36.xy, tmpvar_36.zw);
  vert_16 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (vert_16, detail_17, vec4(vertLerp_21));
  detail_17 = tmpvar_51;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_15 = tmpvar_52;
  mediump float tmpvar_53;
  tmpvar_53 = abs(detailCoords_19.x);
  highp vec2 coord_54;
  coord_54 = ((((0.5 * detailCoords_19.zy) / tmpvar_53) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_54, tmpvar_36.xy, tmpvar_36.zw);
  citydarkoverlaydetail_14 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = abs(detailCoords_19.x);
  highp vec2 coord_57;
  coord_57 = ((((0.5 * detailCoords_19.zy) / tmpvar_56) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_57, tmpvar_36.xy, tmpvar_36.zw);
  citylightoverlaydetail_13 = tmpvar_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_12 = tmpvar_59;
  mediump vec2 tmpvar_60;
  tmpvar_60 = encnorm_12.wy;
  localCoords_11 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_61.y;
  localCoords_11.x = (tmpvar_61.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62 = (uv_23 + localCoords_11);
  uv_23 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = cos((6.28319 * tmpvar_62.x));
  norm_10.z = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = sin((6.28319 * tmpvar_62.x));
  norm_10.x = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = cos((3.14159 * tmpvar_62.y));
  norm_10.y = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = -(norm_10);
  norm_10 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = mix (tmpvar_51, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_69;
  tmpvar_69 = (xlv_TEXCOORD0 * tmpvar_68);
  color_24 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_71;
  tmpvar_71 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_70 * tmpvar_70)));
  highp float tmpvar_72;
  tmpvar_72 = (float((_OceanRadius >= tmpvar_71)) * float((tmpvar_70 >= 0.0)));
  sphereCheck_8 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_70 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_71, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (color_24, _OceanColor, vec4((clamp ((tmpvar_73 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_73)), 0.0, 1.0)))));
  color_24 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_76);
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * citydarkoverlaydetail_14);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * citylightoverlaydetail_13);
  mediump vec4 tmpvar_79;
  tmpvar_79 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_78, tmpvar_78.wwww) * _Color);
  color_24.w = tmpvar_79.w;
  highp vec3 tmpvar_80;
  tmpvar_80 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_66, -(_SunDir)), 0.0, 1.0);
  highp float tmpvar_84;
  tmpvar_84 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_85;
  tmpvar_85 = texture2D (_LightTexture0, vec2(tmpvar_84)).w;
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_83, handoff_7)) * 2.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (tmpvar_79.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_89;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_83 - 0.01)) / 0.99) * 4.0) * tmpvar_85), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 citylightoverlaydetail_13;
  mediump vec4 citydarkoverlaydetail_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 vert_16;
  mediump vec4 detail_17;
  mediump float nylerp_18;
  mediump vec3 detailCoords_19;
  mediump float zxlerp_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec4 tmpvar_38;
  tmpvar_38.w = 0.0;
  tmpvar_38.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_38), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = abs(xlv_TEXCOORD5);
  highp float tmpvar_41;
  tmpvar_41 = clamp (floor(((1.0 + tmpvar_40.x) - tmpvar_40.z)), 0.0, 1.0);
  zxlerp_20 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.zxy, tmpvar_40, vec3(zxlerp_20));
  detailCoords_19 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (floor(((1.0 + tmpvar_40.y) - mix (tmpvar_40.z, tmpvar_40.x, zxlerp_20))), 0.0, 1.0);
  nylerp_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (detailCoords_19, tmpvar_40.yxz, vec3(nylerp_18));
  detailCoords_19 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_19.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_19.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_midTex, coord_46, tmpvar_36.xy, tmpvar_36.zw);
  detail_17 = tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = abs(detailCoords_19.x);
  highp vec2 coord_49;
  coord_49 = ((((0.5 * detailCoords_19.zy) / tmpvar_48) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2DGradEXT (_steepTex, coord_49, tmpvar_36.xy, tmpvar_36.zw);
  vert_16 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (vert_16, detail_17, vec4(vertLerp_21));
  detail_17 = tmpvar_51;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_15 = tmpvar_52;
  mediump float tmpvar_53;
  tmpvar_53 = abs(detailCoords_19.x);
  highp vec2 coord_54;
  coord_54 = ((((0.5 * detailCoords_19.zy) / tmpvar_53) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_54, tmpvar_36.xy, tmpvar_36.zw);
  citydarkoverlaydetail_14 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = abs(detailCoords_19.x);
  highp vec2 coord_57;
  coord_57 = ((((0.5 * detailCoords_19.zy) / tmpvar_56) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_57, tmpvar_36.xy, tmpvar_36.zw);
  citylightoverlaydetail_13 = tmpvar_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_12 = tmpvar_59;
  mediump vec2 tmpvar_60;
  tmpvar_60 = encnorm_12.wy;
  localCoords_11 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_61.y;
  localCoords_11.x = (tmpvar_61.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62 = (uv_23 + localCoords_11);
  uv_23 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = cos((6.28319 * tmpvar_62.x));
  norm_10.z = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = sin((6.28319 * tmpvar_62.x));
  norm_10.x = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = cos((3.14159 * tmpvar_62.y));
  norm_10.y = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = -(norm_10);
  norm_10 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = mix (tmpvar_51, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_69;
  tmpvar_69 = (xlv_TEXCOORD0 * tmpvar_68);
  color_24 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_71;
  tmpvar_71 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_70 * tmpvar_70)));
  highp float tmpvar_72;
  tmpvar_72 = (float((_OceanRadius >= tmpvar_71)) * float((tmpvar_70 >= 0.0)));
  sphereCheck_8 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_70 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_71, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (color_24, _OceanColor, vec4((clamp ((tmpvar_73 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_73)), 0.0, 1.0)))));
  color_24 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_76);
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * citydarkoverlaydetail_14);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * citylightoverlaydetail_13);
  mediump vec4 tmpvar_79;
  tmpvar_79 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_78, tmpvar_78.wwww) * _Color);
  color_24.w = tmpvar_79.w;
  highp vec3 tmpvar_80;
  tmpvar_80 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_66, -(_SunDir)), 0.0, 1.0);
  highp float tmpvar_84;
  tmpvar_84 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_85;
  tmpvar_85 = texture2D (_LightTexture0, vec2(tmpvar_84)).w;
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_83, handoff_7)) * 2.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (tmpvar_79.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_89;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_83 - 0.01)) / 0.99) * 4.0) * tmpvar_85), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 407
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 411
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 415
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 469
#line 440
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 444
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 448
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 452
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 457
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 407
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 411
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 415
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 469
#line 459
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 461
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    #line 465
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 469
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 473
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 477
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    #line 481
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    #line 485
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = xll_tex2Dgrad( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    #line 489
    mediump vec4 citylightoverlaydetail = xll_tex2Dgrad( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 493
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 497
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 501
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 505
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 509
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 513
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    #line 517
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 521
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    #line 525
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 529
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 533
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (floor(((1.0 + tmpvar_21.x) - tmpvar_21.z)), 0.0, 1.0);
  vec3 tmpvar_23;
  tmpvar_23 = mix (mix (tmpvar_21.zxy, tmpvar_21, vec3(tmpvar_22)), tmpvar_21.yxz, vec3(clamp (floor(((1.0 + tmpvar_21.y) - mix (tmpvar_21.z, tmpvar_21.x, tmpvar_22))), 0.0, 1.0)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_24.xyz;
  vec2 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_25.y;
  localCoords_3.x = (tmpvar_25.x * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_26;
  tmpvar_26 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_26;
  norm_2.z = cos((6.28319 * tmpvar_26.x));
  norm_2.x = sin((6.28319 * tmpvar_26.x));
  norm_2.y = cos((3.14159 * tmpvar_26.y));
  vec3 tmpvar_27;
  tmpvar_27 = -(norm_2);
  norm_2 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_29;
  tmpvar_29 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_28 * tmpvar_28)));
  float tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_28 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_29, 2.0)))), (float((_OceanRadius >= tmpvar_29)) * float((tmpvar_28 >= 0.0)))));
  float tmpvar_31;
  tmpvar_31 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_24.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_32;
  tmpvar_32 = (cityoverlay_4 * texture2DGradARB (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  citydarkoverlay_1.xyz = tmpvar_32.xyz;
  vec4 tmpvar_33;
  tmpvar_33 = (cityoverlay_4 * texture2DGradARB (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  vec4 tmpvar_34;
  tmpvar_34 = (mix (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_18.xy, tmpvar_18.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_18.xy, tmpvar_18.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_20), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_30 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_30)), 0.0, 1.0))))), tmpvar_19, vec4(tmpvar_31)), tmpvar_33, tmpvar_33.wwww) * _Color);
  color_6.w = tmpvar_34.w;
  float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_27, -(_SunDir)), 0.0, 1.0);
  vec3 tmpvar_36;
  tmpvar_36 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_35, tmpvar_31)) * 2.0), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_6.xyz = (tmpvar_34.xyz + (_Albedo * tmpvar_36));
  color_6.xyz = (color_6.xyz * tmpvar_36);
  citydarkoverlay_1.w = (tmpvar_32.w * (1.0 - clamp (clamp ((((_LightColor0.w * (tmpvar_35 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Vector 9 [_SunDir]
Vector 10 [_PlanetOrigin]
"vs_3_0
; 42 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord4 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c11, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c12, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c9, c9
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c9
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c11.x
dp4 r2.x, r0, c4
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
add r2.w, r1, c11.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o3.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
add r2.x, r0.y, c11.w
mul_sat r0.w, -r1, c11.y
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r0.xyz, -r0, c8
mad o5.x, r0.w, r2, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o7.xyz, r0.w, -r0
mov r0.xyz, c10
mov o4.xyz, -r1
mov o1, v1
mov o2.xyz, v2
rcp o2.w, r0.w
add o6.xyz, -c8, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 citylightoverlaydetail_13;
  mediump vec4 citydarkoverlaydetail_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 vert_16;
  mediump vec4 detail_17;
  mediump float nylerp_18;
  mediump vec3 detailCoords_19;
  mediump float zxlerp_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec4 tmpvar_38;
  tmpvar_38.w = 0.0;
  tmpvar_38.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_38), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = abs(xlv_TEXCOORD5);
  highp float tmpvar_41;
  tmpvar_41 = clamp (floor(((1.0 + tmpvar_40.x) - tmpvar_40.z)), 0.0, 1.0);
  zxlerp_20 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.zxy, tmpvar_40, vec3(zxlerp_20));
  detailCoords_19 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (floor(((1.0 + tmpvar_40.y) - mix (tmpvar_40.z, tmpvar_40.x, zxlerp_20))), 0.0, 1.0);
  nylerp_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (detailCoords_19, tmpvar_40.yxz, vec3(nylerp_18));
  detailCoords_19 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_19.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_19.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_midTex, coord_46, tmpvar_36.xy, tmpvar_36.zw);
  detail_17 = tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = abs(detailCoords_19.x);
  highp vec2 coord_49;
  coord_49 = ((((0.5 * detailCoords_19.zy) / tmpvar_48) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2DGradEXT (_steepTex, coord_49, tmpvar_36.xy, tmpvar_36.zw);
  vert_16 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (vert_16, detail_17, vec4(vertLerp_21));
  detail_17 = tmpvar_51;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_15 = tmpvar_52;
  mediump float tmpvar_53;
  tmpvar_53 = abs(detailCoords_19.x);
  highp vec2 coord_54;
  coord_54 = ((((0.5 * detailCoords_19.zy) / tmpvar_53) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_54, tmpvar_36.xy, tmpvar_36.zw);
  citydarkoverlaydetail_14 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = abs(detailCoords_19.x);
  highp vec2 coord_57;
  coord_57 = ((((0.5 * detailCoords_19.zy) / tmpvar_56) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_57, tmpvar_36.xy, tmpvar_36.zw);
  citylightoverlaydetail_13 = tmpvar_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_12 = tmpvar_59;
  mediump vec2 tmpvar_60;
  tmpvar_60 = encnorm_12.wy;
  localCoords_11 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_61.y;
  localCoords_11.x = (tmpvar_61.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62 = (uv_23 + localCoords_11);
  uv_23 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = cos((6.28319 * tmpvar_62.x));
  norm_10.z = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = sin((6.28319 * tmpvar_62.x));
  norm_10.x = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = cos((3.14159 * tmpvar_62.y));
  norm_10.y = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = -(norm_10);
  norm_10 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = mix (tmpvar_51, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_69;
  tmpvar_69 = (xlv_TEXCOORD0 * tmpvar_68);
  color_24 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_71;
  tmpvar_71 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_70 * tmpvar_70)));
  highp float tmpvar_72;
  tmpvar_72 = (float((_OceanRadius >= tmpvar_71)) * float((tmpvar_70 >= 0.0)));
  sphereCheck_8 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_70 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_71, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (color_24, _OceanColor, vec4((clamp ((tmpvar_73 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_73)), 0.0, 1.0)))));
  color_24 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_76);
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * citydarkoverlaydetail_14);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * citylightoverlaydetail_13);
  mediump vec4 tmpvar_79;
  tmpvar_79 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_78, tmpvar_78.wwww) * _Color);
  color_24.w = tmpvar_79.w;
  highp vec3 tmpvar_80;
  tmpvar_80 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_80;
  lowp vec3 tmpvar_81;
  tmpvar_81 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_66, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_84;
  tmpvar_84 = clamp (((_LightColor0.w * mix (TNdotL_3, tmpvar_83, handoff_7)) * 2.0), 0.0, 1.0);
  highp vec3 tmpvar_85;
  tmpvar_85 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_84)), 0.0, 1.0);
  light_2 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (tmpvar_79.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_87;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp ((((_LightColor0.w * (tmpvar_83 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 citylightoverlaydetail_13;
  mediump vec4 citydarkoverlaydetail_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 vert_16;
  mediump vec4 detail_17;
  mediump float nylerp_18;
  mediump vec3 detailCoords_19;
  mediump float zxlerp_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec4 tmpvar_38;
  tmpvar_38.w = 0.0;
  tmpvar_38.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_38), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = abs(xlv_TEXCOORD5);
  highp float tmpvar_41;
  tmpvar_41 = clamp (floor(((1.0 + tmpvar_40.x) - tmpvar_40.z)), 0.0, 1.0);
  zxlerp_20 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.zxy, tmpvar_40, vec3(zxlerp_20));
  detailCoords_19 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (floor(((1.0 + tmpvar_40.y) - mix (tmpvar_40.z, tmpvar_40.x, zxlerp_20))), 0.0, 1.0);
  nylerp_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (detailCoords_19, tmpvar_40.yxz, vec3(nylerp_18));
  detailCoords_19 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_19.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_19.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_midTex, coord_46, tmpvar_36.xy, tmpvar_36.zw);
  detail_17 = tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = abs(detailCoords_19.x);
  highp vec2 coord_49;
  coord_49 = ((((0.5 * detailCoords_19.zy) / tmpvar_48) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2DGradEXT (_steepTex, coord_49, tmpvar_36.xy, tmpvar_36.zw);
  vert_16 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (vert_16, detail_17, vec4(vertLerp_21));
  detail_17 = tmpvar_51;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_15 = tmpvar_52;
  mediump float tmpvar_53;
  tmpvar_53 = abs(detailCoords_19.x);
  highp vec2 coord_54;
  coord_54 = ((((0.5 * detailCoords_19.zy) / tmpvar_53) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_54, tmpvar_36.xy, tmpvar_36.zw);
  citydarkoverlaydetail_14 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = abs(detailCoords_19.x);
  highp vec2 coord_57;
  coord_57 = ((((0.5 * detailCoords_19.zy) / tmpvar_56) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_57, tmpvar_36.xy, tmpvar_36.zw);
  citylightoverlaydetail_13 = tmpvar_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_12 = tmpvar_59;
  mediump vec2 tmpvar_60;
  tmpvar_60 = encnorm_12.wy;
  localCoords_11 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_61.y;
  localCoords_11.x = (tmpvar_61.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62 = (uv_23 + localCoords_11);
  uv_23 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = cos((6.28319 * tmpvar_62.x));
  norm_10.z = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = sin((6.28319 * tmpvar_62.x));
  norm_10.x = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = cos((3.14159 * tmpvar_62.y));
  norm_10.y = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = -(norm_10);
  norm_10 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = mix (tmpvar_51, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_69;
  tmpvar_69 = (xlv_TEXCOORD0 * tmpvar_68);
  color_24 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_71;
  tmpvar_71 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_70 * tmpvar_70)));
  highp float tmpvar_72;
  tmpvar_72 = (float((_OceanRadius >= tmpvar_71)) * float((tmpvar_70 >= 0.0)));
  sphereCheck_8 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_70 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_71, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (color_24, _OceanColor, vec4((clamp ((tmpvar_73 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_73)), 0.0, 1.0)))));
  color_24 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_76);
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * citydarkoverlaydetail_14);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * citylightoverlaydetail_13);
  mediump vec4 tmpvar_79;
  tmpvar_79 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_78, tmpvar_78.wwww) * _Color);
  color_24.w = tmpvar_79.w;
  highp vec3 tmpvar_80;
  tmpvar_80 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_80;
  lowp vec3 tmpvar_81;
  tmpvar_81 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_66, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_84;
  tmpvar_84 = clamp (((_LightColor0.w * mix (TNdotL_3, tmpvar_83, handoff_7)) * 2.0), 0.0, 1.0);
  highp vec3 tmpvar_85;
  tmpvar_85 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_84)), 0.0, 1.0);
  light_2 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (tmpvar_79.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_87;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp ((((_LightColor0.w * (tmpvar_83 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 397
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 401
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 405
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 409
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 413
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 437
#line 465
#line 437
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 441
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 445
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 449
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 453
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 397
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 401
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 405
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 409
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 413
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 437
#line 465
#line 455
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 457
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    #line 461
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 465
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 469
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 473
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    #line 477
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    #line 481
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = xll_tex2Dgrad( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    #line 485
    mediump vec4 citylightoverlaydetail = xll_tex2Dgrad( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 489
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 493
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 497
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 501
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 505
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 509
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    #line 513
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 517
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = 1.0;
    #line 521
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 525
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 529
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (floor(((1.0 + tmpvar_21.x) - tmpvar_21.z)), 0.0, 1.0);
  vec3 tmpvar_23;
  tmpvar_23 = mix (mix (tmpvar_21.zxy, tmpvar_21, vec3(tmpvar_22)), tmpvar_21.yxz, vec3(clamp (floor(((1.0 + tmpvar_21.y) - mix (tmpvar_21.z, tmpvar_21.x, tmpvar_22))), 0.0, 1.0)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_24.xyz;
  vec2 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_25.y;
  localCoords_3.x = (tmpvar_25.x * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_26;
  tmpvar_26 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_26;
  norm_2.z = cos((6.28319 * tmpvar_26.x));
  norm_2.x = sin((6.28319 * tmpvar_26.x));
  norm_2.y = cos((3.14159 * tmpvar_26.y));
  vec3 tmpvar_27;
  tmpvar_27 = -(norm_2);
  norm_2 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_29;
  tmpvar_29 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_28 * tmpvar_28)));
  float tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_28 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_29, 2.0)))), (float((_OceanRadius >= tmpvar_29)) * float((tmpvar_28 >= 0.0)))));
  float tmpvar_31;
  tmpvar_31 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_24.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_32;
  tmpvar_32 = (cityoverlay_4 * texture2DGradARB (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  citydarkoverlay_1.xyz = tmpvar_32.xyz;
  vec4 tmpvar_33;
  tmpvar_33 = (cityoverlay_4 * texture2DGradARB (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  vec4 tmpvar_34;
  tmpvar_34 = (mix (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_18.xy, tmpvar_18.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_18.xy, tmpvar_18.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_20), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_30 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_30)), 0.0, 1.0))))), tmpvar_19, vec4(tmpvar_31)), tmpvar_33, tmpvar_33.wwww) * _Color);
  color_6.w = tmpvar_34.w;
  float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_27, -(_SunDir)), 0.0, 1.0);
  float tmpvar_36;
  tmpvar_36 = ((float((xlv_TEXCOORD2.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz))).w);
  vec3 tmpvar_37;
  tmpvar_37 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_35, tmpvar_31)) * 2.0) * tmpvar_36), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_6.xyz = (tmpvar_34.xyz + (_Albedo * tmpvar_37));
  color_6.xyz = (color_6.xyz * tmpvar_37);
  citydarkoverlay_1.w = (tmpvar_32.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_35 - 0.01)) / 0.99) * 4.0) * tmpvar_36), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o4.xyz, r0.x, r2
dp4 r0.z, v0, c6
dp4 r0.w, v0, c7
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
mad o6.x, r0, r0.y, c16
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o5.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.w, r0, c11
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7.xyz = tmpvar_78.xyz;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  lowp vec4 tmpvar_85;
  highp vec2 P_86;
  P_86 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_85 = texture2D (_LightTexture0, P_86);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  highp float tmpvar_89;
  tmpvar_89 = ((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_85.w) * tmpvar_88.w);
  atten_3 = tmpvar_89;
  mediump float tmpvar_90;
  tmpvar_90 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_84, handoff_8)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_91;
  tmpvar_91 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_90)), 0.0, 1.0);
  light_2 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_93;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7.xyz = tmpvar_78.xyz;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  lowp vec4 tmpvar_85;
  highp vec2 P_86;
  P_86 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_85 = texture2D (_LightTexture0, P_86);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  highp float tmpvar_89;
  tmpvar_89 = ((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_85.w) * tmpvar_88.w);
  atten_3 = tmpvar_89;
  mediump float tmpvar_90;
  tmpvar_90 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_84, handoff_8)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_91;
  tmpvar_91 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_90)), 0.0, 1.0);
  light_2 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_93;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 426
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 408
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 412
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 416
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 420
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 424
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 478
#line 449
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 453
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 457
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 461
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 466
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 426
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 408
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 412
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 416
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 420
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 424
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 478
#line 468
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 470
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    #line 474
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 478
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 482
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 486
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    #line 490
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    #line 494
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = xll_tex2Dgrad( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    #line 498
    mediump vec4 citylightoverlaydetail = xll_tex2Dgrad( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 502
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 506
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 510
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 514
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 518
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 522
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    #line 526
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 530
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    #line 534
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 538
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 542
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (floor(((1.0 + tmpvar_21.x) - tmpvar_21.z)), 0.0, 1.0);
  vec3 tmpvar_23;
  tmpvar_23 = mix (mix (tmpvar_21.zxy, tmpvar_21, vec3(tmpvar_22)), tmpvar_21.yxz, vec3(clamp (floor(((1.0 + tmpvar_21.y) - mix (tmpvar_21.z, tmpvar_21.x, tmpvar_22))), 0.0, 1.0)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_24.xyz;
  vec2 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_25.y;
  localCoords_3.x = (tmpvar_25.x * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_26;
  tmpvar_26 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_26;
  norm_2.z = cos((6.28319 * tmpvar_26.x));
  norm_2.x = sin((6.28319 * tmpvar_26.x));
  norm_2.y = cos((3.14159 * tmpvar_26.y));
  vec3 tmpvar_27;
  tmpvar_27 = -(norm_2);
  norm_2 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_29;
  tmpvar_29 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_28 * tmpvar_28)));
  float tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_28 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_29, 2.0)))), (float((_OceanRadius >= tmpvar_29)) * float((tmpvar_28 >= 0.0)))));
  float tmpvar_31;
  tmpvar_31 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_24.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_32;
  tmpvar_32 = (cityoverlay_4 * texture2DGradARB (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  citydarkoverlay_1.xyz = tmpvar_32.xyz;
  vec4 tmpvar_33;
  tmpvar_33 = (cityoverlay_4 * texture2DGradARB (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  vec4 tmpvar_34;
  tmpvar_34 = (mix (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_18.xy, tmpvar_18.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_18.xy, tmpvar_18.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_20), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_30 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_30)), 0.0, 1.0))))), tmpvar_19, vec4(tmpvar_31)), tmpvar_33, tmpvar_33.wwww) * _Color);
  color_6.w = tmpvar_34.w;
  float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_27, -(_SunDir)), 0.0, 1.0);
  float tmpvar_36;
  tmpvar_36 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2))).w * textureCube (_LightTexture0, xlv_TEXCOORD2).w);
  vec3 tmpvar_37;
  tmpvar_37 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_35, tmpvar_31)) * 2.0) * tmpvar_36), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_6.xyz = (tmpvar_34.xyz + (_Albedo * tmpvar_37));
  color_6.xyz = (color_6.xyz * tmpvar_37);
  citydarkoverlay_1.w = (tmpvar_32.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_35 - 0.01)) / 0.99) * 4.0) * tmpvar_36), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 46 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o4.xyz, r0.x, r2
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
mad o6.x, r0, r0.y, c16
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
mov o5.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 citylightoverlaydetail_13;
  mediump vec4 citydarkoverlaydetail_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 vert_16;
  mediump vec4 detail_17;
  mediump float nylerp_18;
  mediump vec3 detailCoords_19;
  mediump float zxlerp_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec4 tmpvar_38;
  tmpvar_38.w = 0.0;
  tmpvar_38.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_38), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = abs(xlv_TEXCOORD5);
  highp float tmpvar_41;
  tmpvar_41 = clamp (floor(((1.0 + tmpvar_40.x) - tmpvar_40.z)), 0.0, 1.0);
  zxlerp_20 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.zxy, tmpvar_40, vec3(zxlerp_20));
  detailCoords_19 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (floor(((1.0 + tmpvar_40.y) - mix (tmpvar_40.z, tmpvar_40.x, zxlerp_20))), 0.0, 1.0);
  nylerp_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (detailCoords_19, tmpvar_40.yxz, vec3(nylerp_18));
  detailCoords_19 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_19.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_19.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_midTex, coord_46, tmpvar_36.xy, tmpvar_36.zw);
  detail_17 = tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = abs(detailCoords_19.x);
  highp vec2 coord_49;
  coord_49 = ((((0.5 * detailCoords_19.zy) / tmpvar_48) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2DGradEXT (_steepTex, coord_49, tmpvar_36.xy, tmpvar_36.zw);
  vert_16 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (vert_16, detail_17, vec4(vertLerp_21));
  detail_17 = tmpvar_51;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_15 = tmpvar_52;
  mediump float tmpvar_53;
  tmpvar_53 = abs(detailCoords_19.x);
  highp vec2 coord_54;
  coord_54 = ((((0.5 * detailCoords_19.zy) / tmpvar_53) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_54, tmpvar_36.xy, tmpvar_36.zw);
  citydarkoverlaydetail_14 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = abs(detailCoords_19.x);
  highp vec2 coord_57;
  coord_57 = ((((0.5 * detailCoords_19.zy) / tmpvar_56) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_57, tmpvar_36.xy, tmpvar_36.zw);
  citylightoverlaydetail_13 = tmpvar_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_12 = tmpvar_59;
  mediump vec2 tmpvar_60;
  tmpvar_60 = encnorm_12.wy;
  localCoords_11 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_61.y;
  localCoords_11.x = (tmpvar_61.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62 = (uv_23 + localCoords_11);
  uv_23 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = cos((6.28319 * tmpvar_62.x));
  norm_10.z = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = sin((6.28319 * tmpvar_62.x));
  norm_10.x = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = cos((3.14159 * tmpvar_62.y));
  norm_10.y = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = -(norm_10);
  norm_10 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = mix (tmpvar_51, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_69;
  tmpvar_69 = (xlv_TEXCOORD0 * tmpvar_68);
  color_24 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_71;
  tmpvar_71 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_70 * tmpvar_70)));
  highp float tmpvar_72;
  tmpvar_72 = (float((_OceanRadius >= tmpvar_71)) * float((tmpvar_70 >= 0.0)));
  sphereCheck_8 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_70 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_71, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (color_24, _OceanColor, vec4((clamp ((tmpvar_73 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_73)), 0.0, 1.0)))));
  color_24 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_76);
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * citydarkoverlaydetail_14);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * citylightoverlaydetail_13);
  mediump vec4 tmpvar_79;
  tmpvar_79 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_78, tmpvar_78.wwww) * _Color);
  color_24.w = tmpvar_79.w;
  highp vec3 tmpvar_80;
  tmpvar_80 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_66, -(_SunDir)), 0.0, 1.0);
  highp float tmpvar_84;
  tmpvar_84 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_85;
  tmpvar_85 = (texture2D (_LightTextureB0, vec2(tmpvar_84)).w * textureCube (_LightTexture0, xlv_TEXCOORD2).w);
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_83, handoff_7)) * 2.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (tmpvar_79.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_89;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_83 - 0.01)) / 0.99) * 4.0) * tmpvar_85), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 citylightoverlaydetail_13;
  mediump vec4 citydarkoverlaydetail_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 vert_16;
  mediump vec4 detail_17;
  mediump float nylerp_18;
  mediump vec3 detailCoords_19;
  mediump float zxlerp_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec4 tmpvar_38;
  tmpvar_38.w = 0.0;
  tmpvar_38.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_38), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = abs(xlv_TEXCOORD5);
  highp float tmpvar_41;
  tmpvar_41 = clamp (floor(((1.0 + tmpvar_40.x) - tmpvar_40.z)), 0.0, 1.0);
  zxlerp_20 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.zxy, tmpvar_40, vec3(zxlerp_20));
  detailCoords_19 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (floor(((1.0 + tmpvar_40.y) - mix (tmpvar_40.z, tmpvar_40.x, zxlerp_20))), 0.0, 1.0);
  nylerp_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (detailCoords_19, tmpvar_40.yxz, vec3(nylerp_18));
  detailCoords_19 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_19.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_19.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_midTex, coord_46, tmpvar_36.xy, tmpvar_36.zw);
  detail_17 = tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = abs(detailCoords_19.x);
  highp vec2 coord_49;
  coord_49 = ((((0.5 * detailCoords_19.zy) / tmpvar_48) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2DGradEXT (_steepTex, coord_49, tmpvar_36.xy, tmpvar_36.zw);
  vert_16 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (vert_16, detail_17, vec4(vertLerp_21));
  detail_17 = tmpvar_51;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_15 = tmpvar_52;
  mediump float tmpvar_53;
  tmpvar_53 = abs(detailCoords_19.x);
  highp vec2 coord_54;
  coord_54 = ((((0.5 * detailCoords_19.zy) / tmpvar_53) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_54, tmpvar_36.xy, tmpvar_36.zw);
  citydarkoverlaydetail_14 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = abs(detailCoords_19.x);
  highp vec2 coord_57;
  coord_57 = ((((0.5 * detailCoords_19.zy) / tmpvar_56) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_57, tmpvar_36.xy, tmpvar_36.zw);
  citylightoverlaydetail_13 = tmpvar_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_12 = tmpvar_59;
  mediump vec2 tmpvar_60;
  tmpvar_60 = encnorm_12.wy;
  localCoords_11 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_61.y;
  localCoords_11.x = (tmpvar_61.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62 = (uv_23 + localCoords_11);
  uv_23 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = cos((6.28319 * tmpvar_62.x));
  norm_10.z = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = sin((6.28319 * tmpvar_62.x));
  norm_10.x = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = cos((3.14159 * tmpvar_62.y));
  norm_10.y = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = -(norm_10);
  norm_10 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = mix (tmpvar_51, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_69;
  tmpvar_69 = (xlv_TEXCOORD0 * tmpvar_68);
  color_24 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_71;
  tmpvar_71 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_70 * tmpvar_70)));
  highp float tmpvar_72;
  tmpvar_72 = (float((_OceanRadius >= tmpvar_71)) * float((tmpvar_70 >= 0.0)));
  sphereCheck_8 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_70 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_71, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (color_24, _OceanColor, vec4((clamp ((tmpvar_73 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_73)), 0.0, 1.0)))));
  color_24 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_76);
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * citydarkoverlaydetail_14);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * citylightoverlaydetail_13);
  mediump vec4 tmpvar_79;
  tmpvar_79 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_78, tmpvar_78.wwww) * _Color);
  color_24.w = tmpvar_79.w;
  highp vec3 tmpvar_80;
  tmpvar_80 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_66, -(_SunDir)), 0.0, 1.0);
  highp float tmpvar_84;
  tmpvar_84 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_85;
  tmpvar_85 = (texture2D (_LightTextureB0, vec2(tmpvar_84)).w * textureCube (_LightTexture0, xlv_TEXCOORD2).w);
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_83, handoff_7)) * 2.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (tmpvar_79.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_89;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_83 - 0.01)) / 0.99) * 4.0) * tmpvar_85), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 400
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 404
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 408
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 412
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 416
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 441
#line 470
#line 441
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 445
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 449
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 453
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 458
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 400
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 404
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 408
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 412
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 416
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 441
#line 470
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 462
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    #line 466
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 470
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 474
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 478
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    #line 482
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    #line 486
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = xll_tex2Dgrad( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    #line 490
    mediump vec4 citylightoverlaydetail = xll_tex2Dgrad( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 494
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 498
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 502
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 506
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 510
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 514
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    #line 518
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 522
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    #line 526
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 530
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 534
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (floor(((1.0 + tmpvar_21.x) - tmpvar_21.z)), 0.0, 1.0);
  vec3 tmpvar_23;
  tmpvar_23 = mix (mix (tmpvar_21.zxy, tmpvar_21, vec3(tmpvar_22)), tmpvar_21.yxz, vec3(clamp (floor(((1.0 + tmpvar_21.y) - mix (tmpvar_21.z, tmpvar_21.x, tmpvar_22))), 0.0, 1.0)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_24.xyz;
  vec2 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_25.y;
  localCoords_3.x = (tmpvar_25.x * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_26;
  tmpvar_26 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_26;
  norm_2.z = cos((6.28319 * tmpvar_26.x));
  norm_2.x = sin((6.28319 * tmpvar_26.x));
  norm_2.y = cos((3.14159 * tmpvar_26.y));
  vec3 tmpvar_27;
  tmpvar_27 = -(norm_2);
  norm_2 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_29;
  tmpvar_29 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_28 * tmpvar_28)));
  float tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_28 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_29, 2.0)))), (float((_OceanRadius >= tmpvar_29)) * float((tmpvar_28 >= 0.0)))));
  float tmpvar_31;
  tmpvar_31 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_24.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_32;
  tmpvar_32 = (cityoverlay_4 * texture2DGradARB (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  citydarkoverlay_1.xyz = tmpvar_32.xyz;
  vec4 tmpvar_33;
  tmpvar_33 = (cityoverlay_4 * texture2DGradARB (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  vec4 tmpvar_34;
  tmpvar_34 = (mix (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_18.xy, tmpvar_18.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_18.xy, tmpvar_18.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_20), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_30 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_30)), 0.0, 1.0))))), tmpvar_19, vec4(tmpvar_31)), tmpvar_33, tmpvar_33.wwww) * _Color);
  color_6.w = tmpvar_34.w;
  float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_27, -(_SunDir)), 0.0, 1.0);
  float tmpvar_36;
  tmpvar_36 = texture2D (_LightTexture0, xlv_TEXCOORD2).w;
  vec3 tmpvar_37;
  tmpvar_37 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_35, tmpvar_31)) * 2.0) * tmpvar_36), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_6.xyz = (tmpvar_34.xyz + (_Albedo * tmpvar_37));
  color_6.xyz = (color_6.xyz * tmpvar_37);
  citydarkoverlay_1.w = (tmpvar_32.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_35 - 0.01)) / 0.99) * 4.0) * tmpvar_36), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 45 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o4.xyz, r0.x, r2
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
mad o6.x, r0, r0.y, c16
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
mov o5.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 citylightoverlaydetail_13;
  mediump vec4 citydarkoverlaydetail_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 vert_16;
  mediump vec4 detail_17;
  mediump float nylerp_18;
  mediump vec3 detailCoords_19;
  mediump float zxlerp_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec4 tmpvar_38;
  tmpvar_38.w = 0.0;
  tmpvar_38.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_38), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = abs(xlv_TEXCOORD5);
  highp float tmpvar_41;
  tmpvar_41 = clamp (floor(((1.0 + tmpvar_40.x) - tmpvar_40.z)), 0.0, 1.0);
  zxlerp_20 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.zxy, tmpvar_40, vec3(zxlerp_20));
  detailCoords_19 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (floor(((1.0 + tmpvar_40.y) - mix (tmpvar_40.z, tmpvar_40.x, zxlerp_20))), 0.0, 1.0);
  nylerp_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (detailCoords_19, tmpvar_40.yxz, vec3(nylerp_18));
  detailCoords_19 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_19.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_19.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_midTex, coord_46, tmpvar_36.xy, tmpvar_36.zw);
  detail_17 = tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = abs(detailCoords_19.x);
  highp vec2 coord_49;
  coord_49 = ((((0.5 * detailCoords_19.zy) / tmpvar_48) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2DGradEXT (_steepTex, coord_49, tmpvar_36.xy, tmpvar_36.zw);
  vert_16 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (vert_16, detail_17, vec4(vertLerp_21));
  detail_17 = tmpvar_51;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_15 = tmpvar_52;
  mediump float tmpvar_53;
  tmpvar_53 = abs(detailCoords_19.x);
  highp vec2 coord_54;
  coord_54 = ((((0.5 * detailCoords_19.zy) / tmpvar_53) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_54, tmpvar_36.xy, tmpvar_36.zw);
  citydarkoverlaydetail_14 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = abs(detailCoords_19.x);
  highp vec2 coord_57;
  coord_57 = ((((0.5 * detailCoords_19.zy) / tmpvar_56) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_57, tmpvar_36.xy, tmpvar_36.zw);
  citylightoverlaydetail_13 = tmpvar_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_12 = tmpvar_59;
  mediump vec2 tmpvar_60;
  tmpvar_60 = encnorm_12.wy;
  localCoords_11 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_61.y;
  localCoords_11.x = (tmpvar_61.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62 = (uv_23 + localCoords_11);
  uv_23 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = cos((6.28319 * tmpvar_62.x));
  norm_10.z = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = sin((6.28319 * tmpvar_62.x));
  norm_10.x = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = cos((3.14159 * tmpvar_62.y));
  norm_10.y = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = -(norm_10);
  norm_10 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = mix (tmpvar_51, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_69;
  tmpvar_69 = (xlv_TEXCOORD0 * tmpvar_68);
  color_24 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_71;
  tmpvar_71 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_70 * tmpvar_70)));
  highp float tmpvar_72;
  tmpvar_72 = (float((_OceanRadius >= tmpvar_71)) * float((tmpvar_70 >= 0.0)));
  sphereCheck_8 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_70 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_71, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (color_24, _OceanColor, vec4((clamp ((tmpvar_73 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_73)), 0.0, 1.0)))));
  color_24 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_76);
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * citydarkoverlaydetail_14);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * citylightoverlaydetail_13);
  mediump vec4 tmpvar_79;
  tmpvar_79 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_78, tmpvar_78.wwww) * _Color);
  color_24.w = tmpvar_79.w;
  highp vec3 tmpvar_80;
  tmpvar_80 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_80;
  lowp vec3 tmpvar_81;
  tmpvar_81 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_66, -(_SunDir)), 0.0, 1.0);
  lowp float tmpvar_84;
  tmpvar_84 = texture2D (_LightTexture0, xlv_TEXCOORD2).w;
  mediump float tmpvar_85;
  tmpvar_85 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_83, handoff_7)) * 2.0) * tmpvar_84), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (tmpvar_79.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_88;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_83 - 0.01)) / 0.99) * 4.0) * tmpvar_84), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 citylightoverlaydetail_13;
  mediump vec4 citydarkoverlaydetail_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 vert_16;
  mediump vec4 detail_17;
  mediump float nylerp_18;
  mediump vec3 detailCoords_19;
  mediump float zxlerp_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec4 tmpvar_38;
  tmpvar_38.w = 0.0;
  tmpvar_38.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_38), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = abs(xlv_TEXCOORD5);
  highp float tmpvar_41;
  tmpvar_41 = clamp (floor(((1.0 + tmpvar_40.x) - tmpvar_40.z)), 0.0, 1.0);
  zxlerp_20 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.zxy, tmpvar_40, vec3(zxlerp_20));
  detailCoords_19 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (floor(((1.0 + tmpvar_40.y) - mix (tmpvar_40.z, tmpvar_40.x, zxlerp_20))), 0.0, 1.0);
  nylerp_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (detailCoords_19, tmpvar_40.yxz, vec3(nylerp_18));
  detailCoords_19 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_19.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_19.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_midTex, coord_46, tmpvar_36.xy, tmpvar_36.zw);
  detail_17 = tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = abs(detailCoords_19.x);
  highp vec2 coord_49;
  coord_49 = ((((0.5 * detailCoords_19.zy) / tmpvar_48) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2DGradEXT (_steepTex, coord_49, tmpvar_36.xy, tmpvar_36.zw);
  vert_16 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (vert_16, detail_17, vec4(vertLerp_21));
  detail_17 = tmpvar_51;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_15 = tmpvar_52;
  mediump float tmpvar_53;
  tmpvar_53 = abs(detailCoords_19.x);
  highp vec2 coord_54;
  coord_54 = ((((0.5 * detailCoords_19.zy) / tmpvar_53) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_54, tmpvar_36.xy, tmpvar_36.zw);
  citydarkoverlaydetail_14 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = abs(detailCoords_19.x);
  highp vec2 coord_57;
  coord_57 = ((((0.5 * detailCoords_19.zy) / tmpvar_56) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_57, tmpvar_36.xy, tmpvar_36.zw);
  citylightoverlaydetail_13 = tmpvar_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_12 = tmpvar_59;
  mediump vec2 tmpvar_60;
  tmpvar_60 = encnorm_12.wy;
  localCoords_11 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_61.y;
  localCoords_11.x = (tmpvar_61.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62 = (uv_23 + localCoords_11);
  uv_23 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = cos((6.28319 * tmpvar_62.x));
  norm_10.z = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = sin((6.28319 * tmpvar_62.x));
  norm_10.x = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = cos((3.14159 * tmpvar_62.y));
  norm_10.y = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = -(norm_10);
  norm_10 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = mix (tmpvar_51, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_69;
  tmpvar_69 = (xlv_TEXCOORD0 * tmpvar_68);
  color_24 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_71;
  tmpvar_71 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_70 * tmpvar_70)));
  highp float tmpvar_72;
  tmpvar_72 = (float((_OceanRadius >= tmpvar_71)) * float((tmpvar_70 >= 0.0)));
  sphereCheck_8 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_70 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_71, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (color_24, _OceanColor, vec4((clamp ((tmpvar_73 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_73)), 0.0, 1.0)))));
  color_24 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_76);
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * citydarkoverlaydetail_14);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * citylightoverlaydetail_13);
  mediump vec4 tmpvar_79;
  tmpvar_79 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_78, tmpvar_78.wwww) * _Color);
  color_24.w = tmpvar_79.w;
  highp vec3 tmpvar_80;
  tmpvar_80 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_80;
  lowp vec3 tmpvar_81;
  tmpvar_81 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_66, -(_SunDir)), 0.0, 1.0);
  lowp float tmpvar_84;
  tmpvar_84 = texture2D (_LightTexture0, xlv_TEXCOORD2).w;
  mediump float tmpvar_85;
  tmpvar_85 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_83, handoff_7)) * 2.0) * tmpvar_84), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (tmpvar_79.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_88;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_83 - 0.01)) / 0.99) * 4.0) * tmpvar_84), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 407
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 411
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 415
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 469
#line 440
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 444
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 448
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 452
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 457
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 407
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 411
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 415
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 469
#line 459
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 461
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    #line 465
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 469
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 473
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 477
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    #line 481
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    #line 485
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = xll_tex2Dgrad( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    #line 489
    mediump vec4 citylightoverlaydetail = xll_tex2Dgrad( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 493
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 497
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 501
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 505
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 509
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 513
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    #line 517
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 521
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    #line 525
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 529
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 533
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (floor(((1.0 + tmpvar_21.x) - tmpvar_21.z)), 0.0, 1.0);
  vec3 tmpvar_23;
  tmpvar_23 = mix (mix (tmpvar_21.zxy, tmpvar_21, vec3(tmpvar_22)), tmpvar_21.yxz, vec3(clamp (floor(((1.0 + tmpvar_21.y) - mix (tmpvar_21.z, tmpvar_21.x, tmpvar_22))), 0.0, 1.0)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_24.xyz;
  vec2 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_25.y;
  localCoords_3.x = (tmpvar_25.x * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_26;
  tmpvar_26 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_26;
  norm_2.z = cos((6.28319 * tmpvar_26.x));
  norm_2.x = sin((6.28319 * tmpvar_26.x));
  norm_2.y = cos((3.14159 * tmpvar_26.y));
  vec3 tmpvar_27;
  tmpvar_27 = -(norm_2);
  norm_2 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_29;
  tmpvar_29 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_28 * tmpvar_28)));
  float tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_28 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_29, 2.0)))), (float((_OceanRadius >= tmpvar_29)) * float((tmpvar_28 >= 0.0)))));
  float tmpvar_31;
  tmpvar_31 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_24.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_32;
  tmpvar_32 = (cityoverlay_4 * texture2DGradARB (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  citydarkoverlay_1 = tmpvar_32;
  vec4 tmpvar_33;
  tmpvar_33 = (cityoverlay_4 * texture2DGradARB (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  vec4 tmpvar_34;
  tmpvar_34 = (mix (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_18.xy, tmpvar_18.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_18.xy, tmpvar_18.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_20), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_30 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_30)), 0.0, 1.0))))), tmpvar_19, vec4(tmpvar_31)), tmpvar_33, tmpvar_33.wwww) * _Color);
  color_6 = tmpvar_34;
  float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_27, -(_SunDir)), 0.0, 1.0);
  float tmpvar_36;
  tmpvar_36 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_35, tmpvar_31);
  vec4 tmpvar_37;
  tmpvar_37 = texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5));
  vec4 tmpvar_38;
  tmpvar_38 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz)));
  vec4 tmpvar_39;
  tmpvar_39 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  float tmpvar_40;
  if ((tmpvar_39.x < (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))) {
    tmpvar_40 = _LightShadowData.x;
  } else {
    tmpvar_40 = 1.0;
  };
  float tmpvar_41;
  tmpvar_41 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_37.w) * tmpvar_38.w) * tmpvar_40);
  vec3 tmpvar_42;
  tmpvar_42 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_36) * 2.0) * tmpvar_41), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_6.xyz = (tmpvar_34.xyz + (_Albedo * tmpvar_42));
  color_6.xyz = (color_6.xyz * tmpvar_42);
  citydarkoverlay_1.w = (tmpvar_32.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_35 - 0.01)) / 0.99) * 4.0) * tmpvar_41), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 51 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c10
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
mad o7.x, r0, r0.y, c20
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov o6.xyz, -r1
add r1.xyz, -r0, c16
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = mix (TNdotL_4, tmpvar_84, handoff_8);
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump float shadow_91;
  lowp vec4 tmpvar_92;
  tmpvar_92 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  highp float tmpvar_93;
  if ((tmpvar_92.x < (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  shadow_91 = tmpvar_93;
  tmpvar_90 = shadow_91;
  highp float tmpvar_94;
  tmpvar_94 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_3 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * tmpvar_85) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_98;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = mix (TNdotL_4, tmpvar_84, handoff_8);
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump float shadow_91;
  lowp vec4 tmpvar_92;
  tmpvar_92 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  highp float tmpvar_93;
  if ((tmpvar_92.x < (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  shadow_91 = tmpvar_93;
  tmpvar_90 = shadow_91;
  highp float tmpvar_94;
  tmpvar_94 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_3 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * tmpvar_85) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_98;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 442
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 432
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 414
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 418
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 422
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 426
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 430
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 456
#line 476
#line 456
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 460
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 464
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 468
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 472
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 442
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 432
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 414
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 418
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 422
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 426
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 430
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 456
#line 476
#line 476
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 480
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 484
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 486
lowp vec4 frag( in v2f IN ) {
    #line 488
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 492
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 496
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 500
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 504
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = xll_tex2Dgrad( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 citylightoverlaydetail = xll_tex2Dgrad( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 508
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    #line 512
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 516
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 520
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    #line 524
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    #line 528
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 532
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 536
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    #line 540
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 544
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 548
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (floor(((1.0 + tmpvar_21.x) - tmpvar_21.z)), 0.0, 1.0);
  vec3 tmpvar_23;
  tmpvar_23 = mix (mix (tmpvar_21.zxy, tmpvar_21, vec3(tmpvar_22)), tmpvar_21.yxz, vec3(clamp (floor(((1.0 + tmpvar_21.y) - mix (tmpvar_21.z, tmpvar_21.x, tmpvar_22))), 0.0, 1.0)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_24.xyz;
  vec2 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_25.y;
  localCoords_3.x = (tmpvar_25.x * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_26;
  tmpvar_26 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_26;
  norm_2.z = cos((6.28319 * tmpvar_26.x));
  norm_2.x = sin((6.28319 * tmpvar_26.x));
  norm_2.y = cos((3.14159 * tmpvar_26.y));
  vec3 tmpvar_27;
  tmpvar_27 = -(norm_2);
  norm_2 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_29;
  tmpvar_29 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_28 * tmpvar_28)));
  float tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_28 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_29, 2.0)))), (float((_OceanRadius >= tmpvar_29)) * float((tmpvar_28 >= 0.0)))));
  float tmpvar_31;
  tmpvar_31 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_24.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_32;
  tmpvar_32 = (cityoverlay_4 * texture2DGradARB (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  citydarkoverlay_1.xyz = tmpvar_32.xyz;
  vec4 tmpvar_33;
  tmpvar_33 = (cityoverlay_4 * texture2DGradARB (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  vec4 tmpvar_34;
  tmpvar_34 = (mix (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_18.xy, tmpvar_18.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_18.xy, tmpvar_18.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_20), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_30 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_30)), 0.0, 1.0))))), tmpvar_19, vec4(tmpvar_31)), tmpvar_33, tmpvar_33.wwww) * _Color);
  color_6.w = tmpvar_34.w;
  float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_27, -(_SunDir)), 0.0, 1.0);
  float tmpvar_36;
  tmpvar_36 = (((float((xlv_TEXCOORD2.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x * (1.0 - _LightShadowData.x))));
  vec3 tmpvar_37;
  tmpvar_37 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_35, tmpvar_31)) * 2.0) * tmpvar_36), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_6.xyz = (tmpvar_34.xyz + (_Albedo * tmpvar_37));
  color_6.xyz = (color_6.xyz * tmpvar_37);
  citydarkoverlay_1.w = (tmpvar_32.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_35 - 0.01)) / 0.99) * 4.0) * tmpvar_36), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 51 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c10
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
mad o7.x, r0, r0.y, c20
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov o6.xyz, -r1
add r1.xyz, -r0, c16
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7.xyz = tmpvar_78.xyz;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  lowp vec4 tmpvar_85;
  highp vec2 P_86;
  P_86 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_85 = texture2D (_LightTexture0, P_86);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  lowp float tmpvar_89;
  mediump float shadow_90;
  lowp float tmpvar_91;
  tmpvar_91 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD3);
  shadow_90 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = (_LightShadowData.x + (shadow_90 * (1.0 - _LightShadowData.x)));
  shadow_90 = tmpvar_92;
  tmpvar_89 = shadow_90;
  highp float tmpvar_93;
  tmpvar_93 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_85.w) * tmpvar_88.w) * tmpvar_89);
  atten_3 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_84, handoff_8)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_95;
  tmpvar_95 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_94)), 0.0, 1.0);
  light_2 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_97;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 443
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 433
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 415
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 419
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 423
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 427
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 431
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 457
#line 477
#line 457
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 461
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 465
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 469
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 473
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 443
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 433
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 415
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 419
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 423
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 427
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 431
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 457
#line 477
#line 477
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 481
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 485
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 487
lowp vec4 frag( in v2f IN ) {
    #line 489
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 493
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 497
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 501
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 505
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = xll_tex2Dgrad( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 citylightoverlaydetail = xll_tex2Dgrad( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 509
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    #line 513
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 517
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 521
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    #line 525
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    #line 529
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 533
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 537
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    #line 541
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 545
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 549
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex).xyz;
  vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_4, p_4));
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = gl_Normal;
  vec4 tmpvar_6;
  tmpvar_6.x = gl_MultiTexCoord0.x;
  tmpvar_6.y = gl_MultiTexCoord0.y;
  tmpvar_6.z = gl_MultiTexCoord1.x;
  tmpvar_6.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_7;
  tmpvar_7 = -(normalize(tmpvar_6).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_8;
  tmpvar_8 = dot (tmpvar_7, normalize(_SunDir));
  vec4 o_9;
  vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_2 * 0.5);
  vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_8)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_8)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_3 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (floor(((1.0 + tmpvar_21.x) - tmpvar_21.z)), 0.0, 1.0);
  vec3 tmpvar_23;
  tmpvar_23 = mix (mix (tmpvar_21.zxy, tmpvar_21, vec3(tmpvar_22)), tmpvar_21.yxz, vec3(clamp (floor(((1.0 + tmpvar_21.y) - mix (tmpvar_21.z, tmpvar_21.x, tmpvar_22))), 0.0, 1.0)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_24.xyz;
  vec2 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_25.y;
  localCoords_3.x = (tmpvar_25.x * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_26;
  tmpvar_26 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_26;
  norm_2.z = cos((6.28319 * tmpvar_26.x));
  norm_2.x = sin((6.28319 * tmpvar_26.x));
  norm_2.y = cos((3.14159 * tmpvar_26.y));
  vec3 tmpvar_27;
  tmpvar_27 = -(norm_2);
  norm_2 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_29;
  tmpvar_29 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_28 * tmpvar_28)));
  float tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_28 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_29, 2.0)))), (float((_OceanRadius >= tmpvar_29)) * float((tmpvar_28 >= 0.0)))));
  float tmpvar_31;
  tmpvar_31 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_24.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_32;
  tmpvar_32 = (cityoverlay_4 * texture2DGradARB (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  citydarkoverlay_1.xyz = tmpvar_32.xyz;
  vec4 tmpvar_33;
  tmpvar_33 = (cityoverlay_4 * texture2DGradARB (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  vec4 tmpvar_34;
  tmpvar_34 = (mix (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_18.xy, tmpvar_18.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_18.xy, tmpvar_18.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_20), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_30 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_30)), 0.0, 1.0))))), tmpvar_19, vec4(tmpvar_31)), tmpvar_33, tmpvar_33.wwww) * _Color);
  color_6.w = tmpvar_34.w;
  float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_27, -(_SunDir)), 0.0, 1.0);
  vec4 tmpvar_36;
  tmpvar_36 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2);
  vec3 tmpvar_37;
  tmpvar_37 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_35, tmpvar_31)) * 2.0) * tmpvar_36.x), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_6.xyz = (tmpvar_34.xyz + (_Albedo * tmpvar_37));
  color_6.xyz = (color_6.xyz * tmpvar_37);
  citydarkoverlay_1.w = (tmpvar_32.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_35 - 0.01)) / 0.99) * 4.0) * tmpvar_36.x), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Matrix 4 [_Object2World]
Vector 11 [_SunDir]
Vector 12 [_PlanetOrigin]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
def c13, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c14, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c11, c11
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c11
dp3 r1.w, -r1, r0
mov o5.xyz, -r1
mov r0.xyz, v2
mov r0.w, c13.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c13.z
dp3 r0.x, r2, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
add r2.w, r0.y, c13
mul_sat r0.z, -r1.w, c13.y
mad o6.x, r0.z, r2.w, c14.y
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r2.xyz, r0.xyww, c14.x
mul r2.y, r2, c9.x
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
mov o0, r0
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o8.xyz, r0.x, -r1
mov r1.xyz, c12
mad o3.xy, r2.z, c10.zwzw, r2
mov o1, v1
mov o3.zw, r0
mov o2.xyz, v2
rcp o2.w, r0.x
add o7.xyz, -c8, r1
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 citylightoverlaydetail_13;
  mediump vec4 citydarkoverlaydetail_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 vert_16;
  mediump vec4 detail_17;
  mediump float nylerp_18;
  mediump vec3 detailCoords_19;
  mediump float zxlerp_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec4 tmpvar_38;
  tmpvar_38.w = 0.0;
  tmpvar_38.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_38), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = abs(xlv_TEXCOORD5);
  highp float tmpvar_41;
  tmpvar_41 = clamp (floor(((1.0 + tmpvar_40.x) - tmpvar_40.z)), 0.0, 1.0);
  zxlerp_20 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.zxy, tmpvar_40, vec3(zxlerp_20));
  detailCoords_19 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (floor(((1.0 + tmpvar_40.y) - mix (tmpvar_40.z, tmpvar_40.x, zxlerp_20))), 0.0, 1.0);
  nylerp_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (detailCoords_19, tmpvar_40.yxz, vec3(nylerp_18));
  detailCoords_19 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_19.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_19.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_midTex, coord_46, tmpvar_36.xy, tmpvar_36.zw);
  detail_17 = tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = abs(detailCoords_19.x);
  highp vec2 coord_49;
  coord_49 = ((((0.5 * detailCoords_19.zy) / tmpvar_48) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2DGradEXT (_steepTex, coord_49, tmpvar_36.xy, tmpvar_36.zw);
  vert_16 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (vert_16, detail_17, vec4(vertLerp_21));
  detail_17 = tmpvar_51;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_15 = tmpvar_52;
  mediump float tmpvar_53;
  tmpvar_53 = abs(detailCoords_19.x);
  highp vec2 coord_54;
  coord_54 = ((((0.5 * detailCoords_19.zy) / tmpvar_53) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_54, tmpvar_36.xy, tmpvar_36.zw);
  citydarkoverlaydetail_14 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = abs(detailCoords_19.x);
  highp vec2 coord_57;
  coord_57 = ((((0.5 * detailCoords_19.zy) / tmpvar_56) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_57, tmpvar_36.xy, tmpvar_36.zw);
  citylightoverlaydetail_13 = tmpvar_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_12 = tmpvar_59;
  mediump vec2 tmpvar_60;
  tmpvar_60 = encnorm_12.wy;
  localCoords_11 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_61.y;
  localCoords_11.x = (tmpvar_61.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62 = (uv_23 + localCoords_11);
  uv_23 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = cos((6.28319 * tmpvar_62.x));
  norm_10.z = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = sin((6.28319 * tmpvar_62.x));
  norm_10.x = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = cos((3.14159 * tmpvar_62.y));
  norm_10.y = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = -(norm_10);
  norm_10 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = mix (tmpvar_51, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_69;
  tmpvar_69 = (xlv_TEXCOORD0 * tmpvar_68);
  color_24 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_71;
  tmpvar_71 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_70 * tmpvar_70)));
  highp float tmpvar_72;
  tmpvar_72 = (float((_OceanRadius >= tmpvar_71)) * float((tmpvar_70 >= 0.0)));
  sphereCheck_8 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_70 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_71, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (color_24, _OceanColor, vec4((clamp ((tmpvar_73 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_73)), 0.0, 1.0)))));
  color_24 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_76);
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * citydarkoverlaydetail_14);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * citylightoverlaydetail_13);
  mediump vec4 tmpvar_79;
  tmpvar_79 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_78, tmpvar_78.wwww) * _Color);
  color_24.w = tmpvar_79.w;
  highp vec3 tmpvar_80;
  tmpvar_80 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_80;
  lowp vec3 tmpvar_81;
  tmpvar_81 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_66, -(_SunDir)), 0.0, 1.0);
  lowp float tmpvar_84;
  mediump float lightShadowDataX_85;
  highp float dist_86;
  lowp float tmpvar_87;
  tmpvar_87 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_86 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = _LightShadowData.x;
  lightShadowDataX_85 = tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = max (float((dist_86 > (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w))), lightShadowDataX_85);
  tmpvar_84 = tmpvar_89;
  mediump float tmpvar_90;
  tmpvar_90 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_83, handoff_7)) * 2.0) * tmpvar_84), 0.0, 1.0);
  highp vec3 tmpvar_91;
  tmpvar_91 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_90)), 0.0, 1.0);
  light_2 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (tmpvar_79.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_93;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_83 - 0.01)) / 0.99) * 4.0) * tmpvar_84), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 tmpvar_6;
  tmpvar_6 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_7;
  p_7 = (tmpvar_6 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_7, p_7));
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_1;
  highp vec4 tmpvar_9;
  tmpvar_9.x = _glesMultiTexCoord0.x;
  tmpvar_9.y = _glesMultiTexCoord0.y;
  tmpvar_9.z = _glesMultiTexCoord1.x;
  tmpvar_9.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_10;
  tmpvar_10 = -(normalize(tmpvar_9).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_11;
  tmpvar_11 = normalize(_SunDir);
  highp float tmpvar_12;
  tmpvar_12 = dot (tmpvar_10, tmpvar_11);
  NdotL_2 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_13;
  highp vec4 o_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = o_14;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_8).xyz);
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_6 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 citylightoverlaydetail_13;
  mediump vec4 citydarkoverlaydetail_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 vert_16;
  mediump vec4 detail_17;
  mediump float nylerp_18;
  mediump vec3 detailCoords_19;
  mediump float zxlerp_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec4 tmpvar_38;
  tmpvar_38.w = 0.0;
  tmpvar_38.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_38), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = abs(xlv_TEXCOORD5);
  highp float tmpvar_41;
  tmpvar_41 = clamp (floor(((1.0 + tmpvar_40.x) - tmpvar_40.z)), 0.0, 1.0);
  zxlerp_20 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.zxy, tmpvar_40, vec3(zxlerp_20));
  detailCoords_19 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (floor(((1.0 + tmpvar_40.y) - mix (tmpvar_40.z, tmpvar_40.x, zxlerp_20))), 0.0, 1.0);
  nylerp_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (detailCoords_19, tmpvar_40.yxz, vec3(nylerp_18));
  detailCoords_19 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_19.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_19.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_midTex, coord_46, tmpvar_36.xy, tmpvar_36.zw);
  detail_17 = tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = abs(detailCoords_19.x);
  highp vec2 coord_49;
  coord_49 = ((((0.5 * detailCoords_19.zy) / tmpvar_48) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2DGradEXT (_steepTex, coord_49, tmpvar_36.xy, tmpvar_36.zw);
  vert_16 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (vert_16, detail_17, vec4(vertLerp_21));
  detail_17 = tmpvar_51;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_15 = tmpvar_52;
  mediump float tmpvar_53;
  tmpvar_53 = abs(detailCoords_19.x);
  highp vec2 coord_54;
  coord_54 = ((((0.5 * detailCoords_19.zy) / tmpvar_53) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_54, tmpvar_36.xy, tmpvar_36.zw);
  citydarkoverlaydetail_14 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = abs(detailCoords_19.x);
  highp vec2 coord_57;
  coord_57 = ((((0.5 * detailCoords_19.zy) / tmpvar_56) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_57, tmpvar_36.xy, tmpvar_36.zw);
  citylightoverlaydetail_13 = tmpvar_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_12 = tmpvar_59;
  mediump vec2 tmpvar_60;
  tmpvar_60 = encnorm_12.wy;
  localCoords_11 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_61.y;
  localCoords_11.x = (tmpvar_61.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62 = (uv_23 + localCoords_11);
  uv_23 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = cos((6.28319 * tmpvar_62.x));
  norm_10.z = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = sin((6.28319 * tmpvar_62.x));
  norm_10.x = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = cos((3.14159 * tmpvar_62.y));
  norm_10.y = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = -(norm_10);
  norm_10 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = mix (tmpvar_51, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_69;
  tmpvar_69 = (xlv_TEXCOORD0 * tmpvar_68);
  color_24 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_71;
  tmpvar_71 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_70 * tmpvar_70)));
  highp float tmpvar_72;
  tmpvar_72 = (float((_OceanRadius >= tmpvar_71)) * float((tmpvar_70 >= 0.0)));
  sphereCheck_8 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_70 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_71, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (color_24, _OceanColor, vec4((clamp ((tmpvar_73 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_73)), 0.0, 1.0)))));
  color_24 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_76);
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * citydarkoverlaydetail_14);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * citylightoverlaydetail_13);
  mediump vec4 tmpvar_79;
  tmpvar_79 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_78, tmpvar_78.wwww) * _Color);
  color_24.w = tmpvar_79.w;
  highp vec3 tmpvar_80;
  tmpvar_80 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_80;
  lowp vec3 tmpvar_81;
  tmpvar_81 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_66, -(_SunDir)), 0.0, 1.0);
  lowp vec4 tmpvar_84;
  tmpvar_84 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2);
  mediump float tmpvar_85;
  tmpvar_85 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_83, handoff_7)) * 2.0) * tmpvar_84.x), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (tmpvar_79.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_88;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_83 - 0.01)) / 0.99) * 4.0) * tmpvar_84.x), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 433
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 423
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 405
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 409
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 413
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 417
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 421
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 446
#line 475
#line 446
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 450
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 454
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 458
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 463
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 433
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 423
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 405
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 409
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 413
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 417
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 421
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 446
#line 475
#line 465
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 467
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    #line 471
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 475
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 479
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 483
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    #line 487
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    #line 491
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = xll_tex2Dgrad( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    #line 495
    mediump vec4 citylightoverlaydetail = xll_tex2Dgrad( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 499
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 503
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 507
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 511
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 515
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 519
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    #line 523
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 527
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 531
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 535
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 539
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex).xyz;
  vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_4, p_4));
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = gl_Normal;
  vec4 tmpvar_6;
  tmpvar_6.x = gl_MultiTexCoord0.x;
  tmpvar_6.y = gl_MultiTexCoord0.y;
  tmpvar_6.z = gl_MultiTexCoord1.x;
  tmpvar_6.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_7;
  tmpvar_7 = -(normalize(tmpvar_6).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_8;
  tmpvar_8 = dot (tmpvar_7, normalize(_SunDir));
  vec4 o_9;
  vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_2 * 0.5);
  vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_8)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_8)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_3 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (floor(((1.0 + tmpvar_21.x) - tmpvar_21.z)), 0.0, 1.0);
  vec3 tmpvar_23;
  tmpvar_23 = mix (mix (tmpvar_21.zxy, tmpvar_21, vec3(tmpvar_22)), tmpvar_21.yxz, vec3(clamp (floor(((1.0 + tmpvar_21.y) - mix (tmpvar_21.z, tmpvar_21.x, tmpvar_22))), 0.0, 1.0)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_24.xyz;
  vec2 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_25.y;
  localCoords_3.x = (tmpvar_25.x * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_26;
  tmpvar_26 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_26;
  norm_2.z = cos((6.28319 * tmpvar_26.x));
  norm_2.x = sin((6.28319 * tmpvar_26.x));
  norm_2.y = cos((3.14159 * tmpvar_26.y));
  vec3 tmpvar_27;
  tmpvar_27 = -(norm_2);
  norm_2 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_29;
  tmpvar_29 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_28 * tmpvar_28)));
  float tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_28 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_29, 2.0)))), (float((_OceanRadius >= tmpvar_29)) * float((tmpvar_28 >= 0.0)))));
  float tmpvar_31;
  tmpvar_31 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_24.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_32;
  tmpvar_32 = (cityoverlay_4 * texture2DGradARB (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  citydarkoverlay_1.xyz = tmpvar_32.xyz;
  vec4 tmpvar_33;
  tmpvar_33 = (cityoverlay_4 * texture2DGradARB (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  vec4 tmpvar_34;
  tmpvar_34 = (mix (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_18.xy, tmpvar_18.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_18.xy, tmpvar_18.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_20), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_30 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_30)), 0.0, 1.0))))), tmpvar_19, vec4(tmpvar_31)), tmpvar_33, tmpvar_33.wwww) * _Color);
  color_6.w = tmpvar_34.w;
  float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_27, -(_SunDir)), 0.0, 1.0);
  float tmpvar_36;
  tmpvar_36 = (texture2D (_LightTexture0, xlv_TEXCOORD2).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x);
  vec3 tmpvar_37;
  tmpvar_37 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_35, tmpvar_31)) * 2.0) * tmpvar_36), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_6.xyz = (tmpvar_34.xyz + (_Albedo * tmpvar_37));
  color_6.xyz = (color_6.xyz * tmpvar_37);
  citydarkoverlay_1.w = (tmpvar_32.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_35 - 0.01)) / 0.99) * 4.0) * tmpvar_36), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 15 [_SunDir]
Vector 16 [_PlanetOrigin]
"vs_3_0
; 50 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c17, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c18, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r1.x, c15, c15
rsq r1.x, r1.x
mov r1.w, c17.x
mov r0.xy, v3
mov r0.zw, v4.xyxy
dp4 r0.w, r0, r0
rsq r0.w, r0.w
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c15
dp3 r0.w, -r0, r1
mov r1.xyz, v2
mov o6.xyz, -r0
add r2.w, r0, c17.z
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
dp3 r1.x, r2, r2
frc r1.y, r2.w
add_sat r1.y, r2.w, -r1
rsq r1.x, r1.x
mul o5.xyz, r1.x, r2
dp4 r0.x, v0, c4
add r1.w, r1.y, c17
mul_sat r0.w, -r0, c17.y
mad o7.x, r0.w, r1.w, c18.y
dp4 r2.w, v0, c3
dp4 r2.z, v0, c2
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
dp4 r2.x, v0, c0
dp4 r2.y, v0, c1
mul r1.xyz, r2.xyww, c18.x
mul r1.y, r1, c13.x
mad o4.xy, r1.z, c14.zwzw, r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
rsq r0.x, r1.w
mul o9.xyz, r0.x, -r1
mov r1.xyz, c16
mov o0, r2
mov o1, v1
mov o4.zw, r2
mov o2.xyz, v2
rcp o2.w, r0.x
add o8.xyz, -c12, r1
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 citylightoverlaydetail_13;
  mediump vec4 citydarkoverlaydetail_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 vert_16;
  mediump vec4 detail_17;
  mediump float nylerp_18;
  mediump vec3 detailCoords_19;
  mediump float zxlerp_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec4 tmpvar_38;
  tmpvar_38.w = 0.0;
  tmpvar_38.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_38), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = abs(xlv_TEXCOORD5);
  highp float tmpvar_41;
  tmpvar_41 = clamp (floor(((1.0 + tmpvar_40.x) - tmpvar_40.z)), 0.0, 1.0);
  zxlerp_20 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.zxy, tmpvar_40, vec3(zxlerp_20));
  detailCoords_19 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (floor(((1.0 + tmpvar_40.y) - mix (tmpvar_40.z, tmpvar_40.x, zxlerp_20))), 0.0, 1.0);
  nylerp_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (detailCoords_19, tmpvar_40.yxz, vec3(nylerp_18));
  detailCoords_19 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_19.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_19.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_midTex, coord_46, tmpvar_36.xy, tmpvar_36.zw);
  detail_17 = tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = abs(detailCoords_19.x);
  highp vec2 coord_49;
  coord_49 = ((((0.5 * detailCoords_19.zy) / tmpvar_48) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2DGradEXT (_steepTex, coord_49, tmpvar_36.xy, tmpvar_36.zw);
  vert_16 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (vert_16, detail_17, vec4(vertLerp_21));
  detail_17 = tmpvar_51;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_15 = tmpvar_52;
  mediump float tmpvar_53;
  tmpvar_53 = abs(detailCoords_19.x);
  highp vec2 coord_54;
  coord_54 = ((((0.5 * detailCoords_19.zy) / tmpvar_53) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_54, tmpvar_36.xy, tmpvar_36.zw);
  citydarkoverlaydetail_14 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = abs(detailCoords_19.x);
  highp vec2 coord_57;
  coord_57 = ((((0.5 * detailCoords_19.zy) / tmpvar_56) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_57, tmpvar_36.xy, tmpvar_36.zw);
  citylightoverlaydetail_13 = tmpvar_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_12 = tmpvar_59;
  mediump vec2 tmpvar_60;
  tmpvar_60 = encnorm_12.wy;
  localCoords_11 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_61.y;
  localCoords_11.x = (tmpvar_61.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62 = (uv_23 + localCoords_11);
  uv_23 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = cos((6.28319 * tmpvar_62.x));
  norm_10.z = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = sin((6.28319 * tmpvar_62.x));
  norm_10.x = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = cos((3.14159 * tmpvar_62.y));
  norm_10.y = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = -(norm_10);
  norm_10 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = mix (tmpvar_51, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_69;
  tmpvar_69 = (xlv_TEXCOORD0 * tmpvar_68);
  color_24 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_71;
  tmpvar_71 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_70 * tmpvar_70)));
  highp float tmpvar_72;
  tmpvar_72 = (float((_OceanRadius >= tmpvar_71)) * float((tmpvar_70 >= 0.0)));
  sphereCheck_8 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_70 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_71, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (color_24, _OceanColor, vec4((clamp ((tmpvar_73 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_73)), 0.0, 1.0)))));
  color_24 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_76);
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * citydarkoverlaydetail_14);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * citylightoverlaydetail_13);
  mediump vec4 tmpvar_79;
  tmpvar_79 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_78, tmpvar_78.wwww) * _Color);
  color_24.w = tmpvar_79.w;
  highp vec3 tmpvar_80;
  tmpvar_80 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_80;
  lowp vec3 tmpvar_81;
  tmpvar_81 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_66, -(_SunDir)), 0.0, 1.0);
  lowp float tmpvar_84;
  mediump float lightShadowDataX_85;
  highp float dist_86;
  lowp float tmpvar_87;
  tmpvar_87 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_86 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = _LightShadowData.x;
  lightShadowDataX_85 = tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = max (float((dist_86 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_85);
  tmpvar_84 = tmpvar_89;
  lowp float tmpvar_90;
  tmpvar_90 = (texture2D (_LightTexture0, xlv_TEXCOORD2).w * tmpvar_84);
  mediump float tmpvar_91;
  tmpvar_91 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_83, handoff_7)) * 2.0) * tmpvar_90), 0.0, 1.0);
  highp vec3 tmpvar_92;
  tmpvar_92 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_91)), 0.0, 1.0);
  light_2 = tmpvar_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_93;
  highp vec3 tmpvar_94;
  tmpvar_94 = (tmpvar_79.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_94;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_83 - 0.01)) / 0.99) * 4.0) * tmpvar_90), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 tmpvar_6;
  tmpvar_6 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_7;
  p_7 = (tmpvar_6 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_7, p_7));
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_1;
  highp vec4 tmpvar_9;
  tmpvar_9.x = _glesMultiTexCoord0.x;
  tmpvar_9.y = _glesMultiTexCoord0.y;
  tmpvar_9.z = _glesMultiTexCoord1.x;
  tmpvar_9.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_10;
  tmpvar_10 = -(normalize(tmpvar_9).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_11;
  tmpvar_11 = normalize(_SunDir);
  highp float tmpvar_12;
  tmpvar_12 = dot (tmpvar_10, tmpvar_11);
  NdotL_2 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_13;
  highp vec4 o_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD3 = o_14;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_8).xyz);
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_6 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 citylightoverlaydetail_13;
  mediump vec4 citydarkoverlaydetail_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 vert_16;
  mediump vec4 detail_17;
  mediump float nylerp_18;
  mediump vec3 detailCoords_19;
  mediump float zxlerp_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec4 tmpvar_38;
  tmpvar_38.w = 0.0;
  tmpvar_38.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_38), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = abs(xlv_TEXCOORD5);
  highp float tmpvar_41;
  tmpvar_41 = clamp (floor(((1.0 + tmpvar_40.x) - tmpvar_40.z)), 0.0, 1.0);
  zxlerp_20 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.zxy, tmpvar_40, vec3(zxlerp_20));
  detailCoords_19 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (floor(((1.0 + tmpvar_40.y) - mix (tmpvar_40.z, tmpvar_40.x, zxlerp_20))), 0.0, 1.0);
  nylerp_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (detailCoords_19, tmpvar_40.yxz, vec3(nylerp_18));
  detailCoords_19 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_19.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_19.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_midTex, coord_46, tmpvar_36.xy, tmpvar_36.zw);
  detail_17 = tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = abs(detailCoords_19.x);
  highp vec2 coord_49;
  coord_49 = ((((0.5 * detailCoords_19.zy) / tmpvar_48) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2DGradEXT (_steepTex, coord_49, tmpvar_36.xy, tmpvar_36.zw);
  vert_16 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (vert_16, detail_17, vec4(vertLerp_21));
  detail_17 = tmpvar_51;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_15 = tmpvar_52;
  mediump float tmpvar_53;
  tmpvar_53 = abs(detailCoords_19.x);
  highp vec2 coord_54;
  coord_54 = ((((0.5 * detailCoords_19.zy) / tmpvar_53) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_54, tmpvar_36.xy, tmpvar_36.zw);
  citydarkoverlaydetail_14 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = abs(detailCoords_19.x);
  highp vec2 coord_57;
  coord_57 = ((((0.5 * detailCoords_19.zy) / tmpvar_56) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_57, tmpvar_36.xy, tmpvar_36.zw);
  citylightoverlaydetail_13 = tmpvar_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_12 = tmpvar_59;
  mediump vec2 tmpvar_60;
  tmpvar_60 = encnorm_12.wy;
  localCoords_11 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_61.y;
  localCoords_11.x = (tmpvar_61.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62 = (uv_23 + localCoords_11);
  uv_23 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = cos((6.28319 * tmpvar_62.x));
  norm_10.z = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = sin((6.28319 * tmpvar_62.x));
  norm_10.x = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = cos((3.14159 * tmpvar_62.y));
  norm_10.y = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = -(norm_10);
  norm_10 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = mix (tmpvar_51, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_69;
  tmpvar_69 = (xlv_TEXCOORD0 * tmpvar_68);
  color_24 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_71;
  tmpvar_71 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_70 * tmpvar_70)));
  highp float tmpvar_72;
  tmpvar_72 = (float((_OceanRadius >= tmpvar_71)) * float((tmpvar_70 >= 0.0)));
  sphereCheck_8 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_70 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_71, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (color_24, _OceanColor, vec4((clamp ((tmpvar_73 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_73)), 0.0, 1.0)))));
  color_24 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_76);
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * citydarkoverlaydetail_14);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * citylightoverlaydetail_13);
  mediump vec4 tmpvar_79;
  tmpvar_79 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_78, tmpvar_78.wwww) * _Color);
  color_24.w = tmpvar_79.w;
  highp vec3 tmpvar_80;
  tmpvar_80 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_80;
  lowp vec3 tmpvar_81;
  tmpvar_81 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_66, -(_SunDir)), 0.0, 1.0);
  lowp float tmpvar_84;
  tmpvar_84 = (texture2D (_LightTexture0, xlv_TEXCOORD2).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x);
  mediump float tmpvar_85;
  tmpvar_85 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_83, handoff_7)) * 2.0) * tmpvar_84), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (tmpvar_79.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_88;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_83 - 0.01)) / 0.99) * 4.0) * tmpvar_84), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 407
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 411
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 415
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 419
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 423
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 469
#line 449
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 453
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 457
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 461
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 465
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 407
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 411
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 415
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 419
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 423
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 469
#line 469
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 473
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 477
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 479
lowp vec4 frag( in v2f IN ) {
    #line 481
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 485
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 489
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 493
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 497
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = xll_tex2Dgrad( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 citylightoverlaydetail = xll_tex2Dgrad( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 501
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    #line 505
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 509
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 513
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    #line 517
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    #line 521
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 525
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 529
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    #line 533
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 537
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 541
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (floor(((1.0 + tmpvar_21.x) - tmpvar_21.z)), 0.0, 1.0);
  vec3 tmpvar_23;
  tmpvar_23 = mix (mix (tmpvar_21.zxy, tmpvar_21, vec3(tmpvar_22)), tmpvar_21.yxz, vec3(clamp (floor(((1.0 + tmpvar_21.y) - mix (tmpvar_21.z, tmpvar_21.x, tmpvar_22))), 0.0, 1.0)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_24.xyz;
  vec2 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_25.y;
  localCoords_3.x = (tmpvar_25.x * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_26;
  tmpvar_26 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_26;
  norm_2.z = cos((6.28319 * tmpvar_26.x));
  norm_2.x = sin((6.28319 * tmpvar_26.x));
  norm_2.y = cos((3.14159 * tmpvar_26.y));
  vec3 tmpvar_27;
  tmpvar_27 = -(norm_2);
  norm_2 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_29;
  tmpvar_29 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_28 * tmpvar_28)));
  float tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_28 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_29, 2.0)))), (float((_OceanRadius >= tmpvar_29)) * float((tmpvar_28 >= 0.0)))));
  float tmpvar_31;
  tmpvar_31 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_24.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_32;
  tmpvar_32 = (cityoverlay_4 * texture2DGradARB (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  citydarkoverlay_1 = tmpvar_32;
  vec4 tmpvar_33;
  tmpvar_33 = (cityoverlay_4 * texture2DGradARB (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  vec4 tmpvar_34;
  tmpvar_34 = (mix (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_18.xy, tmpvar_18.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_18.xy, tmpvar_18.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_20), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_30 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_30)), 0.0, 1.0))))), tmpvar_19, vec4(tmpvar_31)), tmpvar_33, tmpvar_33.wwww) * _Color);
  color_6 = tmpvar_34;
  float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_27, -(_SunDir)), 0.0, 1.0);
  float tmpvar_36;
  tmpvar_36 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_35, tmpvar_31);
  vec4 tmpvar_37;
  tmpvar_37 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  float tmpvar_38;
  tmpvar_38 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  float tmpvar_39;
  tmpvar_39 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD3), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_40;
  if ((tmpvar_39 < tmpvar_38)) {
    tmpvar_40 = _LightShadowData.x;
  } else {
    tmpvar_40 = 1.0;
  };
  float tmpvar_41;
  tmpvar_41 = (tmpvar_37.w * tmpvar_40);
  vec3 tmpvar_42;
  tmpvar_42 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_36) * 2.0) * tmpvar_41), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_6.xyz = (tmpvar_34.xyz + (_Albedo * tmpvar_42));
  color_6.xyz = (color_6.xyz * tmpvar_42);
  citydarkoverlay_1.w = (tmpvar_32.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_35 - 0.01)) / 0.99) * 4.0) * tmpvar_41), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
mad o7.x, r0, r0.y, c17
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
mov o6.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
mul o9.xyz, r1.w, -r1
mov r1.xyz, c15
mov o1, v1
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r0, -c13
add o8.xyz, -c12, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = mix (TNdotL_4, tmpvar_84, handoff_8);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTexture0, vec2(tmpvar_86));
  highp float tmpvar_88;
  tmpvar_88 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_89;
  lowp vec4 tmpvar_90;
  tmpvar_90 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_89 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = dot (packDist_89, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_92;
  if ((tmpvar_91 < tmpvar_88)) {
    tmpvar_92 = _LightShadowData.x;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  tmpvar_93 = (tmpvar_87.w * tmpvar_92);
  atten_3 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp ((((_LightColor0.w * tmpvar_85) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_95;
  tmpvar_95 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_94)), 0.0, 1.0);
  light_2 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_97;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = mix (TNdotL_4, tmpvar_84, handoff_8);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTexture0, vec2(tmpvar_86));
  highp float tmpvar_88;
  tmpvar_88 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_89;
  lowp vec4 tmpvar_90;
  tmpvar_90 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_89 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = dot (packDist_89, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_92;
  if ((tmpvar_91 < tmpvar_88)) {
    tmpvar_92 = _LightShadowData.x;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  tmpvar_93 = (tmpvar_87.w * tmpvar_92);
  atten_3 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp ((((_LightColor0.w * tmpvar_85) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_95;
  tmpvar_95 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_94)), 0.0, 1.0);
  light_2 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_97;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 440
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 430
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 412
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 416
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 420
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 424
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 428
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 454
#line 474
#line 454
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 458
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 462
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 466
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 470
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 440
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 430
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 412
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 416
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 420
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 424
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 428
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 454
#line 474
#line 474
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 478
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 482
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 484
lowp vec4 frag( in v2f IN ) {
    #line 486
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 490
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 494
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 498
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 502
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = xll_tex2Dgrad( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 citylightoverlaydetail = xll_tex2Dgrad( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 506
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    #line 510
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 514
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 518
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    #line 522
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    #line 526
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 530
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 534
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    #line 538
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 542
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 546
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (floor(((1.0 + tmpvar_21.x) - tmpvar_21.z)), 0.0, 1.0);
  vec3 tmpvar_23;
  tmpvar_23 = mix (mix (tmpvar_21.zxy, tmpvar_21, vec3(tmpvar_22)), tmpvar_21.yxz, vec3(clamp (floor(((1.0 + tmpvar_21.y) - mix (tmpvar_21.z, tmpvar_21.x, tmpvar_22))), 0.0, 1.0)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_24.xyz;
  vec2 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_25.y;
  localCoords_3.x = (tmpvar_25.x * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_26;
  tmpvar_26 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_26;
  norm_2.z = cos((6.28319 * tmpvar_26.x));
  norm_2.x = sin((6.28319 * tmpvar_26.x));
  norm_2.y = cos((3.14159 * tmpvar_26.y));
  vec3 tmpvar_27;
  tmpvar_27 = -(norm_2);
  norm_2 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_29;
  tmpvar_29 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_28 * tmpvar_28)));
  float tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_28 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_29, 2.0)))), (float((_OceanRadius >= tmpvar_29)) * float((tmpvar_28 >= 0.0)))));
  float tmpvar_31;
  tmpvar_31 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_24.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_32;
  tmpvar_32 = (cityoverlay_4 * texture2DGradARB (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  citydarkoverlay_1 = tmpvar_32;
  vec4 tmpvar_33;
  tmpvar_33 = (cityoverlay_4 * texture2DGradARB (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  vec4 tmpvar_34;
  tmpvar_34 = (mix (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_18.xy, tmpvar_18.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_18.xy, tmpvar_18.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_20), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_30 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_30)), 0.0, 1.0))))), tmpvar_19, vec4(tmpvar_31)), tmpvar_33, tmpvar_33.wwww) * _Color);
  color_6 = tmpvar_34;
  float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_27, -(_SunDir)), 0.0, 1.0);
  float tmpvar_36;
  tmpvar_36 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_35, tmpvar_31);
  vec4 tmpvar_37;
  tmpvar_37 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  vec4 tmpvar_38;
  tmpvar_38 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  float tmpvar_39;
  tmpvar_39 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  float tmpvar_40;
  tmpvar_40 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD3), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_41;
  if ((tmpvar_40 < tmpvar_39)) {
    tmpvar_41 = _LightShadowData.x;
  } else {
    tmpvar_41 = 1.0;
  };
  float tmpvar_42;
  tmpvar_42 = ((tmpvar_37.w * tmpvar_38.w) * tmpvar_41);
  vec3 tmpvar_43;
  tmpvar_43 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_36) * 2.0) * tmpvar_42), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_6.xyz = (tmpvar_34.xyz + (_Albedo * tmpvar_43));
  color_6.xyz = (color_6.xyz * tmpvar_43);
  citydarkoverlay_1.w = (tmpvar_32.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_35 - 0.01)) / 0.99) * 4.0) * tmpvar_42), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
mad o7.x, r0, r0.y, c17
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
mov o6.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
mul o9.xyz, r1.w, -r1
mov r1.xyz, c15
mov o1, v1
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r0, -c13
add o8.xyz, -c12, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = mix (TNdotL_4, tmpvar_84, handoff_8);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTextureB0, vec2(tmpvar_86));
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_89;
  tmpvar_89 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_90;
  lowp vec4 tmpvar_91;
  tmpvar_91 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_90 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = dot (packDist_90, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_93;
  if ((tmpvar_92 < tmpvar_89)) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  tmpvar_94 = ((tmpvar_87.w * tmpvar_88.w) * tmpvar_93);
  atten_3 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * tmpvar_85) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_98;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = mix (TNdotL_4, tmpvar_84, handoff_8);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTextureB0, vec2(tmpvar_86));
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_89;
  tmpvar_89 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_90;
  lowp vec4 tmpvar_91;
  tmpvar_91 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_90 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = dot (packDist_90, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_93;
  if ((tmpvar_92 < tmpvar_89)) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  tmpvar_94 = ((tmpvar_87.w * tmpvar_88.w) * tmpvar_93);
  atten_3 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * tmpvar_85) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_98;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 441
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 413
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 417
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 421
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 425
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 429
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 455
#line 475
#line 455
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 459
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 463
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 467
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 471
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 441
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 413
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 417
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 421
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 425
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 429
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 455
#line 475
#line 475
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 479
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 483
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 485
lowp vec4 frag( in v2f IN ) {
    #line 487
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 491
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 495
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 499
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 503
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = xll_tex2Dgrad( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 citylightoverlaydetail = xll_tex2Dgrad( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 507
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    #line 511
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 515
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 519
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    #line 523
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    #line 527
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 531
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 535
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    #line 539
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 543
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 547
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (floor(((1.0 + tmpvar_21.x) - tmpvar_21.z)), 0.0, 1.0);
  vec3 tmpvar_23;
  tmpvar_23 = mix (mix (tmpvar_21.zxy, tmpvar_21, vec3(tmpvar_22)), tmpvar_21.yxz, vec3(clamp (floor(((1.0 + tmpvar_21.y) - mix (tmpvar_21.z, tmpvar_21.x, tmpvar_22))), 0.0, 1.0)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_24.xyz;
  vec2 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_25.y;
  localCoords_3.x = (tmpvar_25.x * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_26;
  tmpvar_26 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_26;
  norm_2.z = cos((6.28319 * tmpvar_26.x));
  norm_2.x = sin((6.28319 * tmpvar_26.x));
  norm_2.y = cos((3.14159 * tmpvar_26.y));
  vec3 tmpvar_27;
  tmpvar_27 = -(norm_2);
  norm_2 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_29;
  tmpvar_29 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_28 * tmpvar_28)));
  float tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_28 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_29, 2.0)))), (float((_OceanRadius >= tmpvar_29)) * float((tmpvar_28 >= 0.0)))));
  float tmpvar_31;
  tmpvar_31 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_24.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_32;
  tmpvar_32 = (cityoverlay_4 * texture2DGradARB (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  citydarkoverlay_1 = tmpvar_32;
  vec4 tmpvar_33;
  tmpvar_33 = (cityoverlay_4 * texture2DGradARB (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  vec4 tmpvar_34;
  tmpvar_34 = (mix (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_18.xy, tmpvar_18.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_18.xy, tmpvar_18.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_20), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_30 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_30)), 0.0, 1.0))))), tmpvar_19, vec4(tmpvar_31)), tmpvar_33, tmpvar_33.wwww) * _Color);
  color_6 = tmpvar_34;
  float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_27, -(_SunDir)), 0.0, 1.0);
  float tmpvar_36;
  tmpvar_36 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_35, tmpvar_31);
  vec4 tmpvar_37;
  tmpvar_37 = texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5));
  vec4 tmpvar_38;
  tmpvar_38 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz)));
  vec4 shadowVals_39;
  vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  shadowVals_39.x = texture2D (_ShadowMapTexture, (tmpvar_40.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_39.y = texture2D (_ShadowMapTexture, (tmpvar_40.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_39.z = texture2D (_ShadowMapTexture, (tmpvar_40.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_39.w = texture2D (_ShadowMapTexture, (tmpvar_40.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_41;
  tmpvar_41 = lessThan (shadowVals_39, tmpvar_40.zzzz);
  vec4 tmpvar_42;
  tmpvar_42 = _LightShadowData.xxxx;
  float tmpvar_43;
  if (tmpvar_41.x) {
    tmpvar_43 = tmpvar_42.x;
  } else {
    tmpvar_43 = 1.0;
  };
  float tmpvar_44;
  if (tmpvar_41.y) {
    tmpvar_44 = tmpvar_42.y;
  } else {
    tmpvar_44 = 1.0;
  };
  float tmpvar_45;
  if (tmpvar_41.z) {
    tmpvar_45 = tmpvar_42.z;
  } else {
    tmpvar_45 = 1.0;
  };
  float tmpvar_46;
  if (tmpvar_41.w) {
    tmpvar_46 = tmpvar_42.w;
  } else {
    tmpvar_46 = 1.0;
  };
  vec4 tmpvar_47;
  tmpvar_47.x = tmpvar_43;
  tmpvar_47.y = tmpvar_44;
  tmpvar_47.z = tmpvar_45;
  tmpvar_47.w = tmpvar_46;
  float tmpvar_48;
  tmpvar_48 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_37.w) * tmpvar_38.w) * dot (tmpvar_47, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_49;
  tmpvar_49 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_36) * 2.0) * tmpvar_48), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_6.xyz = (tmpvar_34.xyz + (_Albedo * tmpvar_49));
  color_6.xyz = (color_6.xyz * tmpvar_49);
  citydarkoverlay_1.w = (tmpvar_32.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_35 - 0.01)) / 0.99) * 4.0) * tmpvar_48), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 51 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c10
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
mad o7.x, r0, r0.y, c20
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov o6.xyz, -r1
add r1.xyz, -r0, c16
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = mix (TNdotL_4, tmpvar_84, handoff_8);
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump vec4 shadows_91;
  highp vec4 shadowVals_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  highp vec2 P_94;
  P_94 = (tmpvar_93.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_95;
  tmpvar_95 = texture2D (_ShadowMapTexture, P_94).x;
  shadowVals_92.x = tmpvar_95;
  highp vec2 P_96;
  P_96 = (tmpvar_93.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_97;
  tmpvar_97 = texture2D (_ShadowMapTexture, P_96).x;
  shadowVals_92.y = tmpvar_97;
  highp vec2 P_98;
  P_98 = (tmpvar_93.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_99;
  tmpvar_99 = texture2D (_ShadowMapTexture, P_98).x;
  shadowVals_92.z = tmpvar_99;
  highp vec2 P_100;
  P_100 = (tmpvar_93.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_101;
  tmpvar_101 = texture2D (_ShadowMapTexture, P_100).x;
  shadowVals_92.w = tmpvar_101;
  bvec4 tmpvar_102;
  tmpvar_102 = lessThan (shadowVals_92, tmpvar_93.zzzz);
  highp vec4 tmpvar_103;
  tmpvar_103 = _LightShadowData.xxxx;
  highp float tmpvar_104;
  if (tmpvar_102.x) {
    tmpvar_104 = tmpvar_103.x;
  } else {
    tmpvar_104 = 1.0;
  };
  highp float tmpvar_105;
  if (tmpvar_102.y) {
    tmpvar_105 = tmpvar_103.y;
  } else {
    tmpvar_105 = 1.0;
  };
  highp float tmpvar_106;
  if (tmpvar_102.z) {
    tmpvar_106 = tmpvar_103.z;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_102.w) {
    tmpvar_107 = tmpvar_103.w;
  } else {
    tmpvar_107 = 1.0;
  };
  highp vec4 tmpvar_108;
  tmpvar_108.x = tmpvar_104;
  tmpvar_108.y = tmpvar_105;
  tmpvar_108.z = tmpvar_106;
  tmpvar_108.w = tmpvar_107;
  shadows_91 = tmpvar_108;
  mediump float tmpvar_109;
  tmpvar_109 = dot (shadows_91, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_90 = tmpvar_109;
  highp float tmpvar_110;
  tmpvar_110 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_3 = tmpvar_110;
  mediump float tmpvar_111;
  tmpvar_111 = clamp ((((_LightColor0.w * tmpvar_85) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_112;
  tmpvar_112 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_111)), 0.0, 1.0);
  light_2 = tmpvar_112;
  highp vec3 tmpvar_113;
  tmpvar_113 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_113;
  highp vec3 tmpvar_114;
  tmpvar_114 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_114;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = mix (TNdotL_4, tmpvar_84, handoff_8);
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump vec4 shadows_91;
  highp vec4 shadowVals_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  highp vec2 P_94;
  P_94 = (tmpvar_93.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_95;
  tmpvar_95 = texture2D (_ShadowMapTexture, P_94).x;
  shadowVals_92.x = tmpvar_95;
  highp vec2 P_96;
  P_96 = (tmpvar_93.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_97;
  tmpvar_97 = texture2D (_ShadowMapTexture, P_96).x;
  shadowVals_92.y = tmpvar_97;
  highp vec2 P_98;
  P_98 = (tmpvar_93.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_99;
  tmpvar_99 = texture2D (_ShadowMapTexture, P_98).x;
  shadowVals_92.z = tmpvar_99;
  highp vec2 P_100;
  P_100 = (tmpvar_93.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_101;
  tmpvar_101 = texture2D (_ShadowMapTexture, P_100).x;
  shadowVals_92.w = tmpvar_101;
  bvec4 tmpvar_102;
  tmpvar_102 = lessThan (shadowVals_92, tmpvar_93.zzzz);
  highp vec4 tmpvar_103;
  tmpvar_103 = _LightShadowData.xxxx;
  highp float tmpvar_104;
  if (tmpvar_102.x) {
    tmpvar_104 = tmpvar_103.x;
  } else {
    tmpvar_104 = 1.0;
  };
  highp float tmpvar_105;
  if (tmpvar_102.y) {
    tmpvar_105 = tmpvar_103.y;
  } else {
    tmpvar_105 = 1.0;
  };
  highp float tmpvar_106;
  if (tmpvar_102.z) {
    tmpvar_106 = tmpvar_103.z;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_102.w) {
    tmpvar_107 = tmpvar_103.w;
  } else {
    tmpvar_107 = 1.0;
  };
  highp vec4 tmpvar_108;
  tmpvar_108.x = tmpvar_104;
  tmpvar_108.y = tmpvar_105;
  tmpvar_108.z = tmpvar_106;
  tmpvar_108.w = tmpvar_107;
  shadows_91 = tmpvar_108;
  mediump float tmpvar_109;
  tmpvar_109 = dot (shadows_91, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_90 = tmpvar_109;
  highp float tmpvar_110;
  tmpvar_110 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_3 = tmpvar_110;
  mediump float tmpvar_111;
  tmpvar_111 = clamp ((((_LightColor0.w * tmpvar_85) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_112;
  tmpvar_112 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_111)), 0.0, 1.0);
  light_2 = tmpvar_112;
  highp vec3 tmpvar_113;
  tmpvar_113 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_113;
  highp vec3 tmpvar_114;
  tmpvar_114 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_114;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 450
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 440
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 430
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 434
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 438
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 464
#line 484
#line 464
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 468
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 472
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 476
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 480
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 450
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 440
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 430
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 434
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 438
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 464
#line 484
#line 484
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 488
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 492
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 494
lowp vec4 frag( in v2f IN ) {
    #line 496
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 500
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 504
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 508
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 512
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = xll_tex2Dgrad( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 citylightoverlaydetail = xll_tex2Dgrad( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 516
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    #line 520
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 524
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 528
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    #line 532
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    #line 536
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 540
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 544
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    #line 548
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 552
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 556
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (floor(((1.0 + tmpvar_21.x) - tmpvar_21.z)), 0.0, 1.0);
  vec3 tmpvar_23;
  tmpvar_23 = mix (mix (tmpvar_21.zxy, tmpvar_21, vec3(tmpvar_22)), tmpvar_21.yxz, vec3(clamp (floor(((1.0 + tmpvar_21.y) - mix (tmpvar_21.z, tmpvar_21.x, tmpvar_22))), 0.0, 1.0)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_24.xyz;
  vec2 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_25.y;
  localCoords_3.x = (tmpvar_25.x * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_26;
  tmpvar_26 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_26;
  norm_2.z = cos((6.28319 * tmpvar_26.x));
  norm_2.x = sin((6.28319 * tmpvar_26.x));
  norm_2.y = cos((3.14159 * tmpvar_26.y));
  vec3 tmpvar_27;
  tmpvar_27 = -(norm_2);
  norm_2 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_29;
  tmpvar_29 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_28 * tmpvar_28)));
  float tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_28 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_29, 2.0)))), (float((_OceanRadius >= tmpvar_29)) * float((tmpvar_28 >= 0.0)))));
  float tmpvar_31;
  tmpvar_31 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_24.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_32;
  tmpvar_32 = (cityoverlay_4 * texture2DGradARB (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  citydarkoverlay_1.xyz = tmpvar_32.xyz;
  vec4 tmpvar_33;
  tmpvar_33 = (cityoverlay_4 * texture2DGradARB (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  vec4 tmpvar_34;
  tmpvar_34 = (mix (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_18.xy, tmpvar_18.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_18.xy, tmpvar_18.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_20), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_30 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_30)), 0.0, 1.0))))), tmpvar_19, vec4(tmpvar_31)), tmpvar_33, tmpvar_33.wwww) * _Color);
  color_6.w = tmpvar_34.w;
  float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_27, -(_SunDir)), 0.0, 1.0);
  vec4 shadows_36;
  vec3 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  shadows_36.x = shadow2D (_ShadowMapTexture, (tmpvar_37 + _ShadowOffsets[0].xyz)).x;
  shadows_36.y = shadow2D (_ShadowMapTexture, (tmpvar_37 + _ShadowOffsets[1].xyz)).x;
  shadows_36.z = shadow2D (_ShadowMapTexture, (tmpvar_37 + _ShadowOffsets[2].xyz)).x;
  shadows_36.w = shadow2D (_ShadowMapTexture, (tmpvar_37 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_38;
  tmpvar_38 = (_LightShadowData.xxxx + (shadows_36 * (1.0 - _LightShadowData.xxxx)));
  shadows_36 = tmpvar_38;
  float tmpvar_39;
  tmpvar_39 = (((float((xlv_TEXCOORD2.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz))).w) * dot (tmpvar_38, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_40;
  tmpvar_40 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_35, tmpvar_31)) * 2.0) * tmpvar_39), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_6.xyz = (tmpvar_34.xyz + (_Albedo * tmpvar_40));
  color_6.xyz = (color_6.xyz * tmpvar_40);
  citydarkoverlay_1.w = (tmpvar_32.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_35 - 0.01)) / 0.99) * 4.0) * tmpvar_39), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 51 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c10
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
mad o7.x, r0, r0.y, c20
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov o6.xyz, -r1
add r1.xyz, -r0, c16
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7.xyz = tmpvar_78.xyz;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  lowp vec4 tmpvar_85;
  highp vec2 P_86;
  P_86 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_85 = texture2D (_LightTexture0, P_86);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  lowp float tmpvar_89;
  mediump vec4 shadows_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  highp vec3 coord_92;
  coord_92 = (tmpvar_91 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_93;
  tmpvar_93 = shadow2DEXT (_ShadowMapTexture, coord_92);
  shadows_90.x = tmpvar_93;
  highp vec3 coord_94;
  coord_94 = (tmpvar_91 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_95;
  tmpvar_95 = shadow2DEXT (_ShadowMapTexture, coord_94);
  shadows_90.y = tmpvar_95;
  highp vec3 coord_96;
  coord_96 = (tmpvar_91 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_97;
  tmpvar_97 = shadow2DEXT (_ShadowMapTexture, coord_96);
  shadows_90.z = tmpvar_97;
  highp vec3 coord_98;
  coord_98 = (tmpvar_91 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_99;
  tmpvar_99 = shadow2DEXT (_ShadowMapTexture, coord_98);
  shadows_90.w = tmpvar_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (_LightShadowData.xxxx + (shadows_90 * (1.0 - _LightShadowData.xxxx)));
  shadows_90 = tmpvar_100;
  mediump float tmpvar_101;
  tmpvar_101 = dot (shadows_90, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_89 = tmpvar_101;
  highp float tmpvar_102;
  tmpvar_102 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_85.w) * tmpvar_88.w) * tmpvar_89);
  atten_3 = tmpvar_102;
  mediump float tmpvar_103;
  tmpvar_103 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_84, handoff_8)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_104;
  tmpvar_104 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_103)), 0.0, 1.0);
  light_2 = tmpvar_104;
  highp vec3 tmpvar_105;
  tmpvar_105 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_105;
  highp vec3 tmpvar_106;
  tmpvar_106 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_106;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 450
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 440
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 430
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 434
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 438
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 464
#line 484
#line 464
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 468
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 472
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 476
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 480
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 450
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 440
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 430
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 434
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 438
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 464
#line 484
#line 484
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 488
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 492
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 494
lowp vec4 frag( in v2f IN ) {
    #line 496
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 500
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 504
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 508
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 512
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = xll_tex2Dgrad( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 citylightoverlaydetail = xll_tex2Dgrad( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 516
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    #line 520
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 524
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 528
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    #line 532
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    #line 536
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 540
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 544
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    #line 548
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 552
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 556
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (floor(((1.0 + tmpvar_21.x) - tmpvar_21.z)), 0.0, 1.0);
  vec3 tmpvar_23;
  tmpvar_23 = mix (mix (tmpvar_21.zxy, tmpvar_21, vec3(tmpvar_22)), tmpvar_21.yxz, vec3(clamp (floor(((1.0 + tmpvar_21.y) - mix (tmpvar_21.z, tmpvar_21.x, tmpvar_22))), 0.0, 1.0)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_24.xyz;
  vec2 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_25.y;
  localCoords_3.x = (tmpvar_25.x * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_26;
  tmpvar_26 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_26;
  norm_2.z = cos((6.28319 * tmpvar_26.x));
  norm_2.x = sin((6.28319 * tmpvar_26.x));
  norm_2.y = cos((3.14159 * tmpvar_26.y));
  vec3 tmpvar_27;
  tmpvar_27 = -(norm_2);
  norm_2 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_29;
  tmpvar_29 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_28 * tmpvar_28)));
  float tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_28 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_29, 2.0)))), (float((_OceanRadius >= tmpvar_29)) * float((tmpvar_28 >= 0.0)))));
  float tmpvar_31;
  tmpvar_31 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_24.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_32;
  tmpvar_32 = (cityoverlay_4 * texture2DGradARB (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  citydarkoverlay_1 = tmpvar_32;
  vec4 tmpvar_33;
  tmpvar_33 = (cityoverlay_4 * texture2DGradARB (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  vec4 tmpvar_34;
  tmpvar_34 = (mix (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_18.xy, tmpvar_18.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_18.xy, tmpvar_18.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_20), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_30 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_30)), 0.0, 1.0))))), tmpvar_19, vec4(tmpvar_31)), tmpvar_33, tmpvar_33.wwww) * _Color);
  color_6 = tmpvar_34;
  float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_27, -(_SunDir)), 0.0, 1.0);
  float tmpvar_36;
  tmpvar_36 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_35, tmpvar_31);
  vec4 tmpvar_37;
  tmpvar_37 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  vec4 shadowVals_38;
  shadowVals_38.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_38.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_38.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_38.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_39;
  tmpvar_39 = lessThan (shadowVals_38, vec4(((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_40;
  tmpvar_40 = _LightShadowData.xxxx;
  float tmpvar_41;
  if (tmpvar_39.x) {
    tmpvar_41 = tmpvar_40.x;
  } else {
    tmpvar_41 = 1.0;
  };
  float tmpvar_42;
  if (tmpvar_39.y) {
    tmpvar_42 = tmpvar_40.y;
  } else {
    tmpvar_42 = 1.0;
  };
  float tmpvar_43;
  if (tmpvar_39.z) {
    tmpvar_43 = tmpvar_40.z;
  } else {
    tmpvar_43 = 1.0;
  };
  float tmpvar_44;
  if (tmpvar_39.w) {
    tmpvar_44 = tmpvar_40.w;
  } else {
    tmpvar_44 = 1.0;
  };
  vec4 tmpvar_45;
  tmpvar_45.x = tmpvar_41;
  tmpvar_45.y = tmpvar_42;
  tmpvar_45.z = tmpvar_43;
  tmpvar_45.w = tmpvar_44;
  float tmpvar_46;
  tmpvar_46 = (tmpvar_37.w * dot (tmpvar_45, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_47;
  tmpvar_47 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_36) * 2.0) * tmpvar_46), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_6.xyz = (tmpvar_34.xyz + (_Albedo * tmpvar_47));
  color_6.xyz = (color_6.xyz * tmpvar_47);
  citydarkoverlay_1.w = (tmpvar_32.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_35 - 0.01)) / 0.99) * 4.0) * tmpvar_46), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
mad o7.x, r0, r0.y, c17
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
mov o6.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
mul o9.xyz, r1.w, -r1
mov r1.xyz, c15
mov o1, v1
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r0, -c13
add o8.xyz, -c12, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = mix (TNdotL_4, tmpvar_84, handoff_8);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTexture0, vec2(tmpvar_86));
  highp float tmpvar_88;
  mediump vec4 shadows_89;
  highp vec4 shadowVals_90;
  highp float tmpvar_91;
  tmpvar_91 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_92;
  vec_92 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_93;
  lowp vec4 tmpvar_94;
  tmpvar_94 = textureCube (_ShadowMapTexture, vec_92);
  packDist_93 = tmpvar_94;
  shadowVals_90.x = dot (packDist_93, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_95;
  vec_95 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_96;
  lowp vec4 tmpvar_97;
  tmpvar_97 = textureCube (_ShadowMapTexture, vec_95);
  packDist_96 = tmpvar_97;
  shadowVals_90.y = dot (packDist_96, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_98;
  vec_98 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_99;
  lowp vec4 tmpvar_100;
  tmpvar_100 = textureCube (_ShadowMapTexture, vec_98);
  packDist_99 = tmpvar_100;
  shadowVals_90.z = dot (packDist_99, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_101;
  vec_101 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_102;
  lowp vec4 tmpvar_103;
  tmpvar_103 = textureCube (_ShadowMapTexture, vec_101);
  packDist_102 = tmpvar_103;
  shadowVals_90.w = dot (packDist_102, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_104;
  tmpvar_104 = lessThan (shadowVals_90, vec4(tmpvar_91));
  highp vec4 tmpvar_105;
  tmpvar_105 = _LightShadowData.xxxx;
  highp float tmpvar_106;
  if (tmpvar_104.x) {
    tmpvar_106 = tmpvar_105.x;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_104.y) {
    tmpvar_107 = tmpvar_105.y;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_104.z) {
    tmpvar_108 = tmpvar_105.z;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_104.w) {
    tmpvar_109 = tmpvar_105.w;
  } else {
    tmpvar_109 = 1.0;
  };
  highp vec4 tmpvar_110;
  tmpvar_110.x = tmpvar_106;
  tmpvar_110.y = tmpvar_107;
  tmpvar_110.z = tmpvar_108;
  tmpvar_110.w = tmpvar_109;
  shadows_89 = tmpvar_110;
  mediump float tmpvar_111;
  tmpvar_111 = dot (shadows_89, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_88 = tmpvar_111;
  highp float tmpvar_112;
  tmpvar_112 = (tmpvar_87.w * tmpvar_88);
  atten_3 = tmpvar_112;
  mediump float tmpvar_113;
  tmpvar_113 = clamp ((((_LightColor0.w * tmpvar_85) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_114;
  tmpvar_114 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_113)), 0.0, 1.0);
  light_2 = tmpvar_114;
  highp vec3 tmpvar_115;
  tmpvar_115 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_115;
  highp vec3 tmpvar_116;
  tmpvar_116 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_116;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = mix (TNdotL_4, tmpvar_84, handoff_8);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTexture0, vec2(tmpvar_86));
  highp float tmpvar_88;
  mediump vec4 shadows_89;
  highp vec4 shadowVals_90;
  highp float tmpvar_91;
  tmpvar_91 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_92;
  vec_92 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_93;
  lowp vec4 tmpvar_94;
  tmpvar_94 = textureCube (_ShadowMapTexture, vec_92);
  packDist_93 = tmpvar_94;
  shadowVals_90.x = dot (packDist_93, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_95;
  vec_95 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_96;
  lowp vec4 tmpvar_97;
  tmpvar_97 = textureCube (_ShadowMapTexture, vec_95);
  packDist_96 = tmpvar_97;
  shadowVals_90.y = dot (packDist_96, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_98;
  vec_98 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_99;
  lowp vec4 tmpvar_100;
  tmpvar_100 = textureCube (_ShadowMapTexture, vec_98);
  packDist_99 = tmpvar_100;
  shadowVals_90.z = dot (packDist_99, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_101;
  vec_101 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_102;
  lowp vec4 tmpvar_103;
  tmpvar_103 = textureCube (_ShadowMapTexture, vec_101);
  packDist_102 = tmpvar_103;
  shadowVals_90.w = dot (packDist_102, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_104;
  tmpvar_104 = lessThan (shadowVals_90, vec4(tmpvar_91));
  highp vec4 tmpvar_105;
  tmpvar_105 = _LightShadowData.xxxx;
  highp float tmpvar_106;
  if (tmpvar_104.x) {
    tmpvar_106 = tmpvar_105.x;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_104.y) {
    tmpvar_107 = tmpvar_105.y;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_104.z) {
    tmpvar_108 = tmpvar_105.z;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_104.w) {
    tmpvar_109 = tmpvar_105.w;
  } else {
    tmpvar_109 = 1.0;
  };
  highp vec4 tmpvar_110;
  tmpvar_110.x = tmpvar_106;
  tmpvar_110.y = tmpvar_107;
  tmpvar_110.z = tmpvar_108;
  tmpvar_110.w = tmpvar_109;
  shadows_89 = tmpvar_110;
  mediump float tmpvar_111;
  tmpvar_111 = dot (shadows_89, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_88 = tmpvar_111;
  highp float tmpvar_112;
  tmpvar_112 = (tmpvar_87.w * tmpvar_88);
  atten_3 = tmpvar_112;
  mediump float tmpvar_113;
  tmpvar_113 = clamp ((((_LightColor0.w * tmpvar_85) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_114;
  tmpvar_114 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_113)), 0.0, 1.0);
  light_2 = tmpvar_114;
  highp vec3 tmpvar_115;
  tmpvar_115 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_115;
  highp vec3 tmpvar_116;
  tmpvar_116 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_116;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 446
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 436
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 418
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 422
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 426
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 430
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 434
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 460
#line 480
#line 460
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 464
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 468
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 472
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 476
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 446
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 436
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 418
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 422
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 426
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 430
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 434
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 460
#line 480
#line 480
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 484
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 488
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 490
lowp vec4 frag( in v2f IN ) {
    #line 492
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 496
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 500
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 504
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 508
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = xll_tex2Dgrad( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 citylightoverlaydetail = xll_tex2Dgrad( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 512
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    #line 516
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 520
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 524
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    #line 528
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    #line 532
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 536
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 540
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    #line 544
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 548
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 552
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (floor(((1.0 + tmpvar_21.x) - tmpvar_21.z)), 0.0, 1.0);
  vec3 tmpvar_23;
  tmpvar_23 = mix (mix (tmpvar_21.zxy, tmpvar_21, vec3(tmpvar_22)), tmpvar_21.yxz, vec3(clamp (floor(((1.0 + tmpvar_21.y) - mix (tmpvar_21.z, tmpvar_21.x, tmpvar_22))), 0.0, 1.0)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_24.xyz;
  vec2 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_25.y;
  localCoords_3.x = (tmpvar_25.x * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_26;
  tmpvar_26 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_26;
  norm_2.z = cos((6.28319 * tmpvar_26.x));
  norm_2.x = sin((6.28319 * tmpvar_26.x));
  norm_2.y = cos((3.14159 * tmpvar_26.y));
  vec3 tmpvar_27;
  tmpvar_27 = -(norm_2);
  norm_2 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_29;
  tmpvar_29 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_28 * tmpvar_28)));
  float tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_28 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_29, 2.0)))), (float((_OceanRadius >= tmpvar_29)) * float((tmpvar_28 >= 0.0)))));
  float tmpvar_31;
  tmpvar_31 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_24.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_32;
  tmpvar_32 = (cityoverlay_4 * texture2DGradARB (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  citydarkoverlay_1 = tmpvar_32;
  vec4 tmpvar_33;
  tmpvar_33 = (cityoverlay_4 * texture2DGradARB (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  vec4 tmpvar_34;
  tmpvar_34 = (mix (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_18.xy, tmpvar_18.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_18.xy, tmpvar_18.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_20), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_30 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_30)), 0.0, 1.0))))), tmpvar_19, vec4(tmpvar_31)), tmpvar_33, tmpvar_33.wwww) * _Color);
  color_6 = tmpvar_34;
  float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_27, -(_SunDir)), 0.0, 1.0);
  float tmpvar_36;
  tmpvar_36 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_35, tmpvar_31);
  vec4 tmpvar_37;
  tmpvar_37 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  vec4 tmpvar_38;
  tmpvar_38 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  vec4 shadowVals_39;
  shadowVals_39.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_39.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_39.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_39.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_40;
  tmpvar_40 = lessThan (shadowVals_39, vec4(((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_41;
  tmpvar_41 = _LightShadowData.xxxx;
  float tmpvar_42;
  if (tmpvar_40.x) {
    tmpvar_42 = tmpvar_41.x;
  } else {
    tmpvar_42 = 1.0;
  };
  float tmpvar_43;
  if (tmpvar_40.y) {
    tmpvar_43 = tmpvar_41.y;
  } else {
    tmpvar_43 = 1.0;
  };
  float tmpvar_44;
  if (tmpvar_40.z) {
    tmpvar_44 = tmpvar_41.z;
  } else {
    tmpvar_44 = 1.0;
  };
  float tmpvar_45;
  if (tmpvar_40.w) {
    tmpvar_45 = tmpvar_41.w;
  } else {
    tmpvar_45 = 1.0;
  };
  vec4 tmpvar_46;
  tmpvar_46.x = tmpvar_42;
  tmpvar_46.y = tmpvar_43;
  tmpvar_46.z = tmpvar_44;
  tmpvar_46.w = tmpvar_45;
  float tmpvar_47;
  tmpvar_47 = ((tmpvar_37.w * tmpvar_38.w) * dot (tmpvar_46, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_48;
  tmpvar_48 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_36) * 2.0) * tmpvar_47), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_6.xyz = (tmpvar_34.xyz + (_Albedo * tmpvar_48));
  color_6.xyz = (color_6.xyz * tmpvar_48);
  citydarkoverlay_1.w = (tmpvar_32.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_35 - 0.01)) / 0.99) * 4.0) * tmpvar_47), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
mad o7.x, r0, r0.y, c17
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
mov o6.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
mul o9.xyz, r1.w, -r1
mov r1.xyz, c15
mov o1, v1
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r0, -c13
add o8.xyz, -c12, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = mix (TNdotL_4, tmpvar_84, handoff_8);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTextureB0, vec2(tmpvar_86));
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_89;
  mediump vec4 shadows_90;
  highp vec4 shadowVals_91;
  highp float tmpvar_92;
  tmpvar_92 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_93;
  vec_93 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_94;
  lowp vec4 tmpvar_95;
  tmpvar_95 = textureCube (_ShadowMapTexture, vec_93);
  packDist_94 = tmpvar_95;
  shadowVals_91.x = dot (packDist_94, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_96;
  vec_96 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_97;
  lowp vec4 tmpvar_98;
  tmpvar_98 = textureCube (_ShadowMapTexture, vec_96);
  packDist_97 = tmpvar_98;
  shadowVals_91.y = dot (packDist_97, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_99;
  vec_99 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_100;
  lowp vec4 tmpvar_101;
  tmpvar_101 = textureCube (_ShadowMapTexture, vec_99);
  packDist_100 = tmpvar_101;
  shadowVals_91.z = dot (packDist_100, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_102;
  vec_102 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_103;
  lowp vec4 tmpvar_104;
  tmpvar_104 = textureCube (_ShadowMapTexture, vec_102);
  packDist_103 = tmpvar_104;
  shadowVals_91.w = dot (packDist_103, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_105;
  tmpvar_105 = lessThan (shadowVals_91, vec4(tmpvar_92));
  highp vec4 tmpvar_106;
  tmpvar_106 = _LightShadowData.xxxx;
  highp float tmpvar_107;
  if (tmpvar_105.x) {
    tmpvar_107 = tmpvar_106.x;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_105.y) {
    tmpvar_108 = tmpvar_106.y;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_105.z) {
    tmpvar_109 = tmpvar_106.z;
  } else {
    tmpvar_109 = 1.0;
  };
  highp float tmpvar_110;
  if (tmpvar_105.w) {
    tmpvar_110 = tmpvar_106.w;
  } else {
    tmpvar_110 = 1.0;
  };
  highp vec4 tmpvar_111;
  tmpvar_111.x = tmpvar_107;
  tmpvar_111.y = tmpvar_108;
  tmpvar_111.z = tmpvar_109;
  tmpvar_111.w = tmpvar_110;
  shadows_90 = tmpvar_111;
  mediump float tmpvar_112;
  tmpvar_112 = dot (shadows_90, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_89 = tmpvar_112;
  highp float tmpvar_113;
  tmpvar_113 = ((tmpvar_87.w * tmpvar_88.w) * tmpvar_89);
  atten_3 = tmpvar_113;
  mediump float tmpvar_114;
  tmpvar_114 = clamp ((((_LightColor0.w * tmpvar_85) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_115;
  tmpvar_115 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_114)), 0.0, 1.0);
  light_2 = tmpvar_115;
  highp vec3 tmpvar_116;
  tmpvar_116 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_116;
  highp vec3 tmpvar_117;
  tmpvar_117 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_117;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = mix (TNdotL_4, tmpvar_84, handoff_8);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTextureB0, vec2(tmpvar_86));
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_89;
  mediump vec4 shadows_90;
  highp vec4 shadowVals_91;
  highp float tmpvar_92;
  tmpvar_92 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_93;
  vec_93 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_94;
  lowp vec4 tmpvar_95;
  tmpvar_95 = textureCube (_ShadowMapTexture, vec_93);
  packDist_94 = tmpvar_95;
  shadowVals_91.x = dot (packDist_94, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_96;
  vec_96 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_97;
  lowp vec4 tmpvar_98;
  tmpvar_98 = textureCube (_ShadowMapTexture, vec_96);
  packDist_97 = tmpvar_98;
  shadowVals_91.y = dot (packDist_97, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_99;
  vec_99 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_100;
  lowp vec4 tmpvar_101;
  tmpvar_101 = textureCube (_ShadowMapTexture, vec_99);
  packDist_100 = tmpvar_101;
  shadowVals_91.z = dot (packDist_100, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_102;
  vec_102 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_103;
  lowp vec4 tmpvar_104;
  tmpvar_104 = textureCube (_ShadowMapTexture, vec_102);
  packDist_103 = tmpvar_104;
  shadowVals_91.w = dot (packDist_103, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_105;
  tmpvar_105 = lessThan (shadowVals_91, vec4(tmpvar_92));
  highp vec4 tmpvar_106;
  tmpvar_106 = _LightShadowData.xxxx;
  highp float tmpvar_107;
  if (tmpvar_105.x) {
    tmpvar_107 = tmpvar_106.x;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_105.y) {
    tmpvar_108 = tmpvar_106.y;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_105.z) {
    tmpvar_109 = tmpvar_106.z;
  } else {
    tmpvar_109 = 1.0;
  };
  highp float tmpvar_110;
  if (tmpvar_105.w) {
    tmpvar_110 = tmpvar_106.w;
  } else {
    tmpvar_110 = 1.0;
  };
  highp vec4 tmpvar_111;
  tmpvar_111.x = tmpvar_107;
  tmpvar_111.y = tmpvar_108;
  tmpvar_111.z = tmpvar_109;
  tmpvar_111.w = tmpvar_110;
  shadows_90 = tmpvar_111;
  mediump float tmpvar_112;
  tmpvar_112 = dot (shadows_90, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_89 = tmpvar_112;
  highp float tmpvar_113;
  tmpvar_113 = ((tmpvar_87.w * tmpvar_88.w) * tmpvar_89);
  atten_3 = tmpvar_113;
  mediump float tmpvar_114;
  tmpvar_114 = clamp ((((_LightColor0.w * tmpvar_85) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_115;
  tmpvar_115 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_114)), 0.0, 1.0);
  light_2 = tmpvar_115;
  highp vec3 tmpvar_116;
  tmpvar_116 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_116;
  highp vec3 tmpvar_117;
  tmpvar_117 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_117;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 447
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 437
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 419
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 423
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 427
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 431
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 435
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 461
#line 481
#line 461
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 465
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 469
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 473
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 477
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 447
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 437
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 419
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 423
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 427
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 431
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 435
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 461
#line 481
#line 481
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 485
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 489
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 491
lowp vec4 frag( in v2f IN ) {
    #line 493
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 497
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 501
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 505
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 509
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = xll_tex2Dgrad( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 citylightoverlaydetail = xll_tex2Dgrad( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 513
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    #line 517
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 521
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 525
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    #line 529
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    #line 533
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 537
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 541
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    #line 545
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 549
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 553
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (floor(((1.0 + tmpvar_21.x) - tmpvar_21.z)), 0.0, 1.0);
  vec3 tmpvar_23;
  tmpvar_23 = mix (mix (tmpvar_21.zxy, tmpvar_21, vec3(tmpvar_22)), tmpvar_21.yxz, vec3(clamp (floor(((1.0 + tmpvar_21.y) - mix (tmpvar_21.z, tmpvar_21.x, tmpvar_22))), 0.0, 1.0)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_24.xyz;
  vec2 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_25.y;
  localCoords_3.x = (tmpvar_25.x * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_26;
  tmpvar_26 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_26;
  norm_2.z = cos((6.28319 * tmpvar_26.x));
  norm_2.x = sin((6.28319 * tmpvar_26.x));
  norm_2.y = cos((3.14159 * tmpvar_26.y));
  vec3 tmpvar_27;
  tmpvar_27 = -(norm_2);
  norm_2 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_29;
  tmpvar_29 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_28 * tmpvar_28)));
  float tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_28 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_29, 2.0)))), (float((_OceanRadius >= tmpvar_29)) * float((tmpvar_28 >= 0.0)))));
  float tmpvar_31;
  tmpvar_31 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_24.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_32;
  tmpvar_32 = (cityoverlay_4 * texture2DGradARB (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  citydarkoverlay_1.xyz = tmpvar_32.xyz;
  vec4 tmpvar_33;
  tmpvar_33 = (cityoverlay_4 * texture2DGradARB (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  vec4 tmpvar_34;
  tmpvar_34 = (mix (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_18.xy, tmpvar_18.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_18.xy, tmpvar_18.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_20), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_30 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_30)), 0.0, 1.0))))), tmpvar_19, vec4(tmpvar_31)), tmpvar_33, tmpvar_33.wwww) * _Color);
  color_6.w = tmpvar_34.w;
  float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_27, -(_SunDir)), 0.0, 1.0);
  float tmpvar_36;
  tmpvar_36 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2))).w;
  vec3 tmpvar_37;
  tmpvar_37 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_35, tmpvar_31)) * 2.0) * tmpvar_36), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_6.xyz = (tmpvar_34.xyz + (_Albedo * tmpvar_37));
  color_6.xyz = (color_6.xyz * tmpvar_37);
  citydarkoverlay_1.w = (tmpvar_32.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_35 - 0.01)) / 0.99) * 4.0) * tmpvar_36), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 46 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o4.xyz, r0.x, r2
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
mad o6.x, r0, r0.y, c16
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
mov o5.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 citylightoverlaydetail_13;
  mediump vec4 citydarkoverlaydetail_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 vert_16;
  mediump vec4 detail_17;
  mediump float nylerp_18;
  mediump vec3 detailCoords_19;
  mediump float zxlerp_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec4 tmpvar_38;
  tmpvar_38.w = 0.0;
  tmpvar_38.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_38), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = abs(xlv_TEXCOORD5);
  highp float tmpvar_41;
  tmpvar_41 = clamp (floor(((1.0 + tmpvar_40.x) - tmpvar_40.z)), 0.0, 1.0);
  zxlerp_20 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.zxy, tmpvar_40, vec3(zxlerp_20));
  detailCoords_19 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (floor(((1.0 + tmpvar_40.y) - mix (tmpvar_40.z, tmpvar_40.x, zxlerp_20))), 0.0, 1.0);
  nylerp_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (detailCoords_19, tmpvar_40.yxz, vec3(nylerp_18));
  detailCoords_19 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_19.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_19.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_midTex, coord_46, tmpvar_36.xy, tmpvar_36.zw);
  detail_17 = tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = abs(detailCoords_19.x);
  highp vec2 coord_49;
  coord_49 = ((((0.5 * detailCoords_19.zy) / tmpvar_48) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2DGradEXT (_steepTex, coord_49, tmpvar_36.xy, tmpvar_36.zw);
  vert_16 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (vert_16, detail_17, vec4(vertLerp_21));
  detail_17 = tmpvar_51;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_15 = tmpvar_52;
  mediump float tmpvar_53;
  tmpvar_53 = abs(detailCoords_19.x);
  highp vec2 coord_54;
  coord_54 = ((((0.5 * detailCoords_19.zy) / tmpvar_53) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_54, tmpvar_36.xy, tmpvar_36.zw);
  citydarkoverlaydetail_14 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = abs(detailCoords_19.x);
  highp vec2 coord_57;
  coord_57 = ((((0.5 * detailCoords_19.zy) / tmpvar_56) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_57, tmpvar_36.xy, tmpvar_36.zw);
  citylightoverlaydetail_13 = tmpvar_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_12 = tmpvar_59;
  mediump vec2 tmpvar_60;
  tmpvar_60 = encnorm_12.wy;
  localCoords_11 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_61.y;
  localCoords_11.x = (tmpvar_61.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62 = (uv_23 + localCoords_11);
  uv_23 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = cos((6.28319 * tmpvar_62.x));
  norm_10.z = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = sin((6.28319 * tmpvar_62.x));
  norm_10.x = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = cos((3.14159 * tmpvar_62.y));
  norm_10.y = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = -(norm_10);
  norm_10 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = mix (tmpvar_51, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_69;
  tmpvar_69 = (xlv_TEXCOORD0 * tmpvar_68);
  color_24 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_71;
  tmpvar_71 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_70 * tmpvar_70)));
  highp float tmpvar_72;
  tmpvar_72 = (float((_OceanRadius >= tmpvar_71)) * float((tmpvar_70 >= 0.0)));
  sphereCheck_8 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_70 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_71, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (color_24, _OceanColor, vec4((clamp ((tmpvar_73 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_73)), 0.0, 1.0)))));
  color_24 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_76);
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * citydarkoverlaydetail_14);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * citylightoverlaydetail_13);
  mediump vec4 tmpvar_79;
  tmpvar_79 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_78, tmpvar_78.wwww) * _Color);
  color_24.w = tmpvar_79.w;
  highp vec3 tmpvar_80;
  tmpvar_80 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_66, -(_SunDir)), 0.0, 1.0);
  highp float tmpvar_84;
  tmpvar_84 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_85;
  tmpvar_85 = texture2D (_LightTexture0, vec2(tmpvar_84)).w;
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_83, handoff_7)) * 2.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (tmpvar_79.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_89;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_83 - 0.01)) / 0.99) * 4.0) * tmpvar_85), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 citylightoverlaydetail_13;
  mediump vec4 citydarkoverlaydetail_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 vert_16;
  mediump vec4 detail_17;
  mediump float nylerp_18;
  mediump vec3 detailCoords_19;
  mediump float zxlerp_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec4 tmpvar_38;
  tmpvar_38.w = 0.0;
  tmpvar_38.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_38), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = abs(xlv_TEXCOORD5);
  highp float tmpvar_41;
  tmpvar_41 = clamp (floor(((1.0 + tmpvar_40.x) - tmpvar_40.z)), 0.0, 1.0);
  zxlerp_20 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.zxy, tmpvar_40, vec3(zxlerp_20));
  detailCoords_19 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (floor(((1.0 + tmpvar_40.y) - mix (tmpvar_40.z, tmpvar_40.x, zxlerp_20))), 0.0, 1.0);
  nylerp_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (detailCoords_19, tmpvar_40.yxz, vec3(nylerp_18));
  detailCoords_19 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_19.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_19.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_midTex, coord_46, tmpvar_36.xy, tmpvar_36.zw);
  detail_17 = tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = abs(detailCoords_19.x);
  highp vec2 coord_49;
  coord_49 = ((((0.5 * detailCoords_19.zy) / tmpvar_48) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2DGradEXT (_steepTex, coord_49, tmpvar_36.xy, tmpvar_36.zw);
  vert_16 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (vert_16, detail_17, vec4(vertLerp_21));
  detail_17 = tmpvar_51;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_15 = tmpvar_52;
  mediump float tmpvar_53;
  tmpvar_53 = abs(detailCoords_19.x);
  highp vec2 coord_54;
  coord_54 = ((((0.5 * detailCoords_19.zy) / tmpvar_53) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_54, tmpvar_36.xy, tmpvar_36.zw);
  citydarkoverlaydetail_14 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = abs(detailCoords_19.x);
  highp vec2 coord_57;
  coord_57 = ((((0.5 * detailCoords_19.zy) / tmpvar_56) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_57, tmpvar_36.xy, tmpvar_36.zw);
  citylightoverlaydetail_13 = tmpvar_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_12 = tmpvar_59;
  mediump vec2 tmpvar_60;
  tmpvar_60 = encnorm_12.wy;
  localCoords_11 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_61.y;
  localCoords_11.x = (tmpvar_61.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62 = (uv_23 + localCoords_11);
  uv_23 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = cos((6.28319 * tmpvar_62.x));
  norm_10.z = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = sin((6.28319 * tmpvar_62.x));
  norm_10.x = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = cos((3.14159 * tmpvar_62.y));
  norm_10.y = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = -(norm_10);
  norm_10 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = mix (tmpvar_51, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_69;
  tmpvar_69 = (xlv_TEXCOORD0 * tmpvar_68);
  color_24 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_71;
  tmpvar_71 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_70 * tmpvar_70)));
  highp float tmpvar_72;
  tmpvar_72 = (float((_OceanRadius >= tmpvar_71)) * float((tmpvar_70 >= 0.0)));
  sphereCheck_8 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_70 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_71, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (color_24, _OceanColor, vec4((clamp ((tmpvar_73 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_73)), 0.0, 1.0)))));
  color_24 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_76);
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * citydarkoverlaydetail_14);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * citylightoverlaydetail_13);
  mediump vec4 tmpvar_79;
  tmpvar_79 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_78, tmpvar_78.wwww) * _Color);
  color_24.w = tmpvar_79.w;
  highp vec3 tmpvar_80;
  tmpvar_80 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_66, -(_SunDir)), 0.0, 1.0);
  highp float tmpvar_84;
  tmpvar_84 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_85;
  tmpvar_85 = texture2D (_LightTexture0, vec2(tmpvar_84)).w;
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_83, handoff_7)) * 2.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (tmpvar_79.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_89;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_83 - 0.01)) / 0.99) * 4.0) * tmpvar_85), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 407
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 411
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 415
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 469
#line 440
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 444
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 448
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 452
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 457
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 407
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 411
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 415
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 469
#line 459
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 461
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    #line 465
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 469
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 473
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 477
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    #line 481
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    #line 485
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = xll_tex2Dgrad( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    #line 489
    mediump vec4 citylightoverlaydetail = xll_tex2Dgrad( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 493
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 497
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 501
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 505
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 509
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 513
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    #line 517
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 521
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    #line 525
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 529
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 533
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (floor(((1.0 + tmpvar_21.x) - tmpvar_21.z)), 0.0, 1.0);
  vec3 tmpvar_23;
  tmpvar_23 = mix (mix (tmpvar_21.zxy, tmpvar_21, vec3(tmpvar_22)), tmpvar_21.yxz, vec3(clamp (floor(((1.0 + tmpvar_21.y) - mix (tmpvar_21.z, tmpvar_21.x, tmpvar_22))), 0.0, 1.0)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_24.xyz;
  vec2 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_25.y;
  localCoords_3.x = (tmpvar_25.x * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_26;
  tmpvar_26 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_26;
  norm_2.z = cos((6.28319 * tmpvar_26.x));
  norm_2.x = sin((6.28319 * tmpvar_26.x));
  norm_2.y = cos((3.14159 * tmpvar_26.y));
  vec3 tmpvar_27;
  tmpvar_27 = -(norm_2);
  norm_2 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_29;
  tmpvar_29 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_28 * tmpvar_28)));
  float tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_28 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_29, 2.0)))), (float((_OceanRadius >= tmpvar_29)) * float((tmpvar_28 >= 0.0)))));
  float tmpvar_31;
  tmpvar_31 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_24.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_32;
  tmpvar_32 = (cityoverlay_4 * texture2DGradARB (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  citydarkoverlay_1.xyz = tmpvar_32.xyz;
  vec4 tmpvar_33;
  tmpvar_33 = (cityoverlay_4 * texture2DGradARB (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  vec4 tmpvar_34;
  tmpvar_34 = (mix (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_18.xy, tmpvar_18.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_18.xy, tmpvar_18.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_20), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_30 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_30)), 0.0, 1.0))))), tmpvar_19, vec4(tmpvar_31)), tmpvar_33, tmpvar_33.wwww) * _Color);
  color_6.w = tmpvar_34.w;
  float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_27, -(_SunDir)), 0.0, 1.0);
  vec3 tmpvar_36;
  tmpvar_36 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_35, tmpvar_31)) * 2.0), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_6.xyz = (tmpvar_34.xyz + (_Albedo * tmpvar_36));
  color_6.xyz = (color_6.xyz * tmpvar_36);
  citydarkoverlay_1.w = (tmpvar_32.w * (1.0 - clamp (clamp ((((_LightColor0.w * (tmpvar_35 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Vector 9 [_SunDir]
Vector 10 [_PlanetOrigin]
"vs_3_0
; 42 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord4 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c11, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c12, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c9, c9
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c9
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c11.x
dp4 r2.x, r0, c4
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
add r2.w, r1, c11.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o3.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
add r2.x, r0.y, c11.w
mul_sat r0.w, -r1, c11.y
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r0.xyz, -r0, c8
mad o5.x, r0.w, r2, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o7.xyz, r0.w, -r0
mov r0.xyz, c10
mov o4.xyz, -r1
mov o1, v1
mov o2.xyz, v2
rcp o2.w, r0.w
add o6.xyz, -c8, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 citylightoverlaydetail_13;
  mediump vec4 citydarkoverlaydetail_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 vert_16;
  mediump vec4 detail_17;
  mediump float nylerp_18;
  mediump vec3 detailCoords_19;
  mediump float zxlerp_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec4 tmpvar_38;
  tmpvar_38.w = 0.0;
  tmpvar_38.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_38), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = abs(xlv_TEXCOORD5);
  highp float tmpvar_41;
  tmpvar_41 = clamp (floor(((1.0 + tmpvar_40.x) - tmpvar_40.z)), 0.0, 1.0);
  zxlerp_20 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.zxy, tmpvar_40, vec3(zxlerp_20));
  detailCoords_19 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (floor(((1.0 + tmpvar_40.y) - mix (tmpvar_40.z, tmpvar_40.x, zxlerp_20))), 0.0, 1.0);
  nylerp_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (detailCoords_19, tmpvar_40.yxz, vec3(nylerp_18));
  detailCoords_19 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_19.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_19.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_midTex, coord_46, tmpvar_36.xy, tmpvar_36.zw);
  detail_17 = tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = abs(detailCoords_19.x);
  highp vec2 coord_49;
  coord_49 = ((((0.5 * detailCoords_19.zy) / tmpvar_48) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2DGradEXT (_steepTex, coord_49, tmpvar_36.xy, tmpvar_36.zw);
  vert_16 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (vert_16, detail_17, vec4(vertLerp_21));
  detail_17 = tmpvar_51;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_15 = tmpvar_52;
  mediump float tmpvar_53;
  tmpvar_53 = abs(detailCoords_19.x);
  highp vec2 coord_54;
  coord_54 = ((((0.5 * detailCoords_19.zy) / tmpvar_53) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_54, tmpvar_36.xy, tmpvar_36.zw);
  citydarkoverlaydetail_14 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = abs(detailCoords_19.x);
  highp vec2 coord_57;
  coord_57 = ((((0.5 * detailCoords_19.zy) / tmpvar_56) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_57, tmpvar_36.xy, tmpvar_36.zw);
  citylightoverlaydetail_13 = tmpvar_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_12 = tmpvar_59;
  mediump vec2 tmpvar_60;
  tmpvar_60 = encnorm_12.wy;
  localCoords_11 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_61.y;
  localCoords_11.x = (tmpvar_61.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62 = (uv_23 + localCoords_11);
  uv_23 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = cos((6.28319 * tmpvar_62.x));
  norm_10.z = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = sin((6.28319 * tmpvar_62.x));
  norm_10.x = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = cos((3.14159 * tmpvar_62.y));
  norm_10.y = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = -(norm_10);
  norm_10 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = mix (tmpvar_51, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_69;
  tmpvar_69 = (xlv_TEXCOORD0 * tmpvar_68);
  color_24 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_71;
  tmpvar_71 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_70 * tmpvar_70)));
  highp float tmpvar_72;
  tmpvar_72 = (float((_OceanRadius >= tmpvar_71)) * float((tmpvar_70 >= 0.0)));
  sphereCheck_8 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_70 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_71, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (color_24, _OceanColor, vec4((clamp ((tmpvar_73 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_73)), 0.0, 1.0)))));
  color_24 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_76);
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * citydarkoverlaydetail_14);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * citylightoverlaydetail_13);
  mediump vec4 tmpvar_79;
  tmpvar_79 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_78, tmpvar_78.wwww) * _Color);
  color_24.w = tmpvar_79.w;
  highp vec3 tmpvar_80;
  tmpvar_80 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_80;
  lowp vec3 tmpvar_81;
  tmpvar_81 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_66, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_84;
  tmpvar_84 = clamp (((_LightColor0.w * mix (TNdotL_3, tmpvar_83, handoff_7)) * 2.0), 0.0, 1.0);
  highp vec3 tmpvar_85;
  tmpvar_85 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_84)), 0.0, 1.0);
  light_2 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (tmpvar_79.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_87;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp ((((_LightColor0.w * (tmpvar_83 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 citylightoverlaydetail_13;
  mediump vec4 citydarkoverlaydetail_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 vert_16;
  mediump vec4 detail_17;
  mediump float nylerp_18;
  mediump vec3 detailCoords_19;
  mediump float zxlerp_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec4 tmpvar_38;
  tmpvar_38.w = 0.0;
  tmpvar_38.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_38), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = abs(xlv_TEXCOORD5);
  highp float tmpvar_41;
  tmpvar_41 = clamp (floor(((1.0 + tmpvar_40.x) - tmpvar_40.z)), 0.0, 1.0);
  zxlerp_20 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.zxy, tmpvar_40, vec3(zxlerp_20));
  detailCoords_19 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (floor(((1.0 + tmpvar_40.y) - mix (tmpvar_40.z, tmpvar_40.x, zxlerp_20))), 0.0, 1.0);
  nylerp_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (detailCoords_19, tmpvar_40.yxz, vec3(nylerp_18));
  detailCoords_19 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_19.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_19.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_midTex, coord_46, tmpvar_36.xy, tmpvar_36.zw);
  detail_17 = tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = abs(detailCoords_19.x);
  highp vec2 coord_49;
  coord_49 = ((((0.5 * detailCoords_19.zy) / tmpvar_48) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2DGradEXT (_steepTex, coord_49, tmpvar_36.xy, tmpvar_36.zw);
  vert_16 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (vert_16, detail_17, vec4(vertLerp_21));
  detail_17 = tmpvar_51;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_15 = tmpvar_52;
  mediump float tmpvar_53;
  tmpvar_53 = abs(detailCoords_19.x);
  highp vec2 coord_54;
  coord_54 = ((((0.5 * detailCoords_19.zy) / tmpvar_53) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_54, tmpvar_36.xy, tmpvar_36.zw);
  citydarkoverlaydetail_14 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = abs(detailCoords_19.x);
  highp vec2 coord_57;
  coord_57 = ((((0.5 * detailCoords_19.zy) / tmpvar_56) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_57, tmpvar_36.xy, tmpvar_36.zw);
  citylightoverlaydetail_13 = tmpvar_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_12 = tmpvar_59;
  mediump vec2 tmpvar_60;
  tmpvar_60 = encnorm_12.wy;
  localCoords_11 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_61.y;
  localCoords_11.x = (tmpvar_61.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62 = (uv_23 + localCoords_11);
  uv_23 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = cos((6.28319 * tmpvar_62.x));
  norm_10.z = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = sin((6.28319 * tmpvar_62.x));
  norm_10.x = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = cos((3.14159 * tmpvar_62.y));
  norm_10.y = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = -(norm_10);
  norm_10 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = mix (tmpvar_51, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_69;
  tmpvar_69 = (xlv_TEXCOORD0 * tmpvar_68);
  color_24 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_71;
  tmpvar_71 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_70 * tmpvar_70)));
  highp float tmpvar_72;
  tmpvar_72 = (float((_OceanRadius >= tmpvar_71)) * float((tmpvar_70 >= 0.0)));
  sphereCheck_8 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_70 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_71, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (color_24, _OceanColor, vec4((clamp ((tmpvar_73 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_73)), 0.0, 1.0)))));
  color_24 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_76);
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * citydarkoverlaydetail_14);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * citylightoverlaydetail_13);
  mediump vec4 tmpvar_79;
  tmpvar_79 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_78, tmpvar_78.wwww) * _Color);
  color_24.w = tmpvar_79.w;
  highp vec3 tmpvar_80;
  tmpvar_80 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_80;
  lowp vec3 tmpvar_81;
  tmpvar_81 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_66, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_84;
  tmpvar_84 = clamp (((_LightColor0.w * mix (TNdotL_3, tmpvar_83, handoff_7)) * 2.0), 0.0, 1.0);
  highp vec3 tmpvar_85;
  tmpvar_85 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_84)), 0.0, 1.0);
  light_2 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (tmpvar_79.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_87;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp ((((_LightColor0.w * (tmpvar_83 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 397
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 401
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 405
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 409
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 413
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 437
#line 465
#line 437
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 441
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 445
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 449
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 453
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 397
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 401
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 405
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 409
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 413
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 437
#line 465
#line 455
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 457
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    #line 461
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 465
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 469
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 473
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    #line 477
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    #line 481
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = xll_tex2Dgrad( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    #line 485
    mediump vec4 citylightoverlaydetail = xll_tex2Dgrad( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 489
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 493
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 497
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 501
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 505
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 509
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    #line 513
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 517
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = 1.0;
    #line 521
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 525
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 529
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (floor(((1.0 + tmpvar_21.x) - tmpvar_21.z)), 0.0, 1.0);
  vec3 tmpvar_23;
  tmpvar_23 = mix (mix (tmpvar_21.zxy, tmpvar_21, vec3(tmpvar_22)), tmpvar_21.yxz, vec3(clamp (floor(((1.0 + tmpvar_21.y) - mix (tmpvar_21.z, tmpvar_21.x, tmpvar_22))), 0.0, 1.0)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_24.xyz;
  vec2 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_25.y;
  localCoords_3.x = (tmpvar_25.x * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_26;
  tmpvar_26 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_26;
  norm_2.z = cos((6.28319 * tmpvar_26.x));
  norm_2.x = sin((6.28319 * tmpvar_26.x));
  norm_2.y = cos((3.14159 * tmpvar_26.y));
  vec3 tmpvar_27;
  tmpvar_27 = -(norm_2);
  norm_2 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_29;
  tmpvar_29 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_28 * tmpvar_28)));
  float tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_28 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_29, 2.0)))), (float((_OceanRadius >= tmpvar_29)) * float((tmpvar_28 >= 0.0)))));
  float tmpvar_31;
  tmpvar_31 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_24.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_32;
  tmpvar_32 = (cityoverlay_4 * texture2DGradARB (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  citydarkoverlay_1.xyz = tmpvar_32.xyz;
  vec4 tmpvar_33;
  tmpvar_33 = (cityoverlay_4 * texture2DGradARB (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  vec4 tmpvar_34;
  tmpvar_34 = (mix (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_18.xy, tmpvar_18.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_18.xy, tmpvar_18.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_20), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_30 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_30)), 0.0, 1.0))))), tmpvar_19, vec4(tmpvar_31)), tmpvar_33, tmpvar_33.wwww) * _Color);
  color_6.w = tmpvar_34.w;
  float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_27, -(_SunDir)), 0.0, 1.0);
  float tmpvar_36;
  tmpvar_36 = ((float((xlv_TEXCOORD2.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz))).w);
  vec3 tmpvar_37;
  tmpvar_37 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_35, tmpvar_31)) * 2.0) * tmpvar_36), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_6.xyz = (tmpvar_34.xyz + (_Albedo * tmpvar_37));
  color_6.xyz = (color_6.xyz * tmpvar_37);
  citydarkoverlay_1.w = (tmpvar_32.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_35 - 0.01)) / 0.99) * 4.0) * tmpvar_36), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o4.xyz, r0.x, r2
dp4 r0.z, v0, c6
dp4 r0.w, v0, c7
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
mad o6.x, r0, r0.y, c16
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o5.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.w, r0, c11
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7.xyz = tmpvar_78.xyz;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  lowp vec4 tmpvar_85;
  highp vec2 P_86;
  P_86 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_85 = texture2D (_LightTexture0, P_86);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  highp float tmpvar_89;
  tmpvar_89 = ((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_85.w) * tmpvar_88.w);
  atten_3 = tmpvar_89;
  mediump float tmpvar_90;
  tmpvar_90 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_84, handoff_8)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_91;
  tmpvar_91 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_90)), 0.0, 1.0);
  light_2 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_93;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7.xyz = tmpvar_78.xyz;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  lowp vec4 tmpvar_85;
  highp vec2 P_86;
  P_86 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_85 = texture2D (_LightTexture0, P_86);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  highp float tmpvar_89;
  tmpvar_89 = ((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_85.w) * tmpvar_88.w);
  atten_3 = tmpvar_89;
  mediump float tmpvar_90;
  tmpvar_90 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_84, handoff_8)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_91;
  tmpvar_91 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_90)), 0.0, 1.0);
  light_2 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_93;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 426
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 408
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 412
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 416
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 420
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 424
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 478
#line 449
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 453
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 457
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 461
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 466
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 426
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 408
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 412
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 416
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 420
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 424
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 478
#line 468
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 470
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    #line 474
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 478
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 482
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 486
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    #line 490
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    #line 494
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = xll_tex2Dgrad( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    #line 498
    mediump vec4 citylightoverlaydetail = xll_tex2Dgrad( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 502
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 506
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 510
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 514
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 518
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 522
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    #line 526
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 530
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    #line 534
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 538
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 542
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (floor(((1.0 + tmpvar_21.x) - tmpvar_21.z)), 0.0, 1.0);
  vec3 tmpvar_23;
  tmpvar_23 = mix (mix (tmpvar_21.zxy, tmpvar_21, vec3(tmpvar_22)), tmpvar_21.yxz, vec3(clamp (floor(((1.0 + tmpvar_21.y) - mix (tmpvar_21.z, tmpvar_21.x, tmpvar_22))), 0.0, 1.0)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_24.xyz;
  vec2 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_25.y;
  localCoords_3.x = (tmpvar_25.x * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_26;
  tmpvar_26 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_26;
  norm_2.z = cos((6.28319 * tmpvar_26.x));
  norm_2.x = sin((6.28319 * tmpvar_26.x));
  norm_2.y = cos((3.14159 * tmpvar_26.y));
  vec3 tmpvar_27;
  tmpvar_27 = -(norm_2);
  norm_2 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_29;
  tmpvar_29 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_28 * tmpvar_28)));
  float tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_28 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_29, 2.0)))), (float((_OceanRadius >= tmpvar_29)) * float((tmpvar_28 >= 0.0)))));
  float tmpvar_31;
  tmpvar_31 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_24.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_32;
  tmpvar_32 = (cityoverlay_4 * texture2DGradARB (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  citydarkoverlay_1.xyz = tmpvar_32.xyz;
  vec4 tmpvar_33;
  tmpvar_33 = (cityoverlay_4 * texture2DGradARB (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  vec4 tmpvar_34;
  tmpvar_34 = (mix (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_18.xy, tmpvar_18.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_18.xy, tmpvar_18.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_20), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_30 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_30)), 0.0, 1.0))))), tmpvar_19, vec4(tmpvar_31)), tmpvar_33, tmpvar_33.wwww) * _Color);
  color_6.w = tmpvar_34.w;
  float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_27, -(_SunDir)), 0.0, 1.0);
  float tmpvar_36;
  tmpvar_36 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2))).w * textureCube (_LightTexture0, xlv_TEXCOORD2).w);
  vec3 tmpvar_37;
  tmpvar_37 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_35, tmpvar_31)) * 2.0) * tmpvar_36), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_6.xyz = (tmpvar_34.xyz + (_Albedo * tmpvar_37));
  color_6.xyz = (color_6.xyz * tmpvar_37);
  citydarkoverlay_1.w = (tmpvar_32.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_35 - 0.01)) / 0.99) * 4.0) * tmpvar_36), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 46 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o4.xyz, r0.x, r2
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
mad o6.x, r0, r0.y, c16
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
mov o5.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 citylightoverlaydetail_13;
  mediump vec4 citydarkoverlaydetail_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 vert_16;
  mediump vec4 detail_17;
  mediump float nylerp_18;
  mediump vec3 detailCoords_19;
  mediump float zxlerp_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec4 tmpvar_38;
  tmpvar_38.w = 0.0;
  tmpvar_38.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_38), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = abs(xlv_TEXCOORD5);
  highp float tmpvar_41;
  tmpvar_41 = clamp (floor(((1.0 + tmpvar_40.x) - tmpvar_40.z)), 0.0, 1.0);
  zxlerp_20 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.zxy, tmpvar_40, vec3(zxlerp_20));
  detailCoords_19 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (floor(((1.0 + tmpvar_40.y) - mix (tmpvar_40.z, tmpvar_40.x, zxlerp_20))), 0.0, 1.0);
  nylerp_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (detailCoords_19, tmpvar_40.yxz, vec3(nylerp_18));
  detailCoords_19 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_19.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_19.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_midTex, coord_46, tmpvar_36.xy, tmpvar_36.zw);
  detail_17 = tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = abs(detailCoords_19.x);
  highp vec2 coord_49;
  coord_49 = ((((0.5 * detailCoords_19.zy) / tmpvar_48) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2DGradEXT (_steepTex, coord_49, tmpvar_36.xy, tmpvar_36.zw);
  vert_16 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (vert_16, detail_17, vec4(vertLerp_21));
  detail_17 = tmpvar_51;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_15 = tmpvar_52;
  mediump float tmpvar_53;
  tmpvar_53 = abs(detailCoords_19.x);
  highp vec2 coord_54;
  coord_54 = ((((0.5 * detailCoords_19.zy) / tmpvar_53) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_54, tmpvar_36.xy, tmpvar_36.zw);
  citydarkoverlaydetail_14 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = abs(detailCoords_19.x);
  highp vec2 coord_57;
  coord_57 = ((((0.5 * detailCoords_19.zy) / tmpvar_56) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_57, tmpvar_36.xy, tmpvar_36.zw);
  citylightoverlaydetail_13 = tmpvar_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_12 = tmpvar_59;
  mediump vec2 tmpvar_60;
  tmpvar_60 = encnorm_12.wy;
  localCoords_11 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_61.y;
  localCoords_11.x = (tmpvar_61.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62 = (uv_23 + localCoords_11);
  uv_23 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = cos((6.28319 * tmpvar_62.x));
  norm_10.z = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = sin((6.28319 * tmpvar_62.x));
  norm_10.x = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = cos((3.14159 * tmpvar_62.y));
  norm_10.y = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = -(norm_10);
  norm_10 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = mix (tmpvar_51, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_69;
  tmpvar_69 = (xlv_TEXCOORD0 * tmpvar_68);
  color_24 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_71;
  tmpvar_71 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_70 * tmpvar_70)));
  highp float tmpvar_72;
  tmpvar_72 = (float((_OceanRadius >= tmpvar_71)) * float((tmpvar_70 >= 0.0)));
  sphereCheck_8 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_70 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_71, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (color_24, _OceanColor, vec4((clamp ((tmpvar_73 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_73)), 0.0, 1.0)))));
  color_24 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_76);
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * citydarkoverlaydetail_14);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * citylightoverlaydetail_13);
  mediump vec4 tmpvar_79;
  tmpvar_79 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_78, tmpvar_78.wwww) * _Color);
  color_24.w = tmpvar_79.w;
  highp vec3 tmpvar_80;
  tmpvar_80 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_66, -(_SunDir)), 0.0, 1.0);
  highp float tmpvar_84;
  tmpvar_84 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_85;
  tmpvar_85 = (texture2D (_LightTextureB0, vec2(tmpvar_84)).w * textureCube (_LightTexture0, xlv_TEXCOORD2).w);
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_83, handoff_7)) * 2.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (tmpvar_79.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_89;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_83 - 0.01)) / 0.99) * 4.0) * tmpvar_85), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 citylightoverlaydetail_13;
  mediump vec4 citydarkoverlaydetail_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 vert_16;
  mediump vec4 detail_17;
  mediump float nylerp_18;
  mediump vec3 detailCoords_19;
  mediump float zxlerp_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec4 tmpvar_38;
  tmpvar_38.w = 0.0;
  tmpvar_38.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_38), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = abs(xlv_TEXCOORD5);
  highp float tmpvar_41;
  tmpvar_41 = clamp (floor(((1.0 + tmpvar_40.x) - tmpvar_40.z)), 0.0, 1.0);
  zxlerp_20 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.zxy, tmpvar_40, vec3(zxlerp_20));
  detailCoords_19 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (floor(((1.0 + tmpvar_40.y) - mix (tmpvar_40.z, tmpvar_40.x, zxlerp_20))), 0.0, 1.0);
  nylerp_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (detailCoords_19, tmpvar_40.yxz, vec3(nylerp_18));
  detailCoords_19 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_19.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_19.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_midTex, coord_46, tmpvar_36.xy, tmpvar_36.zw);
  detail_17 = tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = abs(detailCoords_19.x);
  highp vec2 coord_49;
  coord_49 = ((((0.5 * detailCoords_19.zy) / tmpvar_48) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2DGradEXT (_steepTex, coord_49, tmpvar_36.xy, tmpvar_36.zw);
  vert_16 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (vert_16, detail_17, vec4(vertLerp_21));
  detail_17 = tmpvar_51;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_15 = tmpvar_52;
  mediump float tmpvar_53;
  tmpvar_53 = abs(detailCoords_19.x);
  highp vec2 coord_54;
  coord_54 = ((((0.5 * detailCoords_19.zy) / tmpvar_53) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_54, tmpvar_36.xy, tmpvar_36.zw);
  citydarkoverlaydetail_14 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = abs(detailCoords_19.x);
  highp vec2 coord_57;
  coord_57 = ((((0.5 * detailCoords_19.zy) / tmpvar_56) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_57, tmpvar_36.xy, tmpvar_36.zw);
  citylightoverlaydetail_13 = tmpvar_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_12 = tmpvar_59;
  mediump vec2 tmpvar_60;
  tmpvar_60 = encnorm_12.wy;
  localCoords_11 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_61.y;
  localCoords_11.x = (tmpvar_61.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62 = (uv_23 + localCoords_11);
  uv_23 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = cos((6.28319 * tmpvar_62.x));
  norm_10.z = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = sin((6.28319 * tmpvar_62.x));
  norm_10.x = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = cos((3.14159 * tmpvar_62.y));
  norm_10.y = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = -(norm_10);
  norm_10 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = mix (tmpvar_51, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_69;
  tmpvar_69 = (xlv_TEXCOORD0 * tmpvar_68);
  color_24 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_71;
  tmpvar_71 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_70 * tmpvar_70)));
  highp float tmpvar_72;
  tmpvar_72 = (float((_OceanRadius >= tmpvar_71)) * float((tmpvar_70 >= 0.0)));
  sphereCheck_8 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_70 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_71, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (color_24, _OceanColor, vec4((clamp ((tmpvar_73 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_73)), 0.0, 1.0)))));
  color_24 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_76);
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * citydarkoverlaydetail_14);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * citylightoverlaydetail_13);
  mediump vec4 tmpvar_79;
  tmpvar_79 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_78, tmpvar_78.wwww) * _Color);
  color_24.w = tmpvar_79.w;
  highp vec3 tmpvar_80;
  tmpvar_80 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_66, -(_SunDir)), 0.0, 1.0);
  highp float tmpvar_84;
  tmpvar_84 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_85;
  tmpvar_85 = (texture2D (_LightTextureB0, vec2(tmpvar_84)).w * textureCube (_LightTexture0, xlv_TEXCOORD2).w);
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_83, handoff_7)) * 2.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (tmpvar_79.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_89;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_83 - 0.01)) / 0.99) * 4.0) * tmpvar_85), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 400
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 404
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 408
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 412
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 416
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 441
#line 470
#line 441
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 445
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 449
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 453
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 458
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 400
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 404
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 408
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 412
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 416
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 441
#line 470
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 462
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    #line 466
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 470
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 474
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 478
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    #line 482
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    #line 486
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = xll_tex2Dgrad( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    #line 490
    mediump vec4 citylightoverlaydetail = xll_tex2Dgrad( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 494
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 498
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 502
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 506
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 510
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 514
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    #line 518
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 522
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    #line 526
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 530
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 534
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (floor(((1.0 + tmpvar_21.x) - tmpvar_21.z)), 0.0, 1.0);
  vec3 tmpvar_23;
  tmpvar_23 = mix (mix (tmpvar_21.zxy, tmpvar_21, vec3(tmpvar_22)), tmpvar_21.yxz, vec3(clamp (floor(((1.0 + tmpvar_21.y) - mix (tmpvar_21.z, tmpvar_21.x, tmpvar_22))), 0.0, 1.0)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_24.xyz;
  vec2 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_25.y;
  localCoords_3.x = (tmpvar_25.x * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_26;
  tmpvar_26 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_26;
  norm_2.z = cos((6.28319 * tmpvar_26.x));
  norm_2.x = sin((6.28319 * tmpvar_26.x));
  norm_2.y = cos((3.14159 * tmpvar_26.y));
  vec3 tmpvar_27;
  tmpvar_27 = -(norm_2);
  norm_2 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_29;
  tmpvar_29 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_28 * tmpvar_28)));
  float tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_28 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_29, 2.0)))), (float((_OceanRadius >= tmpvar_29)) * float((tmpvar_28 >= 0.0)))));
  float tmpvar_31;
  tmpvar_31 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_24.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_32;
  tmpvar_32 = (cityoverlay_4 * texture2DGradARB (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  citydarkoverlay_1.xyz = tmpvar_32.xyz;
  vec4 tmpvar_33;
  tmpvar_33 = (cityoverlay_4 * texture2DGradARB (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  vec4 tmpvar_34;
  tmpvar_34 = (mix (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_18.xy, tmpvar_18.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_18.xy, tmpvar_18.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_20), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_30 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_30)), 0.0, 1.0))))), tmpvar_19, vec4(tmpvar_31)), tmpvar_33, tmpvar_33.wwww) * _Color);
  color_6.w = tmpvar_34.w;
  float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_27, -(_SunDir)), 0.0, 1.0);
  float tmpvar_36;
  tmpvar_36 = texture2D (_LightTexture0, xlv_TEXCOORD2).w;
  vec3 tmpvar_37;
  tmpvar_37 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_35, tmpvar_31)) * 2.0) * tmpvar_36), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_6.xyz = (tmpvar_34.xyz + (_Albedo * tmpvar_37));
  color_6.xyz = (color_6.xyz * tmpvar_37);
  citydarkoverlay_1.w = (tmpvar_32.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_35 - 0.01)) / 0.99) * 4.0) * tmpvar_36), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 45 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o4.xyz, r0.x, r2
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
mad o6.x, r0, r0.y, c16
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
mov o5.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 citylightoverlaydetail_13;
  mediump vec4 citydarkoverlaydetail_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 vert_16;
  mediump vec4 detail_17;
  mediump float nylerp_18;
  mediump vec3 detailCoords_19;
  mediump float zxlerp_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec4 tmpvar_38;
  tmpvar_38.w = 0.0;
  tmpvar_38.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_38), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = abs(xlv_TEXCOORD5);
  highp float tmpvar_41;
  tmpvar_41 = clamp (floor(((1.0 + tmpvar_40.x) - tmpvar_40.z)), 0.0, 1.0);
  zxlerp_20 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.zxy, tmpvar_40, vec3(zxlerp_20));
  detailCoords_19 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (floor(((1.0 + tmpvar_40.y) - mix (tmpvar_40.z, tmpvar_40.x, zxlerp_20))), 0.0, 1.0);
  nylerp_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (detailCoords_19, tmpvar_40.yxz, vec3(nylerp_18));
  detailCoords_19 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_19.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_19.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_midTex, coord_46, tmpvar_36.xy, tmpvar_36.zw);
  detail_17 = tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = abs(detailCoords_19.x);
  highp vec2 coord_49;
  coord_49 = ((((0.5 * detailCoords_19.zy) / tmpvar_48) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2DGradEXT (_steepTex, coord_49, tmpvar_36.xy, tmpvar_36.zw);
  vert_16 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (vert_16, detail_17, vec4(vertLerp_21));
  detail_17 = tmpvar_51;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_15 = tmpvar_52;
  mediump float tmpvar_53;
  tmpvar_53 = abs(detailCoords_19.x);
  highp vec2 coord_54;
  coord_54 = ((((0.5 * detailCoords_19.zy) / tmpvar_53) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_54, tmpvar_36.xy, tmpvar_36.zw);
  citydarkoverlaydetail_14 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = abs(detailCoords_19.x);
  highp vec2 coord_57;
  coord_57 = ((((0.5 * detailCoords_19.zy) / tmpvar_56) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_57, tmpvar_36.xy, tmpvar_36.zw);
  citylightoverlaydetail_13 = tmpvar_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_12 = tmpvar_59;
  mediump vec2 tmpvar_60;
  tmpvar_60 = encnorm_12.wy;
  localCoords_11 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_61.y;
  localCoords_11.x = (tmpvar_61.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62 = (uv_23 + localCoords_11);
  uv_23 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = cos((6.28319 * tmpvar_62.x));
  norm_10.z = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = sin((6.28319 * tmpvar_62.x));
  norm_10.x = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = cos((3.14159 * tmpvar_62.y));
  norm_10.y = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = -(norm_10);
  norm_10 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = mix (tmpvar_51, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_69;
  tmpvar_69 = (xlv_TEXCOORD0 * tmpvar_68);
  color_24 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_71;
  tmpvar_71 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_70 * tmpvar_70)));
  highp float tmpvar_72;
  tmpvar_72 = (float((_OceanRadius >= tmpvar_71)) * float((tmpvar_70 >= 0.0)));
  sphereCheck_8 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_70 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_71, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (color_24, _OceanColor, vec4((clamp ((tmpvar_73 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_73)), 0.0, 1.0)))));
  color_24 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_76);
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * citydarkoverlaydetail_14);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * citylightoverlaydetail_13);
  mediump vec4 tmpvar_79;
  tmpvar_79 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_78, tmpvar_78.wwww) * _Color);
  color_24.w = tmpvar_79.w;
  highp vec3 tmpvar_80;
  tmpvar_80 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_80;
  lowp vec3 tmpvar_81;
  tmpvar_81 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_66, -(_SunDir)), 0.0, 1.0);
  lowp float tmpvar_84;
  tmpvar_84 = texture2D (_LightTexture0, xlv_TEXCOORD2).w;
  mediump float tmpvar_85;
  tmpvar_85 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_83, handoff_7)) * 2.0) * tmpvar_84), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (tmpvar_79.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_88;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_83 - 0.01)) / 0.99) * 4.0) * tmpvar_84), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 citylightoverlaydetail_13;
  mediump vec4 citydarkoverlaydetail_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 vert_16;
  mediump vec4 detail_17;
  mediump float nylerp_18;
  mediump vec3 detailCoords_19;
  mediump float zxlerp_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec4 tmpvar_38;
  tmpvar_38.w = 0.0;
  tmpvar_38.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_38), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = abs(xlv_TEXCOORD5);
  highp float tmpvar_41;
  tmpvar_41 = clamp (floor(((1.0 + tmpvar_40.x) - tmpvar_40.z)), 0.0, 1.0);
  zxlerp_20 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.zxy, tmpvar_40, vec3(zxlerp_20));
  detailCoords_19 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (floor(((1.0 + tmpvar_40.y) - mix (tmpvar_40.z, tmpvar_40.x, zxlerp_20))), 0.0, 1.0);
  nylerp_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (detailCoords_19, tmpvar_40.yxz, vec3(nylerp_18));
  detailCoords_19 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_19.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_19.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_midTex, coord_46, tmpvar_36.xy, tmpvar_36.zw);
  detail_17 = tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = abs(detailCoords_19.x);
  highp vec2 coord_49;
  coord_49 = ((((0.5 * detailCoords_19.zy) / tmpvar_48) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2DGradEXT (_steepTex, coord_49, tmpvar_36.xy, tmpvar_36.zw);
  vert_16 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (vert_16, detail_17, vec4(vertLerp_21));
  detail_17 = tmpvar_51;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_15 = tmpvar_52;
  mediump float tmpvar_53;
  tmpvar_53 = abs(detailCoords_19.x);
  highp vec2 coord_54;
  coord_54 = ((((0.5 * detailCoords_19.zy) / tmpvar_53) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_54, tmpvar_36.xy, tmpvar_36.zw);
  citydarkoverlaydetail_14 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = abs(detailCoords_19.x);
  highp vec2 coord_57;
  coord_57 = ((((0.5 * detailCoords_19.zy) / tmpvar_56) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_57, tmpvar_36.xy, tmpvar_36.zw);
  citylightoverlaydetail_13 = tmpvar_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_12 = tmpvar_59;
  mediump vec2 tmpvar_60;
  tmpvar_60 = encnorm_12.wy;
  localCoords_11 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_61.y;
  localCoords_11.x = (tmpvar_61.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62 = (uv_23 + localCoords_11);
  uv_23 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = cos((6.28319 * tmpvar_62.x));
  norm_10.z = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = sin((6.28319 * tmpvar_62.x));
  norm_10.x = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = cos((3.14159 * tmpvar_62.y));
  norm_10.y = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = -(norm_10);
  norm_10 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = mix (tmpvar_51, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_69;
  tmpvar_69 = (xlv_TEXCOORD0 * tmpvar_68);
  color_24 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_71;
  tmpvar_71 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_70 * tmpvar_70)));
  highp float tmpvar_72;
  tmpvar_72 = (float((_OceanRadius >= tmpvar_71)) * float((tmpvar_70 >= 0.0)));
  sphereCheck_8 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_70 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_71, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (color_24, _OceanColor, vec4((clamp ((tmpvar_73 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_73)), 0.0, 1.0)))));
  color_24 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_76);
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * citydarkoverlaydetail_14);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * citylightoverlaydetail_13);
  mediump vec4 tmpvar_79;
  tmpvar_79 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_78, tmpvar_78.wwww) * _Color);
  color_24.w = tmpvar_79.w;
  highp vec3 tmpvar_80;
  tmpvar_80 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_80;
  lowp vec3 tmpvar_81;
  tmpvar_81 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_66, -(_SunDir)), 0.0, 1.0);
  lowp float tmpvar_84;
  tmpvar_84 = texture2D (_LightTexture0, xlv_TEXCOORD2).w;
  mediump float tmpvar_85;
  tmpvar_85 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_83, handoff_7)) * 2.0) * tmpvar_84), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (tmpvar_79.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_88;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_83 - 0.01)) / 0.99) * 4.0) * tmpvar_84), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 407
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 411
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 415
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 469
#line 440
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 444
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 448
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 452
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 457
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 407
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 411
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 415
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 469
#line 459
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 461
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    #line 465
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 469
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 473
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 477
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    #line 481
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    #line 485
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = xll_tex2Dgrad( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    #line 489
    mediump vec4 citylightoverlaydetail = xll_tex2Dgrad( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 493
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 497
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 501
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 505
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 509
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 513
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    #line 517
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 521
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    #line 525
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 529
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 533
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (floor(((1.0 + tmpvar_21.x) - tmpvar_21.z)), 0.0, 1.0);
  vec3 tmpvar_23;
  tmpvar_23 = mix (mix (tmpvar_21.zxy, tmpvar_21, vec3(tmpvar_22)), tmpvar_21.yxz, vec3(clamp (floor(((1.0 + tmpvar_21.y) - mix (tmpvar_21.z, tmpvar_21.x, tmpvar_22))), 0.0, 1.0)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_24.xyz;
  vec2 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_25.y;
  localCoords_3.x = (tmpvar_25.x * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_26;
  tmpvar_26 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_26;
  norm_2.z = cos((6.28319 * tmpvar_26.x));
  norm_2.x = sin((6.28319 * tmpvar_26.x));
  norm_2.y = cos((3.14159 * tmpvar_26.y));
  vec3 tmpvar_27;
  tmpvar_27 = -(norm_2);
  norm_2 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_29;
  tmpvar_29 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_28 * tmpvar_28)));
  float tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_28 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_29, 2.0)))), (float((_OceanRadius >= tmpvar_29)) * float((tmpvar_28 >= 0.0)))));
  float tmpvar_31;
  tmpvar_31 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_24.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_32;
  tmpvar_32 = (cityoverlay_4 * texture2DGradARB (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  citydarkoverlay_1 = tmpvar_32;
  vec4 tmpvar_33;
  tmpvar_33 = (cityoverlay_4 * texture2DGradARB (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  vec4 tmpvar_34;
  tmpvar_34 = (mix (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_18.xy, tmpvar_18.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_18.xy, tmpvar_18.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_20), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_30 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_30)), 0.0, 1.0))))), tmpvar_19, vec4(tmpvar_31)), tmpvar_33, tmpvar_33.wwww) * _Color);
  color_6 = tmpvar_34;
  float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_27, -(_SunDir)), 0.0, 1.0);
  float tmpvar_36;
  tmpvar_36 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_35, tmpvar_31);
  vec4 tmpvar_37;
  tmpvar_37 = texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5));
  vec4 tmpvar_38;
  tmpvar_38 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz)));
  vec4 tmpvar_39;
  tmpvar_39 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  float tmpvar_40;
  if ((tmpvar_39.x < (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))) {
    tmpvar_40 = _LightShadowData.x;
  } else {
    tmpvar_40 = 1.0;
  };
  float tmpvar_41;
  tmpvar_41 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_37.w) * tmpvar_38.w) * tmpvar_40);
  vec3 tmpvar_42;
  tmpvar_42 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_36) * 2.0) * tmpvar_41), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_6.xyz = (tmpvar_34.xyz + (_Albedo * tmpvar_42));
  color_6.xyz = (color_6.xyz * tmpvar_42);
  citydarkoverlay_1.w = (tmpvar_32.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_35 - 0.01)) / 0.99) * 4.0) * tmpvar_41), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 51 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c10
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
mad o7.x, r0, r0.y, c20
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov o6.xyz, -r1
add r1.xyz, -r0, c16
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = mix (TNdotL_4, tmpvar_84, handoff_8);
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump float shadow_91;
  lowp vec4 tmpvar_92;
  tmpvar_92 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  highp float tmpvar_93;
  if ((tmpvar_92.x < (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  shadow_91 = tmpvar_93;
  tmpvar_90 = shadow_91;
  highp float tmpvar_94;
  tmpvar_94 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_3 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * tmpvar_85) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_98;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = mix (TNdotL_4, tmpvar_84, handoff_8);
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump float shadow_91;
  lowp vec4 tmpvar_92;
  tmpvar_92 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  highp float tmpvar_93;
  if ((tmpvar_92.x < (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  shadow_91 = tmpvar_93;
  tmpvar_90 = shadow_91;
  highp float tmpvar_94;
  tmpvar_94 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_3 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * tmpvar_85) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_98;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 442
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 432
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 414
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 418
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 422
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 426
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 430
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 456
#line 476
#line 456
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 460
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 464
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 468
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 472
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 442
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 432
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 414
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 418
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 422
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 426
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 430
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 456
#line 476
#line 476
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 480
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 484
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 486
lowp vec4 frag( in v2f IN ) {
    #line 488
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 492
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 496
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 500
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 504
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = xll_tex2Dgrad( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 citylightoverlaydetail = xll_tex2Dgrad( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 508
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    #line 512
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 516
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 520
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    #line 524
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    #line 528
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 532
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 536
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    #line 540
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 544
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 548
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (floor(((1.0 + tmpvar_21.x) - tmpvar_21.z)), 0.0, 1.0);
  vec3 tmpvar_23;
  tmpvar_23 = mix (mix (tmpvar_21.zxy, tmpvar_21, vec3(tmpvar_22)), tmpvar_21.yxz, vec3(clamp (floor(((1.0 + tmpvar_21.y) - mix (tmpvar_21.z, tmpvar_21.x, tmpvar_22))), 0.0, 1.0)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_24.xyz;
  vec2 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_25.y;
  localCoords_3.x = (tmpvar_25.x * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_26;
  tmpvar_26 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_26;
  norm_2.z = cos((6.28319 * tmpvar_26.x));
  norm_2.x = sin((6.28319 * tmpvar_26.x));
  norm_2.y = cos((3.14159 * tmpvar_26.y));
  vec3 tmpvar_27;
  tmpvar_27 = -(norm_2);
  norm_2 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_29;
  tmpvar_29 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_28 * tmpvar_28)));
  float tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_28 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_29, 2.0)))), (float((_OceanRadius >= tmpvar_29)) * float((tmpvar_28 >= 0.0)))));
  float tmpvar_31;
  tmpvar_31 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_24.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_32;
  tmpvar_32 = (cityoverlay_4 * texture2DGradARB (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  citydarkoverlay_1.xyz = tmpvar_32.xyz;
  vec4 tmpvar_33;
  tmpvar_33 = (cityoverlay_4 * texture2DGradARB (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  vec4 tmpvar_34;
  tmpvar_34 = (mix (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_18.xy, tmpvar_18.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_18.xy, tmpvar_18.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_20), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_30 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_30)), 0.0, 1.0))))), tmpvar_19, vec4(tmpvar_31)), tmpvar_33, tmpvar_33.wwww) * _Color);
  color_6.w = tmpvar_34.w;
  float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_27, -(_SunDir)), 0.0, 1.0);
  float tmpvar_36;
  tmpvar_36 = (((float((xlv_TEXCOORD2.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x * (1.0 - _LightShadowData.x))));
  vec3 tmpvar_37;
  tmpvar_37 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_35, tmpvar_31)) * 2.0) * tmpvar_36), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_6.xyz = (tmpvar_34.xyz + (_Albedo * tmpvar_37));
  color_6.xyz = (color_6.xyz * tmpvar_37);
  citydarkoverlay_1.w = (tmpvar_32.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_35 - 0.01)) / 0.99) * 4.0) * tmpvar_36), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 51 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c10
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
mad o7.x, r0, r0.y, c20
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov o6.xyz, -r1
add r1.xyz, -r0, c16
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7.xyz = tmpvar_78.xyz;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  lowp vec4 tmpvar_85;
  highp vec2 P_86;
  P_86 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_85 = texture2D (_LightTexture0, P_86);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  lowp float tmpvar_89;
  mediump float shadow_90;
  lowp float tmpvar_91;
  tmpvar_91 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD3);
  shadow_90 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = (_LightShadowData.x + (shadow_90 * (1.0 - _LightShadowData.x)));
  shadow_90 = tmpvar_92;
  tmpvar_89 = shadow_90;
  highp float tmpvar_93;
  tmpvar_93 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_85.w) * tmpvar_88.w) * tmpvar_89);
  atten_3 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_84, handoff_8)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_95;
  tmpvar_95 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_94)), 0.0, 1.0);
  light_2 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_97;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 443
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 433
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 415
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 419
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 423
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 427
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 431
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 457
#line 477
#line 457
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 461
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 465
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 469
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 473
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 443
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 433
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 415
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 419
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 423
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 427
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 431
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 457
#line 477
#line 477
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 481
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 485
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 487
lowp vec4 frag( in v2f IN ) {
    #line 489
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 493
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 497
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 501
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 505
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = xll_tex2Dgrad( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 citylightoverlaydetail = xll_tex2Dgrad( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 509
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    #line 513
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 517
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 521
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    #line 525
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    #line 529
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 533
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 537
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    #line 541
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 545
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 549
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex).xyz;
  vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_4, p_4));
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = gl_Normal;
  vec4 tmpvar_6;
  tmpvar_6.x = gl_MultiTexCoord0.x;
  tmpvar_6.y = gl_MultiTexCoord0.y;
  tmpvar_6.z = gl_MultiTexCoord1.x;
  tmpvar_6.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_7;
  tmpvar_7 = -(normalize(tmpvar_6).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_8;
  tmpvar_8 = dot (tmpvar_7, normalize(_SunDir));
  vec4 o_9;
  vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_2 * 0.5);
  vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_8)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_8)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_3 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (floor(((1.0 + tmpvar_21.x) - tmpvar_21.z)), 0.0, 1.0);
  vec3 tmpvar_23;
  tmpvar_23 = mix (mix (tmpvar_21.zxy, tmpvar_21, vec3(tmpvar_22)), tmpvar_21.yxz, vec3(clamp (floor(((1.0 + tmpvar_21.y) - mix (tmpvar_21.z, tmpvar_21.x, tmpvar_22))), 0.0, 1.0)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_24.xyz;
  vec2 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_25.y;
  localCoords_3.x = (tmpvar_25.x * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_26;
  tmpvar_26 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_26;
  norm_2.z = cos((6.28319 * tmpvar_26.x));
  norm_2.x = sin((6.28319 * tmpvar_26.x));
  norm_2.y = cos((3.14159 * tmpvar_26.y));
  vec3 tmpvar_27;
  tmpvar_27 = -(norm_2);
  norm_2 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_29;
  tmpvar_29 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_28 * tmpvar_28)));
  float tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_28 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_29, 2.0)))), (float((_OceanRadius >= tmpvar_29)) * float((tmpvar_28 >= 0.0)))));
  float tmpvar_31;
  tmpvar_31 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_24.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_32;
  tmpvar_32 = (cityoverlay_4 * texture2DGradARB (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  citydarkoverlay_1.xyz = tmpvar_32.xyz;
  vec4 tmpvar_33;
  tmpvar_33 = (cityoverlay_4 * texture2DGradARB (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  vec4 tmpvar_34;
  tmpvar_34 = (mix (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_18.xy, tmpvar_18.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_18.xy, tmpvar_18.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_20), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_30 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_30)), 0.0, 1.0))))), tmpvar_19, vec4(tmpvar_31)), tmpvar_33, tmpvar_33.wwww) * _Color);
  color_6.w = tmpvar_34.w;
  float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_27, -(_SunDir)), 0.0, 1.0);
  vec4 tmpvar_36;
  tmpvar_36 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2);
  vec3 tmpvar_37;
  tmpvar_37 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_35, tmpvar_31)) * 2.0) * tmpvar_36.x), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_6.xyz = (tmpvar_34.xyz + (_Albedo * tmpvar_37));
  color_6.xyz = (color_6.xyz * tmpvar_37);
  citydarkoverlay_1.w = (tmpvar_32.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_35 - 0.01)) / 0.99) * 4.0) * tmpvar_36.x), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Matrix 4 [_Object2World]
Vector 11 [_SunDir]
Vector 12 [_PlanetOrigin]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
def c13, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c14, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c11, c11
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c11
dp3 r1.w, -r1, r0
mov o5.xyz, -r1
mov r0.xyz, v2
mov r0.w, c13.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c13.z
dp3 r0.x, r2, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
add r2.w, r0.y, c13
mul_sat r0.z, -r1.w, c13.y
mad o6.x, r0.z, r2.w, c14.y
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r2.xyz, r0.xyww, c14.x
mul r2.y, r2, c9.x
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
mov o0, r0
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o8.xyz, r0.x, -r1
mov r1.xyz, c12
mad o3.xy, r2.z, c10.zwzw, r2
mov o1, v1
mov o3.zw, r0
mov o2.xyz, v2
rcp o2.w, r0.x
add o7.xyz, -c8, r1
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 citylightoverlaydetail_13;
  mediump vec4 citydarkoverlaydetail_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 vert_16;
  mediump vec4 detail_17;
  mediump float nylerp_18;
  mediump vec3 detailCoords_19;
  mediump float zxlerp_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec4 tmpvar_38;
  tmpvar_38.w = 0.0;
  tmpvar_38.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_38), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = abs(xlv_TEXCOORD5);
  highp float tmpvar_41;
  tmpvar_41 = clamp (floor(((1.0 + tmpvar_40.x) - tmpvar_40.z)), 0.0, 1.0);
  zxlerp_20 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.zxy, tmpvar_40, vec3(zxlerp_20));
  detailCoords_19 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (floor(((1.0 + tmpvar_40.y) - mix (tmpvar_40.z, tmpvar_40.x, zxlerp_20))), 0.0, 1.0);
  nylerp_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (detailCoords_19, tmpvar_40.yxz, vec3(nylerp_18));
  detailCoords_19 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_19.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_19.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_midTex, coord_46, tmpvar_36.xy, tmpvar_36.zw);
  detail_17 = tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = abs(detailCoords_19.x);
  highp vec2 coord_49;
  coord_49 = ((((0.5 * detailCoords_19.zy) / tmpvar_48) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2DGradEXT (_steepTex, coord_49, tmpvar_36.xy, tmpvar_36.zw);
  vert_16 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (vert_16, detail_17, vec4(vertLerp_21));
  detail_17 = tmpvar_51;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_15 = tmpvar_52;
  mediump float tmpvar_53;
  tmpvar_53 = abs(detailCoords_19.x);
  highp vec2 coord_54;
  coord_54 = ((((0.5 * detailCoords_19.zy) / tmpvar_53) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_54, tmpvar_36.xy, tmpvar_36.zw);
  citydarkoverlaydetail_14 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = abs(detailCoords_19.x);
  highp vec2 coord_57;
  coord_57 = ((((0.5 * detailCoords_19.zy) / tmpvar_56) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_57, tmpvar_36.xy, tmpvar_36.zw);
  citylightoverlaydetail_13 = tmpvar_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_12 = tmpvar_59;
  mediump vec2 tmpvar_60;
  tmpvar_60 = encnorm_12.wy;
  localCoords_11 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_61.y;
  localCoords_11.x = (tmpvar_61.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62 = (uv_23 + localCoords_11);
  uv_23 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = cos((6.28319 * tmpvar_62.x));
  norm_10.z = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = sin((6.28319 * tmpvar_62.x));
  norm_10.x = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = cos((3.14159 * tmpvar_62.y));
  norm_10.y = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = -(norm_10);
  norm_10 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = mix (tmpvar_51, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_69;
  tmpvar_69 = (xlv_TEXCOORD0 * tmpvar_68);
  color_24 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_71;
  tmpvar_71 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_70 * tmpvar_70)));
  highp float tmpvar_72;
  tmpvar_72 = (float((_OceanRadius >= tmpvar_71)) * float((tmpvar_70 >= 0.0)));
  sphereCheck_8 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_70 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_71, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (color_24, _OceanColor, vec4((clamp ((tmpvar_73 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_73)), 0.0, 1.0)))));
  color_24 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_76);
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * citydarkoverlaydetail_14);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * citylightoverlaydetail_13);
  mediump vec4 tmpvar_79;
  tmpvar_79 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_78, tmpvar_78.wwww) * _Color);
  color_24.w = tmpvar_79.w;
  highp vec3 tmpvar_80;
  tmpvar_80 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_80;
  lowp vec3 tmpvar_81;
  tmpvar_81 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_66, -(_SunDir)), 0.0, 1.0);
  lowp float tmpvar_84;
  mediump float lightShadowDataX_85;
  highp float dist_86;
  lowp float tmpvar_87;
  tmpvar_87 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_86 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = _LightShadowData.x;
  lightShadowDataX_85 = tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = max (float((dist_86 > (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w))), lightShadowDataX_85);
  tmpvar_84 = tmpvar_89;
  mediump float tmpvar_90;
  tmpvar_90 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_83, handoff_7)) * 2.0) * tmpvar_84), 0.0, 1.0);
  highp vec3 tmpvar_91;
  tmpvar_91 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_90)), 0.0, 1.0);
  light_2 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (tmpvar_79.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_93;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_83 - 0.01)) / 0.99) * 4.0) * tmpvar_84), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 tmpvar_6;
  tmpvar_6 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_7;
  p_7 = (tmpvar_6 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_7, p_7));
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_1;
  highp vec4 tmpvar_9;
  tmpvar_9.x = _glesMultiTexCoord0.x;
  tmpvar_9.y = _glesMultiTexCoord0.y;
  tmpvar_9.z = _glesMultiTexCoord1.x;
  tmpvar_9.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_10;
  tmpvar_10 = -(normalize(tmpvar_9).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_11;
  tmpvar_11 = normalize(_SunDir);
  highp float tmpvar_12;
  tmpvar_12 = dot (tmpvar_10, tmpvar_11);
  NdotL_2 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_13;
  highp vec4 o_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = o_14;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_8).xyz);
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_6 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 citylightoverlaydetail_13;
  mediump vec4 citydarkoverlaydetail_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 vert_16;
  mediump vec4 detail_17;
  mediump float nylerp_18;
  mediump vec3 detailCoords_19;
  mediump float zxlerp_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec4 tmpvar_38;
  tmpvar_38.w = 0.0;
  tmpvar_38.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_38), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = abs(xlv_TEXCOORD5);
  highp float tmpvar_41;
  tmpvar_41 = clamp (floor(((1.0 + tmpvar_40.x) - tmpvar_40.z)), 0.0, 1.0);
  zxlerp_20 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.zxy, tmpvar_40, vec3(zxlerp_20));
  detailCoords_19 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (floor(((1.0 + tmpvar_40.y) - mix (tmpvar_40.z, tmpvar_40.x, zxlerp_20))), 0.0, 1.0);
  nylerp_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (detailCoords_19, tmpvar_40.yxz, vec3(nylerp_18));
  detailCoords_19 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_19.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_19.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_midTex, coord_46, tmpvar_36.xy, tmpvar_36.zw);
  detail_17 = tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = abs(detailCoords_19.x);
  highp vec2 coord_49;
  coord_49 = ((((0.5 * detailCoords_19.zy) / tmpvar_48) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2DGradEXT (_steepTex, coord_49, tmpvar_36.xy, tmpvar_36.zw);
  vert_16 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (vert_16, detail_17, vec4(vertLerp_21));
  detail_17 = tmpvar_51;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_15 = tmpvar_52;
  mediump float tmpvar_53;
  tmpvar_53 = abs(detailCoords_19.x);
  highp vec2 coord_54;
  coord_54 = ((((0.5 * detailCoords_19.zy) / tmpvar_53) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_54, tmpvar_36.xy, tmpvar_36.zw);
  citydarkoverlaydetail_14 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = abs(detailCoords_19.x);
  highp vec2 coord_57;
  coord_57 = ((((0.5 * detailCoords_19.zy) / tmpvar_56) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_57, tmpvar_36.xy, tmpvar_36.zw);
  citylightoverlaydetail_13 = tmpvar_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_12 = tmpvar_59;
  mediump vec2 tmpvar_60;
  tmpvar_60 = encnorm_12.wy;
  localCoords_11 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_61.y;
  localCoords_11.x = (tmpvar_61.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62 = (uv_23 + localCoords_11);
  uv_23 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = cos((6.28319 * tmpvar_62.x));
  norm_10.z = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = sin((6.28319 * tmpvar_62.x));
  norm_10.x = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = cos((3.14159 * tmpvar_62.y));
  norm_10.y = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = -(norm_10);
  norm_10 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = mix (tmpvar_51, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_69;
  tmpvar_69 = (xlv_TEXCOORD0 * tmpvar_68);
  color_24 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_71;
  tmpvar_71 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_70 * tmpvar_70)));
  highp float tmpvar_72;
  tmpvar_72 = (float((_OceanRadius >= tmpvar_71)) * float((tmpvar_70 >= 0.0)));
  sphereCheck_8 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_70 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_71, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (color_24, _OceanColor, vec4((clamp ((tmpvar_73 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_73)), 0.0, 1.0)))));
  color_24 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_76);
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * citydarkoverlaydetail_14);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * citylightoverlaydetail_13);
  mediump vec4 tmpvar_79;
  tmpvar_79 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_78, tmpvar_78.wwww) * _Color);
  color_24.w = tmpvar_79.w;
  highp vec3 tmpvar_80;
  tmpvar_80 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_80;
  lowp vec3 tmpvar_81;
  tmpvar_81 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_66, -(_SunDir)), 0.0, 1.0);
  lowp vec4 tmpvar_84;
  tmpvar_84 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2);
  mediump float tmpvar_85;
  tmpvar_85 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_83, handoff_7)) * 2.0) * tmpvar_84.x), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (tmpvar_79.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_88;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_83 - 0.01)) / 0.99) * 4.0) * tmpvar_84.x), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 433
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 423
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 405
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 409
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 413
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 417
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 421
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 446
#line 475
#line 446
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 450
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 454
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 458
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 463
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 433
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 423
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 405
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 409
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 413
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 417
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 421
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 446
#line 475
#line 465
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 467
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    #line 471
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 475
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 479
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 483
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    #line 487
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    #line 491
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = xll_tex2Dgrad( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    #line 495
    mediump vec4 citylightoverlaydetail = xll_tex2Dgrad( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 499
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 503
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 507
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 511
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 515
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 519
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    #line 523
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 527
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 531
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 535
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 539
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex).xyz;
  vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_4, p_4));
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = gl_Normal;
  vec4 tmpvar_6;
  tmpvar_6.x = gl_MultiTexCoord0.x;
  tmpvar_6.y = gl_MultiTexCoord0.y;
  tmpvar_6.z = gl_MultiTexCoord1.x;
  tmpvar_6.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_7;
  tmpvar_7 = -(normalize(tmpvar_6).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_8;
  tmpvar_8 = dot (tmpvar_7, normalize(_SunDir));
  vec4 o_9;
  vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_2 * 0.5);
  vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_8)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_8)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_3 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (floor(((1.0 + tmpvar_21.x) - tmpvar_21.z)), 0.0, 1.0);
  vec3 tmpvar_23;
  tmpvar_23 = mix (mix (tmpvar_21.zxy, tmpvar_21, vec3(tmpvar_22)), tmpvar_21.yxz, vec3(clamp (floor(((1.0 + tmpvar_21.y) - mix (tmpvar_21.z, tmpvar_21.x, tmpvar_22))), 0.0, 1.0)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_24.xyz;
  vec2 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_25.y;
  localCoords_3.x = (tmpvar_25.x * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_26;
  tmpvar_26 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_26;
  norm_2.z = cos((6.28319 * tmpvar_26.x));
  norm_2.x = sin((6.28319 * tmpvar_26.x));
  norm_2.y = cos((3.14159 * tmpvar_26.y));
  vec3 tmpvar_27;
  tmpvar_27 = -(norm_2);
  norm_2 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_29;
  tmpvar_29 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_28 * tmpvar_28)));
  float tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_28 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_29, 2.0)))), (float((_OceanRadius >= tmpvar_29)) * float((tmpvar_28 >= 0.0)))));
  float tmpvar_31;
  tmpvar_31 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_24.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_32;
  tmpvar_32 = (cityoverlay_4 * texture2DGradARB (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  citydarkoverlay_1.xyz = tmpvar_32.xyz;
  vec4 tmpvar_33;
  tmpvar_33 = (cityoverlay_4 * texture2DGradARB (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  vec4 tmpvar_34;
  tmpvar_34 = (mix (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_18.xy, tmpvar_18.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_18.xy, tmpvar_18.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_20), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_30 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_30)), 0.0, 1.0))))), tmpvar_19, vec4(tmpvar_31)), tmpvar_33, tmpvar_33.wwww) * _Color);
  color_6.w = tmpvar_34.w;
  float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_27, -(_SunDir)), 0.0, 1.0);
  float tmpvar_36;
  tmpvar_36 = (texture2D (_LightTexture0, xlv_TEXCOORD2).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x);
  vec3 tmpvar_37;
  tmpvar_37 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_35, tmpvar_31)) * 2.0) * tmpvar_36), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_6.xyz = (tmpvar_34.xyz + (_Albedo * tmpvar_37));
  color_6.xyz = (color_6.xyz * tmpvar_37);
  citydarkoverlay_1.w = (tmpvar_32.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_35 - 0.01)) / 0.99) * 4.0) * tmpvar_36), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 15 [_SunDir]
Vector 16 [_PlanetOrigin]
"vs_3_0
; 50 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c17, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c18, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r1.x, c15, c15
rsq r1.x, r1.x
mov r1.w, c17.x
mov r0.xy, v3
mov r0.zw, v4.xyxy
dp4 r0.w, r0, r0
rsq r0.w, r0.w
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c15
dp3 r0.w, -r0, r1
mov r1.xyz, v2
mov o6.xyz, -r0
add r2.w, r0, c17.z
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
dp3 r1.x, r2, r2
frc r1.y, r2.w
add_sat r1.y, r2.w, -r1
rsq r1.x, r1.x
mul o5.xyz, r1.x, r2
dp4 r0.x, v0, c4
add r1.w, r1.y, c17
mul_sat r0.w, -r0, c17.y
mad o7.x, r0.w, r1.w, c18.y
dp4 r2.w, v0, c3
dp4 r2.z, v0, c2
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
dp4 r2.x, v0, c0
dp4 r2.y, v0, c1
mul r1.xyz, r2.xyww, c18.x
mul r1.y, r1, c13.x
mad o4.xy, r1.z, c14.zwzw, r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
rsq r0.x, r1.w
mul o9.xyz, r0.x, -r1
mov r1.xyz, c16
mov o0, r2
mov o1, v1
mov o4.zw, r2
mov o2.xyz, v2
rcp o2.w, r0.x
add o8.xyz, -c12, r1
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 citylightoverlaydetail_13;
  mediump vec4 citydarkoverlaydetail_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 vert_16;
  mediump vec4 detail_17;
  mediump float nylerp_18;
  mediump vec3 detailCoords_19;
  mediump float zxlerp_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec4 tmpvar_38;
  tmpvar_38.w = 0.0;
  tmpvar_38.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_38), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = abs(xlv_TEXCOORD5);
  highp float tmpvar_41;
  tmpvar_41 = clamp (floor(((1.0 + tmpvar_40.x) - tmpvar_40.z)), 0.0, 1.0);
  zxlerp_20 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.zxy, tmpvar_40, vec3(zxlerp_20));
  detailCoords_19 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (floor(((1.0 + tmpvar_40.y) - mix (tmpvar_40.z, tmpvar_40.x, zxlerp_20))), 0.0, 1.0);
  nylerp_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (detailCoords_19, tmpvar_40.yxz, vec3(nylerp_18));
  detailCoords_19 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_19.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_19.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_midTex, coord_46, tmpvar_36.xy, tmpvar_36.zw);
  detail_17 = tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = abs(detailCoords_19.x);
  highp vec2 coord_49;
  coord_49 = ((((0.5 * detailCoords_19.zy) / tmpvar_48) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2DGradEXT (_steepTex, coord_49, tmpvar_36.xy, tmpvar_36.zw);
  vert_16 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (vert_16, detail_17, vec4(vertLerp_21));
  detail_17 = tmpvar_51;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_15 = tmpvar_52;
  mediump float tmpvar_53;
  tmpvar_53 = abs(detailCoords_19.x);
  highp vec2 coord_54;
  coord_54 = ((((0.5 * detailCoords_19.zy) / tmpvar_53) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_54, tmpvar_36.xy, tmpvar_36.zw);
  citydarkoverlaydetail_14 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = abs(detailCoords_19.x);
  highp vec2 coord_57;
  coord_57 = ((((0.5 * detailCoords_19.zy) / tmpvar_56) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_57, tmpvar_36.xy, tmpvar_36.zw);
  citylightoverlaydetail_13 = tmpvar_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_12 = tmpvar_59;
  mediump vec2 tmpvar_60;
  tmpvar_60 = encnorm_12.wy;
  localCoords_11 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_61.y;
  localCoords_11.x = (tmpvar_61.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62 = (uv_23 + localCoords_11);
  uv_23 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = cos((6.28319 * tmpvar_62.x));
  norm_10.z = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = sin((6.28319 * tmpvar_62.x));
  norm_10.x = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = cos((3.14159 * tmpvar_62.y));
  norm_10.y = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = -(norm_10);
  norm_10 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = mix (tmpvar_51, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_69;
  tmpvar_69 = (xlv_TEXCOORD0 * tmpvar_68);
  color_24 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_71;
  tmpvar_71 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_70 * tmpvar_70)));
  highp float tmpvar_72;
  tmpvar_72 = (float((_OceanRadius >= tmpvar_71)) * float((tmpvar_70 >= 0.0)));
  sphereCheck_8 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_70 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_71, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (color_24, _OceanColor, vec4((clamp ((tmpvar_73 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_73)), 0.0, 1.0)))));
  color_24 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_76);
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * citydarkoverlaydetail_14);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * citylightoverlaydetail_13);
  mediump vec4 tmpvar_79;
  tmpvar_79 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_78, tmpvar_78.wwww) * _Color);
  color_24.w = tmpvar_79.w;
  highp vec3 tmpvar_80;
  tmpvar_80 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_80;
  lowp vec3 tmpvar_81;
  tmpvar_81 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_66, -(_SunDir)), 0.0, 1.0);
  lowp float tmpvar_84;
  mediump float lightShadowDataX_85;
  highp float dist_86;
  lowp float tmpvar_87;
  tmpvar_87 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_86 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = _LightShadowData.x;
  lightShadowDataX_85 = tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = max (float((dist_86 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_85);
  tmpvar_84 = tmpvar_89;
  lowp float tmpvar_90;
  tmpvar_90 = (texture2D (_LightTexture0, xlv_TEXCOORD2).w * tmpvar_84);
  mediump float tmpvar_91;
  tmpvar_91 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_83, handoff_7)) * 2.0) * tmpvar_90), 0.0, 1.0);
  highp vec3 tmpvar_92;
  tmpvar_92 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_91)), 0.0, 1.0);
  light_2 = tmpvar_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_93;
  highp vec3 tmpvar_94;
  tmpvar_94 = (tmpvar_79.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_94;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_83 - 0.01)) / 0.99) * 4.0) * tmpvar_90), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 tmpvar_6;
  tmpvar_6 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_7;
  p_7 = (tmpvar_6 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_7, p_7));
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_1;
  highp vec4 tmpvar_9;
  tmpvar_9.x = _glesMultiTexCoord0.x;
  tmpvar_9.y = _glesMultiTexCoord0.y;
  tmpvar_9.z = _glesMultiTexCoord1.x;
  tmpvar_9.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_10;
  tmpvar_10 = -(normalize(tmpvar_9).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_11;
  tmpvar_11 = normalize(_SunDir);
  highp float tmpvar_12;
  tmpvar_12 = dot (tmpvar_10, tmpvar_11);
  NdotL_2 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_13;
  highp vec4 o_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD3 = o_14;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_8).xyz);
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_6 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  mediump float sphereCheck_8;
  mediump float detailLevel_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump vec4 citylightoverlaydetail_13;
  mediump vec4 citydarkoverlaydetail_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 vert_16;
  mediump vec4 detail_17;
  mediump float nylerp_18;
  mediump vec3 detailCoords_19;
  mediump float zxlerp_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec4 tmpvar_38;
  tmpvar_38.w = 0.0;
  tmpvar_38.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_38), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = abs(xlv_TEXCOORD5);
  highp float tmpvar_41;
  tmpvar_41 = clamp (floor(((1.0 + tmpvar_40.x) - tmpvar_40.z)), 0.0, 1.0);
  zxlerp_20 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.zxy, tmpvar_40, vec3(zxlerp_20));
  detailCoords_19 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (floor(((1.0 + tmpvar_40.y) - mix (tmpvar_40.z, tmpvar_40.x, zxlerp_20))), 0.0, 1.0);
  nylerp_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (detailCoords_19, tmpvar_40.yxz, vec3(nylerp_18));
  detailCoords_19 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_19.x);
  highp vec2 coord_46;
  coord_46 = ((((0.5 * detailCoords_19.zy) / tmpvar_45) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_midTex, coord_46, tmpvar_36.xy, tmpvar_36.zw);
  detail_17 = tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = abs(detailCoords_19.x);
  highp vec2 coord_49;
  coord_49 = ((((0.5 * detailCoords_19.zy) / tmpvar_48) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2DGradEXT (_steepTex, coord_49, tmpvar_36.xy, tmpvar_36.zw);
  vert_16 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (vert_16, detail_17, vec4(vertLerp_21));
  detail_17 = tmpvar_51;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_15 = tmpvar_52;
  mediump float tmpvar_53;
  tmpvar_53 = abs(detailCoords_19.x);
  highp vec2 coord_54;
  coord_54 = ((((0.5 * detailCoords_19.zy) / tmpvar_53) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_54, tmpvar_36.xy, tmpvar_36.zw);
  citydarkoverlaydetail_14 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = abs(detailCoords_19.x);
  highp vec2 coord_57;
  coord_57 = ((((0.5 * detailCoords_19.zy) / tmpvar_56) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_57, tmpvar_36.xy, tmpvar_36.zw);
  citylightoverlaydetail_13 = tmpvar_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_12 = tmpvar_59;
  mediump vec2 tmpvar_60;
  tmpvar_60 = encnorm_12.wy;
  localCoords_11 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_61.y;
  localCoords_11.x = (tmpvar_61.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62 = (uv_23 + localCoords_11);
  uv_23 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = cos((6.28319 * tmpvar_62.x));
  norm_10.z = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = sin((6.28319 * tmpvar_62.x));
  norm_10.x = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = cos((3.14159 * tmpvar_62.y));
  norm_10.y = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = -(norm_10);
  norm_10 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = mix (tmpvar_51, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_69;
  tmpvar_69 = (xlv_TEXCOORD0 * tmpvar_68);
  color_24 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_71;
  tmpvar_71 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_70 * tmpvar_70)));
  highp float tmpvar_72;
  tmpvar_72 = (float((_OceanRadius >= tmpvar_71)) * float((tmpvar_70 >= 0.0)));
  sphereCheck_8 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_70 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_71, 2.0)))), sphereCheck_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (color_24, _OceanColor, vec4((clamp ((tmpvar_73 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_73)), 0.0, 1.0)))));
  color_24 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_76);
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * citydarkoverlaydetail_14);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * citylightoverlaydetail_13);
  mediump vec4 tmpvar_79;
  tmpvar_79 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_78, tmpvar_78.wwww) * _Color);
  color_24.w = tmpvar_79.w;
  highp vec3 tmpvar_80;
  tmpvar_80 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_80;
  lowp vec3 tmpvar_81;
  tmpvar_81 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (tmpvar_66, -(_SunDir)), 0.0, 1.0);
  lowp float tmpvar_84;
  tmpvar_84 = (texture2D (_LightTexture0, xlv_TEXCOORD2).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x);
  mediump float tmpvar_85;
  tmpvar_85 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_83, handoff_7)) * 2.0) * tmpvar_84), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (tmpvar_79.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_88;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_83 - 0.01)) / 0.99) * 4.0) * tmpvar_84), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 407
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 411
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 415
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 419
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 423
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 469
#line 449
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 453
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 457
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 461
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 465
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 407
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 411
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 415
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 419
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 423
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 469
#line 469
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 473
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 477
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 479
lowp vec4 frag( in v2f IN ) {
    #line 481
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 485
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 489
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 493
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 497
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = xll_tex2Dgrad( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 citylightoverlaydetail = xll_tex2Dgrad( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 501
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    #line 505
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 509
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 513
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    #line 517
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    #line 521
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 525
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 529
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    #line 533
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 537
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 541
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (floor(((1.0 + tmpvar_21.x) - tmpvar_21.z)), 0.0, 1.0);
  vec3 tmpvar_23;
  tmpvar_23 = mix (mix (tmpvar_21.zxy, tmpvar_21, vec3(tmpvar_22)), tmpvar_21.yxz, vec3(clamp (floor(((1.0 + tmpvar_21.y) - mix (tmpvar_21.z, tmpvar_21.x, tmpvar_22))), 0.0, 1.0)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_24.xyz;
  vec2 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_25.y;
  localCoords_3.x = (tmpvar_25.x * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_26;
  tmpvar_26 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_26;
  norm_2.z = cos((6.28319 * tmpvar_26.x));
  norm_2.x = sin((6.28319 * tmpvar_26.x));
  norm_2.y = cos((3.14159 * tmpvar_26.y));
  vec3 tmpvar_27;
  tmpvar_27 = -(norm_2);
  norm_2 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_29;
  tmpvar_29 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_28 * tmpvar_28)));
  float tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_28 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_29, 2.0)))), (float((_OceanRadius >= tmpvar_29)) * float((tmpvar_28 >= 0.0)))));
  float tmpvar_31;
  tmpvar_31 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_24.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_32;
  tmpvar_32 = (cityoverlay_4 * texture2DGradARB (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  citydarkoverlay_1 = tmpvar_32;
  vec4 tmpvar_33;
  tmpvar_33 = (cityoverlay_4 * texture2DGradARB (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  vec4 tmpvar_34;
  tmpvar_34 = (mix (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_18.xy, tmpvar_18.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_18.xy, tmpvar_18.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_20), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_30 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_30)), 0.0, 1.0))))), tmpvar_19, vec4(tmpvar_31)), tmpvar_33, tmpvar_33.wwww) * _Color);
  color_6 = tmpvar_34;
  float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_27, -(_SunDir)), 0.0, 1.0);
  float tmpvar_36;
  tmpvar_36 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_35, tmpvar_31);
  vec4 tmpvar_37;
  tmpvar_37 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  float tmpvar_38;
  tmpvar_38 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  float tmpvar_39;
  tmpvar_39 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD3), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_40;
  if ((tmpvar_39 < tmpvar_38)) {
    tmpvar_40 = _LightShadowData.x;
  } else {
    tmpvar_40 = 1.0;
  };
  float tmpvar_41;
  tmpvar_41 = (tmpvar_37.w * tmpvar_40);
  vec3 tmpvar_42;
  tmpvar_42 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_36) * 2.0) * tmpvar_41), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_6.xyz = (tmpvar_34.xyz + (_Albedo * tmpvar_42));
  color_6.xyz = (color_6.xyz * tmpvar_42);
  citydarkoverlay_1.w = (tmpvar_32.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_35 - 0.01)) / 0.99) * 4.0) * tmpvar_41), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
mad o7.x, r0, r0.y, c17
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
mov o6.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
mul o9.xyz, r1.w, -r1
mov r1.xyz, c15
mov o1, v1
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r0, -c13
add o8.xyz, -c12, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = mix (TNdotL_4, tmpvar_84, handoff_8);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTexture0, vec2(tmpvar_86));
  highp float tmpvar_88;
  tmpvar_88 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_89;
  lowp vec4 tmpvar_90;
  tmpvar_90 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_89 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = dot (packDist_89, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_92;
  if ((tmpvar_91 < tmpvar_88)) {
    tmpvar_92 = _LightShadowData.x;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  tmpvar_93 = (tmpvar_87.w * tmpvar_92);
  atten_3 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp ((((_LightColor0.w * tmpvar_85) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_95;
  tmpvar_95 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_94)), 0.0, 1.0);
  light_2 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_97;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = mix (TNdotL_4, tmpvar_84, handoff_8);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTexture0, vec2(tmpvar_86));
  highp float tmpvar_88;
  tmpvar_88 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_89;
  lowp vec4 tmpvar_90;
  tmpvar_90 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_89 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = dot (packDist_89, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_92;
  if ((tmpvar_91 < tmpvar_88)) {
    tmpvar_92 = _LightShadowData.x;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  tmpvar_93 = (tmpvar_87.w * tmpvar_92);
  atten_3 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp ((((_LightColor0.w * tmpvar_85) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_95;
  tmpvar_95 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_94)), 0.0, 1.0);
  light_2 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_97;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 440
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 430
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 412
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 416
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 420
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 424
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 428
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 454
#line 474
#line 454
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 458
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 462
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 466
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 470
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 440
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 430
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 412
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 416
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 420
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 424
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 428
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 454
#line 474
#line 474
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 478
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 482
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 484
lowp vec4 frag( in v2f IN ) {
    #line 486
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 490
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 494
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 498
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 502
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = xll_tex2Dgrad( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 citylightoverlaydetail = xll_tex2Dgrad( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 506
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    #line 510
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 514
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 518
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    #line 522
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    #line 526
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 530
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 534
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    #line 538
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 542
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 546
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (floor(((1.0 + tmpvar_21.x) - tmpvar_21.z)), 0.0, 1.0);
  vec3 tmpvar_23;
  tmpvar_23 = mix (mix (tmpvar_21.zxy, tmpvar_21, vec3(tmpvar_22)), tmpvar_21.yxz, vec3(clamp (floor(((1.0 + tmpvar_21.y) - mix (tmpvar_21.z, tmpvar_21.x, tmpvar_22))), 0.0, 1.0)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_24.xyz;
  vec2 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_25.y;
  localCoords_3.x = (tmpvar_25.x * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_26;
  tmpvar_26 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_26;
  norm_2.z = cos((6.28319 * tmpvar_26.x));
  norm_2.x = sin((6.28319 * tmpvar_26.x));
  norm_2.y = cos((3.14159 * tmpvar_26.y));
  vec3 tmpvar_27;
  tmpvar_27 = -(norm_2);
  norm_2 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_29;
  tmpvar_29 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_28 * tmpvar_28)));
  float tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_28 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_29, 2.0)))), (float((_OceanRadius >= tmpvar_29)) * float((tmpvar_28 >= 0.0)))));
  float tmpvar_31;
  tmpvar_31 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_24.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_32;
  tmpvar_32 = (cityoverlay_4 * texture2DGradARB (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  citydarkoverlay_1 = tmpvar_32;
  vec4 tmpvar_33;
  tmpvar_33 = (cityoverlay_4 * texture2DGradARB (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  vec4 tmpvar_34;
  tmpvar_34 = (mix (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_18.xy, tmpvar_18.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_18.xy, tmpvar_18.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_20), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_30 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_30)), 0.0, 1.0))))), tmpvar_19, vec4(tmpvar_31)), tmpvar_33, tmpvar_33.wwww) * _Color);
  color_6 = tmpvar_34;
  float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_27, -(_SunDir)), 0.0, 1.0);
  float tmpvar_36;
  tmpvar_36 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_35, tmpvar_31);
  vec4 tmpvar_37;
  tmpvar_37 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  vec4 tmpvar_38;
  tmpvar_38 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  float tmpvar_39;
  tmpvar_39 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  float tmpvar_40;
  tmpvar_40 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD3), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_41;
  if ((tmpvar_40 < tmpvar_39)) {
    tmpvar_41 = _LightShadowData.x;
  } else {
    tmpvar_41 = 1.0;
  };
  float tmpvar_42;
  tmpvar_42 = ((tmpvar_37.w * tmpvar_38.w) * tmpvar_41);
  vec3 tmpvar_43;
  tmpvar_43 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_36) * 2.0) * tmpvar_42), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_6.xyz = (tmpvar_34.xyz + (_Albedo * tmpvar_43));
  color_6.xyz = (color_6.xyz * tmpvar_43);
  citydarkoverlay_1.w = (tmpvar_32.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_35 - 0.01)) / 0.99) * 4.0) * tmpvar_42), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
mad o7.x, r0, r0.y, c17
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
mov o6.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
mul o9.xyz, r1.w, -r1
mov r1.xyz, c15
mov o1, v1
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r0, -c13
add o8.xyz, -c12, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = mix (TNdotL_4, tmpvar_84, handoff_8);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTextureB0, vec2(tmpvar_86));
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_89;
  tmpvar_89 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_90;
  lowp vec4 tmpvar_91;
  tmpvar_91 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_90 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = dot (packDist_90, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_93;
  if ((tmpvar_92 < tmpvar_89)) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  tmpvar_94 = ((tmpvar_87.w * tmpvar_88.w) * tmpvar_93);
  atten_3 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * tmpvar_85) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_98;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = mix (TNdotL_4, tmpvar_84, handoff_8);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTextureB0, vec2(tmpvar_86));
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_89;
  tmpvar_89 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_90;
  lowp vec4 tmpvar_91;
  tmpvar_91 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_90 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = dot (packDist_90, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_93;
  if ((tmpvar_92 < tmpvar_89)) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  tmpvar_94 = ((tmpvar_87.w * tmpvar_88.w) * tmpvar_93);
  atten_3 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * tmpvar_85) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_98;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 441
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 413
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 417
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 421
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 425
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 429
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 455
#line 475
#line 455
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 459
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 463
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 467
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 471
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 441
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 413
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 417
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 421
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 425
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 429
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 455
#line 475
#line 475
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 479
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 483
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 485
lowp vec4 frag( in v2f IN ) {
    #line 487
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 491
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 495
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 499
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 503
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = xll_tex2Dgrad( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 citylightoverlaydetail = xll_tex2Dgrad( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 507
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    #line 511
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 515
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 519
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    #line 523
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    #line 527
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 531
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 535
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    #line 539
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 543
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 547
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (floor(((1.0 + tmpvar_21.x) - tmpvar_21.z)), 0.0, 1.0);
  vec3 tmpvar_23;
  tmpvar_23 = mix (mix (tmpvar_21.zxy, tmpvar_21, vec3(tmpvar_22)), tmpvar_21.yxz, vec3(clamp (floor(((1.0 + tmpvar_21.y) - mix (tmpvar_21.z, tmpvar_21.x, tmpvar_22))), 0.0, 1.0)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_24.xyz;
  vec2 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_25.y;
  localCoords_3.x = (tmpvar_25.x * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_26;
  tmpvar_26 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_26;
  norm_2.z = cos((6.28319 * tmpvar_26.x));
  norm_2.x = sin((6.28319 * tmpvar_26.x));
  norm_2.y = cos((3.14159 * tmpvar_26.y));
  vec3 tmpvar_27;
  tmpvar_27 = -(norm_2);
  norm_2 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_29;
  tmpvar_29 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_28 * tmpvar_28)));
  float tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_28 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_29, 2.0)))), (float((_OceanRadius >= tmpvar_29)) * float((tmpvar_28 >= 0.0)))));
  float tmpvar_31;
  tmpvar_31 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_24.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_32;
  tmpvar_32 = (cityoverlay_4 * texture2DGradARB (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  citydarkoverlay_1 = tmpvar_32;
  vec4 tmpvar_33;
  tmpvar_33 = (cityoverlay_4 * texture2DGradARB (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  vec4 tmpvar_34;
  tmpvar_34 = (mix (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_18.xy, tmpvar_18.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_18.xy, tmpvar_18.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_20), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_30 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_30)), 0.0, 1.0))))), tmpvar_19, vec4(tmpvar_31)), tmpvar_33, tmpvar_33.wwww) * _Color);
  color_6 = tmpvar_34;
  float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_27, -(_SunDir)), 0.0, 1.0);
  float tmpvar_36;
  tmpvar_36 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_35, tmpvar_31);
  vec4 tmpvar_37;
  tmpvar_37 = texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5));
  vec4 tmpvar_38;
  tmpvar_38 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz)));
  vec4 shadowVals_39;
  vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  shadowVals_39.x = texture2D (_ShadowMapTexture, (tmpvar_40.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_39.y = texture2D (_ShadowMapTexture, (tmpvar_40.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_39.z = texture2D (_ShadowMapTexture, (tmpvar_40.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_39.w = texture2D (_ShadowMapTexture, (tmpvar_40.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_41;
  tmpvar_41 = lessThan (shadowVals_39, tmpvar_40.zzzz);
  vec4 tmpvar_42;
  tmpvar_42 = _LightShadowData.xxxx;
  float tmpvar_43;
  if (tmpvar_41.x) {
    tmpvar_43 = tmpvar_42.x;
  } else {
    tmpvar_43 = 1.0;
  };
  float tmpvar_44;
  if (tmpvar_41.y) {
    tmpvar_44 = tmpvar_42.y;
  } else {
    tmpvar_44 = 1.0;
  };
  float tmpvar_45;
  if (tmpvar_41.z) {
    tmpvar_45 = tmpvar_42.z;
  } else {
    tmpvar_45 = 1.0;
  };
  float tmpvar_46;
  if (tmpvar_41.w) {
    tmpvar_46 = tmpvar_42.w;
  } else {
    tmpvar_46 = 1.0;
  };
  vec4 tmpvar_47;
  tmpvar_47.x = tmpvar_43;
  tmpvar_47.y = tmpvar_44;
  tmpvar_47.z = tmpvar_45;
  tmpvar_47.w = tmpvar_46;
  float tmpvar_48;
  tmpvar_48 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_37.w) * tmpvar_38.w) * dot (tmpvar_47, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_49;
  tmpvar_49 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_36) * 2.0) * tmpvar_48), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_6.xyz = (tmpvar_34.xyz + (_Albedo * tmpvar_49));
  color_6.xyz = (color_6.xyz * tmpvar_49);
  citydarkoverlay_1.w = (tmpvar_32.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_35 - 0.01)) / 0.99) * 4.0) * tmpvar_48), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 51 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c10
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
mad o7.x, r0, r0.y, c20
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov o6.xyz, -r1
add r1.xyz, -r0, c16
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = mix (TNdotL_4, tmpvar_84, handoff_8);
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump vec4 shadows_91;
  highp vec4 shadowVals_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  highp vec2 P_94;
  P_94 = (tmpvar_93.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_95;
  tmpvar_95 = texture2D (_ShadowMapTexture, P_94).x;
  shadowVals_92.x = tmpvar_95;
  highp vec2 P_96;
  P_96 = (tmpvar_93.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_97;
  tmpvar_97 = texture2D (_ShadowMapTexture, P_96).x;
  shadowVals_92.y = tmpvar_97;
  highp vec2 P_98;
  P_98 = (tmpvar_93.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_99;
  tmpvar_99 = texture2D (_ShadowMapTexture, P_98).x;
  shadowVals_92.z = tmpvar_99;
  highp vec2 P_100;
  P_100 = (tmpvar_93.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_101;
  tmpvar_101 = texture2D (_ShadowMapTexture, P_100).x;
  shadowVals_92.w = tmpvar_101;
  bvec4 tmpvar_102;
  tmpvar_102 = lessThan (shadowVals_92, tmpvar_93.zzzz);
  highp vec4 tmpvar_103;
  tmpvar_103 = _LightShadowData.xxxx;
  highp float tmpvar_104;
  if (tmpvar_102.x) {
    tmpvar_104 = tmpvar_103.x;
  } else {
    tmpvar_104 = 1.0;
  };
  highp float tmpvar_105;
  if (tmpvar_102.y) {
    tmpvar_105 = tmpvar_103.y;
  } else {
    tmpvar_105 = 1.0;
  };
  highp float tmpvar_106;
  if (tmpvar_102.z) {
    tmpvar_106 = tmpvar_103.z;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_102.w) {
    tmpvar_107 = tmpvar_103.w;
  } else {
    tmpvar_107 = 1.0;
  };
  highp vec4 tmpvar_108;
  tmpvar_108.x = tmpvar_104;
  tmpvar_108.y = tmpvar_105;
  tmpvar_108.z = tmpvar_106;
  tmpvar_108.w = tmpvar_107;
  shadows_91 = tmpvar_108;
  mediump float tmpvar_109;
  tmpvar_109 = dot (shadows_91, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_90 = tmpvar_109;
  highp float tmpvar_110;
  tmpvar_110 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_3 = tmpvar_110;
  mediump float tmpvar_111;
  tmpvar_111 = clamp ((((_LightColor0.w * tmpvar_85) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_112;
  tmpvar_112 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_111)), 0.0, 1.0);
  light_2 = tmpvar_112;
  highp vec3 tmpvar_113;
  tmpvar_113 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_113;
  highp vec3 tmpvar_114;
  tmpvar_114 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_114;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = mix (TNdotL_4, tmpvar_84, handoff_8);
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump vec4 shadows_91;
  highp vec4 shadowVals_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  highp vec2 P_94;
  P_94 = (tmpvar_93.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_95;
  tmpvar_95 = texture2D (_ShadowMapTexture, P_94).x;
  shadowVals_92.x = tmpvar_95;
  highp vec2 P_96;
  P_96 = (tmpvar_93.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_97;
  tmpvar_97 = texture2D (_ShadowMapTexture, P_96).x;
  shadowVals_92.y = tmpvar_97;
  highp vec2 P_98;
  P_98 = (tmpvar_93.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_99;
  tmpvar_99 = texture2D (_ShadowMapTexture, P_98).x;
  shadowVals_92.z = tmpvar_99;
  highp vec2 P_100;
  P_100 = (tmpvar_93.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_101;
  tmpvar_101 = texture2D (_ShadowMapTexture, P_100).x;
  shadowVals_92.w = tmpvar_101;
  bvec4 tmpvar_102;
  tmpvar_102 = lessThan (shadowVals_92, tmpvar_93.zzzz);
  highp vec4 tmpvar_103;
  tmpvar_103 = _LightShadowData.xxxx;
  highp float tmpvar_104;
  if (tmpvar_102.x) {
    tmpvar_104 = tmpvar_103.x;
  } else {
    tmpvar_104 = 1.0;
  };
  highp float tmpvar_105;
  if (tmpvar_102.y) {
    tmpvar_105 = tmpvar_103.y;
  } else {
    tmpvar_105 = 1.0;
  };
  highp float tmpvar_106;
  if (tmpvar_102.z) {
    tmpvar_106 = tmpvar_103.z;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_102.w) {
    tmpvar_107 = tmpvar_103.w;
  } else {
    tmpvar_107 = 1.0;
  };
  highp vec4 tmpvar_108;
  tmpvar_108.x = tmpvar_104;
  tmpvar_108.y = tmpvar_105;
  tmpvar_108.z = tmpvar_106;
  tmpvar_108.w = tmpvar_107;
  shadows_91 = tmpvar_108;
  mediump float tmpvar_109;
  tmpvar_109 = dot (shadows_91, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_90 = tmpvar_109;
  highp float tmpvar_110;
  tmpvar_110 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_3 = tmpvar_110;
  mediump float tmpvar_111;
  tmpvar_111 = clamp ((((_LightColor0.w * tmpvar_85) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_112;
  tmpvar_112 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_111)), 0.0, 1.0);
  light_2 = tmpvar_112;
  highp vec3 tmpvar_113;
  tmpvar_113 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_113;
  highp vec3 tmpvar_114;
  tmpvar_114 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_114;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 450
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 440
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 430
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 434
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 438
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 464
#line 484
#line 464
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 468
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 472
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 476
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 480
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 450
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 440
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 430
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 434
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 438
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 464
#line 484
#line 484
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 488
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 492
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 494
lowp vec4 frag( in v2f IN ) {
    #line 496
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 500
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 504
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 508
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 512
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = xll_tex2Dgrad( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 citylightoverlaydetail = xll_tex2Dgrad( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 516
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    #line 520
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 524
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 528
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    #line 532
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    #line 536
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 540
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 544
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    #line 548
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 552
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 556
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (floor(((1.0 + tmpvar_21.x) - tmpvar_21.z)), 0.0, 1.0);
  vec3 tmpvar_23;
  tmpvar_23 = mix (mix (tmpvar_21.zxy, tmpvar_21, vec3(tmpvar_22)), tmpvar_21.yxz, vec3(clamp (floor(((1.0 + tmpvar_21.y) - mix (tmpvar_21.z, tmpvar_21.x, tmpvar_22))), 0.0, 1.0)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_24.xyz;
  vec2 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_25.y;
  localCoords_3.x = (tmpvar_25.x * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_26;
  tmpvar_26 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_26;
  norm_2.z = cos((6.28319 * tmpvar_26.x));
  norm_2.x = sin((6.28319 * tmpvar_26.x));
  norm_2.y = cos((3.14159 * tmpvar_26.y));
  vec3 tmpvar_27;
  tmpvar_27 = -(norm_2);
  norm_2 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_29;
  tmpvar_29 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_28 * tmpvar_28)));
  float tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_28 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_29, 2.0)))), (float((_OceanRadius >= tmpvar_29)) * float((tmpvar_28 >= 0.0)))));
  float tmpvar_31;
  tmpvar_31 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_24.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_32;
  tmpvar_32 = (cityoverlay_4 * texture2DGradARB (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  citydarkoverlay_1.xyz = tmpvar_32.xyz;
  vec4 tmpvar_33;
  tmpvar_33 = (cityoverlay_4 * texture2DGradARB (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  vec4 tmpvar_34;
  tmpvar_34 = (mix (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_18.xy, tmpvar_18.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_18.xy, tmpvar_18.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_20), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_30 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_30)), 0.0, 1.0))))), tmpvar_19, vec4(tmpvar_31)), tmpvar_33, tmpvar_33.wwww) * _Color);
  color_6.w = tmpvar_34.w;
  float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_27, -(_SunDir)), 0.0, 1.0);
  vec4 shadows_36;
  vec3 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  shadows_36.x = shadow2D (_ShadowMapTexture, (tmpvar_37 + _ShadowOffsets[0].xyz)).x;
  shadows_36.y = shadow2D (_ShadowMapTexture, (tmpvar_37 + _ShadowOffsets[1].xyz)).x;
  shadows_36.z = shadow2D (_ShadowMapTexture, (tmpvar_37 + _ShadowOffsets[2].xyz)).x;
  shadows_36.w = shadow2D (_ShadowMapTexture, (tmpvar_37 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_38;
  tmpvar_38 = (_LightShadowData.xxxx + (shadows_36 * (1.0 - _LightShadowData.xxxx)));
  shadows_36 = tmpvar_38;
  float tmpvar_39;
  tmpvar_39 = (((float((xlv_TEXCOORD2.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz))).w) * dot (tmpvar_38, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_40;
  tmpvar_40 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_35, tmpvar_31)) * 2.0) * tmpvar_39), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_6.xyz = (tmpvar_34.xyz + (_Albedo * tmpvar_40));
  color_6.xyz = (color_6.xyz * tmpvar_40);
  citydarkoverlay_1.w = (tmpvar_32.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_35 - 0.01)) / 0.99) * 4.0) * tmpvar_39), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 51 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c10
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
mad o7.x, r0, r0.y, c20
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov o6.xyz, -r1
add r1.xyz, -r0, c16
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r1
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7.xyz = tmpvar_78.xyz;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  lowp vec4 tmpvar_85;
  highp vec2 P_86;
  P_86 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_85 = texture2D (_LightTexture0, P_86);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  lowp float tmpvar_89;
  mediump vec4 shadows_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  highp vec3 coord_92;
  coord_92 = (tmpvar_91 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_93;
  tmpvar_93 = shadow2DEXT (_ShadowMapTexture, coord_92);
  shadows_90.x = tmpvar_93;
  highp vec3 coord_94;
  coord_94 = (tmpvar_91 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_95;
  tmpvar_95 = shadow2DEXT (_ShadowMapTexture, coord_94);
  shadows_90.y = tmpvar_95;
  highp vec3 coord_96;
  coord_96 = (tmpvar_91 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_97;
  tmpvar_97 = shadow2DEXT (_ShadowMapTexture, coord_96);
  shadows_90.z = tmpvar_97;
  highp vec3 coord_98;
  coord_98 = (tmpvar_91 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_99;
  tmpvar_99 = shadow2DEXT (_ShadowMapTexture, coord_98);
  shadows_90.w = tmpvar_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (_LightShadowData.xxxx + (shadows_90 * (1.0 - _LightShadowData.xxxx)));
  shadows_90 = tmpvar_100;
  mediump float tmpvar_101;
  tmpvar_101 = dot (shadows_90, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_89 = tmpvar_101;
  highp float tmpvar_102;
  tmpvar_102 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_85.w) * tmpvar_88.w) * tmpvar_89);
  atten_3 = tmpvar_102;
  mediump float tmpvar_103;
  tmpvar_103 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_84, handoff_8)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_104;
  tmpvar_104 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_103)), 0.0, 1.0);
  light_2 = tmpvar_104;
  highp vec3 tmpvar_105;
  tmpvar_105 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_105;
  highp vec3 tmpvar_106;
  tmpvar_106 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_106;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 450
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 440
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 430
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 434
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 438
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 464
#line 484
#line 464
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 468
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 472
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 476
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 480
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 450
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 440
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 430
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 434
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 438
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 464
#line 484
#line 484
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 488
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 492
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 494
lowp vec4 frag( in v2f IN ) {
    #line 496
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 500
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 504
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 508
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 512
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = xll_tex2Dgrad( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 citylightoverlaydetail = xll_tex2Dgrad( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 516
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    #line 520
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 524
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 528
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    #line 532
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    #line 536
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 540
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 544
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    #line 548
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 552
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 556
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (floor(((1.0 + tmpvar_21.x) - tmpvar_21.z)), 0.0, 1.0);
  vec3 tmpvar_23;
  tmpvar_23 = mix (mix (tmpvar_21.zxy, tmpvar_21, vec3(tmpvar_22)), tmpvar_21.yxz, vec3(clamp (floor(((1.0 + tmpvar_21.y) - mix (tmpvar_21.z, tmpvar_21.x, tmpvar_22))), 0.0, 1.0)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_24.xyz;
  vec2 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_25.y;
  localCoords_3.x = (tmpvar_25.x * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_26;
  tmpvar_26 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_26;
  norm_2.z = cos((6.28319 * tmpvar_26.x));
  norm_2.x = sin((6.28319 * tmpvar_26.x));
  norm_2.y = cos((3.14159 * tmpvar_26.y));
  vec3 tmpvar_27;
  tmpvar_27 = -(norm_2);
  norm_2 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_29;
  tmpvar_29 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_28 * tmpvar_28)));
  float tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_28 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_29, 2.0)))), (float((_OceanRadius >= tmpvar_29)) * float((tmpvar_28 >= 0.0)))));
  float tmpvar_31;
  tmpvar_31 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_24.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_32;
  tmpvar_32 = (cityoverlay_4 * texture2DGradARB (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  citydarkoverlay_1 = tmpvar_32;
  vec4 tmpvar_33;
  tmpvar_33 = (cityoverlay_4 * texture2DGradARB (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  vec4 tmpvar_34;
  tmpvar_34 = (mix (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_18.xy, tmpvar_18.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_18.xy, tmpvar_18.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_20), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_30 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_30)), 0.0, 1.0))))), tmpvar_19, vec4(tmpvar_31)), tmpvar_33, tmpvar_33.wwww) * _Color);
  color_6 = tmpvar_34;
  float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_27, -(_SunDir)), 0.0, 1.0);
  float tmpvar_36;
  tmpvar_36 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_35, tmpvar_31);
  vec4 tmpvar_37;
  tmpvar_37 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  vec4 shadowVals_38;
  shadowVals_38.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_38.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_38.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_38.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_39;
  tmpvar_39 = lessThan (shadowVals_38, vec4(((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_40;
  tmpvar_40 = _LightShadowData.xxxx;
  float tmpvar_41;
  if (tmpvar_39.x) {
    tmpvar_41 = tmpvar_40.x;
  } else {
    tmpvar_41 = 1.0;
  };
  float tmpvar_42;
  if (tmpvar_39.y) {
    tmpvar_42 = tmpvar_40.y;
  } else {
    tmpvar_42 = 1.0;
  };
  float tmpvar_43;
  if (tmpvar_39.z) {
    tmpvar_43 = tmpvar_40.z;
  } else {
    tmpvar_43 = 1.0;
  };
  float tmpvar_44;
  if (tmpvar_39.w) {
    tmpvar_44 = tmpvar_40.w;
  } else {
    tmpvar_44 = 1.0;
  };
  vec4 tmpvar_45;
  tmpvar_45.x = tmpvar_41;
  tmpvar_45.y = tmpvar_42;
  tmpvar_45.z = tmpvar_43;
  tmpvar_45.w = tmpvar_44;
  float tmpvar_46;
  tmpvar_46 = (tmpvar_37.w * dot (tmpvar_45, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_47;
  tmpvar_47 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_36) * 2.0) * tmpvar_46), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_6.xyz = (tmpvar_34.xyz + (_Albedo * tmpvar_47));
  color_6.xyz = (color_6.xyz * tmpvar_47);
  citydarkoverlay_1.w = (tmpvar_32.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_35 - 0.01)) / 0.99) * 4.0) * tmpvar_46), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
mad o7.x, r0, r0.y, c17
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
mov o6.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
mul o9.xyz, r1.w, -r1
mov r1.xyz, c15
mov o1, v1
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r0, -c13
add o8.xyz, -c12, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = mix (TNdotL_4, tmpvar_84, handoff_8);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTexture0, vec2(tmpvar_86));
  highp float tmpvar_88;
  mediump vec4 shadows_89;
  highp vec4 shadowVals_90;
  highp float tmpvar_91;
  tmpvar_91 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_92;
  vec_92 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_93;
  lowp vec4 tmpvar_94;
  tmpvar_94 = textureCube (_ShadowMapTexture, vec_92);
  packDist_93 = tmpvar_94;
  shadowVals_90.x = dot (packDist_93, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_95;
  vec_95 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_96;
  lowp vec4 tmpvar_97;
  tmpvar_97 = textureCube (_ShadowMapTexture, vec_95);
  packDist_96 = tmpvar_97;
  shadowVals_90.y = dot (packDist_96, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_98;
  vec_98 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_99;
  lowp vec4 tmpvar_100;
  tmpvar_100 = textureCube (_ShadowMapTexture, vec_98);
  packDist_99 = tmpvar_100;
  shadowVals_90.z = dot (packDist_99, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_101;
  vec_101 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_102;
  lowp vec4 tmpvar_103;
  tmpvar_103 = textureCube (_ShadowMapTexture, vec_101);
  packDist_102 = tmpvar_103;
  shadowVals_90.w = dot (packDist_102, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_104;
  tmpvar_104 = lessThan (shadowVals_90, vec4(tmpvar_91));
  highp vec4 tmpvar_105;
  tmpvar_105 = _LightShadowData.xxxx;
  highp float tmpvar_106;
  if (tmpvar_104.x) {
    tmpvar_106 = tmpvar_105.x;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_104.y) {
    tmpvar_107 = tmpvar_105.y;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_104.z) {
    tmpvar_108 = tmpvar_105.z;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_104.w) {
    tmpvar_109 = tmpvar_105.w;
  } else {
    tmpvar_109 = 1.0;
  };
  highp vec4 tmpvar_110;
  tmpvar_110.x = tmpvar_106;
  tmpvar_110.y = tmpvar_107;
  tmpvar_110.z = tmpvar_108;
  tmpvar_110.w = tmpvar_109;
  shadows_89 = tmpvar_110;
  mediump float tmpvar_111;
  tmpvar_111 = dot (shadows_89, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_88 = tmpvar_111;
  highp float tmpvar_112;
  tmpvar_112 = (tmpvar_87.w * tmpvar_88);
  atten_3 = tmpvar_112;
  mediump float tmpvar_113;
  tmpvar_113 = clamp ((((_LightColor0.w * tmpvar_85) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_114;
  tmpvar_114 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_113)), 0.0, 1.0);
  light_2 = tmpvar_114;
  highp vec3 tmpvar_115;
  tmpvar_115 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_115;
  highp vec3 tmpvar_116;
  tmpvar_116 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_116;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = mix (TNdotL_4, tmpvar_84, handoff_8);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTexture0, vec2(tmpvar_86));
  highp float tmpvar_88;
  mediump vec4 shadows_89;
  highp vec4 shadowVals_90;
  highp float tmpvar_91;
  tmpvar_91 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_92;
  vec_92 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_93;
  lowp vec4 tmpvar_94;
  tmpvar_94 = textureCube (_ShadowMapTexture, vec_92);
  packDist_93 = tmpvar_94;
  shadowVals_90.x = dot (packDist_93, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_95;
  vec_95 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_96;
  lowp vec4 tmpvar_97;
  tmpvar_97 = textureCube (_ShadowMapTexture, vec_95);
  packDist_96 = tmpvar_97;
  shadowVals_90.y = dot (packDist_96, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_98;
  vec_98 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_99;
  lowp vec4 tmpvar_100;
  tmpvar_100 = textureCube (_ShadowMapTexture, vec_98);
  packDist_99 = tmpvar_100;
  shadowVals_90.z = dot (packDist_99, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_101;
  vec_101 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_102;
  lowp vec4 tmpvar_103;
  tmpvar_103 = textureCube (_ShadowMapTexture, vec_101);
  packDist_102 = tmpvar_103;
  shadowVals_90.w = dot (packDist_102, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_104;
  tmpvar_104 = lessThan (shadowVals_90, vec4(tmpvar_91));
  highp vec4 tmpvar_105;
  tmpvar_105 = _LightShadowData.xxxx;
  highp float tmpvar_106;
  if (tmpvar_104.x) {
    tmpvar_106 = tmpvar_105.x;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_104.y) {
    tmpvar_107 = tmpvar_105.y;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_104.z) {
    tmpvar_108 = tmpvar_105.z;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_104.w) {
    tmpvar_109 = tmpvar_105.w;
  } else {
    tmpvar_109 = 1.0;
  };
  highp vec4 tmpvar_110;
  tmpvar_110.x = tmpvar_106;
  tmpvar_110.y = tmpvar_107;
  tmpvar_110.z = tmpvar_108;
  tmpvar_110.w = tmpvar_109;
  shadows_89 = tmpvar_110;
  mediump float tmpvar_111;
  tmpvar_111 = dot (shadows_89, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_88 = tmpvar_111;
  highp float tmpvar_112;
  tmpvar_112 = (tmpvar_87.w * tmpvar_88);
  atten_3 = tmpvar_112;
  mediump float tmpvar_113;
  tmpvar_113 = clamp ((((_LightColor0.w * tmpvar_85) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_114;
  tmpvar_114 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_113)), 0.0, 1.0);
  light_2 = tmpvar_114;
  highp vec3 tmpvar_115;
  tmpvar_115 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_115;
  highp vec3 tmpvar_116;
  tmpvar_116 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_116;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 446
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 436
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 418
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 422
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 426
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 430
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 434
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 460
#line 480
#line 460
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 464
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 468
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 472
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 476
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 446
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 436
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 418
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 422
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 426
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 430
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 434
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 460
#line 480
#line 480
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 484
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 488
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 490
lowp vec4 frag( in v2f IN ) {
    #line 492
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 496
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 500
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 504
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 508
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = xll_tex2Dgrad( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 citylightoverlaydetail = xll_tex2Dgrad( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 512
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    #line 516
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 520
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 524
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    #line 528
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    #line 532
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 536
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 540
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    #line 544
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 548
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 552
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (floor(((1.0 + tmpvar_21.x) - tmpvar_21.z)), 0.0, 1.0);
  vec3 tmpvar_23;
  tmpvar_23 = mix (mix (tmpvar_21.zxy, tmpvar_21, vec3(tmpvar_22)), tmpvar_21.yxz, vec3(clamp (floor(((1.0 + tmpvar_21.y) - mix (tmpvar_21.z, tmpvar_21.x, tmpvar_22))), 0.0, 1.0)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_24.xyz;
  vec2 tmpvar_25;
  tmpvar_25 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_25.y;
  localCoords_3.x = (tmpvar_25.x * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_26;
  tmpvar_26 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_26;
  norm_2.z = cos((6.28319 * tmpvar_26.x));
  norm_2.x = sin((6.28319 * tmpvar_26.x));
  norm_2.y = cos((3.14159 * tmpvar_26.y));
  vec3 tmpvar_27;
  tmpvar_27 = -(norm_2);
  norm_2 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_29;
  tmpvar_29 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_28 * tmpvar_28)));
  float tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_28 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_29, 2.0)))), (float((_OceanRadius >= tmpvar_29)) * float((tmpvar_28 >= 0.0)))));
  float tmpvar_31;
  tmpvar_31 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_24.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_32;
  tmpvar_32 = (cityoverlay_4 * texture2DGradARB (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  citydarkoverlay_1 = tmpvar_32;
  vec4 tmpvar_33;
  tmpvar_33 = (cityoverlay_4 * texture2DGradARB (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), tmpvar_18.xy, tmpvar_18.zw));
  vec4 tmpvar_34;
  tmpvar_34 = (mix (mix (mix ((xlv_TEXCOORD0 * mix (mix (texture2DGradARB (_steepTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailVertScale), tmpvar_18.xy, tmpvar_18.zw), texture2DGradARB (_midTex, ((((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) + _DetailOffset.xy) * _DetailScale), tmpvar_18.xy, tmpvar_18.zw), vec4(clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_20), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0))), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0)))), _OceanColor, vec4((clamp ((tmpvar_30 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_30)), 0.0, 1.0))))), tmpvar_19, vec4(tmpvar_31)), tmpvar_33, tmpvar_33.wwww) * _Color);
  color_6 = tmpvar_34;
  float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_27, -(_SunDir)), 0.0, 1.0);
  float tmpvar_36;
  tmpvar_36 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_35, tmpvar_31);
  vec4 tmpvar_37;
  tmpvar_37 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  vec4 tmpvar_38;
  tmpvar_38 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  vec4 shadowVals_39;
  shadowVals_39.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_39.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_39.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_39.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_40;
  tmpvar_40 = lessThan (shadowVals_39, vec4(((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_41;
  tmpvar_41 = _LightShadowData.xxxx;
  float tmpvar_42;
  if (tmpvar_40.x) {
    tmpvar_42 = tmpvar_41.x;
  } else {
    tmpvar_42 = 1.0;
  };
  float tmpvar_43;
  if (tmpvar_40.y) {
    tmpvar_43 = tmpvar_41.y;
  } else {
    tmpvar_43 = 1.0;
  };
  float tmpvar_44;
  if (tmpvar_40.z) {
    tmpvar_44 = tmpvar_41.z;
  } else {
    tmpvar_44 = 1.0;
  };
  float tmpvar_45;
  if (tmpvar_40.w) {
    tmpvar_45 = tmpvar_41.w;
  } else {
    tmpvar_45 = 1.0;
  };
  vec4 tmpvar_46;
  tmpvar_46.x = tmpvar_42;
  tmpvar_46.y = tmpvar_43;
  tmpvar_46.z = tmpvar_44;
  tmpvar_46.w = tmpvar_45;
  float tmpvar_47;
  tmpvar_47 = ((tmpvar_37.w * tmpvar_38.w) * dot (tmpvar_46, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_48;
  tmpvar_48 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_36) * 2.0) * tmpvar_47), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_6.xyz = (tmpvar_34.xyz + (_Albedo * tmpvar_48));
  color_6.xyz = (color_6.xyz * tmpvar_48);
  citydarkoverlay_1.w = (tmpvar_32.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_35 - 0.01)) / 0.99) * 4.0) * tmpvar_47), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul o5.xyz, r0.x, r2
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
mad o7.x, r0, r0.y, c17
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
mov o6.xyz, -r1
add r1.xyz, -r0, c12
dp3 r1.w, r1, r1
rsq r1.w, r1.w
mul o9.xyz, r1.w, -r1
mov r1.xyz, c15
mov o1, v1
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r0, -c13
add o8.xyz, -c12, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = mix (TNdotL_4, tmpvar_84, handoff_8);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTextureB0, vec2(tmpvar_86));
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_89;
  mediump vec4 shadows_90;
  highp vec4 shadowVals_91;
  highp float tmpvar_92;
  tmpvar_92 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_93;
  vec_93 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_94;
  lowp vec4 tmpvar_95;
  tmpvar_95 = textureCube (_ShadowMapTexture, vec_93);
  packDist_94 = tmpvar_95;
  shadowVals_91.x = dot (packDist_94, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_96;
  vec_96 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_97;
  lowp vec4 tmpvar_98;
  tmpvar_98 = textureCube (_ShadowMapTexture, vec_96);
  packDist_97 = tmpvar_98;
  shadowVals_91.y = dot (packDist_97, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_99;
  vec_99 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_100;
  lowp vec4 tmpvar_101;
  tmpvar_101 = textureCube (_ShadowMapTexture, vec_99);
  packDist_100 = tmpvar_101;
  shadowVals_91.z = dot (packDist_100, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_102;
  vec_102 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_103;
  lowp vec4 tmpvar_104;
  tmpvar_104 = textureCube (_ShadowMapTexture, vec_102);
  packDist_103 = tmpvar_104;
  shadowVals_91.w = dot (packDist_103, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_105;
  tmpvar_105 = lessThan (shadowVals_91, vec4(tmpvar_92));
  highp vec4 tmpvar_106;
  tmpvar_106 = _LightShadowData.xxxx;
  highp float tmpvar_107;
  if (tmpvar_105.x) {
    tmpvar_107 = tmpvar_106.x;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_105.y) {
    tmpvar_108 = tmpvar_106.y;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_105.z) {
    tmpvar_109 = tmpvar_106.z;
  } else {
    tmpvar_109 = 1.0;
  };
  highp float tmpvar_110;
  if (tmpvar_105.w) {
    tmpvar_110 = tmpvar_106.w;
  } else {
    tmpvar_110 = 1.0;
  };
  highp vec4 tmpvar_111;
  tmpvar_111.x = tmpvar_107;
  tmpvar_111.y = tmpvar_108;
  tmpvar_111.z = tmpvar_109;
  tmpvar_111.w = tmpvar_110;
  shadows_90 = tmpvar_111;
  mediump float tmpvar_112;
  tmpvar_112 = dot (shadows_90, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_89 = tmpvar_112;
  highp float tmpvar_113;
  tmpvar_113 = ((tmpvar_87.w * tmpvar_88.w) * tmpvar_89);
  atten_3 = tmpvar_113;
  mediump float tmpvar_114;
  tmpvar_114 = clamp ((((_LightColor0.w * tmpvar_85) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_115;
  tmpvar_115 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_114)), 0.0, 1.0);
  light_2 = tmpvar_115;
  highp vec3 tmpvar_116;
  tmpvar_116 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_116;
  highp vec3 tmpvar_117;
  tmpvar_117 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_117;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _steepTex;
uniform sampler2D _midTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float sphereCheck_9;
  mediump float detailLevel_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetail_14;
  mediump vec4 citydarkoverlaydetail_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 vert_17;
  mediump vec4 detail_18;
  mediump float nylerp_19;
  mediump vec3 detailCoords_20;
  mediump float zxlerp_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 0.0;
  tmpvar_39.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_40;
  tmpvar_40 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_39), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = abs(xlv_TEXCOORD5);
  highp float tmpvar_42;
  tmpvar_42 = clamp (floor(((1.0 + tmpvar_41.x) - tmpvar_41.z)), 0.0, 1.0);
  zxlerp_21 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41.zxy, tmpvar_41, vec3(zxlerp_21));
  detailCoords_20 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (floor(((1.0 + tmpvar_41.y) - mix (tmpvar_41.z, tmpvar_41.x, zxlerp_21))), 0.0, 1.0);
  nylerp_19 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (detailCoords_20, tmpvar_41.yxz, vec3(nylerp_19));
  detailCoords_20 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_20.x);
  highp vec2 coord_47;
  coord_47 = ((((0.5 * detailCoords_20.zy) / tmpvar_46) + _DetailOffset.xy) * _DetailScale);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_midTex, coord_47, tmpvar_37.xy, tmpvar_37.zw);
  detail_18 = tmpvar_48;
  mediump float tmpvar_49;
  tmpvar_49 = abs(detailCoords_20.x);
  highp vec2 coord_50;
  coord_50 = ((((0.5 * detailCoords_20.zy) / tmpvar_49) + _DetailOffset.xy) * _DetailVertScale);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_steepTex, coord_50, tmpvar_37.xy, tmpvar_37.zw);
  vert_17 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (vert_17, detail_18, vec4(vertLerp_22));
  detail_18 = tmpvar_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_16 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = abs(detailCoords_20.x);
  highp vec2 coord_55;
  coord_55 = ((((0.5 * detailCoords_20.zy) / tmpvar_54) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_55, tmpvar_37.xy, tmpvar_37.zw);
  citydarkoverlaydetail_15 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = abs(detailCoords_20.x);
  highp vec2 coord_58;
  coord_58 = ((((0.5 * detailCoords_20.zy) / tmpvar_57) + _DetailOffset.xy) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_58, tmpvar_37.xy, tmpvar_37.zw);
  citylightoverlaydetail_14 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_13 = tmpvar_60;
  mediump vec2 tmpvar_61;
  tmpvar_61 = encnorm_13.wy;
  localCoords_12 = tmpvar_61;
  highp vec2 tmpvar_62;
  tmpvar_62 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_62.y;
  localCoords_12.x = (tmpvar_62.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63 = (uv_24 + localCoords_12);
  uv_24 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = cos((6.28319 * tmpvar_63.x));
  norm_11.z = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = sin((6.28319 * tmpvar_63.x));
  norm_11.x = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = cos((3.14159 * tmpvar_63.y));
  norm_11.y = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = -(norm_11);
  norm_11 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_10));
  highp vec4 tmpvar_70;
  tmpvar_70 = (xlv_TEXCOORD0 * tmpvar_69);
  color_25 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_72;
  tmpvar_72 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_71 * tmpvar_71)));
  highp float tmpvar_73;
  tmpvar_73 = (float((_OceanRadius >= tmpvar_72)) * float((tmpvar_71 >= 0.0)));
  sphereCheck_9 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD1.w - mix (xlv_TEXCOORD1.w, (tmpvar_71 - sqrt(((_OceanRadius * _OceanRadius) - pow (tmpvar_72, 2.0)))), sphereCheck_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (color_25, _OceanColor, vec4((clamp ((tmpvar_74 * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor((1.0 + tmpvar_74)), 0.0, 1.0)))));
  color_25 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_77);
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * citydarkoverlaydetail_15);
  citydarkoverlay_7 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * citylightoverlaydetail_14);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_79, tmpvar_79.wwww) * _Color);
  color_25 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (tmpvar_67, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = mix (TNdotL_4, tmpvar_84, handoff_8);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTextureB0, vec2(tmpvar_86));
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_89;
  mediump vec4 shadows_90;
  highp vec4 shadowVals_91;
  highp float tmpvar_92;
  tmpvar_92 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_93;
  vec_93 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_94;
  lowp vec4 tmpvar_95;
  tmpvar_95 = textureCube (_ShadowMapTexture, vec_93);
  packDist_94 = tmpvar_95;
  shadowVals_91.x = dot (packDist_94, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_96;
  vec_96 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_97;
  lowp vec4 tmpvar_98;
  tmpvar_98 = textureCube (_ShadowMapTexture, vec_96);
  packDist_97 = tmpvar_98;
  shadowVals_91.y = dot (packDist_97, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_99;
  vec_99 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_100;
  lowp vec4 tmpvar_101;
  tmpvar_101 = textureCube (_ShadowMapTexture, vec_99);
  packDist_100 = tmpvar_101;
  shadowVals_91.z = dot (packDist_100, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_102;
  vec_102 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_103;
  lowp vec4 tmpvar_104;
  tmpvar_104 = textureCube (_ShadowMapTexture, vec_102);
  packDist_103 = tmpvar_104;
  shadowVals_91.w = dot (packDist_103, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_105;
  tmpvar_105 = lessThan (shadowVals_91, vec4(tmpvar_92));
  highp vec4 tmpvar_106;
  tmpvar_106 = _LightShadowData.xxxx;
  highp float tmpvar_107;
  if (tmpvar_105.x) {
    tmpvar_107 = tmpvar_106.x;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_105.y) {
    tmpvar_108 = tmpvar_106.y;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_105.z) {
    tmpvar_109 = tmpvar_106.z;
  } else {
    tmpvar_109 = 1.0;
  };
  highp float tmpvar_110;
  if (tmpvar_105.w) {
    tmpvar_110 = tmpvar_106.w;
  } else {
    tmpvar_110 = 1.0;
  };
  highp vec4 tmpvar_111;
  tmpvar_111.x = tmpvar_107;
  tmpvar_111.y = tmpvar_108;
  tmpvar_111.z = tmpvar_109;
  tmpvar_111.w = tmpvar_110;
  shadows_90 = tmpvar_111;
  mediump float tmpvar_112;
  tmpvar_112 = dot (shadows_90, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_89 = tmpvar_112;
  highp float tmpvar_113;
  tmpvar_113 = ((tmpvar_87.w * tmpvar_88.w) * tmpvar_89);
  atten_3 = tmpvar_113;
  mediump float tmpvar_114;
  tmpvar_114 = clamp ((((_LightColor0.w * tmpvar_85) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_115;
  tmpvar_115 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_114)), 0.0, 1.0);
  light_2 = tmpvar_115;
  highp vec3 tmpvar_116;
  tmpvar_116 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_116;
  highp vec3 tmpvar_117;
  tmpvar_117 = (tmpvar_80.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_117;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_84 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 447
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 437
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 419
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 423
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 427
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 431
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 435
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 461
#line 481
#line 461
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 465
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 469
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    #line 473
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 477
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 447
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
};
#line 437
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _midTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _steepTex;
#line 419
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 423
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
#line 427
uniform highp float _OceanRadius;
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
#line 431
uniform highp mat4 _Rotation;
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 435
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 461
#line 481
#line 481
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 485
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    #line 489
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 491
lowp vec4 frag( in v2f IN ) {
    #line 493
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 497
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 501
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 505
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = xll_tex2Dgrad( _midTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 vert = xll_tex2Dgrad( _steepTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailVertScale), uvdd.xy, uvdd.zw);
    detail = mix( vert, detail, vec4( vertLerp));
    #line 509
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = xll_tex2Dgrad( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 citylightoverlaydetail = xll_tex2Dgrad( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale), uvdd.xy, uvdd.zw);
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 513
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    #line 517
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 521
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 525
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - pow( d, 2.0)));
    #line 529
    highp float sphereDist = mix( IN.objnormal.w, (tc - tlc), sphereCheck);
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor((1.0 + oceandepth))));
    #line 533
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 537
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 541
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    #line 545
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 549
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 553
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 60
//   d3d9 - ALU: 167 to 204, TEX: 12 to 27
SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Vector 5 [_DetailOffset]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 169 ALU, 13 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c20, 32.00000000, 0.50000000, -0.50000000, 1.00000000
def c21, 0.49999991, 0.50000000, 6.28318501, -3.14159298
def c22, 0.99999982, 0.50000000, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
abs r3.xyz, v4
add r0.xyz, r3, -r3.zxyw
add r0.w, r0.x, c15.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r3.zxyw
add r0.w, r3.y, -r0.x
add r0.w, r0, c15.y
frc r1.w, r0
dsy r2.xy, v4
add_pp r1.xyz, r3.yxzw, -r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r1, r0
abs r0.w, v4.z
add r1.x, -r0.w, c15.y
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mov_pp r1.zw, c5.xyxy
mad r0.z, r0.w, c15, c15.w
mad r0.z, r0.w, r0, c16.x
rsq r1.x, r1.x
mad_pp r0.xy, r0, c19.y, r1.zwzw
mad r0.z, r0.w, r0, c16.y
rcp r1.x, r1.x
mul r1.x, r0.z, r1
cmp r0.z, v4, c15.x, c15.y
mul r1.y, r0.z, r1.x
mad r1.x, -r1.y, c16.z, r1
mad r0.z, r0, c16.w, r1.x
mul r1.z, r0, c17.x
mul r1.xy, r0, c4.x
dsx r4.w, r1.z
dsy r4.y, r1.z
dsx r1.zw, v4.xyxy
mul r1.zw, r1, r1
add r1.z, r1, r1.w
mul r2.xy, r2, r2
add r1.w, r2.x, r2.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r4.z, r1, c19.x
mul r4.x, r1.w, c19
max r0.z, r3.x, r0.w
rcp r1.w, r0.z
min r0.z, r3.x, r0.w
mul r1.w, r0.z, r1
mul r2.w, r1, r1
mad r3.y, r2.w, c17, c17.z
mad r3.y, r3, r2.w, c17.w
mul r0.xy, r0, c6.x
mad r3.y, r3, r2.w, c18.x
texldd r1.xyz, r1, s1, r4.zwzw, r4
texldd r0.xyz, r0, s2, r4.zwzw, r4
add_pp r2.xyz, r1, -r0
mov r1.xyz, v4
dp3_sat r1.y, v1, -r1
mad r1.x, r3.y, r2.w, c18.y
mad r1.x, r1, r2.w, c18.z
add r1.y, r1, c19.w
mad_sat r1.y, r1, c20.x, c20
mad_pp r0.xyz, r1.y, r2, r0
mul r1.w, r1.x, r1
add_pp r1.xyz, -r0, c15.y
add r2.x, -r1.w, c18.w
add r0.w, r3.x, -r0
cmp r0.w, -r0, r1, r2.x
abs r2.x, v4.y
add r1.w, -r0, c16
add r2.z, -r2.x, c15.y
mad r2.y, r2.x, c15.z, c15.w
mad r2.y, r2, r2.x, c16.x
cmp r1.w, v4.z, r0, r1
rsq r2.z, r2.z
mad r2.x, r2.y, r2, c16.y
rcp r2.z, r2.z
mul r2.y, r2.x, r2.z
cmp r2.x, v4.y, c15, c15.y
mul r2.z, r2.x, r2.y
mad r0.w, -r2.z, c16.z, r2.y
mad r0.w, r2.x, c16, r0
mul r0.w, r0, c17.x
cmp r1.w, v4.x, r1, -r1
mul r2.x, r1.w, c19
mul r1.w, v1, c7.x
mul_sat r1.w, r1, c16.z
mad_pp r0.xyz, r1.w, r1, r0
mul r1.xyz, v0, r0
add r5.x, r2, c19.y
mov r5.y, r0.w
texldd r2.yw, r5, s3, r4.zwzw, r4
add r2.zw, r2.xywy, c20.z
mul r0.xy, r2.zwzw, c20.ywzw
mov r2.y, r0.w
add r0.xy, r2, r0
add_pp r2.xyz, -r1, c14
mad r0.z, r0.x, c22.x, c22.y
mad r0.y, r0, c21.x, c21
frc r0.x, r0.y
frc r0.y, r0.z
mad r0.x, r0, c21.z, c21.w
sincos r3.xy, r0.x
mad r1.w, r0.y, c21.z, c21
sincos r0.xy, r1.w
mov_pp r3.y, r3.x
mov_pp r3.xz, r0.yyxw
mov r0.xyz, v7
dp3 r1.w, v6, r0
dp3 r0.x, v6, v6
mad r2.w, -r1, r1, r0.x
dp4 r0.y, c1, c1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c1
dp3_pp_sat r0.w, -r3, -c10
dp3_sat r0.z, v3, r0
rsq r2.w, r2.w
rcp r0.y, r2.w
mul r0.x, r0.y, r0.y
add_pp r2.w, r0, -r0.z
mul_sat r0.w, c11.x, c11.x
mad_pp r0.z, r0.w, r2.w, r0
mad r0.x, c12, c12, -r0
rsq r2.w, r0.x
dp3 r0.x, v2, v2
rcp r2.w, r2.w
add r2.w, r1, -r2
add r0.y, -r0, c12.x
mul_pp r0.z, r0, c2.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.z, r0
mul_pp_sat r3.y, r0.x, c16.z
add r0.z, r2.w, -v1.w
cmp r1.w, r1, c15.y, c15.x
cmp r0.y, r0, c15, c15.x
mul r0.y, r0, r1.w
mul r1.w, r0.y, r0.z
add r2.w, -r1, c15.y
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r1.w, c13
mov r0.x, c8
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r3.y, c0
mul r1.w, r2, c13.x
mad r1.w, r1, c19.z, r3.x
mad_pp r1.xyz, r1.w, r2, r1
mul_pp r0.xyz, r0, v5.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c9.x
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Vector 5 [_DetailOffset]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_BumpMap] 2D
"ps_3_0
; 167 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c20, 32.00000000, 0.50000000, -0.50000000, 1.00000000
def c21, 0.49999991, 0.50000000, 6.28318501, -3.14159298
def c22, 0.99999982, 0.50000000, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord4 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.x
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.xyz
abs r3.xyz, v3
add r0.xyz, r3, -r3.zxyw
add r0.w, r0.x, c15.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r3.zxyw
add r0.w, r3.y, -r0.x
add r0.w, r0, c15.y
frc r1.w, r0
dsy r2.xy, v3
add_pp r1.xyz, r3.yxzw, -r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r1, r0
abs r0.w, v3.z
add r1.x, -r0.w, c15.y
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mov_pp r1.zw, c5.xyxy
mad r0.z, r0.w, c15, c15.w
mad r0.z, r0.w, r0, c16.x
rsq r1.x, r1.x
mad_pp r0.xy, r0, c19.y, r1.zwzw
mad r0.z, r0.w, r0, c16.y
rcp r1.x, r1.x
mul r1.x, r0.z, r1
cmp r0.z, v3, c15.x, c15.y
mul r1.y, r0.z, r1.x
mad r1.x, -r1.y, c16.z, r1
mad r0.z, r0, c16.w, r1.x
mul r1.z, r0, c17.x
mul r1.xy, r0, c4.x
dsx r4.w, r1.z
dsy r4.y, r1.z
dsx r1.zw, v3.xyxy
mul r1.zw, r1, r1
add r1.z, r1, r1.w
mul r2.xy, r2, r2
add r1.w, r2.x, r2.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r4.z, r1, c19.x
mul r4.x, r1.w, c19
max r0.z, r3.x, r0.w
rcp r1.w, r0.z
min r0.z, r3.x, r0.w
mul r1.w, r0.z, r1
mul r2.w, r1, r1
mad r3.y, r2.w, c17, c17.z
mad r3.y, r3, r2.w, c17.w
mul r0.xy, r0, c6.x
mad r3.y, r3, r2.w, c18.x
texldd r1.xyz, r1, s1, r4.zwzw, r4
texldd r0.xyz, r0, s2, r4.zwzw, r4
add_pp r2.xyz, r1, -r0
mov r1.xyz, v3
dp3_sat r1.y, v1, -r1
mad r1.x, r3.y, r2.w, c18.y
mad r1.x, r1, r2.w, c18.z
add r1.y, r1, c19.w
mad_sat r1.y, r1, c20.x, c20
mad_pp r0.xyz, r1.y, r2, r0
mul r1.w, r1.x, r1
add_pp r1.xyz, -r0, c15.y
add r2.x, -r1.w, c18.w
add r0.w, r3.x, -r0
cmp r0.w, -r0, r1, r2.x
abs r2.x, v3.y
add r1.w, -r0, c16
add r2.z, -r2.x, c15.y
mad r2.y, r2.x, c15.z, c15.w
mad r2.y, r2, r2.x, c16.x
cmp r1.w, v3.z, r0, r1
rsq r2.z, r2.z
mad r2.x, r2.y, r2, c16.y
rcp r2.z, r2.z
mul r2.y, r2.x, r2.z
cmp r2.x, v3.y, c15, c15.y
mul r2.z, r2.x, r2.y
mad r0.w, -r2.z, c16.z, r2.y
mad r0.w, r2.x, c16, r0
mul r0.w, r0, c17.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, r1.w, c19
mul r1.w, v1, c7.x
mul_sat r1.w, r1, c16.z
mad_pp r0.xyz, r1.w, r1, r0
mul r1.xyz, v0, r0
add r5.x, r2, c19.y
mov r5.y, r0.w
texldd r2.yw, r5, s3, r4.zwzw, r4
add r2.zw, r2.xywy, c20.z
mul r0.xy, r2.zwzw, c20.ywzw
mov r2.y, r0.w
add r0.xy, r2, r0
add_pp r2.xyz, -r1, c14
mad r0.z, r0.x, c22.x, c22.y
mad r0.y, r0, c21.x, c21
frc r0.x, r0.y
frc r0.y, r0.z
mad r0.x, r0, c21.z, c21.w
sincos r3.xy, r0.x
mad r1.w, r0.y, c21.z, c21
sincos r0.xy, r1.w
mov_pp r3.y, r3.x
mov_pp r3.xz, r0.yyxw
mov r0.xyz, v6
dp3 r1.w, v5, r0
dp3 r0.w, v5, v5
mad r0.x, -r1.w, r1.w, r0.w
rsq r0.x, r0.x
dp3_pp_sat r0.w, -r3, -c10
rcp r2.w, r0.x
dp4_pp r0.y, c1, c1
mul r3.x, r2.w, r2.w
rsq_pp r0.x, r0.y
mul_pp r0.xyz, r0.x, c1
dp3_sat r0.x, v2, r0
add_pp r0.z, r0.w, -r0.x
mad r3.x, c12, c12, -r3
rsq r0.y, r3.x
mul_sat r0.w, c11.x, c11.x
mad_pp r0.x, r0.w, r0.z, r0
mul_pp r0.x, r0, c2.w
mul_pp_sat r3.y, r0.x, c16.z
add r0.z, -r2.w, c12.x
rcp r0.y, r0.y
add r0.y, r1.w, -r0
add r0.y, r0, -v1.w
cmp r1.w, r1, c15.y, c15.x
cmp r0.z, r0, c15.y, c15.x
mul r0.z, r0, r1.w
mul r1.w, r0.z, r0.y
add r2.w, -r1, c15.y
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r1.w, c13
mov r0.x, c8
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r3.y, c0
mul r1.w, r2, c13.x
mad r1.w, r1, c19.z, r3.x
mad_pp r1.xyz, r1.w, r2, r1
mul_pp r0.xyz, r0, v4.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c9.x
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Vector 5 [_DetailOffset]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
"ps_3_0
; 174 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c20, 32.00000000, 0.50000000, -0.50000000, 1.00000000
def c21, 0.49999991, 0.50000000, 6.28318501, -3.14159298
def c22, 0.99999982, 0.50000000, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
abs r3.xyz, v4
add r0.xyz, r3, -r3.zxyw
add r0.w, r0.x, c15.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r3.zxyw
add r0.w, r3.y, -r0.x
add r0.w, r0, c15.y
frc r1.w, r0
dsy r2.xy, v4
add_pp r1.xyz, r3.yxzw, -r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r1, r0
abs r0.w, v4.z
add r1.x, -r0.w, c15.y
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mov_pp r1.zw, c5.xyxy
mad r0.z, r0.w, c15, c15.w
mad r0.z, r0.w, r0, c16.x
rsq r1.x, r1.x
mad_pp r0.xy, r0, c19.y, r1.zwzw
mad r0.z, r0.w, r0, c16.y
rcp r1.x, r1.x
mul r1.x, r0.z, r1
cmp r0.z, v4, c15.x, c15.y
mul r1.y, r0.z, r1.x
mad r1.x, -r1.y, c16.z, r1
mad r0.z, r0, c16.w, r1.x
mul r1.z, r0, c17.x
mul r1.xy, r0, c4.x
dsx r4.w, r1.z
dsy r4.y, r1.z
dsx r1.zw, v4.xyxy
mul r1.zw, r1, r1
add r1.z, r1, r1.w
mul r2.xy, r2, r2
add r1.w, r2.x, r2.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r4.z, r1, c19.x
mul r4.x, r1.w, c19
max r0.z, r3.x, r0.w
rcp r1.w, r0.z
min r0.z, r3.x, r0.w
mul r1.w, r0.z, r1
mul r2.w, r1, r1
mad r3.y, r2.w, c17, c17.z
mad r3.y, r3, r2.w, c17.w
mul r0.xy, r0, c6.x
mad r3.y, r3, r2.w, c18.x
texldd r1.xyz, r1, s1, r4.zwzw, r4
texldd r0.xyz, r0, s2, r4.zwzw, r4
add_pp r2.xyz, r1, -r0
mov r1.xyz, v4
dp3_sat r1.y, v1, -r1
mad r1.x, r3.y, r2.w, c18.y
mad r1.x, r1, r2.w, c18.z
add r1.y, r1, c19.w
mad_sat r1.y, r1, c20.x, c20
mad_pp r0.xyz, r1.y, r2, r0
mul r1.w, r1.x, r1
add_pp r1.xyz, -r0, c15.y
add r2.x, -r1.w, c18.w
add r0.w, r3.x, -r0
cmp r0.w, -r0, r1, r2.x
abs r2.x, v4.y
add r1.w, -r0, c16
add r2.z, -r2.x, c15.y
mad r2.y, r2.x, c15.z, c15.w
mad r2.y, r2, r2.x, c16.x
cmp r1.w, v4.z, r0, r1
rsq r2.z, r2.z
mad r2.x, r2.y, r2, c16.y
rcp r2.z, r2.z
mul r2.y, r2.x, r2.z
cmp r2.x, v4.y, c15, c15.y
mul r2.z, r2.x, r2.y
mad r0.w, -r2.z, c16.z, r2.y
mad r0.w, r2.x, c16, r0
mul r0.w, r0, c17.x
cmp r1.w, v4.x, r1, -r1
mul r2.x, r1.w, c19
mul r1.w, v1, c7.x
mul_sat r1.w, r1, c16.z
mad_pp r0.xyz, r1.w, r1, r0
mul r1.xyz, v0, r0
add r5.x, r2, c19.y
mov r5.y, r0.w
texldd r2.yw, r5, s3, r4.zwzw, r4
add r2.zw, r2.xywy, c20.z
mul r0.xy, r2.zwzw, c20.ywzw
mov r2.y, r0.w
add r0.xy, r2, r0
add_pp r2.xyz, -r1, c14
mad r0.z, r0.x, c22.x, c22.y
mad r0.y, r0, c21.x, c21
frc r0.x, r0.y
frc r0.y, r0.z
mad r0.x, r0, c21.z, c21.w
sincos r3.xy, r0.x
mad r1.w, r0.y, c21.z, c21
sincos r0.xy, r1.w
mov_pp r3.y, r3.x
mov_pp r3.xz, r0.yyxw
mov r0.xyz, v7
dp3 r2.w, v6, r0
dp3 r0.x, v6, v6
mad r1.w, -r2, r2, r0.x
dp4 r0.y, c1, c1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c1
dp3_sat r0.z, v3, r0
dp3_pp_sat r0.w, -r3, -c10
rsq r1.w, r1.w
rcp r0.y, r1.w
mul r0.x, r0.y, r0.y
mad r0.x, c12, c12, -r0
add r0.y, -r0, c12.x
add_pp r0.w, r0, -r0.z
mul_sat r1.w, c11.x, c11.x
mad_pp r0.z, r1.w, r0.w, r0
rcp r0.w, v2.w
mad r3.xy, v2, r0.w, c19.y
texld r0.w, r3, s4
cmp r3.x, -v2.z, c15, c15.y
mul_pp r3.z, r0, c2.w
rsq r0.x, r0.x
rcp r0.z, r0.x
add r0.z, r2.w, -r0
dp3 r0.x, v2, v2
mul_pp r0.w, r3.x, r0
texld r0.x, r0.x, s5
mul_pp r0.x, r0.w, r0
mul_pp r0.x, r3.z, r0
mul_pp_sat r3.y, r0.x, c16.z
cmp r0.w, r2, c15.y, c15.x
cmp r0.y, r0, c15, c15.x
mul r0.y, r0, r0.w
add r0.z, r0, -v1.w
mul r0.w, r0.y, r0.z
add r2.w, -r0, c15.y
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r0.w, c13
mov r0.x, c8
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r3.y, c0
mul r0.w, r2, c13.x
mad r0.w, r0, c19.z, r3.x
mad_pp r1.xyz, r0.w, r2, r1
mul_pp r0.xyz, r0, v5.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c9.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Vector 5 [_DetailOffset]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 170 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_cube s5
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c20, 32.00000000, 0.50000000, -0.50000000, 1.00000000
def c21, 0.49999991, 0.50000000, 6.28318501, -3.14159298
def c22, 0.99999982, 0.50000000, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
abs r3.xyz, v4
add r0.xyz, r3, -r3.zxyw
add r0.w, r0.x, c15.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r3.zxyw
add r0.w, r3.y, -r0.x
add r0.w, r0, c15.y
frc r1.w, r0
dsy r2.xy, v4
add_pp r1.xyz, r3.yxzw, -r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r1, r0
abs r0.w, v4.z
add r1.x, -r0.w, c15.y
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mov_pp r1.zw, c5.xyxy
mad r0.z, r0.w, c15, c15.w
mad r0.z, r0.w, r0, c16.x
rsq r1.x, r1.x
mad_pp r0.xy, r0, c19.y, r1.zwzw
mad r0.z, r0.w, r0, c16.y
rcp r1.x, r1.x
mul r1.x, r0.z, r1
cmp r0.z, v4, c15.x, c15.y
mul r1.y, r0.z, r1.x
mad r1.x, -r1.y, c16.z, r1
mad r0.z, r0, c16.w, r1.x
mul r1.z, r0, c17.x
mul r1.xy, r0, c4.x
dsx r4.w, r1.z
dsy r4.y, r1.z
dsx r1.zw, v4.xyxy
mul r1.zw, r1, r1
add r1.z, r1, r1.w
mul r2.xy, r2, r2
add r1.w, r2.x, r2.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r4.z, r1, c19.x
mul r4.x, r1.w, c19
max r0.z, r3.x, r0.w
rcp r1.w, r0.z
min r0.z, r3.x, r0.w
mul r1.w, r0.z, r1
mul r2.w, r1, r1
mad r3.y, r2.w, c17, c17.z
mad r3.y, r3, r2.w, c17.w
mul r0.xy, r0, c6.x
mad r3.y, r3, r2.w, c18.x
texldd r1.xyz, r1, s1, r4.zwzw, r4
texldd r0.xyz, r0, s2, r4.zwzw, r4
add_pp r2.xyz, r1, -r0
mov r1.xyz, v4
dp3_sat r1.y, v1, -r1
mad r1.x, r3.y, r2.w, c18.y
mad r1.x, r1, r2.w, c18.z
add r1.y, r1, c19.w
mad_sat r1.y, r1, c20.x, c20
mad_pp r0.xyz, r1.y, r2, r0
mul r1.w, r1.x, r1
add_pp r1.xyz, -r0, c15.y
add r2.x, -r1.w, c18.w
add r0.w, r3.x, -r0
cmp r0.w, -r0, r1, r2.x
abs r2.x, v4.y
add r1.w, -r0, c16
add r2.z, -r2.x, c15.y
mad r2.y, r2.x, c15.z, c15.w
mad r2.y, r2, r2.x, c16.x
cmp r1.w, v4.z, r0, r1
rsq r2.z, r2.z
mad r2.x, r2.y, r2, c16.y
rcp r2.z, r2.z
mul r2.y, r2.x, r2.z
cmp r2.x, v4.y, c15, c15.y
mul r2.z, r2.x, r2.y
mad r0.w, -r2.z, c16.z, r2.y
mad r0.w, r2.x, c16, r0
mul r0.w, r0, c17.x
cmp r1.w, v4.x, r1, -r1
mul r2.x, r1.w, c19
mul r1.w, v1, c7.x
mul_sat r1.w, r1, c16.z
mad_pp r0.xyz, r1.w, r1, r0
mul r1.xyz, v0, r0
add r5.x, r2, c19.y
mov r5.y, r0.w
texldd r2.yw, r5, s3, r4.zwzw, r4
add r2.zw, r2.xywy, c20.z
mul r0.xy, r2.zwzw, c20.ywzw
mov r2.y, r0.w
add r0.xy, r2, r0
add_pp r2.xyz, -r1, c14
mad r0.z, r0.x, c22.x, c22.y
mad r0.y, r0, c21.x, c21
frc r0.x, r0.y
frc r0.y, r0.z
mad r0.x, r0, c21.z, c21.w
sincos r3.xy, r0.x
mad r1.w, r0.y, c21.z, c21
sincos r0.xy, r1.w
mov_pp r3.y, r3.x
mov_pp r3.xz, r0.yyxw
mov r0.xyz, v7
dp3 r2.w, v6, r0
dp3 r0.x, v6, v6
mad r0.x, -r2.w, r2.w, r0
dp4 r0.y, c1, c1
dp3_pp_sat r0.w, -r3, -c10
rsq r1.w, r0.x
rcp r3.x, r1.w
rsq r0.y, r0.y
mul r0.xyz, r0.y, c1
dp3_sat r0.y, v3, r0
add_pp r0.z, r0.w, -r0.y
mul r0.x, r3, r3
mul_sat r1.w, c11.x, c11.x
mad_pp r0.y, r1.w, r0.z, r0
mad r0.x, c12, c12, -r0
rsq r0.x, r0.x
rcp r0.z, r0.x
dp3 r0.x, v2, v2
add r0.z, r2.w, -r0
mul_pp r0.y, r0, c2.w
texld r0.w, v2, s5
texld r0.x, r0.x, s4
mul r0.x, r0, r0.w
mul_pp r0.x, r0.y, r0
add r0.y, r0.z, -v1.w
mul_pp_sat r3.y, r0.x, c16.z
add r0.z, -r3.x, c12.x
cmp r0.w, r2, c15.y, c15.x
cmp r0.z, r0, c15.y, c15.x
mul r0.z, r0, r0.w
mul r0.w, r0.z, r0.y
add r2.w, -r0, c15.y
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r0.w, c13
mov r0.x, c8
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r3.y, c0
mul r0.w, r2, c13.x
mad r0.w, r0, c19.z, r3.x
mad_pp r1.xyz, r0.w, r2, r1
mul_pp r0.xyz, r0, v5.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c9.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Vector 5 [_DetailOffset]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 168 ALU, 13 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c20, 32.00000000, 0.50000000, -0.50000000, 1.00000000
def c21, 0.49999991, 0.50000000, 6.28318501, -3.14159298
def c22, 0.99999982, 0.50000000, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
abs r3.xyz, v4
add r0.xyz, r3, -r3.zxyw
add r0.w, r0.x, c15.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r3.zxyw
add r0.w, r3.y, -r0.x
add r0.w, r0, c15.y
frc r1.w, r0
dsy r2.xy, v4
add_pp r1.xyz, r3.yxzw, -r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r1, r0
abs r0.w, v4.z
add r1.x, -r0.w, c15.y
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mov_pp r1.zw, c5.xyxy
mad r0.z, r0.w, c15, c15.w
mad r0.z, r0.w, r0, c16.x
rsq r1.x, r1.x
mad_pp r0.xy, r0, c19.y, r1.zwzw
mad r0.z, r0.w, r0, c16.y
rcp r1.x, r1.x
mul r1.x, r0.z, r1
cmp r0.z, v4, c15.x, c15.y
mul r1.y, r0.z, r1.x
mad r1.x, -r1.y, c16.z, r1
mad r0.z, r0, c16.w, r1.x
mul r1.z, r0, c17.x
mul r1.xy, r0, c4.x
dsx r4.w, r1.z
dsy r4.y, r1.z
dsx r1.zw, v4.xyxy
mul r1.zw, r1, r1
add r1.z, r1, r1.w
mul r2.xy, r2, r2
add r1.w, r2.x, r2.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r4.z, r1, c19.x
mul r4.x, r1.w, c19
max r0.z, r3.x, r0.w
rcp r1.w, r0.z
min r0.z, r3.x, r0.w
mul r1.w, r0.z, r1
mul r2.w, r1, r1
mad r3.y, r2.w, c17, c17.z
mad r3.y, r3, r2.w, c17.w
mul r0.xy, r0, c6.x
mad r3.y, r3, r2.w, c18.x
texldd r1.xyz, r1, s1, r4.zwzw, r4
texldd r0.xyz, r0, s2, r4.zwzw, r4
add_pp r2.xyz, r1, -r0
mov r1.xyz, v4
dp3_sat r1.y, v1, -r1
mad r1.x, r3.y, r2.w, c18.y
mad r1.x, r1, r2.w, c18.z
add r1.y, r1, c19.w
mad_sat r1.y, r1, c20.x, c20
mad_pp r0.xyz, r1.y, r2, r0
mul r1.w, r1.x, r1
add_pp r1.xyz, -r0, c15.y
add r2.x, -r1.w, c18.w
add r0.w, r3.x, -r0
cmp r0.w, -r0, r1, r2.x
abs r2.x, v4.y
add r1.w, -r0, c16
add r2.z, -r2.x, c15.y
mad r2.y, r2.x, c15.z, c15.w
mad r2.y, r2, r2.x, c16.x
cmp r1.w, v4.z, r0, r1
rsq r2.z, r2.z
mad r2.x, r2.y, r2, c16.y
rcp r2.z, r2.z
mul r2.y, r2.x, r2.z
cmp r2.x, v4.y, c15, c15.y
mul r2.z, r2.x, r2.y
mad r0.w, -r2.z, c16.z, r2.y
mad r0.w, r2.x, c16, r0
mul r0.w, r0, c17.x
cmp r1.w, v4.x, r1, -r1
mul r2.x, r1.w, c19
mul r1.w, v1, c7.x
mul_sat r1.w, r1, c16.z
mad_pp r0.xyz, r1.w, r1, r0
mul r1.xyz, v0, r0
add r5.x, r2, c19.y
mov r5.y, r0.w
texldd r2.yw, r5, s3, r4.zwzw, r4
add r2.zw, r2.xywy, c20.z
mul r0.xy, r2.zwzw, c20.ywzw
mov r2.y, r0.w
add r0.xy, r2, r0
add_pp r2.xyz, -r1, c14
mad r0.z, r0.x, c22.x, c22.y
mad r0.y, r0, c21.x, c21
frc r0.x, r0.y
frc r0.y, r0.z
mad r0.x, r0, c21.z, c21.w
sincos r3.xy, r0.x
mad r1.w, r0.y, c21.z, c21
sincos r0.xy, r1.w
mov_pp r3.y, r3.x
mov_pp r3.xz, r0.yyxw
dp3_pp_sat r0.w, -r3, -c10
mov r0.xyz, v7
dp3 r3.x, v6, r0
dp3 r0.x, v6, v6
mad r0.x, -r3, r3, r0
rsq r1.w, r0.x
rcp r2.w, r1.w
dp4_pp r0.y, c1, c1
rsq_pp r0.y, r0.y
mul_pp r0.xyz, r0.y, c1
dp3_sat r0.y, v3, r0
add_pp r0.z, r0.w, -r0.y
mul r0.x, r2.w, r2.w
mul_sat r0.w, c11.x, c11.x
mad_pp r0.y, r0.w, r0.z, r0
mad r0.x, c12, c12, -r0
rsq r0.x, r0.x
mul_pp r0.z, r0.y, c2.w
rcp r0.x, r0.x
add r0.y, r3.x, -r0.x
texld r1.w, v2, s4
mul_pp r0.x, r0.z, r1.w
mul_pp_sat r3.y, r0.x, c16.z
add r0.z, -r2.w, c12.x
cmp r1.w, r3.x, c15.y, c15.x
cmp r0.z, r0, c15.y, c15.x
mul r0.z, r0, r1.w
add r0.y, r0, -v1.w
mul r1.w, r0.z, r0.y
add r2.w, -r1, c15.y
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r1.w, c13
mov r0.x, c8
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r3.y, c0
mul r1.w, r2, c13.x
mad r1.w, r1, c19.z, r3.x
mad_pp r1.xyz, r1.w, r2, r1
mul_pp r0.xyz, r0, v5.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c9.x
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_OceanRadius]
Float 14 [_OceanDepthFactor]
Vector 15 [_OceanColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 179 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c21, 32.00000000, 0.50000000, -0.50000000, 1.00000000
def c22, 0.49999991, 0.50000000, 6.28318501, -3.14159298
def c23, 0.99999982, 0.50000000, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r3.xyz, v5
add r0.xyz, r3, -r3.zxyw
add r0.w, r0.x, c16.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r3.zxyw
add r0.w, r3.y, -r0.x
add r0.w, r0, c16.y
frc r1.x, r0.w
add_pp r2.xyz, r3.yxzw, -r0
add_sat r0.w, r0, -r1.x
mad_pp r0.xyz, r0.w, r2, r0
abs r0.w, v5.z
add r1.x, -r0.w, c16.y
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mov_pp r1.zw, c6.xyxy
mad r0.z, r0.w, c16, c16.w
mad r0.z, r0.w, r0, c17.x
rsq r1.x, r1.x
dsy r2.xy, v5
mad_pp r0.xy, r0, c20.y, r1.zwzw
mad r0.z, r0.w, r0, c17.y
rcp r1.x, r1.x
mul r1.x, r0.z, r1
cmp r0.z, v5, c16.x, c16.y
mul r1.y, r0.z, r1.x
mad r1.x, -r1.y, c17.z, r1
mad r0.z, r0, c17.w, r1.x
mul r1.z, r0, c18.x
mul r1.xy, r0, c5.x
dsx r4.w, r1.z
dsy r4.y, r1.z
dsx r1.zw, v5.xyxy
mul r1.zw, r1, r1
add r1.z, r1, r1.w
mul r2.xy, r2, r2
add r1.w, r2.x, r2.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r4.z, r1, c20.x
mul r4.x, r1.w, c20
max r0.z, r3.x, r0.w
rcp r1.w, r0.z
min r0.z, r3.x, r0.w
mul r1.w, r0.z, r1
mul r2.w, r1, r1
mad r3.y, r2.w, c18, c18.z
mad r3.y, r3, r2.w, c18.w
mul r0.xy, r0, c7.x
mad r3.y, r3, r2.w, c19.x
add r0.w, r3.x, -r0
texldd r1.xyz, r1, s1, r4.zwzw, r4
texldd r0.xyz, r0, s2, r4.zwzw, r4
add_pp r2.xyz, r1, -r0
mov r1.xyz, v5
dp3_sat r1.y, v1, -r1
mad r1.x, r3.y, r2.w, c19.y
mad r1.x, r1, r2.w, c19.z
add r1.y, r1, c20.w
mad_sat r1.y, r1, c21.x, c21
mad_pp r0.xyz, r1.y, r2, r0
mul r1.w, r1.x, r1
add r2.x, -r1.w, c19.w
cmp r2.y, -r0.w, r1.w, r2.x
abs r0.w, v5.y
add r2.z, -r2.y, c17.w
add r2.x, -r0.w, c16.y
mad r1.w, r0, c16.z, c16
mad r1.w, r1, r0, c17.x
rsq r2.x, r2.x
cmp r2.y, v5.z, r2, r2.z
add_pp r1.xyz, -r0, c16.y
mad r0.w, r1, r0, c17.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v5.y, c16.x, c16.y
mul r2.x, r0.w, r1.w
mad r1.w, -r2.x, c17.z, r1
mad r0.w, r0, c17, r1
mul r0.w, r0, c18.x
cmp r2.x, v5, r2.y, -r2.y
mul r2.x, r2, c20
mul r1.w, v1, c8.x
mul_sat r1.w, r1, c17.z
mad_pp r0.xyz, r1.w, r1, r0
mul r1.xyz, v0, r0
add r5.x, r2, c20.y
mov r5.y, r0.w
texldd r2.yw, r5, s3, r4.zwzw, r4
add r2.zw, r2.xywy, c21.z
mul r0.xy, r2.zwzw, c21.ywzw
mov r2.y, r0.w
add r0.xy, r2, r0
add_pp r2.xyz, -r1, c15
mad r0.z, r0.x, c23.x, c23.y
mad r0.y, r0, c22.x, c22
frc r0.x, r0.y
frc r0.y, r0.z
mad r0.x, r0, c22.z, c22.w
sincos r3.xy, r0.x
mad r1.w, r0.y, c22.z, c22
sincos r0.xy, r1.w
mov_pp r3.y, r3.x
mov_pp r3.xz, r0.yyxw
dp3_pp_sat r0.w, -r3, -c11
mov r0.xyz, v8
dp3 r3.z, v7, r0
dp3 r0.x, v7, v7
mad r0.x, -r3.z, r3.z, r0
rsq r1.w, r0.x
rcp r2.w, r1.w
dp4 r0.y, c1, c1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c1
dp3_sat r0.y, v4, r0
add_pp r0.z, r0.w, -r0.y
mul r0.x, r2.w, r2.w
mul_sat r1.w, c12.x, c12.x
mad_pp r0.y, r1.w, r0.z, r0
mad r0.x, c13, c13, -r0
rsq r0.x, r0.x
rcp r0.z, r0.x
mul_pp r0.y, r0, c3.w
texldp r0.x, v3, s6
rcp r0.w, v3.w
mad r0.w, -v3.z, r0, r0.x
mov r3.x, c2
cmp r3.w, r0, c16.y, r3.x
rcp r0.x, v2.w
mad r3.xy, v2, r0.x, c20.y
texld r0.w, r3, s4
cmp r3.x, -v2.z, c16, c16.y
dp3 r0.x, v2, v2
mul_pp r0.w, r3.x, r0
texld r0.x, r0.x, s5
mul_pp r0.x, r0.w, r0
mul_pp r0.w, r0.x, r3
mul_pp r3.x, r0.y, r0.w
add r0.x, r3.z, -r0.z
add r0.z, r0.x, -v1.w
add r0.x, -r2.w, c13
cmp r0.y, r3.z, c16, c16.x
cmp r0.x, r0, c16.y, c16
mul r0.x, r0, r0.y
mul r0.w, r0.x, r0.z
mov r0.x, c9
mul_pp_sat r3.y, r3.x, c17.z
add r2.w, -r0, c16.y
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r0.w, c14
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r3.y, c0
mul r0.w, r2, c14.x
mad r0.w, r0, c20.z, r3.x
mad_pp r1.xyz, r0.w, r2, r1
mul_pp r0.xyz, r0, v6.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c10.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c4, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_OceanRadius]
Float 14 [_OceanDepthFactor]
Vector 15 [_OceanColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 178 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c21, 32.00000000, 0.50000000, -0.50000000, 1.00000000
def c22, 0.49999991, 0.50000000, 6.28318501, -3.14159298
def c23, 0.99999982, 0.50000000, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r3.xyz, v5
add r0.xyz, r3, -r3.zxyw
add r0.w, r0.x, c16.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r3.zxyw
add r0.w, r3.y, -r0.x
add r0.w, r0, c16.y
frc r1.x, r0.w
add_pp r2.xyz, r3.yxzw, -r0
add_sat r0.w, r0, -r1.x
mad_pp r0.xyz, r0.w, r2, r0
abs r0.w, v5.z
add r1.x, -r0.w, c16.y
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mov_pp r1.zw, c6.xyxy
mad r0.z, r0.w, c16, c16.w
mad r0.z, r0.w, r0, c17.x
rsq r1.x, r1.x
dsy r2.xy, v5
mad_pp r0.xy, r0, c20.y, r1.zwzw
mad r0.z, r0.w, r0, c17.y
rcp r1.x, r1.x
mul r1.x, r0.z, r1
cmp r0.z, v5, c16.x, c16.y
mul r1.y, r0.z, r1.x
mad r1.x, -r1.y, c17.z, r1
mad r0.z, r0, c17.w, r1.x
mul r1.z, r0, c18.x
mul r1.xy, r0, c5.x
dsx r4.w, r1.z
dsy r4.y, r1.z
dsx r1.zw, v5.xyxy
mul r1.zw, r1, r1
add r1.z, r1, r1.w
mul r2.xy, r2, r2
add r1.w, r2.x, r2.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r4.z, r1, c20.x
mul r4.x, r1.w, c20
max r0.z, r3.x, r0.w
rcp r1.w, r0.z
min r0.z, r3.x, r0.w
mul r1.w, r0.z, r1
mul r2.w, r1, r1
mad r3.y, r2.w, c18, c18.z
mad r3.y, r3, r2.w, c18.w
mul r0.xy, r0, c7.x
mad r3.y, r3, r2.w, c19.x
add r0.w, r3.x, -r0
texldd r1.xyz, r1, s1, r4.zwzw, r4
texldd r0.xyz, r0, s2, r4.zwzw, r4
add_pp r2.xyz, r1, -r0
mov r1.xyz, v5
dp3_sat r1.y, v1, -r1
mad r1.x, r3.y, r2.w, c19.y
mad r1.x, r1, r2.w, c19.z
add r1.y, r1, c20.w
mad_sat r1.y, r1, c21.x, c21
mad_pp r0.xyz, r1.y, r2, r0
mul r1.w, r1.x, r1
add r2.x, -r1.w, c19.w
cmp r2.y, -r0.w, r1.w, r2.x
abs r0.w, v5.y
add r2.z, -r2.y, c17.w
add r2.x, -r0.w, c16.y
mad r1.w, r0, c16.z, c16
mad r1.w, r1, r0, c17.x
rsq r2.x, r2.x
cmp r2.y, v5.z, r2, r2.z
add_pp r1.xyz, -r0, c16.y
mad r0.w, r1, r0, c17.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v5.y, c16.x, c16.y
mul r2.x, r0.w, r1.w
mad r1.w, -r2.x, c17.z, r1
mad r0.w, r0, c17, r1
mul r0.w, r0, c18.x
cmp r2.x, v5, r2.y, -r2.y
mul r2.x, r2, c20
mul r1.w, v1, c8.x
mul_sat r1.w, r1, c17.z
mad_pp r0.xyz, r1.w, r1, r0
mul r1.xyz, v0, r0
add r5.x, r2, c20.y
mov r5.y, r0.w
texldd r2.yw, r5, s3, r4.zwzw, r4
add r2.zw, r2.xywy, c21.z
mul r0.xy, r2.zwzw, c21.ywzw
mov r2.y, r0.w
add r0.xy, r2, r0
add_pp r2.xyz, -r1, c15
mad r0.z, r0.x, c23.x, c23.y
mad r0.y, r0, c22.x, c22
frc r0.x, r0.y
frc r0.y, r0.z
mad r0.x, r0, c22.z, c22.w
sincos r3.xy, r0.x
mad r1.w, r0.y, c22.z, c22
sincos r0.xy, r1.w
mov_pp r3.y, r3.x
mov_pp r3.xz, r0.yyxw
dp3_pp_sat r0.w, -r3, -c11
mov r0.xyz, v8
dp3 r3.z, v7, r0
dp3 r0.x, v7, v7
mad r0.x, -r3.z, r3.z, r0
rsq r1.w, r0.x
rcp r2.w, r1.w
dp4 r0.y, c1, c1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c1
dp3_sat r0.y, v4, r0
add_pp r0.z, r0.w, -r0.y
mul r0.x, r2.w, r2.w
mul_sat r1.w, c12.x, c12.x
mad_pp r0.y, r1.w, r0.z, r0
mad r0.x, c13, c13, -r0
rsq r0.x, r0.x
rcp r0.z, r0.x
mov r0.x, c2
add r3.x, c16.y, -r0
texldp r0.x, v3, s6
mad r3.w, r0.x, r3.x, c2.x
rcp r0.w, v2.w
mad r3.xy, v2, r0.w, c20.y
texld r0.w, r3, s4
cmp r3.x, -v2.z, c16, c16.y
dp3 r0.x, v2, v2
mul_pp r0.w, r3.x, r0
texld r0.x, r0.x, s5
mul_pp r0.x, r0.w, r0
mul_pp r0.w, r0.x, r3
add r0.x, r3.z, -r0.z
add r0.z, r0.x, -v1.w
mul_pp r0.y, r0, c3.w
mul_pp r3.x, r0.y, r0.w
add r0.x, -r2.w, c13
cmp r0.y, r3.z, c16, c16.x
cmp r0.x, r0, c16.y, c16
mul r0.x, r0, r0.y
mul r0.w, r0.x, r0.z
mov r0.x, c9
mul_pp_sat r3.y, r3.x, c17.z
add r2.w, -r0, c16.y
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r0.w, c14
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r3.y, c0
mul r0.w, r2, c14.x
mad r0.w, r0, c20.z, r3.x
mad_pp r1.xyz, r0.w, r2, r1
mul_pp r0.xyz, r0, v6.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c10.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c4, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Vector 5 [_DetailOffset]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] 2D
"ps_3_0
; 168 ALU, 13 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c20, 32.00000000, 0.50000000, -0.50000000, 1.00000000
def c21, 0.49999991, 0.50000000, 6.28318501, -3.14159298
def c22, 0.99999982, 0.50000000, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
abs r3.xyz, v4
add r0.xyz, r3, -r3.zxyw
add r0.w, r0.x, c15.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r3.zxyw
add r0.w, r3.y, -r0.x
add r0.w, r0, c15.y
frc r1.w, r0
dsy r2.xy, v4
add_pp r1.xyz, r3.yxzw, -r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r1, r0
abs r0.w, v4.z
add r1.x, -r0.w, c15.y
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mov_pp r1.zw, c5.xyxy
mad r0.z, r0.w, c15, c15.w
mad r0.z, r0.w, r0, c16.x
rsq r1.x, r1.x
mad_pp r0.xy, r0, c19.y, r1.zwzw
mad r0.z, r0.w, r0, c16.y
rcp r1.x, r1.x
mul r1.x, r0.z, r1
cmp r0.z, v4, c15.x, c15.y
mul r1.y, r0.z, r1.x
mad r1.x, -r1.y, c16.z, r1
mad r0.z, r0, c16.w, r1.x
mul r1.z, r0, c17.x
mul r1.xy, r0, c4.x
dsx r4.w, r1.z
dsy r4.y, r1.z
dsx r1.zw, v4.xyxy
mul r1.zw, r1, r1
add r1.z, r1, r1.w
mul r2.xy, r2, r2
add r1.w, r2.x, r2.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r4.z, r1, c19.x
mul r4.x, r1.w, c19
max r0.z, r3.x, r0.w
rcp r1.w, r0.z
min r0.z, r3.x, r0.w
mul r1.w, r0.z, r1
mul r2.w, r1, r1
mad r3.y, r2.w, c17, c17.z
mad r3.y, r3, r2.w, c17.w
mul r0.xy, r0, c6.x
mad r3.y, r3, r2.w, c18.x
texldd r1.xyz, r1, s1, r4.zwzw, r4
texldd r0.xyz, r0, s2, r4.zwzw, r4
add_pp r2.xyz, r1, -r0
mov r1.xyz, v4
dp3_sat r1.y, v1, -r1
mad r1.x, r3.y, r2.w, c18.y
mad r1.x, r1, r2.w, c18.z
add r1.y, r1, c19.w
mad_sat r1.y, r1, c20.x, c20
mad_pp r0.xyz, r1.y, r2, r0
mul r1.w, r1.x, r1
add_pp r1.xyz, -r0, c15.y
add r2.x, -r1.w, c18.w
add r0.w, r3.x, -r0
cmp r0.w, -r0, r1, r2.x
abs r2.x, v4.y
add r1.w, -r0, c16
add r2.z, -r2.x, c15.y
mad r2.y, r2.x, c15.z, c15.w
mad r2.y, r2, r2.x, c16.x
cmp r1.w, v4.z, r0, r1
rsq r2.z, r2.z
mad r2.x, r2.y, r2, c16.y
rcp r2.z, r2.z
mul r2.y, r2.x, r2.z
cmp r2.x, v4.y, c15, c15.y
mul r2.z, r2.x, r2.y
mad r0.w, -r2.z, c16.z, r2.y
mad r0.w, r2.x, c16, r0
mul r0.w, r0, c17.x
cmp r1.w, v4.x, r1, -r1
mul r2.x, r1.w, c19
mul r1.w, v1, c7.x
mul_sat r1.w, r1, c16.z
mad_pp r0.xyz, r1.w, r1, r0
mul r1.xyz, v0, r0
add r5.x, r2, c19.y
mov r5.y, r0.w
texldd r2.yw, r5, s3, r4.zwzw, r4
add r2.zw, r2.xywy, c20.z
mul r0.xy, r2.zwzw, c20.ywzw
mov r2.y, r0.w
add r0.xy, r2, r0
add_pp r2.xyz, -r1, c14
mad r0.z, r0.x, c22.x, c22.y
mad r0.y, r0, c21.x, c21
frc r0.x, r0.y
frc r0.y, r0.z
mad r0.x, r0, c21.z, c21.w
sincos r3.xy, r0.x
mad r1.w, r0.y, c21.z, c21
sincos r0.xy, r1.w
mov_pp r3.y, r3.x
mov_pp r3.xz, r0.yyxw
mov r0.xyz, v7
dp3 r2.w, v6, r0
dp3 r0.x, v6, v6
mad r0.x, -r2.w, r2.w, r0
rsq r1.w, r0.x
dp4_pp r0.y, c1, c1
rsq_pp r0.y, r0.y
mul_pp r0.xyz, r0.y, c1
dp3_pp_sat r0.w, -r3, -c10
dp3_sat r0.y, v3, r0
add_pp r0.z, r0.w, -r0.y
rcp r1.w, r1.w
mul r0.x, r1.w, r1.w
mul_sat r0.w, c11.x, c11.x
mad_pp r0.y, r0.w, r0.z, r0
mad r0.x, c12, c12, -r0
mul_pp r0.z, r0.y, c2.w
rsq r0.x, r0.x
rcp r0.y, r0.x
add r0.y, r2.w, -r0
texldp r0.x, v2, s4
mul_pp r0.x, r0.z, r0
add r0.z, -r1.w, c12.x
mul_pp_sat r3.y, r0.x, c16.z
cmp r1.w, r2, c15.y, c15.x
cmp r0.z, r0, c15.y, c15.x
mul r0.z, r0, r1.w
add r0.y, r0, -v1.w
mul r1.w, r0.z, r0.y
add r2.w, -r1, c15.y
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r1.w, c13
mov r0.x, c8
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r3.y, c0
mul r1.w, r2, c13.x
mad r1.w, r1, c19.z, r3.x
mad_pp r1.xyz, r1.w, r2, r1
mul_pp r0.xyz, r0, v5.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c9.x
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Vector 5 [_DetailOffset]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] 2D
SetTexture 5 [_LightTexture0] 2D
"ps_3_0
; 169 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c20, 32.00000000, 0.50000000, -0.50000000, 1.00000000
def c21, 0.49999991, 0.50000000, 6.28318501, -3.14159298
def c22, 0.99999982, 0.50000000, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r3.xyz, v5
add r0.xyz, r3, -r3.zxyw
add r0.w, r0.x, c15.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r3.zxyw
add r0.w, r3.y, -r0.x
add r0.w, r0, c15.y
frc r1.w, r0
dsy r2.xy, v5
add_pp r1.xyz, r3.yxzw, -r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r1, r0
abs r0.w, v5.z
add r1.x, -r0.w, c15.y
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mov_pp r1.zw, c5.xyxy
mad r0.z, r0.w, c15, c15.w
mad r0.z, r0.w, r0, c16.x
rsq r1.x, r1.x
mad_pp r0.xy, r0, c19.y, r1.zwzw
mad r0.z, r0.w, r0, c16.y
rcp r1.x, r1.x
mul r1.x, r0.z, r1
cmp r0.z, v5, c15.x, c15.y
mul r1.y, r0.z, r1.x
mad r1.x, -r1.y, c16.z, r1
mad r0.z, r0, c16.w, r1.x
mul r1.z, r0, c17.x
mul r1.xy, r0, c4.x
dsx r4.w, r1.z
dsy r4.y, r1.z
dsx r1.zw, v5.xyxy
mul r1.zw, r1, r1
add r1.z, r1, r1.w
mul r2.xy, r2, r2
add r1.w, r2.x, r2.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r4.z, r1, c19.x
mul r4.x, r1.w, c19
max r0.z, r3.x, r0.w
rcp r1.w, r0.z
min r0.z, r3.x, r0.w
mul r1.w, r0.z, r1
mul r2.w, r1, r1
mad r3.y, r2.w, c17, c17.z
mad r3.y, r3, r2.w, c17.w
mul r0.xy, r0, c6.x
mad r3.y, r3, r2.w, c18.x
texldd r1.xyz, r1, s1, r4.zwzw, r4
texldd r0.xyz, r0, s2, r4.zwzw, r4
add_pp r2.xyz, r1, -r0
mov r1.xyz, v5
dp3_sat r1.y, v1, -r1
mad r1.x, r3.y, r2.w, c18.y
mad r1.x, r1, r2.w, c18.z
add r1.y, r1, c19.w
mad_sat r1.y, r1, c20.x, c20
mad_pp r0.xyz, r1.y, r2, r0
mul r1.w, r1.x, r1
add_pp r1.xyz, -r0, c15.y
add r2.x, -r1.w, c18.w
add r0.w, r3.x, -r0
cmp r0.w, -r0, r1, r2.x
abs r2.x, v5.y
add r1.w, -r0, c16
add r2.z, -r2.x, c15.y
mad r2.y, r2.x, c15.z, c15.w
mad r2.y, r2, r2.x, c16.x
cmp r1.w, v5.z, r0, r1
rsq r2.z, r2.z
mad r2.x, r2.y, r2, c16.y
rcp r2.z, r2.z
mul r2.y, r2.x, r2.z
cmp r2.x, v5.y, c15, c15.y
mul r2.z, r2.x, r2.y
mad r0.w, -r2.z, c16.z, r2.y
mad r0.w, r2.x, c16, r0
mul r0.w, r0, c17.x
cmp r1.w, v5.x, r1, -r1
mul r2.x, r1.w, c19
mul r1.w, v1, c7.x
mul_sat r1.w, r1, c16.z
mad_pp r0.xyz, r1.w, r1, r0
mul r1.xyz, v0, r0
add r5.x, r2, c19.y
mov r5.y, r0.w
texldd r2.yw, r5, s3, r4.zwzw, r4
add r2.zw, r2.xywy, c20.z
mul r0.xy, r2.zwzw, c20.ywzw
mov r2.y, r0.w
add r0.xy, r2, r0
add_pp r2.xyz, -r1, c14
mad r0.z, r0.x, c22.x, c22.y
mad r0.y, r0, c21.x, c21
frc r0.x, r0.y
frc r0.y, r0.z
mad r0.x, r0, c21.z, c21.w
sincos r3.xy, r0.x
mad r1.w, r0.y, c21.z, c21
sincos r0.xy, r1.w
mov_pp r3.y, r3.x
mov_pp r3.xz, r0.yyxw
dp3_pp_sat r0.w, -r3, -c10
mov r0.xyz, v8
dp3 r3.x, v7, r0
dp3 r0.x, v7, v7
mad r0.x, -r3, r3, r0
rsq r1.w, r0.x
rcp r2.w, r1.w
dp4_pp r0.y, c1, c1
rsq_pp r0.y, r0.y
mul_pp r0.xyz, r0.y, c1
dp3_sat r0.y, v4, r0
add_pp r0.z, r0.w, -r0.y
mul r0.x, r2.w, r2.w
mul_sat r1.w, c11.x, c11.x
mad_pp r0.y, r1.w, r0.z, r0
mad r0.x, c12, c12, -r0
rsq r0.x, r0.x
rcp r0.z, r0.x
add r0.z, r3.x, -r0
mul_pp r0.y, r0, c2.w
texld r0.w, v2, s5
texldp r0.x, v3, s4
mul r0.x, r0.w, r0
mul_pp r0.x, r0.y, r0
add r0.y, r0.z, -v1.w
mul_pp_sat r3.y, r0.x, c16.z
add r0.z, -r2.w, c12.x
cmp r0.w, r3.x, c15.y, c15.x
cmp r0.z, r0, c15.y, c15.x
mul r0.z, r0, r0.w
mul r0.w, r0.z, r0.y
add r2.w, -r0, c15.y
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r0.w, c13
mov r0.x, c8
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r3.y, c0
mul r0.w, r2, c13.x
mad r0.w, r0, c19.z, r3.x
mad_pp r1.xyz, r0.w, r2, r1
mul_pp r0.xyz, r0, v6.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c9.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Vector 7 [_DetailOffset]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Vector 12 [_SunDir]
Float 13 [_PlanetOpacity]
Float 14 [_OceanRadius]
Float 15 [_OceanDepthFactor]
Vector 16 [_OceanColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] CUBE
SetTexture 5 [_LightTexture0] 2D
"ps_3_0
; 178 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
dcl_2d s5
def c17, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c22, 32.00000000, 0.50000000, -0.50000000, 1.00000000
def c23, 0.49999991, 0.50000000, 6.28318501, -3.14159298
def c24, 0.99999982, 0.50000000, 0.97000003, 0
def c25, 1.00000000, 0.00392157, 0.00001538, 0.00000001
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r2.xyz, v5
add r0.xyz, r2, -r2.zxyw
add r0.w, r0.x, c17.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r2.zxyw
add r0.w, r2.y, -r0.x
add_pp r3.xyz, r2.yxzw, -r0
abs r2.y, v5.z
add r0.w, r0, c17.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad_pp r0.xyz, r0.w, r3, r0
add r1.w, -r2.y, c17.y
mad r1.z, r2.y, c17, c17.w
mad r1.z, r2.y, r1, c18.x
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.zw, r0.xyzy, r0.x
max r0.y, r2.x, r2
rsq r1.w, r1.w
min r0.x, r2, r2.y
rcp r0.y, r0.y
mul r2.z, r0.x, r0.y
mov_pp r1.xy, c7
mad_pp r0.xy, r0.zwzw, c21.y, r1
mul r1.x, r2.z, r2.z
mul r0.zw, r0.xyxy, c6.x
mad r1.y, r1.x, c19, c19.z
mad r1.y, r1, r1.x, c19.w
mad r1.y, r1, r1.x, c20.x
mad r1.z, r2.y, r1, c18.y
rcp r1.w, r1.w
mul r1.w, r1.z, r1
cmp r1.z, v5, c17.x, c17.y
mul r2.w, r1.z, r1
mad r1.w, -r2, c18.z, r1
mad r1.z, r1, c18.w, r1.w
mul r1.z, r1, c19.x
mad r1.y, r1, r1.x, c20
mad r2.w, r1.y, r1.x, c20.z
dsy r1.xy, v5
mul r1.xy, r1, r1
add r1.y, r1.x, r1
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r4.w, r1.z
dsy r4.y, r1.z
dsx r1.zw, v5.xyxy
mul r1.zw, r1, r1
add r1.z, r1, r1.w
rsq r1.x, r1.z
rcp r1.x, r1.x
mul r4.z, r1.x, c21.x
mul r4.x, r1.y, c21
texldd r1.xyz, r0.zwzw, s1, r4.zwzw, r4
mul r0.w, r2, r2.z
add r0.z, r2.x, -r2.y
add r1.w, -r0, c20
cmp r0.w, -r0.z, r0, r1
add r1.w, -r0, c18
cmp r1.w, v5.z, r0, r1
abs r0.w, v5.y
cmp r2.y, v5.x, r1.w, -r1.w
mul r3.x, r2.y, c21
add r2.x, -r0.w, c17.y
mad r1.w, r0, c17.z, c17
mad r1.w, r1, r0, c18.x
mul r0.xy, r0, c8.x
texldd r0.xyz, r0, s2, r4.zwzw, r4
rsq r2.x, r2.x
add_pp r1.xyz, r1, -r0
mad r0.w, r1, r0, c18.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v5.y, c17.x, c17.y
mul r2.x, r0.w, r1.w
mad r1.w, -r2.x, c18.z, r1
mad r0.w, r0, c18, r1
mul r0.w, r0, c19.x
mov r2.xyz, v5
dp3_sat r1.w, v1, -r2
add r1.w, r1, c21
mad_sat r1.w, r1, c22.x, c22.y
mad_pp r0.xyz, r1.w, r1, r0
add r5.x, r3, c21.y
mov r5.y, r0.w
mov r3.y, r0.w
texldd r2.yw, r5, s3, r4.zwzw, r4
add r2.xy, r2.wyzw, c22.z
mul r1.xy, r2, c22.ywzw
add r2.xy, r3, r1
mad r1.w, r2.y, c23.x, c23.y
mul r0.w, v1, c9.x
frc r1.w, r1
add_pp r1.xyz, -r0, c17.y
mul_sat r0.w, r0, c18.z
mad_pp r0.xyz, r0.w, r1, r0
mul r1.xyz, v0, r0
mad r1.w, r1, c23.z, c23
sincos r0.xy, r1.w
mad r0.y, r2.x, c24.x, c24
frc r0.y, r0
mov_pp r3.y, r0.x
mad r1.w, r0.y, c23.z, c23
sincos r0.xy, r1.w
dp4 r2.x, c1, c1
rsq r0.z, r2.x
mov_pp r3.xz, r0.yyxw
mul r2.xyz, r0.z, c1
dp3_sat r0.y, v4, r2
dp3_pp_sat r0.x, -r3, -c12
mov r3.xyz, v8
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c13.x, c13.x
mad_pp r0.x, r1.w, r0, r0.y
mul_pp r2.w, r0.x, c4
texld r0, v3, s4
dp4 r0.x, r0, c25
dp3 r0.y, v7, r3
dp3 r0.z, v7, v7
mad r0.z, -r0.y, r0.y, r0
dp3 r0.w, v3, v3
rsq r0.w, r0.w
rsq r0.z, r0.z
rcp r0.w, r0.w
mul r0.w, r0, c2
mad r0.w, -r0, c24.z, r0.x
rcp r0.z, r0.z
mul r0.x, r0.z, r0.z
mov r3.x, c3
add_pp r2.xyz, -r1, c16
mad r0.x, c14, c14, -r0
cmp r3.x, r0.w, c17.y, r3
rsq r0.w, r0.x
dp3 r0.x, v2, v2
texld r0.x, r0.x, s5
mul r3.x, r0, r3
mul_pp r2.w, r2, r3.x
rcp r0.w, r0.w
add r0.x, r0.y, -r0.w
add r0.w, r0.x, -v1
add r0.x, -r0.z, c14
mul_pp_sat r3.y, r2.w, c18.z
cmp r0.y, r0, c17, c17.x
cmp r0.x, r0, c17.y, c17
mul r0.x, r0, r0.y
mul r0.w, r0.x, r0
add r2.w, -r0, c17.y
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r0.w, c15
mov r0.x, c10
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r3.y, c0
mul r0.w, r2, c15.x
mad r0.w, r0, c21.z, r3.x
mad_pp r1.xyz, r0.w, r2, r1
mul_pp r0.xyz, r0, v6.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c11.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c5, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c17.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Vector 7 [_DetailOffset]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Vector 12 [_SunDir]
Float 13 [_PlanetOpacity]
Float 14 [_OceanRadius]
Float 15 [_OceanDepthFactor]
Vector 16 [_OceanColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] CUBE
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_LightTexture0] CUBE
"ps_3_0
; 179 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
dcl_2d s5
dcl_cube s6
def c17, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c22, 32.00000000, 0.50000000, -0.50000000, 1.00000000
def c23, 0.49999991, 0.50000000, 6.28318501, -3.14159298
def c24, 0.99999982, 0.50000000, 0.97000003, 0
def c25, 1.00000000, 0.00392157, 0.00001538, 0.00000001
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r2.xyz, v5
add r0.xyz, r2, -r2.zxyw
add r0.w, r0.x, c17.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r2.zxyw
add r0.w, r2.y, -r0.x
add_pp r1.xyz, r2.yxzw, -r0
abs r2.y, v5.z
add r0.w, r0, c17.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r1, r0
abs_pp r0.x, r0
rcp_pp r0.w, r0.x
add r2.z, -r2.y, c17.y
mad r1.w, r2.y, c17.z, c17
mad r1.w, r2.y, r1, c18.x
rsq r2.z, r2.z
max r0.x, r2, r2.y
mul_pp r0.zw, r0.xyzy, r0.w
rcp r0.y, r0.x
min r0.x, r2, r2.y
mul r1.x, r0, r0.y
mul r1.y, r1.x, r1.x
mad r1.z, r1.y, c19.y, c19
mad r1.z, r1, r1.y, c19.w
mad r1.z, r1, r1.y, c20.x
mad r1.z, r1, r1.y, c20.y
mov_pp r0.xy, c7
mad_pp r0.xy, r0.zwzw, c21.y, r0
mul r0.zw, r0.xyxy, c6.x
mad r1.w, r2.y, r1, c18.y
rcp r2.z, r2.z
mul r2.z, r1.w, r2
cmp r1.w, v5.z, c17.x, c17.y
mul r2.w, r1, r2.z
mad r2.z, -r2.w, c18, r2
mad r1.w, r1, c18, r2.z
mad r1.y, r1.z, r1, c20.z
mul r1.z, r1.w, c19.x
mul r2.z, r1.y, r1.x
dsy r1.xy, v5
mul r1.xy, r1, r1
add r1.y, r1.x, r1
rsq r1.y, r1.y
rcp r1.y, r1.y
dsy r3.y, r1.z
dsx r3.w, r1.z
dsx r1.zw, v5.xyxy
mul r1.zw, r1, r1
add r1.z, r1, r1.w
rsq r1.x, r1.z
rcp r1.x, r1.x
mul r3.z, r1.x, c21.x
mul r3.x, r1.y, c21
texldd r1.xyz, r0.zwzw, s1, r3.zwzw, r3
add r0.z, r2.x, -r2.y
add r0.w, -r2.z, c20
cmp r0.w, -r0.z, r2.z, r0
add r1.w, -r0, c18
cmp r0.w, v5.z, r0, r1
cmp r1.w, v5.x, r0, -r0
abs r0.w, v5.y
mul r4.z, r1.w, c21.x
add r2.x, -r0.w, c17.y
mad r1.w, r0, c17.z, c17
mad r1.w, r1, r0, c18.x
mul r0.xy, r0, c8.x
texldd r0.xyz, r0, s2, r3.zwzw, r3
rsq r2.x, r2.x
add_pp r1.xyz, r1, -r0
mad r0.w, r1, r0, c18.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v5.y, c17.x, c17.y
mul r2.x, r0.w, r1.w
mad r1.w, -r2.x, c18.z, r1
mad r0.w, r0, c18, r1
mul r0.w, r0, c19.x
mov r2.xyz, v5
dp3_sat r1.w, v1, -r2
add r1.w, r1, c21
mad_sat r1.w, r1, c22.x, c22.y
mad_pp r0.xyz, r1.w, r1, r0
add r4.x, r4.z, c21.y
mov r4.y, r0.w
texldd r2.yw, r4, s3, r3.zwzw, r3
add r2.xy, r2.wyzw, c22.z
mov r4.w, r0
mul r2.xy, r2, c22.ywzw
add r4.zw, r4, r2.xyxy
mad r1.w, r4, c23.x, c23.y
mul r0.w, v1, c9.x
add_pp r1.xyz, -r0, c17.y
mul_sat r0.w, r0, c18.z
mad_pp r0.xyz, r0.w, r1, r0
frc r0.w, r1
mul r1.xyz, v0, r0
mad r1.w, r0, c23.z, c23
sincos r0.xy, r1.w
mad r0.y, r4.z, c24.x, c24
frc r0.y, r0
add_pp r2.xyz, -r1, c16
mad r1.w, r0.y, c23.z, c23
mov_pp r6.y, r0.x
sincos r0.xy, r1.w
dp4 r2.w, c1, c1
rsq r0.z, r2.w
mov_pp r6.xz, r0.yyxw
mul r5.xyz, r0.z, c1
dp3_sat r0.y, v4, r5
dp3_pp_sat r0.x, -r6, -c12
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c13.x, c13.x
mad_pp r2.w, r1, r0.x, r0.y
texld r0, v3, s4
dp4 r0.w, r0, c25
mov r0.xyz, v8
dp3 r4.z, v7, r0
dp3 r4.w, v7, v7
mad r0.x, -r4.z, r4.z, r4.w
rsq r0.x, r0.x
rcp r0.z, r0.x
mul r0.x, r0.z, r0.z
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0, c2.w
mad r0.y, -r0, c24.z, r0.w
mov r0.w, c3.x
cmp r4.w, r0.y, c17.y, r0
mad r0.x, c14, c14, -r0
rsq r0.x, r0.x
rcp r0.y, r0.x
add r0.y, r4.z, -r0
dp3 r0.x, v2, v2
add r0.z, -r0, c14.x
mul_pp r2.w, r2, c4
texld r0.w, v2, s6
texld r0.x, r0.x, s5
mul r0.x, r0, r0.w
mul r0.x, r0, r4.w
mul_pp r0.x, r2.w, r0
mul_pp_sat r4.w, r0.x, c18.z
cmp r0.w, r4.z, c17.y, c17.x
cmp r0.z, r0, c17.y, c17.x
mul r0.z, r0, r0.w
add r0.y, r0, -v1.w
mul r0.w, r0.z, r0.y
add r2.w, -r0, c17.y
frc r4.z, r2.w
add_sat r2.w, r2, -r4.z
mul_sat r4.z, -r0.w, c15.x
mov r0.x, c10
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r4.w, c0
mul r0.w, r2, c15.x
mad r0.w, r0, c21.z, r4.z
mad_pp r1.xyz, r0.w, r2, r1
texldd r2.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, v6.x
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c11.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c5, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c17.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Vector 10 [_DetailOffset]
Float 11 [_DetailVertScale]
Float 12 [_DetailDist]
Float 13 [_MinLight]
Float 14 [_Albedo]
Vector 15 [_SunDir]
Float 16 [_PlanetOpacity]
Float 17 [_OceanRadius]
Float 18 [_OceanDepthFactor]
Vector 19 [_OceanColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 187 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c20, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c21, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c22, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c23, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c24, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c25, 32.00000000, 0.50000000, -0.50000000, 1.00000000
def c26, 0.49999991, 0.50000000, 6.28318501, -3.14159298
def c27, 0.99999982, 0.50000000, 0.25000000, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r2.xyz, v5
add r0.xyz, r2, -r2.zxyw
add r0.w, r0.x, c20.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r2.zxyw
add r0.w, r2.y, -r0.x
add_pp r3.xyz, r2.yxzw, -r0
abs r2.y, v5.z
add r0.w, r0, c20.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad_pp r0.xyz, r0.w, r3, r0
add r1.w, -r2.y, c20.y
mad r1.z, r2.y, c20, c20.w
mad r1.z, r2.y, r1, c21.x
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.zw, r0.xyzy, r0.x
max r0.y, r2.x, r2
rsq r1.w, r1.w
min r0.x, r2, r2.y
rcp r0.y, r0.y
mul r2.z, r0.x, r0.y
mov_pp r1.xy, c10
mad_pp r0.xy, r0.zwzw, c24.y, r1
mul r1.x, r2.z, r2.z
mul r0.zw, r0.xyxy, c9.x
mad r1.y, r1.x, c22, c22.z
mad r1.y, r1, r1.x, c22.w
mad r1.y, r1, r1.x, c23.x
mad r1.z, r2.y, r1, c21.y
rcp r1.w, r1.w
mul r1.w, r1.z, r1
cmp r1.z, v5, c20.x, c20.y
mul r2.w, r1.z, r1
mad r1.w, -r2, c21.z, r1
mad r1.z, r1, c21.w, r1.w
mul r1.z, r1, c22.x
mad r1.y, r1, r1.x, c23
mad r2.w, r1.y, r1.x, c23.z
dsy r1.xy, v5
mul r1.xy, r1, r1
add r1.y, r1.x, r1
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r4.w, r1.z
dsy r4.y, r1.z
dsx r1.zw, v5.xyxy
mul r1.zw, r1, r1
add r1.z, r1, r1.w
rsq r1.x, r1.z
rcp r1.x, r1.x
mul r4.z, r1.x, c24.x
mul r4.x, r1.y, c24
texldd r1.xyz, r0.zwzw, s1, r4.zwzw, r4
mul r0.w, r2, r2.z
add r0.z, r2.x, -r2.y
add r1.w, -r0, c23
cmp r0.w, -r0.z, r0, r1
add r1.w, -r0, c21
cmp r1.w, v5.z, r0, r1
abs r0.w, v5.y
cmp r2.y, v5.x, r1.w, -r1.w
mul r3.x, r2.y, c24
add r2.x, -r0.w, c20.y
mad r1.w, r0, c20.z, c20
mad r1.w, r1, r0, c21.x
mul r0.xy, r0, c11.x
texldd r0.xyz, r0, s2, r4.zwzw, r4
rsq r2.x, r2.x
add_pp r1.xyz, r1, -r0
mad r0.w, r1, r0, c21.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v5.y, c20.x, c20.y
mul r2.x, r0.w, r1.w
mad r1.w, -r2.x, c21.z, r1
mad r0.w, r0, c21, r1
mul r0.w, r0, c22.x
mov r2.xyz, v5
dp3_sat r1.w, v1, -r2
add r1.w, r1, c24
mad_sat r1.w, r1, c25.x, c25.y
mad_pp r0.xyz, r1.w, r1, r0
add r5.x, r3, c24.y
mov r5.y, r0.w
texldd r2.yw, r5, s3, r4.zwzw, r4
add r2.xy, r2.wyzw, c25.z
mov r3.y, r0.w
mul r1.xy, r2, c25.ywzw
add r3.xy, r3, r1
mad r1.w, r3.y, c26.x, c26.y
mul r0.w, v1, c12.x
add_pp r1.xyz, -r0, c20.y
mul_sat r0.w, r0, c21.z
mad_pp r0.xyz, r0.w, r1, r0
frc r1.w, r1
mul r2.xyz, v0, r0
mad r1.x, r1.w, c26.z, c26.w
sincos r0.xy, r1.x
mad r0.y, r3.x, c27.x, c27
frc r0.y, r0
mov_pp r3.y, r0.x
mad r1.x, r0.y, c26.z, c26.w
sincos r0.xy, r1.x
dp4 r1.y, c1, c1
rsq r0.z, r1.y
mov_pp r3.xz, r0.yyxw
mul r1.xyz, r0.z, c1
dp3_pp_sat r0.x, -r3, -c15
dp3_sat r0.y, v4, r1
add_pp r0.x, r0, -r0.y
mul_sat r2.w, c16.x, c16.x
mad_pp r0.x, r2.w, r0, r0.y
mul_pp r3.w, r0.x, c7
mov r0.xyz, v8
dp3 r5.z, v7, r0
rcp r0.z, v3.w
mad r1.xy, v3, r0.z, c5
dp3 r0.w, v7, v7
mad r0.x, -r5.z, r5.z, r0.w
rsq r5.w, r0.x
mad r0.xy, v3, r0.z, c6
texld r0.x, r0, s6
texld r1.x, r1, s6
mov r1.z, r1.x
mad r1.xy, v3, r0.z, c3
mov r1.w, r0.x
mad r0.xy, v3, r0.z, c4
add_pp r3.xyz, -r2, c19
texld r1.x, r1, s6
texld r0.x, r0, s6
mov r1.y, r0.x
mad r0, -v3.z, r0.z, r1
rcp r1.z, r5.w
mov r1.y, c2.x
cmp r0, r0, c20.y, r1.y
dp4_pp r0.y, r0, c27.z
mul r1.x, r1.z, r1.z
mad r1.x, c17, c17, -r1
rsq r0.x, r1.x
rcp r0.z, r0.x
rcp r0.w, v2.w
mad r1.xy, v2, r0.w, c24.y
texld r0.w, r1, s4
cmp r1.x, -v2.z, c20, c20.y
dp3 r0.x, v2, v2
mul_pp r0.w, r1.x, r0
texld r0.x, r0.x, s5
mul_pp r0.x, r0.w, r0
mul_pp r0.y, r0.x, r0
add r0.x, r5.z, -r0.z
mul_pp r1.x, r3.w, r0.y
add r0.z, r0.x, -v1.w
add r0.x, -r1.z, c17
mul_pp_sat r1.z, r1.x, c21
cmp r0.y, r5.z, c20, c20.x
cmp r0.x, r0, c20.y, c20
mul r0.x, r0, r0.y
mul r0.w, r0.x, r0.z
add r1.x, -r0.w, c20.y
frc r1.y, r1.x
add_sat r1.x, r1, -r1.y
mul_sat r1.y, -r0.w, c18.x
mul r0.w, r1.x, c18.x
mov r0.x, c13
add r0.xyz, c7, r0.x
mad_sat r0.xyz, r0, r1.z, c0
mad r0.w, r0, c24.z, r1.y
mad_pp r1.xyz, r0.w, r3, r2
mul_pp r0.xyz, r0, v6.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c14.x
mad_pp r1.xyz, r2.w, r2, r1
mad_pp r1.xyz, r1, c8, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c20.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Vector 10 [_DetailOffset]
Float 11 [_DetailVertScale]
Float 12 [_DetailDist]
Float 13 [_MinLight]
Float 14 [_Albedo]
Vector 15 [_SunDir]
Float 16 [_PlanetOpacity]
Float 17 [_OceanRadius]
Float 18 [_OceanDepthFactor]
Vector 19 [_OceanColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 187 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c20, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c21, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c22, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c23, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c24, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c25, 32.00000000, 0.50000000, -0.50000000, 1.00000000
def c26, 0.49999991, 0.50000000, 6.28318501, -3.14159298
def c27, 0.99999982, 0.50000000, 0.25000000, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r1.xyz, v5
add r0.xyz, r1, -r1.zxyw
add r0.w, r0.x, c20.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r0.xyz, r0.w, r0, r1.zxyw
add r0.w, r1.y, -r0.x
add_pp r2.xyz, r1.yxzw, -r0
add r0.w, r0, c20.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r2, r0
abs r1.y, v5.z
add r2.y, -r1, c20
mad r2.x, r1.y, c20.z, c20.w
mad r2.x, r1.y, r2, c21
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.zw, r0.xyzy, r0.x
max r0.y, r1.x, r1
rsq r2.y, r2.y
dsx r3.xy, v5
min r0.x, r1, r1.y
rcp r0.y, r0.y
mul r2.w, r0.x, r0.y
mov_pp r1.zw, c10.xyxy
mad_pp r0.xy, r0.zwzw, c24.y, r1.zwzw
mul r1.z, r2.w, r2.w
mad r1.w, r1.z, c22.y, c22.z
mad r1.w, r1, r1.z, c22
mad r1.w, r1, r1.z, c23.x
mad r1.w, r1, r1.z, c23.y
mul r0.zw, r0.xyxy, c9.x
mad r3.z, r1.w, r1, c23
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
mul r3.xy, r0, c11.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r4.x, r1.z, c24
add r0.x, r1, -r1.y
rcp r6.y, v3.w
mad r2.x, r1.y, r2, c21.y
rcp r2.y, r2.y
mul r2.y, r2.x, r2
cmp r2.x, v5.z, c20, c20.y
mul r2.z, r2.x, r2.y
mad r2.y, -r2.z, c21.z, r2
mad r2.x, r2, c21.w, r2.y
mul r2.x, r2, c22
dsx r4.y, r2.x
dsy r1.w, r2.x
dsy r2.xy, v5
mul r2.xy, r2, r2
add r2.x, r2, r2.y
rsq r2.x, r2.x
rcp r2.x, r2.x
mul r1.z, r2.x, c24.x
texldd r2.xyz, r0.zwzw, s1, r4, r1.zwzw
mul r0.z, r3, r2.w
add r0.y, -r0.z, c23.w
cmp r0.w, -r0.x, r0.z, r0.y
texldd r0.xyz, r3, s2, r4, r1.zwzw
add r1.x, -r0.w, c21.w
cmp r1.x, v5.z, r0.w, r1
abs r0.w, v5.y
cmp r2.w, v5.x, r1.x, -r1.x
mul r5.x, r2.w, c24
add r1.y, -r0.w, c20
mad r1.x, r0.w, c20.z, c20.w
mad r1.x, r1, r0.w, c21
rsq r1.y, r1.y
add_pp r2.xyz, r2, -r0
add r4.z, r5.x, c24.y
mad r0.w, r1.x, r0, c21.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v5.y, c20.x, c20.y
mul r1.y, r0.w, r1.x
mad r1.x, -r1.y, c21.z, r1
mad r0.w, r0, c21, r1.x
mul r0.w, r0, c22.x
mov r3.xyz, v5
dp3_sat r1.x, v1, -r3
mov r4.w, r0
mov r5.y, r0.w
add r2.w, r1.x, c24
texldd r3.yw, r4.zwzw, s3, r4, r1.zwzw
mad_sat r2.w, r2, c25.x, c25.y
mul r0.w, v1, c12.x
mad_pp r2.xyz, r2.w, r2, r0
add r1.xy, r3.wyzw, c25.z
mul r0.xy, r1, c25.ywzw
add r1.xy, r5, r0
mad r1.y, r1, c26.x, c26
frc r1.y, r1
add_pp r0.xyz, -r2, c20.y
mul_sat r0.w, r0, c21.z
mad_pp r0.xyz, r0.w, r0, r2
mul r2.xyz, v0, r0
mad r1.y, r1, c26.z, c26.w
sincos r0.xy, r1.y
mad r0.y, r1.x, c27.x, c27
frc r0.y, r0
mov_pp r5.y, r0.x
mad r1.x, r0.y, c26.z, c26.w
sincos r0.xy, r1.x
dp4 r1.y, c1, c1
rsq r0.z, r1.y
mov_pp r5.xz, r0.yyxw
mul r3.xyz, r0.z, c1
dp3_sat r0.y, v4, r3
dp3_pp_sat r0.x, -r5, -c15
mad r5.xyz, v3, r6.y, c4
texld r1.x, r5, s6
add_pp r0.x, r0, -r0.y
mul_sat r1.y, c16.x, c16.x
mad_pp r0.x, r1.y, r0, r0.y
mul_pp r2.w, r0.x, c7
mov r0.xyz, v8
dp3 r3.w, v7, r0
dp3 r0.w, v7, v7
mad r0.x, -r3.w, r3.w, r0.w
rsq r0.w, r0.x
rcp r5.w, r0.w
mad r0.xyz, v3, r6.y, c6
texld r0.x, r0, s6
mov_pp r0.w, r0.x
mad r0.xyz, v3, r6.y, c5
texld r0.x, r0, s6
mov_pp r0.z, r0.x
add_pp r3.xyz, -r2, c19
mov_pp r0.y, r1.x
mov r0.x, c2
add r1.x, c20.y, -r0
mad r5.xyz, v3, r6.y, c3
texld r0.x, r5, s6
mad r0, r0, r1.x, c2.x
dp4_pp r0.y, r0, c27.z
rcp r0.w, v2.w
mul r6.x, r5.w, r5.w
mad r1.x, c17, c17, -r6
rsq r0.x, r1.x
rcp r0.z, r0.x
mad r5.xy, v2, r0.w, c24.y
dp3 r0.x, v2, v2
cmp r1.x, -v2.z, c20, c20.y
texld r0.w, r5, s4
mul_pp r0.w, r1.x, r0
texld r0.x, r0.x, s5
mul_pp r0.x, r0.w, r0
mul_pp r0.y, r0.x, r0
add r0.x, r3.w, -r0.z
mul_pp r1.x, r2.w, r0.y
add r0.z, r0.x, -v1.w
cmp r0.y, r3.w, c20, c20.x
add r0.x, -r5.w, c17
cmp r0.x, r0, c20.y, c20
mul r0.x, r0, r0.y
mul r0.w, r0.x, r0.z
mul_pp_sat r3.w, r1.x, c21.z
add r1.x, -r0.w, c20.y
frc r2.w, r1.x
add_sat r1.x, r1, -r2.w
mul_sat r2.w, -r0, c18.x
mul r0.w, r1.x, c18.x
mov r0.x, c13
add r0.xyz, c7, r0.x
mad_sat r0.xyz, r0, r3.w, c0
mad r0.w, r0, c24.z, r2
mad_pp r2.xyz, r0.w, r3, r2
texldd r3.xyz, r4.zwzw, s0, r4, r1.zwzw
mul_pp r0.xyz, r0, v6.x
add_pp r3.xyz, r3, -r2
mul r4.xyz, r0, c14.x
mad_pp r1.xyz, r1.y, r3, r2
mad_pp r1.xyz, r1, c8, r4
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c20.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Vector 7 [_DetailOffset]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Vector 12 [_SunDir]
Float 13 [_PlanetOpacity]
Float 14 [_OceanRadius]
Float 15 [_OceanDepthFactor]
Vector 16 [_OceanColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] CUBE
SetTexture 5 [_LightTexture0] 2D
"ps_3_0
; 186 ALU, 17 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
dcl_2d s5
def c17, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c22, 32.00000000, 0.50000000, -0.50000000, 1.00000000
def c23, 0.49999991, 0.50000000, 6.28318501, -3.14159298
def c24, 0.99999982, 0.50000000, 0.00781250, -0.00781250
def c25, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c26, 0.97000003, 0.25000000, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r2.xyz, v5
add r0.xyz, r2, -r2.zxyw
add r0.w, r0.x, c17.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r2.zxyw
add r0.w, r2.y, -r0.x
add r0.w, r0, c17.y
frc r1.x, r0.w
add_pp r3.xyz, r2.yxzw, -r0
abs r1.w, v5.z
add_sat r0.w, r0, -r1.x
mad_pp r0.xyz, r0.w, r3, r0
abs_pp r0.x, r0
rcp_pp r0.w, r0.x
add r2.z, -r1.w, c17.y
mad r2.y, r1.w, c17.z, c17.w
mad r2.y, r1.w, r2, c18.x
rsq r2.z, r2.z
max r0.x, r2, r1.w
mul_pp r0.zw, r0.xyzy, r0.w
rcp r0.y, r0.x
min r0.x, r2, r1.w
mul r1.x, r0, r0.y
mul r1.y, r1.x, r1.x
mad r1.z, r1.y, c19.y, c19
mad r1.z, r1, r1.y, c19.w
mad r1.z, r1, r1.y, c20.x
mad r1.z, r1, r1.y, c20.y
mov_pp r0.xy, c7
mad_pp r0.xy, r0.zwzw, c21.y, r0
mul r0.zw, r0.xyxy, c6.x
mad r2.y, r1.w, r2, c18
rcp r2.z, r2.z
mul r2.z, r2.y, r2
cmp r2.y, v5.z, c17.x, c17
mul r2.w, r2.y, r2.z
mad r2.z, -r2.w, c18, r2
mad r2.y, r2, c18.w, r2.z
mad r1.y, r1.z, r1, c20.z
mul r1.z, r2.y, c19.x
mul r2.y, r1, r1.x
dsx r1.xy, v5
mul r1.xy, r1, r1
add r1.x, r1, r1.y
dsy r2.zw, v5.xyxy
mul r2.zw, r2, r2
add r1.y, r2.z, r2.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r5.w, r1.z
dsy r5.y, r1.z
mul r5.z, r1.x, c21.x
mul r5.x, r1.y, c21
texldd r1.xyz, r0.zwzw, s1, r5.zwzw, r5
add r0.z, r2.x, -r1.w
add r0.w, -r2.y, c20
cmp r0.w, -r0.z, r2.y, r0
add r1.w, -r0, c18
cmp r0.w, v5.z, r0, r1
cmp r1.w, v5.x, r0, -r0
abs r0.w, v5.y
mul r3.x, r1.w, c21
add r2.x, -r0.w, c17.y
mad r1.w, r0, c17.z, c17
mad r1.w, r1, r0, c18.x
mul r0.xy, r0, c8.x
texldd r0.xyz, r0, s2, r5.zwzw, r5
rsq r2.x, r2.x
add_pp r1.xyz, r1, -r0
mad r0.w, r1, r0, c18.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v5.y, c17.x, c17.y
mul r2.x, r0.w, r1.w
mad r1.w, -r2.x, c18.z, r1
mad r0.w, r0, c18, r1
mul r0.w, r0, c19.x
mov r2.xyz, v5
dp3_sat r1.w, v1, -r2
add r1.w, r1, c21
mad_sat r1.w, r1, c22.x, c22.y
mad_pp r0.xyz, r1.w, r1, r0
add r6.x, r3, c21.y
mov r6.y, r0.w
texldd r2.yw, r6, s3, r5.zwzw, r5
add r2.xy, r2.wyzw, c22.z
mov r3.y, r0.w
mul r2.xy, r2, c22.ywzw
add r3.xy, r3, r2
mul r0.w, v1, c9.x
add_pp r1.xyz, -r0, c17.y
mul_sat r0.w, r0, c18.z
mad_pp r0.xyz, r0.w, r1, r0
mad r1.w, r3.y, c23.x, c23.y
frc r0.w, r1
mul r1.xyz, v0, r0
mad r1.w, r0, c23.z, c23
sincos r0.xy, r1.w
mad r0.y, r3.x, c24.x, c24
frc r0.y, r0
add_pp r2.xyz, -r1, c16
mov_pp r4.y, r0.x
mad r1.w, r0.y, c23.z, c23
sincos r0.xy, r1.w
dp4 r2.w, c1, c1
rsq r0.z, r2.w
mov_pp r4.xz, r0.yyxw
mul r3.xyz, r0.z, c1
dp3_sat r0.y, v4, r3
dp3_pp_sat r0.x, -r4, -c12
add r3.xyz, v3, c24.wzww
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c13.x, c13.x
mad_pp r0.w, r1, r0.x, r0.y
mul_pp r2.w, r0, c4
add r0.xyz, v3, c24.zwww
texld r0, r0, s4
dp4 r3.w, r0, c25
texld r0, r3, s4
dp4 r3.z, r0, c25
add r4.xyz, v3, c24.wwzw
texld r0, r4, s4
dp4 r3.y, r0, c25
add r4.xyz, v3, c24.z
texld r0, r4, s4
dp4 r3.x, r0, c25
mov r4.xyz, v8
dp3 r0.y, v3, v3
rsq r0.y, r0.y
dp3 r4.x, v7, r4
dp3 r0.x, v7, v7
mad r0.x, -r4, r4, r0
rcp r0.y, r0.y
rsq r4.y, r0.x
mul r0.x, r0.y, c2.w
mad r0, -r0.x, c26.x, r3
rcp r3.x, r4.y
mov r3.z, c3.x
cmp r0, r0, c17.y, r3.z
dp4_pp r0.z, r0, c26.y
mul r3.y, r3.x, r3.x
mad r3.y, c14.x, c14.x, -r3
rsq r0.y, r3.y
dp3 r0.x, v2, v2
texld r0.x, r0.x, s5
mul r0.z, r0.x, r0
mul_pp r2.w, r2, r0.z
rcp r0.y, r0.y
add r0.x, r4, -r0.y
add r0.z, r0.x, -v1.w
add r0.x, -r3, c14
mul_pp_sat r3.y, r2.w, c18.z
cmp r0.y, r4.x, c17, c17.x
cmp r0.x, r0, c17.y, c17
mul r0.x, r0, r0.y
mul r0.w, r0.x, r0.z
add r2.w, -r0, c17.y
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r0.w, c15
mov r0.x, c10
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r3.y, c0
mul r0.w, r2, c15.x
mad r0.w, r0, c21.z, r3.x
mad_pp r1.xyz, r0.w, r2, r1
mul_pp r0.xyz, r0, v6.x
texldd r2.xyz, r6, s0, r5.zwzw, r5
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c11.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c5, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c17.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Vector 7 [_DetailOffset]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Vector 12 [_SunDir]
Float 13 [_PlanetOpacity]
Float 14 [_OceanRadius]
Float 15 [_OceanDepthFactor]
Vector 16 [_OceanColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] CUBE
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_LightTexture0] CUBE
"ps_3_0
; 187 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
dcl_2d s5
dcl_cube s6
def c17, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c22, 32.00000000, 0.50000000, -0.50000000, 1.00000000
def c23, 0.49999991, 0.50000000, 6.28318501, -3.14159298
def c24, 0.99999982, 0.50000000, 0.00781250, -0.00781250
def c25, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c26, 0.97000003, 0.25000000, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r2.xyz, v5
add r0.xyz, r2, -r2.zxyw
add r0.w, r0.x, c17.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r2.zxyw
add r0.w, r2.y, -r0.x
add r0.w, r0, c17.y
frc r1.x, r0.w
add_pp r3.xyz, r2.yxzw, -r0
abs r1.w, v5.z
add_sat r0.w, r0, -r1.x
mad_pp r0.xyz, r0.w, r3, r0
abs_pp r0.x, r0
rcp_pp r0.w, r0.x
add r2.z, -r1.w, c17.y
mad r2.y, r1.w, c17.z, c17.w
mad r2.y, r1.w, r2, c18.x
rsq r2.z, r2.z
max r0.x, r2, r1.w
mul_pp r0.zw, r0.xyzy, r0.w
rcp r0.y, r0.x
min r0.x, r2, r1.w
mul r1.x, r0, r0.y
mul r1.y, r1.x, r1.x
mad r1.z, r1.y, c19.y, c19
mad r1.z, r1, r1.y, c19.w
mad r1.z, r1, r1.y, c20.x
mad r1.z, r1, r1.y, c20.y
mov_pp r0.xy, c7
mad_pp r0.xy, r0.zwzw, c21.y, r0
mul r0.zw, r0.xyxy, c6.x
mad r2.y, r1.w, r2, c18
rcp r2.z, r2.z
mul r2.z, r2.y, r2
cmp r2.y, v5.z, c17.x, c17
mul r2.w, r2.y, r2.z
mad r2.z, -r2.w, c18, r2
mad r2.y, r2, c18.w, r2.z
mad r1.y, r1.z, r1, c20.z
mul r1.z, r2.y, c19.x
mul r2.y, r1, r1.x
dsx r1.xy, v5
mul r1.xy, r1, r1
add r1.x, r1, r1.y
dsy r2.zw, v5.xyxy
mul r2.zw, r2, r2
add r1.y, r2.z, r2.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r5.w, r1.z
dsy r5.y, r1.z
mul r5.z, r1.x, c21.x
mul r5.x, r1.y, c21
texldd r1.xyz, r0.zwzw, s1, r5.zwzw, r5
add r0.z, r2.x, -r1.w
add r0.w, -r2.y, c20
cmp r0.w, -r0.z, r2.y, r0
add r1.w, -r0, c18
cmp r0.w, v5.z, r0, r1
cmp r1.w, v5.x, r0, -r0
abs r0.w, v5.y
mul r3.x, r1.w, c21
add r2.x, -r0.w, c17.y
mad r1.w, r0, c17.z, c17
mad r1.w, r1, r0, c18.x
mul r0.xy, r0, c8.x
texldd r0.xyz, r0, s2, r5.zwzw, r5
rsq r2.x, r2.x
add_pp r1.xyz, r1, -r0
mad r0.w, r1, r0, c18.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v5.y, c17.x, c17.y
mul r2.x, r0.w, r1.w
mad r1.w, -r2.x, c18.z, r1
mad r0.w, r0, c18, r1
mul r0.w, r0, c19.x
mov r2.xyz, v5
dp3_sat r1.w, v1, -r2
add r1.w, r1, c21
mad_sat r1.w, r1, c22.x, c22.y
mad_pp r0.xyz, r1.w, r1, r0
add r6.x, r3, c21.y
mov r6.y, r0.w
texldd r2.yw, r6, s3, r5.zwzw, r5
add r2.xy, r2.wyzw, c22.z
mov r3.y, r0.w
mul r2.xy, r2, c22.ywzw
add r3.xy, r3, r2
mul r0.w, v1, c9.x
add_pp r1.xyz, -r0, c17.y
mul_sat r0.w, r0, c18.z
mad_pp r0.xyz, r0.w, r1, r0
mad r1.w, r3.y, c23.x, c23.y
frc r0.w, r1
mul r1.xyz, v0, r0
mad r1.w, r0, c23.z, c23
sincos r0.xy, r1.w
mad r0.y, r3.x, c24.x, c24
frc r0.y, r0
add_pp r2.xyz, -r1, c16
mov_pp r4.y, r0.x
mad r1.w, r0.y, c23.z, c23
sincos r0.xy, r1.w
dp4 r2.w, c1, c1
rsq r0.z, r2.w
mov_pp r4.xz, r0.yyxw
mul r3.xyz, r0.z, c1
dp3_sat r0.y, v4, r3
dp3_pp_sat r0.x, -r4, -c12
add r3.xyz, v3, c24.wzww
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c13.x, c13.x
mad_pp r0.w, r1, r0.x, r0.y
mul_pp r2.w, r0, c4
add r0.xyz, v3, c24.zwww
texld r0, r0, s4
dp4 r3.w, r0, c25
texld r0, r3, s4
dp4 r3.z, r0, c25
add r4.xyz, v3, c24.wwzw
texld r0, r4, s4
dp4 r3.y, r0, c25
add r4.xyz, v3, c24.z
texld r0, r4, s4
dp4 r3.x, r0, c25
mov r4.xyz, v8
dp3 r0.y, v3, v3
rsq r0.y, r0.y
dp3 r4.x, v7, r4
dp3 r0.x, v7, v7
mad r0.x, -r4, r4, r0
rsq r0.x, r0.x
rcp r4.y, r0.x
rcp r0.y, r0.y
mul r0.x, r0.y, c2.w
mad r0, -r0.x, c26.x, r3
mov r3.y, c3.x
cmp r0, r0, c17.y, r3.y
dp4_pp r0.z, r0, c26.y
mul r3.x, r4.y, r4.y
mad r3.x, c14, c14, -r3
rsq r3.x, r3.x
dp3 r0.x, v2, v2
rcp r0.y, r3.x
texld r0.w, v2, s6
texld r0.x, r0.x, s5
mul r0.x, r0, r0.w
mul r0.z, r0.x, r0
mul_pp r2.w, r2, r0.z
add r0.x, r4, -r0.y
add r0.z, r0.x, -v1.w
add r0.x, -r4.y, c14
mul_pp_sat r3.y, r2.w, c18.z
cmp r0.y, r4.x, c17, c17.x
cmp r0.x, r0, c17.y, c17
mul r0.x, r0, r0.y
mul r0.w, r0.x, r0.z
add r2.w, -r0, c17.y
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r0.w, c15
mov r0.x, c10
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r3.y, c0
mul r0.w, r2, c15.x
mad r0.w, r0, c21.z, r3.x
mad_pp r1.xyz, r0.w, r2, r1
mul_pp r0.xyz, r0, v6.x
texldd r2.xyz, r6, s0, r5.zwzw, r5
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c11.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c5, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c17.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Vector 5 [_DetailOffset]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 169 ALU, 13 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c20, 32.00000000, 0.50000000, -0.50000000, 1.00000000
def c21, 0.49999991, 0.50000000, 6.28318501, -3.14159298
def c22, 0.99999982, 0.50000000, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
abs r3.xyz, v4
add r0.xyz, r3, -r3.zxyw
add r0.w, r0.x, c15.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r3.zxyw
add r0.w, r3.y, -r0.x
add r0.w, r0, c15.y
frc r1.w, r0
dsy r2.xy, v4
add_pp r1.xyz, r3.yxzw, -r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r1, r0
abs r0.w, v4.z
add r1.x, -r0.w, c15.y
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mov_pp r1.zw, c5.xyxy
mad r0.z, r0.w, c15, c15.w
mad r0.z, r0.w, r0, c16.x
rsq r1.x, r1.x
mad_pp r0.xy, r0, c19.y, r1.zwzw
mad r0.z, r0.w, r0, c16.y
rcp r1.x, r1.x
mul r1.x, r0.z, r1
cmp r0.z, v4, c15.x, c15.y
mul r1.y, r0.z, r1.x
mad r1.x, -r1.y, c16.z, r1
mad r0.z, r0, c16.w, r1.x
mul r1.z, r0, c17.x
mul r1.xy, r0, c4.x
dsx r4.w, r1.z
dsy r4.y, r1.z
dsx r1.zw, v4.xyxy
mul r1.zw, r1, r1
add r1.z, r1, r1.w
mul r2.xy, r2, r2
add r1.w, r2.x, r2.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r4.z, r1, c19.x
mul r4.x, r1.w, c19
max r0.z, r3.x, r0.w
rcp r1.w, r0.z
min r0.z, r3.x, r0.w
mul r1.w, r0.z, r1
mul r2.w, r1, r1
mad r3.y, r2.w, c17, c17.z
mad r3.y, r3, r2.w, c17.w
mul r0.xy, r0, c6.x
mad r3.y, r3, r2.w, c18.x
texldd r1.xyz, r1, s1, r4.zwzw, r4
texldd r0.xyz, r0, s2, r4.zwzw, r4
add_pp r2.xyz, r1, -r0
mov r1.xyz, v4
dp3_sat r1.y, v1, -r1
mad r1.x, r3.y, r2.w, c18.y
mad r1.x, r1, r2.w, c18.z
add r1.y, r1, c19.w
mad_sat r1.y, r1, c20.x, c20
mad_pp r0.xyz, r1.y, r2, r0
mul r1.w, r1.x, r1
add_pp r1.xyz, -r0, c15.y
add r2.x, -r1.w, c18.w
add r0.w, r3.x, -r0
cmp r0.w, -r0, r1, r2.x
abs r2.x, v4.y
add r1.w, -r0, c16
add r2.z, -r2.x, c15.y
mad r2.y, r2.x, c15.z, c15.w
mad r2.y, r2, r2.x, c16.x
cmp r1.w, v4.z, r0, r1
rsq r2.z, r2.z
mad r2.x, r2.y, r2, c16.y
rcp r2.z, r2.z
mul r2.y, r2.x, r2.z
cmp r2.x, v4.y, c15, c15.y
mul r2.z, r2.x, r2.y
mad r0.w, -r2.z, c16.z, r2.y
mad r0.w, r2.x, c16, r0
mul r0.w, r0, c17.x
cmp r1.w, v4.x, r1, -r1
mul r2.x, r1.w, c19
mul r1.w, v1, c7.x
mul_sat r1.w, r1, c16.z
mad_pp r0.xyz, r1.w, r1, r0
mul r1.xyz, v0, r0
add r5.x, r2, c19.y
mov r5.y, r0.w
texldd r2.yw, r5, s3, r4.zwzw, r4
add r2.zw, r2.xywy, c20.z
mul r0.xy, r2.zwzw, c20.ywzw
mov r2.y, r0.w
add r0.xy, r2, r0
add_pp r2.xyz, -r1, c14
mad r0.z, r0.x, c22.x, c22.y
mad r0.y, r0, c21.x, c21
frc r0.x, r0.y
frc r0.y, r0.z
mad r0.x, r0, c21.z, c21.w
sincos r3.xy, r0.x
mad r1.w, r0.y, c21.z, c21
sincos r0.xy, r1.w
mov_pp r3.y, r3.x
mov_pp r3.xz, r0.yyxw
mov r0.xyz, v7
dp3 r1.w, v6, r0
dp3 r0.x, v6, v6
mad r2.w, -r1, r1, r0.x
dp4 r0.y, c1, c1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c1
dp3_pp_sat r0.w, -r3, -c10
dp3_sat r0.z, v3, r0
rsq r2.w, r2.w
rcp r0.y, r2.w
mul r0.x, r0.y, r0.y
add_pp r2.w, r0, -r0.z
mul_sat r0.w, c11.x, c11.x
mad_pp r0.z, r0.w, r2.w, r0
mad r0.x, c12, c12, -r0
rsq r2.w, r0.x
dp3 r0.x, v2, v2
rcp r2.w, r2.w
add r2.w, r1, -r2
add r0.y, -r0, c12.x
mul_pp r0.z, r0, c2.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.z, r0
mul_pp_sat r3.y, r0.x, c16.z
add r0.z, r2.w, -v1.w
cmp r1.w, r1, c15.y, c15.x
cmp r0.y, r0, c15, c15.x
mul r0.y, r0, r1.w
mul r1.w, r0.y, r0.z
add r2.w, -r1, c15.y
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r1.w, c13
mov r0.x, c8
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r3.y, c0
mul r1.w, r2, c13.x
mad r1.w, r1, c19.z, r3.x
mad_pp r1.xyz, r1.w, r2, r1
mul_pp r0.xyz, r0, v5.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c9.x
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Vector 5 [_DetailOffset]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_BumpMap] 2D
"ps_3_0
; 167 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c20, 32.00000000, 0.50000000, -0.50000000, 1.00000000
def c21, 0.49999991, 0.50000000, 6.28318501, -3.14159298
def c22, 0.99999982, 0.50000000, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord4 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.x
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.xyz
abs r3.xyz, v3
add r0.xyz, r3, -r3.zxyw
add r0.w, r0.x, c15.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r3.zxyw
add r0.w, r3.y, -r0.x
add r0.w, r0, c15.y
frc r1.w, r0
dsy r2.xy, v3
add_pp r1.xyz, r3.yxzw, -r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r1, r0
abs r0.w, v3.z
add r1.x, -r0.w, c15.y
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mov_pp r1.zw, c5.xyxy
mad r0.z, r0.w, c15, c15.w
mad r0.z, r0.w, r0, c16.x
rsq r1.x, r1.x
mad_pp r0.xy, r0, c19.y, r1.zwzw
mad r0.z, r0.w, r0, c16.y
rcp r1.x, r1.x
mul r1.x, r0.z, r1
cmp r0.z, v3, c15.x, c15.y
mul r1.y, r0.z, r1.x
mad r1.x, -r1.y, c16.z, r1
mad r0.z, r0, c16.w, r1.x
mul r1.z, r0, c17.x
mul r1.xy, r0, c4.x
dsx r4.w, r1.z
dsy r4.y, r1.z
dsx r1.zw, v3.xyxy
mul r1.zw, r1, r1
add r1.z, r1, r1.w
mul r2.xy, r2, r2
add r1.w, r2.x, r2.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r4.z, r1, c19.x
mul r4.x, r1.w, c19
max r0.z, r3.x, r0.w
rcp r1.w, r0.z
min r0.z, r3.x, r0.w
mul r1.w, r0.z, r1
mul r2.w, r1, r1
mad r3.y, r2.w, c17, c17.z
mad r3.y, r3, r2.w, c17.w
mul r0.xy, r0, c6.x
mad r3.y, r3, r2.w, c18.x
texldd r1.xyz, r1, s1, r4.zwzw, r4
texldd r0.xyz, r0, s2, r4.zwzw, r4
add_pp r2.xyz, r1, -r0
mov r1.xyz, v3
dp3_sat r1.y, v1, -r1
mad r1.x, r3.y, r2.w, c18.y
mad r1.x, r1, r2.w, c18.z
add r1.y, r1, c19.w
mad_sat r1.y, r1, c20.x, c20
mad_pp r0.xyz, r1.y, r2, r0
mul r1.w, r1.x, r1
add_pp r1.xyz, -r0, c15.y
add r2.x, -r1.w, c18.w
add r0.w, r3.x, -r0
cmp r0.w, -r0, r1, r2.x
abs r2.x, v3.y
add r1.w, -r0, c16
add r2.z, -r2.x, c15.y
mad r2.y, r2.x, c15.z, c15.w
mad r2.y, r2, r2.x, c16.x
cmp r1.w, v3.z, r0, r1
rsq r2.z, r2.z
mad r2.x, r2.y, r2, c16.y
rcp r2.z, r2.z
mul r2.y, r2.x, r2.z
cmp r2.x, v3.y, c15, c15.y
mul r2.z, r2.x, r2.y
mad r0.w, -r2.z, c16.z, r2.y
mad r0.w, r2.x, c16, r0
mul r0.w, r0, c17.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, r1.w, c19
mul r1.w, v1, c7.x
mul_sat r1.w, r1, c16.z
mad_pp r0.xyz, r1.w, r1, r0
mul r1.xyz, v0, r0
add r5.x, r2, c19.y
mov r5.y, r0.w
texldd r2.yw, r5, s3, r4.zwzw, r4
add r2.zw, r2.xywy, c20.z
mul r0.xy, r2.zwzw, c20.ywzw
mov r2.y, r0.w
add r0.xy, r2, r0
add_pp r2.xyz, -r1, c14
mad r0.z, r0.x, c22.x, c22.y
mad r0.y, r0, c21.x, c21
frc r0.x, r0.y
frc r0.y, r0.z
mad r0.x, r0, c21.z, c21.w
sincos r3.xy, r0.x
mad r1.w, r0.y, c21.z, c21
sincos r0.xy, r1.w
mov_pp r3.y, r3.x
mov_pp r3.xz, r0.yyxw
mov r0.xyz, v6
dp3 r1.w, v5, r0
dp3 r0.w, v5, v5
mad r0.x, -r1.w, r1.w, r0.w
rsq r0.x, r0.x
dp3_pp_sat r0.w, -r3, -c10
rcp r2.w, r0.x
dp4_pp r0.y, c1, c1
mul r3.x, r2.w, r2.w
rsq_pp r0.x, r0.y
mul_pp r0.xyz, r0.x, c1
dp3_sat r0.x, v2, r0
add_pp r0.z, r0.w, -r0.x
mad r3.x, c12, c12, -r3
rsq r0.y, r3.x
mul_sat r0.w, c11.x, c11.x
mad_pp r0.x, r0.w, r0.z, r0
mul_pp r0.x, r0, c2.w
mul_pp_sat r3.y, r0.x, c16.z
add r0.z, -r2.w, c12.x
rcp r0.y, r0.y
add r0.y, r1.w, -r0
add r0.y, r0, -v1.w
cmp r1.w, r1, c15.y, c15.x
cmp r0.z, r0, c15.y, c15.x
mul r0.z, r0, r1.w
mul r1.w, r0.z, r0.y
add r2.w, -r1, c15.y
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r1.w, c13
mov r0.x, c8
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r3.y, c0
mul r1.w, r2, c13.x
mad r1.w, r1, c19.z, r3.x
mad_pp r1.xyz, r1.w, r2, r1
mul_pp r0.xyz, r0, v4.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c9.x
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Vector 5 [_DetailOffset]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
"ps_3_0
; 174 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c20, 32.00000000, 0.50000000, -0.50000000, 1.00000000
def c21, 0.49999991, 0.50000000, 6.28318501, -3.14159298
def c22, 0.99999982, 0.50000000, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
abs r3.xyz, v4
add r0.xyz, r3, -r3.zxyw
add r0.w, r0.x, c15.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r3.zxyw
add r0.w, r3.y, -r0.x
add r0.w, r0, c15.y
frc r1.w, r0
dsy r2.xy, v4
add_pp r1.xyz, r3.yxzw, -r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r1, r0
abs r0.w, v4.z
add r1.x, -r0.w, c15.y
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mov_pp r1.zw, c5.xyxy
mad r0.z, r0.w, c15, c15.w
mad r0.z, r0.w, r0, c16.x
rsq r1.x, r1.x
mad_pp r0.xy, r0, c19.y, r1.zwzw
mad r0.z, r0.w, r0, c16.y
rcp r1.x, r1.x
mul r1.x, r0.z, r1
cmp r0.z, v4, c15.x, c15.y
mul r1.y, r0.z, r1.x
mad r1.x, -r1.y, c16.z, r1
mad r0.z, r0, c16.w, r1.x
mul r1.z, r0, c17.x
mul r1.xy, r0, c4.x
dsx r4.w, r1.z
dsy r4.y, r1.z
dsx r1.zw, v4.xyxy
mul r1.zw, r1, r1
add r1.z, r1, r1.w
mul r2.xy, r2, r2
add r1.w, r2.x, r2.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r4.z, r1, c19.x
mul r4.x, r1.w, c19
max r0.z, r3.x, r0.w
rcp r1.w, r0.z
min r0.z, r3.x, r0.w
mul r1.w, r0.z, r1
mul r2.w, r1, r1
mad r3.y, r2.w, c17, c17.z
mad r3.y, r3, r2.w, c17.w
mul r0.xy, r0, c6.x
mad r3.y, r3, r2.w, c18.x
texldd r1.xyz, r1, s1, r4.zwzw, r4
texldd r0.xyz, r0, s2, r4.zwzw, r4
add_pp r2.xyz, r1, -r0
mov r1.xyz, v4
dp3_sat r1.y, v1, -r1
mad r1.x, r3.y, r2.w, c18.y
mad r1.x, r1, r2.w, c18.z
add r1.y, r1, c19.w
mad_sat r1.y, r1, c20.x, c20
mad_pp r0.xyz, r1.y, r2, r0
mul r1.w, r1.x, r1
add_pp r1.xyz, -r0, c15.y
add r2.x, -r1.w, c18.w
add r0.w, r3.x, -r0
cmp r0.w, -r0, r1, r2.x
abs r2.x, v4.y
add r1.w, -r0, c16
add r2.z, -r2.x, c15.y
mad r2.y, r2.x, c15.z, c15.w
mad r2.y, r2, r2.x, c16.x
cmp r1.w, v4.z, r0, r1
rsq r2.z, r2.z
mad r2.x, r2.y, r2, c16.y
rcp r2.z, r2.z
mul r2.y, r2.x, r2.z
cmp r2.x, v4.y, c15, c15.y
mul r2.z, r2.x, r2.y
mad r0.w, -r2.z, c16.z, r2.y
mad r0.w, r2.x, c16, r0
mul r0.w, r0, c17.x
cmp r1.w, v4.x, r1, -r1
mul r2.x, r1.w, c19
mul r1.w, v1, c7.x
mul_sat r1.w, r1, c16.z
mad_pp r0.xyz, r1.w, r1, r0
mul r1.xyz, v0, r0
add r5.x, r2, c19.y
mov r5.y, r0.w
texldd r2.yw, r5, s3, r4.zwzw, r4
add r2.zw, r2.xywy, c20.z
mul r0.xy, r2.zwzw, c20.ywzw
mov r2.y, r0.w
add r0.xy, r2, r0
add_pp r2.xyz, -r1, c14
mad r0.z, r0.x, c22.x, c22.y
mad r0.y, r0, c21.x, c21
frc r0.x, r0.y
frc r0.y, r0.z
mad r0.x, r0, c21.z, c21.w
sincos r3.xy, r0.x
mad r1.w, r0.y, c21.z, c21
sincos r0.xy, r1.w
mov_pp r3.y, r3.x
mov_pp r3.xz, r0.yyxw
mov r0.xyz, v7
dp3 r2.w, v6, r0
dp3 r0.x, v6, v6
mad r1.w, -r2, r2, r0.x
dp4 r0.y, c1, c1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c1
dp3_sat r0.z, v3, r0
dp3_pp_sat r0.w, -r3, -c10
rsq r1.w, r1.w
rcp r0.y, r1.w
mul r0.x, r0.y, r0.y
mad r0.x, c12, c12, -r0
add r0.y, -r0, c12.x
add_pp r0.w, r0, -r0.z
mul_sat r1.w, c11.x, c11.x
mad_pp r0.z, r1.w, r0.w, r0
rcp r0.w, v2.w
mad r3.xy, v2, r0.w, c19.y
texld r0.w, r3, s4
cmp r3.x, -v2.z, c15, c15.y
mul_pp r3.z, r0, c2.w
rsq r0.x, r0.x
rcp r0.z, r0.x
add r0.z, r2.w, -r0
dp3 r0.x, v2, v2
mul_pp r0.w, r3.x, r0
texld r0.x, r0.x, s5
mul_pp r0.x, r0.w, r0
mul_pp r0.x, r3.z, r0
mul_pp_sat r3.y, r0.x, c16.z
cmp r0.w, r2, c15.y, c15.x
cmp r0.y, r0, c15, c15.x
mul r0.y, r0, r0.w
add r0.z, r0, -v1.w
mul r0.w, r0.y, r0.z
add r2.w, -r0, c15.y
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r0.w, c13
mov r0.x, c8
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r3.y, c0
mul r0.w, r2, c13.x
mad r0.w, r0, c19.z, r3.x
mad_pp r1.xyz, r0.w, r2, r1
mul_pp r0.xyz, r0, v5.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c9.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Vector 5 [_DetailOffset]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 170 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_cube s5
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c20, 32.00000000, 0.50000000, -0.50000000, 1.00000000
def c21, 0.49999991, 0.50000000, 6.28318501, -3.14159298
def c22, 0.99999982, 0.50000000, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
abs r3.xyz, v4
add r0.xyz, r3, -r3.zxyw
add r0.w, r0.x, c15.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r3.zxyw
add r0.w, r3.y, -r0.x
add r0.w, r0, c15.y
frc r1.w, r0
dsy r2.xy, v4
add_pp r1.xyz, r3.yxzw, -r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r1, r0
abs r0.w, v4.z
add r1.x, -r0.w, c15.y
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mov_pp r1.zw, c5.xyxy
mad r0.z, r0.w, c15, c15.w
mad r0.z, r0.w, r0, c16.x
rsq r1.x, r1.x
mad_pp r0.xy, r0, c19.y, r1.zwzw
mad r0.z, r0.w, r0, c16.y
rcp r1.x, r1.x
mul r1.x, r0.z, r1
cmp r0.z, v4, c15.x, c15.y
mul r1.y, r0.z, r1.x
mad r1.x, -r1.y, c16.z, r1
mad r0.z, r0, c16.w, r1.x
mul r1.z, r0, c17.x
mul r1.xy, r0, c4.x
dsx r4.w, r1.z
dsy r4.y, r1.z
dsx r1.zw, v4.xyxy
mul r1.zw, r1, r1
add r1.z, r1, r1.w
mul r2.xy, r2, r2
add r1.w, r2.x, r2.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r4.z, r1, c19.x
mul r4.x, r1.w, c19
max r0.z, r3.x, r0.w
rcp r1.w, r0.z
min r0.z, r3.x, r0.w
mul r1.w, r0.z, r1
mul r2.w, r1, r1
mad r3.y, r2.w, c17, c17.z
mad r3.y, r3, r2.w, c17.w
mul r0.xy, r0, c6.x
mad r3.y, r3, r2.w, c18.x
texldd r1.xyz, r1, s1, r4.zwzw, r4
texldd r0.xyz, r0, s2, r4.zwzw, r4
add_pp r2.xyz, r1, -r0
mov r1.xyz, v4
dp3_sat r1.y, v1, -r1
mad r1.x, r3.y, r2.w, c18.y
mad r1.x, r1, r2.w, c18.z
add r1.y, r1, c19.w
mad_sat r1.y, r1, c20.x, c20
mad_pp r0.xyz, r1.y, r2, r0
mul r1.w, r1.x, r1
add_pp r1.xyz, -r0, c15.y
add r2.x, -r1.w, c18.w
add r0.w, r3.x, -r0
cmp r0.w, -r0, r1, r2.x
abs r2.x, v4.y
add r1.w, -r0, c16
add r2.z, -r2.x, c15.y
mad r2.y, r2.x, c15.z, c15.w
mad r2.y, r2, r2.x, c16.x
cmp r1.w, v4.z, r0, r1
rsq r2.z, r2.z
mad r2.x, r2.y, r2, c16.y
rcp r2.z, r2.z
mul r2.y, r2.x, r2.z
cmp r2.x, v4.y, c15, c15.y
mul r2.z, r2.x, r2.y
mad r0.w, -r2.z, c16.z, r2.y
mad r0.w, r2.x, c16, r0
mul r0.w, r0, c17.x
cmp r1.w, v4.x, r1, -r1
mul r2.x, r1.w, c19
mul r1.w, v1, c7.x
mul_sat r1.w, r1, c16.z
mad_pp r0.xyz, r1.w, r1, r0
mul r1.xyz, v0, r0
add r5.x, r2, c19.y
mov r5.y, r0.w
texldd r2.yw, r5, s3, r4.zwzw, r4
add r2.zw, r2.xywy, c20.z
mul r0.xy, r2.zwzw, c20.ywzw
mov r2.y, r0.w
add r0.xy, r2, r0
add_pp r2.xyz, -r1, c14
mad r0.z, r0.x, c22.x, c22.y
mad r0.y, r0, c21.x, c21
frc r0.x, r0.y
frc r0.y, r0.z
mad r0.x, r0, c21.z, c21.w
sincos r3.xy, r0.x
mad r1.w, r0.y, c21.z, c21
sincos r0.xy, r1.w
mov_pp r3.y, r3.x
mov_pp r3.xz, r0.yyxw
mov r0.xyz, v7
dp3 r2.w, v6, r0
dp3 r0.x, v6, v6
mad r0.x, -r2.w, r2.w, r0
dp4 r0.y, c1, c1
dp3_pp_sat r0.w, -r3, -c10
rsq r1.w, r0.x
rcp r3.x, r1.w
rsq r0.y, r0.y
mul r0.xyz, r0.y, c1
dp3_sat r0.y, v3, r0
add_pp r0.z, r0.w, -r0.y
mul r0.x, r3, r3
mul_sat r1.w, c11.x, c11.x
mad_pp r0.y, r1.w, r0.z, r0
mad r0.x, c12, c12, -r0
rsq r0.x, r0.x
rcp r0.z, r0.x
dp3 r0.x, v2, v2
add r0.z, r2.w, -r0
mul_pp r0.y, r0, c2.w
texld r0.w, v2, s5
texld r0.x, r0.x, s4
mul r0.x, r0, r0.w
mul_pp r0.x, r0.y, r0
add r0.y, r0.z, -v1.w
mul_pp_sat r3.y, r0.x, c16.z
add r0.z, -r3.x, c12.x
cmp r0.w, r2, c15.y, c15.x
cmp r0.z, r0, c15.y, c15.x
mul r0.z, r0, r0.w
mul r0.w, r0.z, r0.y
add r2.w, -r0, c15.y
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r0.w, c13
mov r0.x, c8
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r3.y, c0
mul r0.w, r2, c13.x
mad r0.w, r0, c19.z, r3.x
mad_pp r1.xyz, r0.w, r2, r1
mul_pp r0.xyz, r0, v5.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c9.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Vector 5 [_DetailOffset]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 168 ALU, 13 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c20, 32.00000000, 0.50000000, -0.50000000, 1.00000000
def c21, 0.49999991, 0.50000000, 6.28318501, -3.14159298
def c22, 0.99999982, 0.50000000, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
abs r3.xyz, v4
add r0.xyz, r3, -r3.zxyw
add r0.w, r0.x, c15.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r3.zxyw
add r0.w, r3.y, -r0.x
add r0.w, r0, c15.y
frc r1.w, r0
dsy r2.xy, v4
add_pp r1.xyz, r3.yxzw, -r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r1, r0
abs r0.w, v4.z
add r1.x, -r0.w, c15.y
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mov_pp r1.zw, c5.xyxy
mad r0.z, r0.w, c15, c15.w
mad r0.z, r0.w, r0, c16.x
rsq r1.x, r1.x
mad_pp r0.xy, r0, c19.y, r1.zwzw
mad r0.z, r0.w, r0, c16.y
rcp r1.x, r1.x
mul r1.x, r0.z, r1
cmp r0.z, v4, c15.x, c15.y
mul r1.y, r0.z, r1.x
mad r1.x, -r1.y, c16.z, r1
mad r0.z, r0, c16.w, r1.x
mul r1.z, r0, c17.x
mul r1.xy, r0, c4.x
dsx r4.w, r1.z
dsy r4.y, r1.z
dsx r1.zw, v4.xyxy
mul r1.zw, r1, r1
add r1.z, r1, r1.w
mul r2.xy, r2, r2
add r1.w, r2.x, r2.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r4.z, r1, c19.x
mul r4.x, r1.w, c19
max r0.z, r3.x, r0.w
rcp r1.w, r0.z
min r0.z, r3.x, r0.w
mul r1.w, r0.z, r1
mul r2.w, r1, r1
mad r3.y, r2.w, c17, c17.z
mad r3.y, r3, r2.w, c17.w
mul r0.xy, r0, c6.x
mad r3.y, r3, r2.w, c18.x
texldd r1.xyz, r1, s1, r4.zwzw, r4
texldd r0.xyz, r0, s2, r4.zwzw, r4
add_pp r2.xyz, r1, -r0
mov r1.xyz, v4
dp3_sat r1.y, v1, -r1
mad r1.x, r3.y, r2.w, c18.y
mad r1.x, r1, r2.w, c18.z
add r1.y, r1, c19.w
mad_sat r1.y, r1, c20.x, c20
mad_pp r0.xyz, r1.y, r2, r0
mul r1.w, r1.x, r1
add_pp r1.xyz, -r0, c15.y
add r2.x, -r1.w, c18.w
add r0.w, r3.x, -r0
cmp r0.w, -r0, r1, r2.x
abs r2.x, v4.y
add r1.w, -r0, c16
add r2.z, -r2.x, c15.y
mad r2.y, r2.x, c15.z, c15.w
mad r2.y, r2, r2.x, c16.x
cmp r1.w, v4.z, r0, r1
rsq r2.z, r2.z
mad r2.x, r2.y, r2, c16.y
rcp r2.z, r2.z
mul r2.y, r2.x, r2.z
cmp r2.x, v4.y, c15, c15.y
mul r2.z, r2.x, r2.y
mad r0.w, -r2.z, c16.z, r2.y
mad r0.w, r2.x, c16, r0
mul r0.w, r0, c17.x
cmp r1.w, v4.x, r1, -r1
mul r2.x, r1.w, c19
mul r1.w, v1, c7.x
mul_sat r1.w, r1, c16.z
mad_pp r0.xyz, r1.w, r1, r0
mul r1.xyz, v0, r0
add r5.x, r2, c19.y
mov r5.y, r0.w
texldd r2.yw, r5, s3, r4.zwzw, r4
add r2.zw, r2.xywy, c20.z
mul r0.xy, r2.zwzw, c20.ywzw
mov r2.y, r0.w
add r0.xy, r2, r0
add_pp r2.xyz, -r1, c14
mad r0.z, r0.x, c22.x, c22.y
mad r0.y, r0, c21.x, c21
frc r0.x, r0.y
frc r0.y, r0.z
mad r0.x, r0, c21.z, c21.w
sincos r3.xy, r0.x
mad r1.w, r0.y, c21.z, c21
sincos r0.xy, r1.w
mov_pp r3.y, r3.x
mov_pp r3.xz, r0.yyxw
dp3_pp_sat r0.w, -r3, -c10
mov r0.xyz, v7
dp3 r3.x, v6, r0
dp3 r0.x, v6, v6
mad r0.x, -r3, r3, r0
rsq r1.w, r0.x
rcp r2.w, r1.w
dp4_pp r0.y, c1, c1
rsq_pp r0.y, r0.y
mul_pp r0.xyz, r0.y, c1
dp3_sat r0.y, v3, r0
add_pp r0.z, r0.w, -r0.y
mul r0.x, r2.w, r2.w
mul_sat r0.w, c11.x, c11.x
mad_pp r0.y, r0.w, r0.z, r0
mad r0.x, c12, c12, -r0
rsq r0.x, r0.x
mul_pp r0.z, r0.y, c2.w
rcp r0.x, r0.x
add r0.y, r3.x, -r0.x
texld r1.w, v2, s4
mul_pp r0.x, r0.z, r1.w
mul_pp_sat r3.y, r0.x, c16.z
add r0.z, -r2.w, c12.x
cmp r1.w, r3.x, c15.y, c15.x
cmp r0.z, r0, c15.y, c15.x
mul r0.z, r0, r1.w
add r0.y, r0, -v1.w
mul r1.w, r0.z, r0.y
add r2.w, -r1, c15.y
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r1.w, c13
mov r0.x, c8
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r3.y, c0
mul r1.w, r2, c13.x
mad r1.w, r1, c19.z, r3.x
mad_pp r1.xyz, r1.w, r2, r1
mul_pp r0.xyz, r0, v5.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c9.x
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_OceanRadius]
Float 14 [_OceanDepthFactor]
Vector 15 [_OceanColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 179 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c21, 32.00000000, 0.50000000, -0.50000000, 1.00000000
def c22, 0.49999991, 0.50000000, 6.28318501, -3.14159298
def c23, 0.99999982, 0.50000000, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r3.xyz, v5
add r0.xyz, r3, -r3.zxyw
add r0.w, r0.x, c16.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r3.zxyw
add r0.w, r3.y, -r0.x
add r0.w, r0, c16.y
frc r1.x, r0.w
add_pp r2.xyz, r3.yxzw, -r0
add_sat r0.w, r0, -r1.x
mad_pp r0.xyz, r0.w, r2, r0
abs r0.w, v5.z
add r1.x, -r0.w, c16.y
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mov_pp r1.zw, c6.xyxy
mad r0.z, r0.w, c16, c16.w
mad r0.z, r0.w, r0, c17.x
rsq r1.x, r1.x
dsy r2.xy, v5
mad_pp r0.xy, r0, c20.y, r1.zwzw
mad r0.z, r0.w, r0, c17.y
rcp r1.x, r1.x
mul r1.x, r0.z, r1
cmp r0.z, v5, c16.x, c16.y
mul r1.y, r0.z, r1.x
mad r1.x, -r1.y, c17.z, r1
mad r0.z, r0, c17.w, r1.x
mul r1.z, r0, c18.x
mul r1.xy, r0, c5.x
dsx r4.w, r1.z
dsy r4.y, r1.z
dsx r1.zw, v5.xyxy
mul r1.zw, r1, r1
add r1.z, r1, r1.w
mul r2.xy, r2, r2
add r1.w, r2.x, r2.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r4.z, r1, c20.x
mul r4.x, r1.w, c20
max r0.z, r3.x, r0.w
rcp r1.w, r0.z
min r0.z, r3.x, r0.w
mul r1.w, r0.z, r1
mul r2.w, r1, r1
mad r3.y, r2.w, c18, c18.z
mad r3.y, r3, r2.w, c18.w
mul r0.xy, r0, c7.x
mad r3.y, r3, r2.w, c19.x
add r0.w, r3.x, -r0
texldd r1.xyz, r1, s1, r4.zwzw, r4
texldd r0.xyz, r0, s2, r4.zwzw, r4
add_pp r2.xyz, r1, -r0
mov r1.xyz, v5
dp3_sat r1.y, v1, -r1
mad r1.x, r3.y, r2.w, c19.y
mad r1.x, r1, r2.w, c19.z
add r1.y, r1, c20.w
mad_sat r1.y, r1, c21.x, c21
mad_pp r0.xyz, r1.y, r2, r0
mul r1.w, r1.x, r1
add r2.x, -r1.w, c19.w
cmp r2.y, -r0.w, r1.w, r2.x
abs r0.w, v5.y
add r2.z, -r2.y, c17.w
add r2.x, -r0.w, c16.y
mad r1.w, r0, c16.z, c16
mad r1.w, r1, r0, c17.x
rsq r2.x, r2.x
cmp r2.y, v5.z, r2, r2.z
add_pp r1.xyz, -r0, c16.y
mad r0.w, r1, r0, c17.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v5.y, c16.x, c16.y
mul r2.x, r0.w, r1.w
mad r1.w, -r2.x, c17.z, r1
mad r0.w, r0, c17, r1
mul r0.w, r0, c18.x
cmp r2.x, v5, r2.y, -r2.y
mul r2.x, r2, c20
mul r1.w, v1, c8.x
mul_sat r1.w, r1, c17.z
mad_pp r0.xyz, r1.w, r1, r0
mul r1.xyz, v0, r0
add r5.x, r2, c20.y
mov r5.y, r0.w
texldd r2.yw, r5, s3, r4.zwzw, r4
add r2.zw, r2.xywy, c21.z
mul r0.xy, r2.zwzw, c21.ywzw
mov r2.y, r0.w
add r0.xy, r2, r0
add_pp r2.xyz, -r1, c15
mad r0.z, r0.x, c23.x, c23.y
mad r0.y, r0, c22.x, c22
frc r0.x, r0.y
frc r0.y, r0.z
mad r0.x, r0, c22.z, c22.w
sincos r3.xy, r0.x
mad r1.w, r0.y, c22.z, c22
sincos r0.xy, r1.w
mov_pp r3.y, r3.x
mov_pp r3.xz, r0.yyxw
dp3_pp_sat r0.w, -r3, -c11
mov r0.xyz, v8
dp3 r3.z, v7, r0
dp3 r0.x, v7, v7
mad r0.x, -r3.z, r3.z, r0
rsq r1.w, r0.x
rcp r2.w, r1.w
dp4 r0.y, c1, c1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c1
dp3_sat r0.y, v4, r0
add_pp r0.z, r0.w, -r0.y
mul r0.x, r2.w, r2.w
mul_sat r1.w, c12.x, c12.x
mad_pp r0.y, r1.w, r0.z, r0
mad r0.x, c13, c13, -r0
rsq r0.x, r0.x
rcp r0.z, r0.x
mul_pp r0.y, r0, c3.w
texldp r0.x, v3, s6
rcp r0.w, v3.w
mad r0.w, -v3.z, r0, r0.x
mov r3.x, c2
cmp r3.w, r0, c16.y, r3.x
rcp r0.x, v2.w
mad r3.xy, v2, r0.x, c20.y
texld r0.w, r3, s4
cmp r3.x, -v2.z, c16, c16.y
dp3 r0.x, v2, v2
mul_pp r0.w, r3.x, r0
texld r0.x, r0.x, s5
mul_pp r0.x, r0.w, r0
mul_pp r0.w, r0.x, r3
mul_pp r3.x, r0.y, r0.w
add r0.x, r3.z, -r0.z
add r0.z, r0.x, -v1.w
add r0.x, -r2.w, c13
cmp r0.y, r3.z, c16, c16.x
cmp r0.x, r0, c16.y, c16
mul r0.x, r0, r0.y
mul r0.w, r0.x, r0.z
mov r0.x, c9
mul_pp_sat r3.y, r3.x, c17.z
add r2.w, -r0, c16.y
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r0.w, c14
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r3.y, c0
mul r0.w, r2, c14.x
mad r0.w, r0, c20.z, r3.x
mad_pp r1.xyz, r0.w, r2, r1
mul_pp r0.xyz, r0, v6.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c10.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c4, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_OceanRadius]
Float 14 [_OceanDepthFactor]
Vector 15 [_OceanColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 178 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c21, 32.00000000, 0.50000000, -0.50000000, 1.00000000
def c22, 0.49999991, 0.50000000, 6.28318501, -3.14159298
def c23, 0.99999982, 0.50000000, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r3.xyz, v5
add r0.xyz, r3, -r3.zxyw
add r0.w, r0.x, c16.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r3.zxyw
add r0.w, r3.y, -r0.x
add r0.w, r0, c16.y
frc r1.x, r0.w
add_pp r2.xyz, r3.yxzw, -r0
add_sat r0.w, r0, -r1.x
mad_pp r0.xyz, r0.w, r2, r0
abs r0.w, v5.z
add r1.x, -r0.w, c16.y
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mov_pp r1.zw, c6.xyxy
mad r0.z, r0.w, c16, c16.w
mad r0.z, r0.w, r0, c17.x
rsq r1.x, r1.x
dsy r2.xy, v5
mad_pp r0.xy, r0, c20.y, r1.zwzw
mad r0.z, r0.w, r0, c17.y
rcp r1.x, r1.x
mul r1.x, r0.z, r1
cmp r0.z, v5, c16.x, c16.y
mul r1.y, r0.z, r1.x
mad r1.x, -r1.y, c17.z, r1
mad r0.z, r0, c17.w, r1.x
mul r1.z, r0, c18.x
mul r1.xy, r0, c5.x
dsx r4.w, r1.z
dsy r4.y, r1.z
dsx r1.zw, v5.xyxy
mul r1.zw, r1, r1
add r1.z, r1, r1.w
mul r2.xy, r2, r2
add r1.w, r2.x, r2.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r4.z, r1, c20.x
mul r4.x, r1.w, c20
max r0.z, r3.x, r0.w
rcp r1.w, r0.z
min r0.z, r3.x, r0.w
mul r1.w, r0.z, r1
mul r2.w, r1, r1
mad r3.y, r2.w, c18, c18.z
mad r3.y, r3, r2.w, c18.w
mul r0.xy, r0, c7.x
mad r3.y, r3, r2.w, c19.x
add r0.w, r3.x, -r0
texldd r1.xyz, r1, s1, r4.zwzw, r4
texldd r0.xyz, r0, s2, r4.zwzw, r4
add_pp r2.xyz, r1, -r0
mov r1.xyz, v5
dp3_sat r1.y, v1, -r1
mad r1.x, r3.y, r2.w, c19.y
mad r1.x, r1, r2.w, c19.z
add r1.y, r1, c20.w
mad_sat r1.y, r1, c21.x, c21
mad_pp r0.xyz, r1.y, r2, r0
mul r1.w, r1.x, r1
add r2.x, -r1.w, c19.w
cmp r2.y, -r0.w, r1.w, r2.x
abs r0.w, v5.y
add r2.z, -r2.y, c17.w
add r2.x, -r0.w, c16.y
mad r1.w, r0, c16.z, c16
mad r1.w, r1, r0, c17.x
rsq r2.x, r2.x
cmp r2.y, v5.z, r2, r2.z
add_pp r1.xyz, -r0, c16.y
mad r0.w, r1, r0, c17.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v5.y, c16.x, c16.y
mul r2.x, r0.w, r1.w
mad r1.w, -r2.x, c17.z, r1
mad r0.w, r0, c17, r1
mul r0.w, r0, c18.x
cmp r2.x, v5, r2.y, -r2.y
mul r2.x, r2, c20
mul r1.w, v1, c8.x
mul_sat r1.w, r1, c17.z
mad_pp r0.xyz, r1.w, r1, r0
mul r1.xyz, v0, r0
add r5.x, r2, c20.y
mov r5.y, r0.w
texldd r2.yw, r5, s3, r4.zwzw, r4
add r2.zw, r2.xywy, c21.z
mul r0.xy, r2.zwzw, c21.ywzw
mov r2.y, r0.w
add r0.xy, r2, r0
add_pp r2.xyz, -r1, c15
mad r0.z, r0.x, c23.x, c23.y
mad r0.y, r0, c22.x, c22
frc r0.x, r0.y
frc r0.y, r0.z
mad r0.x, r0, c22.z, c22.w
sincos r3.xy, r0.x
mad r1.w, r0.y, c22.z, c22
sincos r0.xy, r1.w
mov_pp r3.y, r3.x
mov_pp r3.xz, r0.yyxw
dp3_pp_sat r0.w, -r3, -c11
mov r0.xyz, v8
dp3 r3.z, v7, r0
dp3 r0.x, v7, v7
mad r0.x, -r3.z, r3.z, r0
rsq r1.w, r0.x
rcp r2.w, r1.w
dp4 r0.y, c1, c1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c1
dp3_sat r0.y, v4, r0
add_pp r0.z, r0.w, -r0.y
mul r0.x, r2.w, r2.w
mul_sat r1.w, c12.x, c12.x
mad_pp r0.y, r1.w, r0.z, r0
mad r0.x, c13, c13, -r0
rsq r0.x, r0.x
rcp r0.z, r0.x
mov r0.x, c2
add r3.x, c16.y, -r0
texldp r0.x, v3, s6
mad r3.w, r0.x, r3.x, c2.x
rcp r0.w, v2.w
mad r3.xy, v2, r0.w, c20.y
texld r0.w, r3, s4
cmp r3.x, -v2.z, c16, c16.y
dp3 r0.x, v2, v2
mul_pp r0.w, r3.x, r0
texld r0.x, r0.x, s5
mul_pp r0.x, r0.w, r0
mul_pp r0.w, r0.x, r3
add r0.x, r3.z, -r0.z
add r0.z, r0.x, -v1.w
mul_pp r0.y, r0, c3.w
mul_pp r3.x, r0.y, r0.w
add r0.x, -r2.w, c13
cmp r0.y, r3.z, c16, c16.x
cmp r0.x, r0, c16.y, c16
mul r0.x, r0, r0.y
mul r0.w, r0.x, r0.z
mov r0.x, c9
mul_pp_sat r3.y, r3.x, c17.z
add r2.w, -r0, c16.y
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r0.w, c14
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r3.y, c0
mul r0.w, r2, c14.x
mad r0.w, r0, c20.z, r3.x
mad_pp r1.xyz, r0.w, r2, r1
mul_pp r0.xyz, r0, v6.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c10.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c4, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Vector 5 [_DetailOffset]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] 2D
"ps_3_0
; 168 ALU, 13 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c20, 32.00000000, 0.50000000, -0.50000000, 1.00000000
def c21, 0.49999991, 0.50000000, 6.28318501, -3.14159298
def c22, 0.99999982, 0.50000000, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
abs r3.xyz, v4
add r0.xyz, r3, -r3.zxyw
add r0.w, r0.x, c15.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r3.zxyw
add r0.w, r3.y, -r0.x
add r0.w, r0, c15.y
frc r1.w, r0
dsy r2.xy, v4
add_pp r1.xyz, r3.yxzw, -r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r1, r0
abs r0.w, v4.z
add r1.x, -r0.w, c15.y
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mov_pp r1.zw, c5.xyxy
mad r0.z, r0.w, c15, c15.w
mad r0.z, r0.w, r0, c16.x
rsq r1.x, r1.x
mad_pp r0.xy, r0, c19.y, r1.zwzw
mad r0.z, r0.w, r0, c16.y
rcp r1.x, r1.x
mul r1.x, r0.z, r1
cmp r0.z, v4, c15.x, c15.y
mul r1.y, r0.z, r1.x
mad r1.x, -r1.y, c16.z, r1
mad r0.z, r0, c16.w, r1.x
mul r1.z, r0, c17.x
mul r1.xy, r0, c4.x
dsx r4.w, r1.z
dsy r4.y, r1.z
dsx r1.zw, v4.xyxy
mul r1.zw, r1, r1
add r1.z, r1, r1.w
mul r2.xy, r2, r2
add r1.w, r2.x, r2.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r4.z, r1, c19.x
mul r4.x, r1.w, c19
max r0.z, r3.x, r0.w
rcp r1.w, r0.z
min r0.z, r3.x, r0.w
mul r1.w, r0.z, r1
mul r2.w, r1, r1
mad r3.y, r2.w, c17, c17.z
mad r3.y, r3, r2.w, c17.w
mul r0.xy, r0, c6.x
mad r3.y, r3, r2.w, c18.x
texldd r1.xyz, r1, s1, r4.zwzw, r4
texldd r0.xyz, r0, s2, r4.zwzw, r4
add_pp r2.xyz, r1, -r0
mov r1.xyz, v4
dp3_sat r1.y, v1, -r1
mad r1.x, r3.y, r2.w, c18.y
mad r1.x, r1, r2.w, c18.z
add r1.y, r1, c19.w
mad_sat r1.y, r1, c20.x, c20
mad_pp r0.xyz, r1.y, r2, r0
mul r1.w, r1.x, r1
add_pp r1.xyz, -r0, c15.y
add r2.x, -r1.w, c18.w
add r0.w, r3.x, -r0
cmp r0.w, -r0, r1, r2.x
abs r2.x, v4.y
add r1.w, -r0, c16
add r2.z, -r2.x, c15.y
mad r2.y, r2.x, c15.z, c15.w
mad r2.y, r2, r2.x, c16.x
cmp r1.w, v4.z, r0, r1
rsq r2.z, r2.z
mad r2.x, r2.y, r2, c16.y
rcp r2.z, r2.z
mul r2.y, r2.x, r2.z
cmp r2.x, v4.y, c15, c15.y
mul r2.z, r2.x, r2.y
mad r0.w, -r2.z, c16.z, r2.y
mad r0.w, r2.x, c16, r0
mul r0.w, r0, c17.x
cmp r1.w, v4.x, r1, -r1
mul r2.x, r1.w, c19
mul r1.w, v1, c7.x
mul_sat r1.w, r1, c16.z
mad_pp r0.xyz, r1.w, r1, r0
mul r1.xyz, v0, r0
add r5.x, r2, c19.y
mov r5.y, r0.w
texldd r2.yw, r5, s3, r4.zwzw, r4
add r2.zw, r2.xywy, c20.z
mul r0.xy, r2.zwzw, c20.ywzw
mov r2.y, r0.w
add r0.xy, r2, r0
add_pp r2.xyz, -r1, c14
mad r0.z, r0.x, c22.x, c22.y
mad r0.y, r0, c21.x, c21
frc r0.x, r0.y
frc r0.y, r0.z
mad r0.x, r0, c21.z, c21.w
sincos r3.xy, r0.x
mad r1.w, r0.y, c21.z, c21
sincos r0.xy, r1.w
mov_pp r3.y, r3.x
mov_pp r3.xz, r0.yyxw
mov r0.xyz, v7
dp3 r2.w, v6, r0
dp3 r0.x, v6, v6
mad r0.x, -r2.w, r2.w, r0
rsq r1.w, r0.x
dp4_pp r0.y, c1, c1
rsq_pp r0.y, r0.y
mul_pp r0.xyz, r0.y, c1
dp3_pp_sat r0.w, -r3, -c10
dp3_sat r0.y, v3, r0
add_pp r0.z, r0.w, -r0.y
rcp r1.w, r1.w
mul r0.x, r1.w, r1.w
mul_sat r0.w, c11.x, c11.x
mad_pp r0.y, r0.w, r0.z, r0
mad r0.x, c12, c12, -r0
mul_pp r0.z, r0.y, c2.w
rsq r0.x, r0.x
rcp r0.y, r0.x
add r0.y, r2.w, -r0
texldp r0.x, v2, s4
mul_pp r0.x, r0.z, r0
add r0.z, -r1.w, c12.x
mul_pp_sat r3.y, r0.x, c16.z
cmp r1.w, r2, c15.y, c15.x
cmp r0.z, r0, c15.y, c15.x
mul r0.z, r0, r1.w
add r0.y, r0, -v1.w
mul r1.w, r0.z, r0.y
add r2.w, -r1, c15.y
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r1.w, c13
mov r0.x, c8
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r3.y, c0
mul r1.w, r2, c13.x
mad r1.w, r1, c19.z, r3.x
mad_pp r1.xyz, r1.w, r2, r1
mul_pp r0.xyz, r0, v5.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c9.x
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Vector 5 [_DetailOffset]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] 2D
SetTexture 5 [_LightTexture0] 2D
"ps_3_0
; 169 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c20, 32.00000000, 0.50000000, -0.50000000, 1.00000000
def c21, 0.49999991, 0.50000000, 6.28318501, -3.14159298
def c22, 0.99999982, 0.50000000, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r3.xyz, v5
add r0.xyz, r3, -r3.zxyw
add r0.w, r0.x, c15.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r3.zxyw
add r0.w, r3.y, -r0.x
add r0.w, r0, c15.y
frc r1.w, r0
dsy r2.xy, v5
add_pp r1.xyz, r3.yxzw, -r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r1, r0
abs r0.w, v5.z
add r1.x, -r0.w, c15.y
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mov_pp r1.zw, c5.xyxy
mad r0.z, r0.w, c15, c15.w
mad r0.z, r0.w, r0, c16.x
rsq r1.x, r1.x
mad_pp r0.xy, r0, c19.y, r1.zwzw
mad r0.z, r0.w, r0, c16.y
rcp r1.x, r1.x
mul r1.x, r0.z, r1
cmp r0.z, v5, c15.x, c15.y
mul r1.y, r0.z, r1.x
mad r1.x, -r1.y, c16.z, r1
mad r0.z, r0, c16.w, r1.x
mul r1.z, r0, c17.x
mul r1.xy, r0, c4.x
dsx r4.w, r1.z
dsy r4.y, r1.z
dsx r1.zw, v5.xyxy
mul r1.zw, r1, r1
add r1.z, r1, r1.w
mul r2.xy, r2, r2
add r1.w, r2.x, r2.y
rsq r1.z, r1.z
rcp r1.z, r1.z
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r4.z, r1, c19.x
mul r4.x, r1.w, c19
max r0.z, r3.x, r0.w
rcp r1.w, r0.z
min r0.z, r3.x, r0.w
mul r1.w, r0.z, r1
mul r2.w, r1, r1
mad r3.y, r2.w, c17, c17.z
mad r3.y, r3, r2.w, c17.w
mul r0.xy, r0, c6.x
mad r3.y, r3, r2.w, c18.x
texldd r1.xyz, r1, s1, r4.zwzw, r4
texldd r0.xyz, r0, s2, r4.zwzw, r4
add_pp r2.xyz, r1, -r0
mov r1.xyz, v5
dp3_sat r1.y, v1, -r1
mad r1.x, r3.y, r2.w, c18.y
mad r1.x, r1, r2.w, c18.z
add r1.y, r1, c19.w
mad_sat r1.y, r1, c20.x, c20
mad_pp r0.xyz, r1.y, r2, r0
mul r1.w, r1.x, r1
add_pp r1.xyz, -r0, c15.y
add r2.x, -r1.w, c18.w
add r0.w, r3.x, -r0
cmp r0.w, -r0, r1, r2.x
abs r2.x, v5.y
add r1.w, -r0, c16
add r2.z, -r2.x, c15.y
mad r2.y, r2.x, c15.z, c15.w
mad r2.y, r2, r2.x, c16.x
cmp r1.w, v5.z, r0, r1
rsq r2.z, r2.z
mad r2.x, r2.y, r2, c16.y
rcp r2.z, r2.z
mul r2.y, r2.x, r2.z
cmp r2.x, v5.y, c15, c15.y
mul r2.z, r2.x, r2.y
mad r0.w, -r2.z, c16.z, r2.y
mad r0.w, r2.x, c16, r0
mul r0.w, r0, c17.x
cmp r1.w, v5.x, r1, -r1
mul r2.x, r1.w, c19
mul r1.w, v1, c7.x
mul_sat r1.w, r1, c16.z
mad_pp r0.xyz, r1.w, r1, r0
mul r1.xyz, v0, r0
add r5.x, r2, c19.y
mov r5.y, r0.w
texldd r2.yw, r5, s3, r4.zwzw, r4
add r2.zw, r2.xywy, c20.z
mul r0.xy, r2.zwzw, c20.ywzw
mov r2.y, r0.w
add r0.xy, r2, r0
add_pp r2.xyz, -r1, c14
mad r0.z, r0.x, c22.x, c22.y
mad r0.y, r0, c21.x, c21
frc r0.x, r0.y
frc r0.y, r0.z
mad r0.x, r0, c21.z, c21.w
sincos r3.xy, r0.x
mad r1.w, r0.y, c21.z, c21
sincos r0.xy, r1.w
mov_pp r3.y, r3.x
mov_pp r3.xz, r0.yyxw
dp3_pp_sat r0.w, -r3, -c10
mov r0.xyz, v8
dp3 r3.x, v7, r0
dp3 r0.x, v7, v7
mad r0.x, -r3, r3, r0
rsq r1.w, r0.x
rcp r2.w, r1.w
dp4_pp r0.y, c1, c1
rsq_pp r0.y, r0.y
mul_pp r0.xyz, r0.y, c1
dp3_sat r0.y, v4, r0
add_pp r0.z, r0.w, -r0.y
mul r0.x, r2.w, r2.w
mul_sat r1.w, c11.x, c11.x
mad_pp r0.y, r1.w, r0.z, r0
mad r0.x, c12, c12, -r0
rsq r0.x, r0.x
rcp r0.z, r0.x
add r0.z, r3.x, -r0
mul_pp r0.y, r0, c2.w
texld r0.w, v2, s5
texldp r0.x, v3, s4
mul r0.x, r0.w, r0
mul_pp r0.x, r0.y, r0
add r0.y, r0.z, -v1.w
mul_pp_sat r3.y, r0.x, c16.z
add r0.z, -r2.w, c12.x
cmp r0.w, r3.x, c15.y, c15.x
cmp r0.z, r0, c15.y, c15.x
mul r0.z, r0, r0.w
mul r0.w, r0.z, r0.y
add r2.w, -r0, c15.y
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r0.w, c13
mov r0.x, c8
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r3.y, c0
mul r0.w, r2, c13.x
mad r0.w, r0, c19.z, r3.x
mad_pp r1.xyz, r0.w, r2, r1
mul_pp r0.xyz, r0, v6.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c9.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Vector 7 [_DetailOffset]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Vector 12 [_SunDir]
Float 13 [_PlanetOpacity]
Float 14 [_OceanRadius]
Float 15 [_OceanDepthFactor]
Vector 16 [_OceanColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] CUBE
SetTexture 5 [_LightTexture0] 2D
"ps_3_0
; 178 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
dcl_2d s5
def c17, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c22, 32.00000000, 0.50000000, -0.50000000, 1.00000000
def c23, 0.49999991, 0.50000000, 6.28318501, -3.14159298
def c24, 0.99999982, 0.50000000, 0.97000003, 0
def c25, 1.00000000, 0.00392157, 0.00001538, 0.00000001
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r2.xyz, v5
add r0.xyz, r2, -r2.zxyw
add r0.w, r0.x, c17.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r2.zxyw
add r0.w, r2.y, -r0.x
add_pp r3.xyz, r2.yxzw, -r0
abs r2.y, v5.z
add r0.w, r0, c17.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad_pp r0.xyz, r0.w, r3, r0
add r1.w, -r2.y, c17.y
mad r1.z, r2.y, c17, c17.w
mad r1.z, r2.y, r1, c18.x
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.zw, r0.xyzy, r0.x
max r0.y, r2.x, r2
rsq r1.w, r1.w
min r0.x, r2, r2.y
rcp r0.y, r0.y
mul r2.z, r0.x, r0.y
mov_pp r1.xy, c7
mad_pp r0.xy, r0.zwzw, c21.y, r1
mul r1.x, r2.z, r2.z
mul r0.zw, r0.xyxy, c6.x
mad r1.y, r1.x, c19, c19.z
mad r1.y, r1, r1.x, c19.w
mad r1.y, r1, r1.x, c20.x
mad r1.z, r2.y, r1, c18.y
rcp r1.w, r1.w
mul r1.w, r1.z, r1
cmp r1.z, v5, c17.x, c17.y
mul r2.w, r1.z, r1
mad r1.w, -r2, c18.z, r1
mad r1.z, r1, c18.w, r1.w
mul r1.z, r1, c19.x
mad r1.y, r1, r1.x, c20
mad r2.w, r1.y, r1.x, c20.z
dsy r1.xy, v5
mul r1.xy, r1, r1
add r1.y, r1.x, r1
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r4.w, r1.z
dsy r4.y, r1.z
dsx r1.zw, v5.xyxy
mul r1.zw, r1, r1
add r1.z, r1, r1.w
rsq r1.x, r1.z
rcp r1.x, r1.x
mul r4.z, r1.x, c21.x
mul r4.x, r1.y, c21
texldd r1.xyz, r0.zwzw, s1, r4.zwzw, r4
mul r0.w, r2, r2.z
add r0.z, r2.x, -r2.y
add r1.w, -r0, c20
cmp r0.w, -r0.z, r0, r1
add r1.w, -r0, c18
cmp r1.w, v5.z, r0, r1
abs r0.w, v5.y
cmp r2.y, v5.x, r1.w, -r1.w
mul r3.x, r2.y, c21
add r2.x, -r0.w, c17.y
mad r1.w, r0, c17.z, c17
mad r1.w, r1, r0, c18.x
mul r0.xy, r0, c8.x
texldd r0.xyz, r0, s2, r4.zwzw, r4
rsq r2.x, r2.x
add_pp r1.xyz, r1, -r0
mad r0.w, r1, r0, c18.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v5.y, c17.x, c17.y
mul r2.x, r0.w, r1.w
mad r1.w, -r2.x, c18.z, r1
mad r0.w, r0, c18, r1
mul r0.w, r0, c19.x
mov r2.xyz, v5
dp3_sat r1.w, v1, -r2
add r1.w, r1, c21
mad_sat r1.w, r1, c22.x, c22.y
mad_pp r0.xyz, r1.w, r1, r0
add r5.x, r3, c21.y
mov r5.y, r0.w
mov r3.y, r0.w
texldd r2.yw, r5, s3, r4.zwzw, r4
add r2.xy, r2.wyzw, c22.z
mul r1.xy, r2, c22.ywzw
add r2.xy, r3, r1
mad r1.w, r2.y, c23.x, c23.y
mul r0.w, v1, c9.x
frc r1.w, r1
add_pp r1.xyz, -r0, c17.y
mul_sat r0.w, r0, c18.z
mad_pp r0.xyz, r0.w, r1, r0
mul r1.xyz, v0, r0
mad r1.w, r1, c23.z, c23
sincos r0.xy, r1.w
mad r0.y, r2.x, c24.x, c24
frc r0.y, r0
mov_pp r3.y, r0.x
mad r1.w, r0.y, c23.z, c23
sincos r0.xy, r1.w
dp4 r2.x, c1, c1
rsq r0.z, r2.x
mov_pp r3.xz, r0.yyxw
mul r2.xyz, r0.z, c1
dp3_sat r0.y, v4, r2
dp3_pp_sat r0.x, -r3, -c12
mov r3.xyz, v8
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c13.x, c13.x
mad_pp r0.x, r1.w, r0, r0.y
mul_pp r2.w, r0.x, c4
texld r0, v3, s4
dp4 r0.x, r0, c25
dp3 r0.y, v7, r3
dp3 r0.z, v7, v7
mad r0.z, -r0.y, r0.y, r0
dp3 r0.w, v3, v3
rsq r0.w, r0.w
rsq r0.z, r0.z
rcp r0.w, r0.w
mul r0.w, r0, c2
mad r0.w, -r0, c24.z, r0.x
rcp r0.z, r0.z
mul r0.x, r0.z, r0.z
mov r3.x, c3
add_pp r2.xyz, -r1, c16
mad r0.x, c14, c14, -r0
cmp r3.x, r0.w, c17.y, r3
rsq r0.w, r0.x
dp3 r0.x, v2, v2
texld r0.x, r0.x, s5
mul r3.x, r0, r3
mul_pp r2.w, r2, r3.x
rcp r0.w, r0.w
add r0.x, r0.y, -r0.w
add r0.w, r0.x, -v1
add r0.x, -r0.z, c14
mul_pp_sat r3.y, r2.w, c18.z
cmp r0.y, r0, c17, c17.x
cmp r0.x, r0, c17.y, c17
mul r0.x, r0, r0.y
mul r0.w, r0.x, r0
add r2.w, -r0, c17.y
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r0.w, c15
mov r0.x, c10
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r3.y, c0
mul r0.w, r2, c15.x
mad r0.w, r0, c21.z, r3.x
mad_pp r1.xyz, r0.w, r2, r1
mul_pp r0.xyz, r0, v6.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c11.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c5, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c17.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Vector 7 [_DetailOffset]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Vector 12 [_SunDir]
Float 13 [_PlanetOpacity]
Float 14 [_OceanRadius]
Float 15 [_OceanDepthFactor]
Vector 16 [_OceanColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] CUBE
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_LightTexture0] CUBE
"ps_3_0
; 179 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
dcl_2d s5
dcl_cube s6
def c17, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c22, 32.00000000, 0.50000000, -0.50000000, 1.00000000
def c23, 0.49999991, 0.50000000, 6.28318501, -3.14159298
def c24, 0.99999982, 0.50000000, 0.97000003, 0
def c25, 1.00000000, 0.00392157, 0.00001538, 0.00000001
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r2.xyz, v5
add r0.xyz, r2, -r2.zxyw
add r0.w, r0.x, c17.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r2.zxyw
add r0.w, r2.y, -r0.x
add_pp r1.xyz, r2.yxzw, -r0
abs r2.y, v5.z
add r0.w, r0, c17.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r1, r0
abs_pp r0.x, r0
rcp_pp r0.w, r0.x
add r2.z, -r2.y, c17.y
mad r1.w, r2.y, c17.z, c17
mad r1.w, r2.y, r1, c18.x
rsq r2.z, r2.z
max r0.x, r2, r2.y
mul_pp r0.zw, r0.xyzy, r0.w
rcp r0.y, r0.x
min r0.x, r2, r2.y
mul r1.x, r0, r0.y
mul r1.y, r1.x, r1.x
mad r1.z, r1.y, c19.y, c19
mad r1.z, r1, r1.y, c19.w
mad r1.z, r1, r1.y, c20.x
mad r1.z, r1, r1.y, c20.y
mov_pp r0.xy, c7
mad_pp r0.xy, r0.zwzw, c21.y, r0
mul r0.zw, r0.xyxy, c6.x
mad r1.w, r2.y, r1, c18.y
rcp r2.z, r2.z
mul r2.z, r1.w, r2
cmp r1.w, v5.z, c17.x, c17.y
mul r2.w, r1, r2.z
mad r2.z, -r2.w, c18, r2
mad r1.w, r1, c18, r2.z
mad r1.y, r1.z, r1, c20.z
mul r1.z, r1.w, c19.x
mul r2.z, r1.y, r1.x
dsy r1.xy, v5
mul r1.xy, r1, r1
add r1.y, r1.x, r1
rsq r1.y, r1.y
rcp r1.y, r1.y
dsy r3.y, r1.z
dsx r3.w, r1.z
dsx r1.zw, v5.xyxy
mul r1.zw, r1, r1
add r1.z, r1, r1.w
rsq r1.x, r1.z
rcp r1.x, r1.x
mul r3.z, r1.x, c21.x
mul r3.x, r1.y, c21
texldd r1.xyz, r0.zwzw, s1, r3.zwzw, r3
add r0.z, r2.x, -r2.y
add r0.w, -r2.z, c20
cmp r0.w, -r0.z, r2.z, r0
add r1.w, -r0, c18
cmp r0.w, v5.z, r0, r1
cmp r1.w, v5.x, r0, -r0
abs r0.w, v5.y
mul r4.z, r1.w, c21.x
add r2.x, -r0.w, c17.y
mad r1.w, r0, c17.z, c17
mad r1.w, r1, r0, c18.x
mul r0.xy, r0, c8.x
texldd r0.xyz, r0, s2, r3.zwzw, r3
rsq r2.x, r2.x
add_pp r1.xyz, r1, -r0
mad r0.w, r1, r0, c18.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v5.y, c17.x, c17.y
mul r2.x, r0.w, r1.w
mad r1.w, -r2.x, c18.z, r1
mad r0.w, r0, c18, r1
mul r0.w, r0, c19.x
mov r2.xyz, v5
dp3_sat r1.w, v1, -r2
add r1.w, r1, c21
mad_sat r1.w, r1, c22.x, c22.y
mad_pp r0.xyz, r1.w, r1, r0
add r4.x, r4.z, c21.y
mov r4.y, r0.w
texldd r2.yw, r4, s3, r3.zwzw, r3
add r2.xy, r2.wyzw, c22.z
mov r4.w, r0
mul r2.xy, r2, c22.ywzw
add r4.zw, r4, r2.xyxy
mad r1.w, r4, c23.x, c23.y
mul r0.w, v1, c9.x
add_pp r1.xyz, -r0, c17.y
mul_sat r0.w, r0, c18.z
mad_pp r0.xyz, r0.w, r1, r0
frc r0.w, r1
mul r1.xyz, v0, r0
mad r1.w, r0, c23.z, c23
sincos r0.xy, r1.w
mad r0.y, r4.z, c24.x, c24
frc r0.y, r0
add_pp r2.xyz, -r1, c16
mad r1.w, r0.y, c23.z, c23
mov_pp r6.y, r0.x
sincos r0.xy, r1.w
dp4 r2.w, c1, c1
rsq r0.z, r2.w
mov_pp r6.xz, r0.yyxw
mul r5.xyz, r0.z, c1
dp3_sat r0.y, v4, r5
dp3_pp_sat r0.x, -r6, -c12
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c13.x, c13.x
mad_pp r2.w, r1, r0.x, r0.y
texld r0, v3, s4
dp4 r0.w, r0, c25
mov r0.xyz, v8
dp3 r4.z, v7, r0
dp3 r4.w, v7, v7
mad r0.x, -r4.z, r4.z, r4.w
rsq r0.x, r0.x
rcp r0.z, r0.x
mul r0.x, r0.z, r0.z
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0, c2.w
mad r0.y, -r0, c24.z, r0.w
mov r0.w, c3.x
cmp r4.w, r0.y, c17.y, r0
mad r0.x, c14, c14, -r0
rsq r0.x, r0.x
rcp r0.y, r0.x
add r0.y, r4.z, -r0
dp3 r0.x, v2, v2
add r0.z, -r0, c14.x
mul_pp r2.w, r2, c4
texld r0.w, v2, s6
texld r0.x, r0.x, s5
mul r0.x, r0, r0.w
mul r0.x, r0, r4.w
mul_pp r0.x, r2.w, r0
mul_pp_sat r4.w, r0.x, c18.z
cmp r0.w, r4.z, c17.y, c17.x
cmp r0.z, r0, c17.y, c17.x
mul r0.z, r0, r0.w
add r0.y, r0, -v1.w
mul r0.w, r0.z, r0.y
add r2.w, -r0, c17.y
frc r4.z, r2.w
add_sat r2.w, r2, -r4.z
mul_sat r4.z, -r0.w, c15.x
mov r0.x, c10
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r4.w, c0
mul r0.w, r2, c15.x
mad r0.w, r0, c21.z, r4.z
mad_pp r1.xyz, r0.w, r2, r1
texldd r2.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, v6.x
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c11.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c5, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c17.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Vector 10 [_DetailOffset]
Float 11 [_DetailVertScale]
Float 12 [_DetailDist]
Float 13 [_MinLight]
Float 14 [_Albedo]
Vector 15 [_SunDir]
Float 16 [_PlanetOpacity]
Float 17 [_OceanRadius]
Float 18 [_OceanDepthFactor]
Vector 19 [_OceanColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 187 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c20, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c21, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c22, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c23, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c24, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c25, 32.00000000, 0.50000000, -0.50000000, 1.00000000
def c26, 0.49999991, 0.50000000, 6.28318501, -3.14159298
def c27, 0.99999982, 0.50000000, 0.25000000, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r2.xyz, v5
add r0.xyz, r2, -r2.zxyw
add r0.w, r0.x, c20.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r2.zxyw
add r0.w, r2.y, -r0.x
add_pp r3.xyz, r2.yxzw, -r0
abs r2.y, v5.z
add r0.w, r0, c20.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad_pp r0.xyz, r0.w, r3, r0
add r1.w, -r2.y, c20.y
mad r1.z, r2.y, c20, c20.w
mad r1.z, r2.y, r1, c21.x
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.zw, r0.xyzy, r0.x
max r0.y, r2.x, r2
rsq r1.w, r1.w
min r0.x, r2, r2.y
rcp r0.y, r0.y
mul r2.z, r0.x, r0.y
mov_pp r1.xy, c10
mad_pp r0.xy, r0.zwzw, c24.y, r1
mul r1.x, r2.z, r2.z
mul r0.zw, r0.xyxy, c9.x
mad r1.y, r1.x, c22, c22.z
mad r1.y, r1, r1.x, c22.w
mad r1.y, r1, r1.x, c23.x
mad r1.z, r2.y, r1, c21.y
rcp r1.w, r1.w
mul r1.w, r1.z, r1
cmp r1.z, v5, c20.x, c20.y
mul r2.w, r1.z, r1
mad r1.w, -r2, c21.z, r1
mad r1.z, r1, c21.w, r1.w
mul r1.z, r1, c22.x
mad r1.y, r1, r1.x, c23
mad r2.w, r1.y, r1.x, c23.z
dsy r1.xy, v5
mul r1.xy, r1, r1
add r1.y, r1.x, r1
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r4.w, r1.z
dsy r4.y, r1.z
dsx r1.zw, v5.xyxy
mul r1.zw, r1, r1
add r1.z, r1, r1.w
rsq r1.x, r1.z
rcp r1.x, r1.x
mul r4.z, r1.x, c24.x
mul r4.x, r1.y, c24
texldd r1.xyz, r0.zwzw, s1, r4.zwzw, r4
mul r0.w, r2, r2.z
add r0.z, r2.x, -r2.y
add r1.w, -r0, c23
cmp r0.w, -r0.z, r0, r1
add r1.w, -r0, c21
cmp r1.w, v5.z, r0, r1
abs r0.w, v5.y
cmp r2.y, v5.x, r1.w, -r1.w
mul r3.x, r2.y, c24
add r2.x, -r0.w, c20.y
mad r1.w, r0, c20.z, c20
mad r1.w, r1, r0, c21.x
mul r0.xy, r0, c11.x
texldd r0.xyz, r0, s2, r4.zwzw, r4
rsq r2.x, r2.x
add_pp r1.xyz, r1, -r0
mad r0.w, r1, r0, c21.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v5.y, c20.x, c20.y
mul r2.x, r0.w, r1.w
mad r1.w, -r2.x, c21.z, r1
mad r0.w, r0, c21, r1
mul r0.w, r0, c22.x
mov r2.xyz, v5
dp3_sat r1.w, v1, -r2
add r1.w, r1, c24
mad_sat r1.w, r1, c25.x, c25.y
mad_pp r0.xyz, r1.w, r1, r0
add r5.x, r3, c24.y
mov r5.y, r0.w
texldd r2.yw, r5, s3, r4.zwzw, r4
add r2.xy, r2.wyzw, c25.z
mov r3.y, r0.w
mul r1.xy, r2, c25.ywzw
add r3.xy, r3, r1
mad r1.w, r3.y, c26.x, c26.y
mul r0.w, v1, c12.x
add_pp r1.xyz, -r0, c20.y
mul_sat r0.w, r0, c21.z
mad_pp r0.xyz, r0.w, r1, r0
frc r1.w, r1
mul r2.xyz, v0, r0
mad r1.x, r1.w, c26.z, c26.w
sincos r0.xy, r1.x
mad r0.y, r3.x, c27.x, c27
frc r0.y, r0
mov_pp r3.y, r0.x
mad r1.x, r0.y, c26.z, c26.w
sincos r0.xy, r1.x
dp4 r1.y, c1, c1
rsq r0.z, r1.y
mov_pp r3.xz, r0.yyxw
mul r1.xyz, r0.z, c1
dp3_pp_sat r0.x, -r3, -c15
dp3_sat r0.y, v4, r1
add_pp r0.x, r0, -r0.y
mul_sat r2.w, c16.x, c16.x
mad_pp r0.x, r2.w, r0, r0.y
mul_pp r3.w, r0.x, c7
mov r0.xyz, v8
dp3 r5.z, v7, r0
rcp r0.z, v3.w
mad r1.xy, v3, r0.z, c5
dp3 r0.w, v7, v7
mad r0.x, -r5.z, r5.z, r0.w
rsq r5.w, r0.x
mad r0.xy, v3, r0.z, c6
texld r0.x, r0, s6
texld r1.x, r1, s6
mov r1.z, r1.x
mad r1.xy, v3, r0.z, c3
mov r1.w, r0.x
mad r0.xy, v3, r0.z, c4
add_pp r3.xyz, -r2, c19
texld r1.x, r1, s6
texld r0.x, r0, s6
mov r1.y, r0.x
mad r0, -v3.z, r0.z, r1
rcp r1.z, r5.w
mov r1.y, c2.x
cmp r0, r0, c20.y, r1.y
dp4_pp r0.y, r0, c27.z
mul r1.x, r1.z, r1.z
mad r1.x, c17, c17, -r1
rsq r0.x, r1.x
rcp r0.z, r0.x
rcp r0.w, v2.w
mad r1.xy, v2, r0.w, c24.y
texld r0.w, r1, s4
cmp r1.x, -v2.z, c20, c20.y
dp3 r0.x, v2, v2
mul_pp r0.w, r1.x, r0
texld r0.x, r0.x, s5
mul_pp r0.x, r0.w, r0
mul_pp r0.y, r0.x, r0
add r0.x, r5.z, -r0.z
mul_pp r1.x, r3.w, r0.y
add r0.z, r0.x, -v1.w
add r0.x, -r1.z, c17
mul_pp_sat r1.z, r1.x, c21
cmp r0.y, r5.z, c20, c20.x
cmp r0.x, r0, c20.y, c20
mul r0.x, r0, r0.y
mul r0.w, r0.x, r0.z
add r1.x, -r0.w, c20.y
frc r1.y, r1.x
add_sat r1.x, r1, -r1.y
mul_sat r1.y, -r0.w, c18.x
mul r0.w, r1.x, c18.x
mov r0.x, c13
add r0.xyz, c7, r0.x
mad_sat r0.xyz, r0, r1.z, c0
mad r0.w, r0, c24.z, r1.y
mad_pp r1.xyz, r0.w, r3, r2
mul_pp r0.xyz, r0, v6.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c14.x
mad_pp r1.xyz, r2.w, r2, r1
mad_pp r1.xyz, r1, c8, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c20.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Vector 10 [_DetailOffset]
Float 11 [_DetailVertScale]
Float 12 [_DetailDist]
Float 13 [_MinLight]
Float 14 [_Albedo]
Vector 15 [_SunDir]
Float 16 [_PlanetOpacity]
Float 17 [_OceanRadius]
Float 18 [_OceanDepthFactor]
Vector 19 [_OceanColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 187 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c20, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c21, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c22, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c23, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c24, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c25, 32.00000000, 0.50000000, -0.50000000, 1.00000000
def c26, 0.49999991, 0.50000000, 6.28318501, -3.14159298
def c27, 0.99999982, 0.50000000, 0.25000000, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r1.xyz, v5
add r0.xyz, r1, -r1.zxyw
add r0.w, r0.x, c20.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r0.xyz, r0.w, r0, r1.zxyw
add r0.w, r1.y, -r0.x
add_pp r2.xyz, r1.yxzw, -r0
add r0.w, r0, c20.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r2, r0
abs r1.y, v5.z
add r2.y, -r1, c20
mad r2.x, r1.y, c20.z, c20.w
mad r2.x, r1.y, r2, c21
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.zw, r0.xyzy, r0.x
max r0.y, r1.x, r1
rsq r2.y, r2.y
dsx r3.xy, v5
min r0.x, r1, r1.y
rcp r0.y, r0.y
mul r2.w, r0.x, r0.y
mov_pp r1.zw, c10.xyxy
mad_pp r0.xy, r0.zwzw, c24.y, r1.zwzw
mul r1.z, r2.w, r2.w
mad r1.w, r1.z, c22.y, c22.z
mad r1.w, r1, r1.z, c22
mad r1.w, r1, r1.z, c23.x
mad r1.w, r1, r1.z, c23.y
mul r0.zw, r0.xyxy, c9.x
mad r3.z, r1.w, r1, c23
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
mul r3.xy, r0, c11.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r4.x, r1.z, c24
add r0.x, r1, -r1.y
rcp r6.y, v3.w
mad r2.x, r1.y, r2, c21.y
rcp r2.y, r2.y
mul r2.y, r2.x, r2
cmp r2.x, v5.z, c20, c20.y
mul r2.z, r2.x, r2.y
mad r2.y, -r2.z, c21.z, r2
mad r2.x, r2, c21.w, r2.y
mul r2.x, r2, c22
dsx r4.y, r2.x
dsy r1.w, r2.x
dsy r2.xy, v5
mul r2.xy, r2, r2
add r2.x, r2, r2.y
rsq r2.x, r2.x
rcp r2.x, r2.x
mul r1.z, r2.x, c24.x
texldd r2.xyz, r0.zwzw, s1, r4, r1.zwzw
mul r0.z, r3, r2.w
add r0.y, -r0.z, c23.w
cmp r0.w, -r0.x, r0.z, r0.y
texldd r0.xyz, r3, s2, r4, r1.zwzw
add r1.x, -r0.w, c21.w
cmp r1.x, v5.z, r0.w, r1
abs r0.w, v5.y
cmp r2.w, v5.x, r1.x, -r1.x
mul r5.x, r2.w, c24
add r1.y, -r0.w, c20
mad r1.x, r0.w, c20.z, c20.w
mad r1.x, r1, r0.w, c21
rsq r1.y, r1.y
add_pp r2.xyz, r2, -r0
add r4.z, r5.x, c24.y
mad r0.w, r1.x, r0, c21.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v5.y, c20.x, c20.y
mul r1.y, r0.w, r1.x
mad r1.x, -r1.y, c21.z, r1
mad r0.w, r0, c21, r1.x
mul r0.w, r0, c22.x
mov r3.xyz, v5
dp3_sat r1.x, v1, -r3
mov r4.w, r0
mov r5.y, r0.w
add r2.w, r1.x, c24
texldd r3.yw, r4.zwzw, s3, r4, r1.zwzw
mad_sat r2.w, r2, c25.x, c25.y
mul r0.w, v1, c12.x
mad_pp r2.xyz, r2.w, r2, r0
add r1.xy, r3.wyzw, c25.z
mul r0.xy, r1, c25.ywzw
add r1.xy, r5, r0
mad r1.y, r1, c26.x, c26
frc r1.y, r1
add_pp r0.xyz, -r2, c20.y
mul_sat r0.w, r0, c21.z
mad_pp r0.xyz, r0.w, r0, r2
mul r2.xyz, v0, r0
mad r1.y, r1, c26.z, c26.w
sincos r0.xy, r1.y
mad r0.y, r1.x, c27.x, c27
frc r0.y, r0
mov_pp r5.y, r0.x
mad r1.x, r0.y, c26.z, c26.w
sincos r0.xy, r1.x
dp4 r1.y, c1, c1
rsq r0.z, r1.y
mov_pp r5.xz, r0.yyxw
mul r3.xyz, r0.z, c1
dp3_sat r0.y, v4, r3
dp3_pp_sat r0.x, -r5, -c15
mad r5.xyz, v3, r6.y, c4
texld r1.x, r5, s6
add_pp r0.x, r0, -r0.y
mul_sat r1.y, c16.x, c16.x
mad_pp r0.x, r1.y, r0, r0.y
mul_pp r2.w, r0.x, c7
mov r0.xyz, v8
dp3 r3.w, v7, r0
dp3 r0.w, v7, v7
mad r0.x, -r3.w, r3.w, r0.w
rsq r0.w, r0.x
rcp r5.w, r0.w
mad r0.xyz, v3, r6.y, c6
texld r0.x, r0, s6
mov_pp r0.w, r0.x
mad r0.xyz, v3, r6.y, c5
texld r0.x, r0, s6
mov_pp r0.z, r0.x
add_pp r3.xyz, -r2, c19
mov_pp r0.y, r1.x
mov r0.x, c2
add r1.x, c20.y, -r0
mad r5.xyz, v3, r6.y, c3
texld r0.x, r5, s6
mad r0, r0, r1.x, c2.x
dp4_pp r0.y, r0, c27.z
rcp r0.w, v2.w
mul r6.x, r5.w, r5.w
mad r1.x, c17, c17, -r6
rsq r0.x, r1.x
rcp r0.z, r0.x
mad r5.xy, v2, r0.w, c24.y
dp3 r0.x, v2, v2
cmp r1.x, -v2.z, c20, c20.y
texld r0.w, r5, s4
mul_pp r0.w, r1.x, r0
texld r0.x, r0.x, s5
mul_pp r0.x, r0.w, r0
mul_pp r0.y, r0.x, r0
add r0.x, r3.w, -r0.z
mul_pp r1.x, r2.w, r0.y
add r0.z, r0.x, -v1.w
cmp r0.y, r3.w, c20, c20.x
add r0.x, -r5.w, c17
cmp r0.x, r0, c20.y, c20
mul r0.x, r0, r0.y
mul r0.w, r0.x, r0.z
mul_pp_sat r3.w, r1.x, c21.z
add r1.x, -r0.w, c20.y
frc r2.w, r1.x
add_sat r1.x, r1, -r2.w
mul_sat r2.w, -r0, c18.x
mul r0.w, r1.x, c18.x
mov r0.x, c13
add r0.xyz, c7, r0.x
mad_sat r0.xyz, r0, r3.w, c0
mad r0.w, r0, c24.z, r2
mad_pp r2.xyz, r0.w, r3, r2
texldd r3.xyz, r4.zwzw, s0, r4, r1.zwzw
mul_pp r0.xyz, r0, v6.x
add_pp r3.xyz, r3, -r2
mul r4.xyz, r0, c14.x
mad_pp r1.xyz, r1.y, r3, r2
mad_pp r1.xyz, r1, c8, r4
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c20.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Vector 7 [_DetailOffset]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Vector 12 [_SunDir]
Float 13 [_PlanetOpacity]
Float 14 [_OceanRadius]
Float 15 [_OceanDepthFactor]
Vector 16 [_OceanColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] CUBE
SetTexture 5 [_LightTexture0] 2D
"ps_3_0
; 186 ALU, 17 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
dcl_2d s5
def c17, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c22, 32.00000000, 0.50000000, -0.50000000, 1.00000000
def c23, 0.49999991, 0.50000000, 6.28318501, -3.14159298
def c24, 0.99999982, 0.50000000, 0.00781250, -0.00781250
def c25, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c26, 0.97000003, 0.25000000, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r2.xyz, v5
add r0.xyz, r2, -r2.zxyw
add r0.w, r0.x, c17.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r2.zxyw
add r0.w, r2.y, -r0.x
add r0.w, r0, c17.y
frc r1.x, r0.w
add_pp r3.xyz, r2.yxzw, -r0
abs r1.w, v5.z
add_sat r0.w, r0, -r1.x
mad_pp r0.xyz, r0.w, r3, r0
abs_pp r0.x, r0
rcp_pp r0.w, r0.x
add r2.z, -r1.w, c17.y
mad r2.y, r1.w, c17.z, c17.w
mad r2.y, r1.w, r2, c18.x
rsq r2.z, r2.z
max r0.x, r2, r1.w
mul_pp r0.zw, r0.xyzy, r0.w
rcp r0.y, r0.x
min r0.x, r2, r1.w
mul r1.x, r0, r0.y
mul r1.y, r1.x, r1.x
mad r1.z, r1.y, c19.y, c19
mad r1.z, r1, r1.y, c19.w
mad r1.z, r1, r1.y, c20.x
mad r1.z, r1, r1.y, c20.y
mov_pp r0.xy, c7
mad_pp r0.xy, r0.zwzw, c21.y, r0
mul r0.zw, r0.xyxy, c6.x
mad r2.y, r1.w, r2, c18
rcp r2.z, r2.z
mul r2.z, r2.y, r2
cmp r2.y, v5.z, c17.x, c17
mul r2.w, r2.y, r2.z
mad r2.z, -r2.w, c18, r2
mad r2.y, r2, c18.w, r2.z
mad r1.y, r1.z, r1, c20.z
mul r1.z, r2.y, c19.x
mul r2.y, r1, r1.x
dsx r1.xy, v5
mul r1.xy, r1, r1
add r1.x, r1, r1.y
dsy r2.zw, v5.xyxy
mul r2.zw, r2, r2
add r1.y, r2.z, r2.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r5.w, r1.z
dsy r5.y, r1.z
mul r5.z, r1.x, c21.x
mul r5.x, r1.y, c21
texldd r1.xyz, r0.zwzw, s1, r5.zwzw, r5
add r0.z, r2.x, -r1.w
add r0.w, -r2.y, c20
cmp r0.w, -r0.z, r2.y, r0
add r1.w, -r0, c18
cmp r0.w, v5.z, r0, r1
cmp r1.w, v5.x, r0, -r0
abs r0.w, v5.y
mul r3.x, r1.w, c21
add r2.x, -r0.w, c17.y
mad r1.w, r0, c17.z, c17
mad r1.w, r1, r0, c18.x
mul r0.xy, r0, c8.x
texldd r0.xyz, r0, s2, r5.zwzw, r5
rsq r2.x, r2.x
add_pp r1.xyz, r1, -r0
mad r0.w, r1, r0, c18.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v5.y, c17.x, c17.y
mul r2.x, r0.w, r1.w
mad r1.w, -r2.x, c18.z, r1
mad r0.w, r0, c18, r1
mul r0.w, r0, c19.x
mov r2.xyz, v5
dp3_sat r1.w, v1, -r2
add r1.w, r1, c21
mad_sat r1.w, r1, c22.x, c22.y
mad_pp r0.xyz, r1.w, r1, r0
add r6.x, r3, c21.y
mov r6.y, r0.w
texldd r2.yw, r6, s3, r5.zwzw, r5
add r2.xy, r2.wyzw, c22.z
mov r3.y, r0.w
mul r2.xy, r2, c22.ywzw
add r3.xy, r3, r2
mul r0.w, v1, c9.x
add_pp r1.xyz, -r0, c17.y
mul_sat r0.w, r0, c18.z
mad_pp r0.xyz, r0.w, r1, r0
mad r1.w, r3.y, c23.x, c23.y
frc r0.w, r1
mul r1.xyz, v0, r0
mad r1.w, r0, c23.z, c23
sincos r0.xy, r1.w
mad r0.y, r3.x, c24.x, c24
frc r0.y, r0
add_pp r2.xyz, -r1, c16
mov_pp r4.y, r0.x
mad r1.w, r0.y, c23.z, c23
sincos r0.xy, r1.w
dp4 r2.w, c1, c1
rsq r0.z, r2.w
mov_pp r4.xz, r0.yyxw
mul r3.xyz, r0.z, c1
dp3_sat r0.y, v4, r3
dp3_pp_sat r0.x, -r4, -c12
add r3.xyz, v3, c24.wzww
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c13.x, c13.x
mad_pp r0.w, r1, r0.x, r0.y
mul_pp r2.w, r0, c4
add r0.xyz, v3, c24.zwww
texld r0, r0, s4
dp4 r3.w, r0, c25
texld r0, r3, s4
dp4 r3.z, r0, c25
add r4.xyz, v3, c24.wwzw
texld r0, r4, s4
dp4 r3.y, r0, c25
add r4.xyz, v3, c24.z
texld r0, r4, s4
dp4 r3.x, r0, c25
mov r4.xyz, v8
dp3 r0.y, v3, v3
rsq r0.y, r0.y
dp3 r4.x, v7, r4
dp3 r0.x, v7, v7
mad r0.x, -r4, r4, r0
rcp r0.y, r0.y
rsq r4.y, r0.x
mul r0.x, r0.y, c2.w
mad r0, -r0.x, c26.x, r3
rcp r3.x, r4.y
mov r3.z, c3.x
cmp r0, r0, c17.y, r3.z
dp4_pp r0.z, r0, c26.y
mul r3.y, r3.x, r3.x
mad r3.y, c14.x, c14.x, -r3
rsq r0.y, r3.y
dp3 r0.x, v2, v2
texld r0.x, r0.x, s5
mul r0.z, r0.x, r0
mul_pp r2.w, r2, r0.z
rcp r0.y, r0.y
add r0.x, r4, -r0.y
add r0.z, r0.x, -v1.w
add r0.x, -r3, c14
mul_pp_sat r3.y, r2.w, c18.z
cmp r0.y, r4.x, c17, c17.x
cmp r0.x, r0, c17.y, c17
mul r0.x, r0, r0.y
mul r0.w, r0.x, r0.z
add r2.w, -r0, c17.y
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r0.w, c15
mov r0.x, c10
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r3.y, c0
mul r0.w, r2, c15.x
mad r0.w, r0, c21.z, r3.x
mad_pp r1.xyz, r0.w, r2, r1
mul_pp r0.xyz, r0, v6.x
texldd r2.xyz, r6, s0, r5.zwzw, r5
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c11.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c5, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c17.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Vector 7 [_DetailOffset]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Vector 12 [_SunDir]
Float 13 [_PlanetOpacity]
Float 14 [_OceanRadius]
Float 15 [_OceanDepthFactor]
Vector 16 [_OceanColor]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] CUBE
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_LightTexture0] CUBE
"ps_3_0
; 187 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
dcl_2d s5
dcl_cube s6
def c17, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c22, 32.00000000, 0.50000000, -0.50000000, 1.00000000
def c23, 0.49999991, 0.50000000, 6.28318501, -3.14159298
def c24, 0.99999982, 0.50000000, 0.00781250, -0.00781250
def c25, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c26, 0.97000003, 0.25000000, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r2.xyz, v5
add r0.xyz, r2, -r2.zxyw
add r0.w, r0.x, c17.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r2.zxyw
add r0.w, r2.y, -r0.x
add r0.w, r0, c17.y
frc r1.x, r0.w
add_pp r3.xyz, r2.yxzw, -r0
abs r1.w, v5.z
add_sat r0.w, r0, -r1.x
mad_pp r0.xyz, r0.w, r3, r0
abs_pp r0.x, r0
rcp_pp r0.w, r0.x
add r2.z, -r1.w, c17.y
mad r2.y, r1.w, c17.z, c17.w
mad r2.y, r1.w, r2, c18.x
rsq r2.z, r2.z
max r0.x, r2, r1.w
mul_pp r0.zw, r0.xyzy, r0.w
rcp r0.y, r0.x
min r0.x, r2, r1.w
mul r1.x, r0, r0.y
mul r1.y, r1.x, r1.x
mad r1.z, r1.y, c19.y, c19
mad r1.z, r1, r1.y, c19.w
mad r1.z, r1, r1.y, c20.x
mad r1.z, r1, r1.y, c20.y
mov_pp r0.xy, c7
mad_pp r0.xy, r0.zwzw, c21.y, r0
mul r0.zw, r0.xyxy, c6.x
mad r2.y, r1.w, r2, c18
rcp r2.z, r2.z
mul r2.z, r2.y, r2
cmp r2.y, v5.z, c17.x, c17
mul r2.w, r2.y, r2.z
mad r2.z, -r2.w, c18, r2
mad r2.y, r2, c18.w, r2.z
mad r1.y, r1.z, r1, c20.z
mul r1.z, r2.y, c19.x
mul r2.y, r1, r1.x
dsx r1.xy, v5
mul r1.xy, r1, r1
add r1.x, r1, r1.y
dsy r2.zw, v5.xyxy
mul r2.zw, r2, r2
add r1.y, r2.z, r2.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r5.w, r1.z
dsy r5.y, r1.z
mul r5.z, r1.x, c21.x
mul r5.x, r1.y, c21
texldd r1.xyz, r0.zwzw, s1, r5.zwzw, r5
add r0.z, r2.x, -r1.w
add r0.w, -r2.y, c20
cmp r0.w, -r0.z, r2.y, r0
add r1.w, -r0, c18
cmp r0.w, v5.z, r0, r1
cmp r1.w, v5.x, r0, -r0
abs r0.w, v5.y
mul r3.x, r1.w, c21
add r2.x, -r0.w, c17.y
mad r1.w, r0, c17.z, c17
mad r1.w, r1, r0, c18.x
mul r0.xy, r0, c8.x
texldd r0.xyz, r0, s2, r5.zwzw, r5
rsq r2.x, r2.x
add_pp r1.xyz, r1, -r0
mad r0.w, r1, r0, c18.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v5.y, c17.x, c17.y
mul r2.x, r0.w, r1.w
mad r1.w, -r2.x, c18.z, r1
mad r0.w, r0, c18, r1
mul r0.w, r0, c19.x
mov r2.xyz, v5
dp3_sat r1.w, v1, -r2
add r1.w, r1, c21
mad_sat r1.w, r1, c22.x, c22.y
mad_pp r0.xyz, r1.w, r1, r0
add r6.x, r3, c21.y
mov r6.y, r0.w
texldd r2.yw, r6, s3, r5.zwzw, r5
add r2.xy, r2.wyzw, c22.z
mov r3.y, r0.w
mul r2.xy, r2, c22.ywzw
add r3.xy, r3, r2
mul r0.w, v1, c9.x
add_pp r1.xyz, -r0, c17.y
mul_sat r0.w, r0, c18.z
mad_pp r0.xyz, r0.w, r1, r0
mad r1.w, r3.y, c23.x, c23.y
frc r0.w, r1
mul r1.xyz, v0, r0
mad r1.w, r0, c23.z, c23
sincos r0.xy, r1.w
mad r0.y, r3.x, c24.x, c24
frc r0.y, r0
add_pp r2.xyz, -r1, c16
mov_pp r4.y, r0.x
mad r1.w, r0.y, c23.z, c23
sincos r0.xy, r1.w
dp4 r2.w, c1, c1
rsq r0.z, r2.w
mov_pp r4.xz, r0.yyxw
mul r3.xyz, r0.z, c1
dp3_sat r0.y, v4, r3
dp3_pp_sat r0.x, -r4, -c12
add r3.xyz, v3, c24.wzww
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c13.x, c13.x
mad_pp r0.w, r1, r0.x, r0.y
mul_pp r2.w, r0, c4
add r0.xyz, v3, c24.zwww
texld r0, r0, s4
dp4 r3.w, r0, c25
texld r0, r3, s4
dp4 r3.z, r0, c25
add r4.xyz, v3, c24.wwzw
texld r0, r4, s4
dp4 r3.y, r0, c25
add r4.xyz, v3, c24.z
texld r0, r4, s4
dp4 r3.x, r0, c25
mov r4.xyz, v8
dp3 r0.y, v3, v3
rsq r0.y, r0.y
dp3 r4.x, v7, r4
dp3 r0.x, v7, v7
mad r0.x, -r4, r4, r0
rsq r0.x, r0.x
rcp r4.y, r0.x
rcp r0.y, r0.y
mul r0.x, r0.y, c2.w
mad r0, -r0.x, c26.x, r3
mov r3.y, c3.x
cmp r0, r0, c17.y, r3.y
dp4_pp r0.z, r0, c26.y
mul r3.x, r4.y, r4.y
mad r3.x, c14, c14, -r3
rsq r3.x, r3.x
dp3 r0.x, v2, v2
rcp r0.y, r3.x
texld r0.w, v2, s6
texld r0.x, r0.x, s5
mul r0.x, r0, r0.w
mul r0.z, r0.x, r0
mul_pp r2.w, r2, r0.z
add r0.x, r4, -r0.y
add r0.z, r0.x, -v1.w
add r0.x, -r4.y, c14
mul_pp_sat r3.y, r2.w, c18.z
cmp r0.y, r4.x, c17, c17.x
cmp r0.x, r0, c17.y, c17
mul r0.x, r0, r0.y
mul r0.w, r0.x, r0.z
add r2.w, -r0, c17.y
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r0.w, c15
mov r0.x, c10
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r3.y, c0
mul r0.w, r2, c15.x
mad r0.w, r0, c21.z, r3.x
mad_pp r1.xyz, r0.w, r2, r1
mul_pp r0.xyz, r0, v6.x
texldd r2.xyz, r6, s0, r5.zwzw, r5
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c11.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c5, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c17.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Vector 5 [_DetailOffset]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 187 ALU, 22 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c23, 15.00000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
abs r5.xyz, v4
add r0.xyz, r5, -r5.zxyw
add r0.w, r0.x, c16.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r5.zxyw
add r0.w, r5.y, -r0.x
add r0.w, r0, c16.y
frc r1.x, r0.w
add_pp r2.xyz, r5.yxzw, -r0
add_sat r0.w, r0, -r1.x
mad_pp r0.xyz, r0.w, r2, r0
abs r0.w, v4.z
abs_pp r0.x, r0
rcp_pp r1.z, r0.x
add r1.x, -r0.w, c16.y
mad r0.x, r0.w, c16.z, c16.w
mad r0.x, r0.w, r0, c17
rsq r1.x, r1.x
mul_pp r1.zw, r0.xyzy, r1.z
mad r0.x, r0.w, r0, c17.y
rcp r1.x, r1.x
mul r1.x, r0, r1
cmp r0.x, v4.z, c16, c16.y
mul r1.y, r0.x, r1.x
mad r0.y, -r1, c17.z, r1.x
mov_pp r1.xy, c5
mad_pp r3.xy, r1.zwzw, c20.y, r1
mad r0.x, r0, c17.w, r0.y
mul r0.z, r0.x, c18.x
dsx r1.zw, v4.xyxy
dsy r1.xy, v4
mul r1.xy, r1, r1
add r1.x, r1, r1.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r4.x, r1, c20
dsx r4.w, r0.z
dsy r4.y, r0.z
mul r1.zw, r1, r1
add r0.z, r1, r1.w
mov r2.xyz, v4
dp3_sat r1.w, v1, -r2
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r4.z, r0, c20.x
mul r0.xy, r3, c4.x
mul r1.xy, r3, c6.x
texldd r1.xyz, r1, s2, r4.zwzw, r4
texldd r0.xyz, r0, s1, r4.zwzw, r4
add_pp r2.xyz, r0, -r1
add r3.z, r1.w, c23.y
mov r0.xyz, v7
dp3 r1.w, v6, r0
mad_sat r0.x, r3.z, c23.z, c23.w
mad_pp r0.xyz, r0.x, r2, r1
dp3 r2.w, v6, v6
mad r2.w, -r1, r1, r2
rsq r2.x, r2.w
rcp r2.x, r2.x
mul r2.y, r2.x, r2.x
mul r2.z, v1.w, c7.x
add_pp r1.xyz, -r0, c16.y
mul_sat r2.z, r2, c17
mad_pp r0.xyz, r2.z, r1, r0
mad r1.x, c12, c12, -r2.y
rsq r2.y, r1.x
rcp r2.z, r2.y
mul r0.xyz, v0, r0
add r2.w, r1, -r2.z
max r2.y, r5.x, r0.w
rcp r2.z, r2.y
min r2.y, r5.x, r0.w
mul r2.y, r2, r2.z
add_pp r1.xyz, -r0, c14
cmp r2.z, r1.w, c16.y, c16.x
add r2.x, -r2, c12
cmp r1.w, r2.x, c16.y, c16.x
mul r1.w, r1, r2.z
add r2.w, r2, -v1
mul r2.x, r1.w, r2.w
add r2.w, -r2.x, c16.y
mul r1.w, r2.y, r2.y
frc r3.z, r2.w
add_sat r2.w, r2, -r3.z
mad r2.z, r1.w, c18.y, c18
mad r2.z, r2, r1.w, c18.w
mad r2.z, r2, r1.w, c19.x
mad r2.z, r2, r1.w, c19.y
mad r1.w, r2.z, r1, c19.z
mul r1.w, r1, r2.y
mul r2.w, r2, c13.x
mul_sat r2.x, -r2, c13
mad r2.x, r2.w, c23, r2
mad_pp r1.xyz, r2.x, r1, r0
add r0.x, r5, -r0.w
add r0.y, -r1.w, c19.w
cmp r0.w, -r0.x, r1, r0.y
abs r0.x, v4.y
add r1.w, -r0, c17
add r0.z, -r0.x, c16.y
mad r0.y, r0.x, c16.z, c16.w
mad r0.y, r0, r0.x, c17.x
rsq r0.z, r0.z
cmp r0.w, v4.z, r0, r1
mad r0.x, r0.y, r0, c17.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v4.y, c16, c16.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c17.z, r0
cmp r0.z, v4.x, r0.w, -r0.w
mul r5.x, r0.z, c20
mad r0.x, r0, c17.w, r0.y
mul r0.w, r0.x, c18.x
add r5.z, r5.x, c20.y
mov r5.w, r0
texldd r2.yw, r5.zwzw, s6, r4.zwzw, r4
texldd r0.xyz, r5.zwzw, s0, r4.zwzw, r4
add_pp r0.xyz, r0, -r1
add r3.zw, r2.xywy, c20.w
mul_sat r6.x, c11, c11
mad_pp r2.xyz, r6.x, r0, r1
mov r5.y, r0.w
mul r0.xy, r3.zwzw, c21
add r0.xy, r5, r0
mul r5.xy, r3, c15.x
mad r0.y, r0, c21.z, c21.x
mad r0.z, r0.x, c21.w, c21.x
frc r0.y, r0
mad r0.x, r0.y, c22, c22.y
sincos r3.xy, r0.x
frc r0.y, r0.z
mad r2.w, r0.y, c22.x, c22.y
sincos r0.xy, r2.w
mov_pp r3.y, r3.x
mov_pp r3.xz, r0.yyxw
dp4 r0.z, c1, c1
rsq r0.x, r0.z
mul r0.xyz, r0.x, c1
dp3_pp_sat r2.w, -r3, -c10
dp3_sat r6.y, v3, r0
add r0.w, v0, c20.z
frc r0.x, r0.w
add_sat r3.x, r0.w, -r0
texldd r0, r5.zwzw, s3, r4.zwzw, r4
mul_pp r3.w, r0, r3.x
mov_pp r3.xyz, r0
add_pp r6.z, r2.w, -r6.y
texldd r1, r5, s5, r4.zwzw, r4
mul_pp r1, r3, r1
add_pp r1.xyz, r1, -r2
mad_pp r1.xyz, r1.w, r1, r2
add_pp r1.w, r2, c22.z
mad_pp r0.y, r6.x, r6.z, r6
dp3 r0.x, v2, v2
mul_pp r0.y, r0, c2.w
texld r0.x, r0.x, s7
mul_pp r0.z, r0.x, r0.y
mul_pp r1.w, r1, c2
mul_pp r0.x, r1.w, r0
mul_pp_sat r0.x, r0, c22.w
mul_pp_sat r5.z, r0, c17
mov r0.y, c8.x
add r0.yzw, c2.xxyz, r0.y
mad_sat r0.yzw, r0, r5.z, c0.xxyz
mul_pp r0.yzw, r0, v5.x
mul r2.xyz, r0.yzww, c9.x
mad_pp r1.xyz, r1, c3, r2
texldd r2, r5, s4, r4.zwzw, r4
mul_pp r2, r3, r2
mad_pp r2.xyz, -r1, r0.yzww, r2
add_pp r0.x, -r0, c16.y
mul_pp r1.xyz, r1, r0.yzww
mul_pp r0.x, r2.w, r0
mad_pp oC0.xyz, r0.x, r2, r1
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Vector 5 [_DetailOffset]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
"ps_3_0
; 183 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c23, 15.00000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord4 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.x
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.xyz
abs r0.xyz, v3
add r1.xyz, r0, -r0.zxyw
add r0.w, r1.x, c16.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r1.xyz, r0.w, r1, r0.zxyw
add r0.w, r0.y, -r1.x
add r0.w, r0, c16.y
add_pp r2.xyz, r0.yxzw, -r1
frc r1.w, r0
add_sat r0.y, r0.w, -r1.w
mad_pp r1.xyz, r0.y, r2, r1
abs_pp r0.y, r1.x
rcp_pp r0.y, r0.y
mul_pp r0.zw, r1.xyzy, r0.y
abs r0.y, v3.z
mov_pp r1.xy, c5
mad_pp r0.zw, r0, c20.y, r1.xyxy
add r1.w, -r0.y, c16.y
mad r1.z, r0.y, c16, c16.w
mad r1.z, r0.y, r1, c17.x
rsq r1.w, r1.w
dsy r2.zw, v3.xyxy
mul r2.zw, r2, r2
mul r1.xy, r0.zwzw, c4.x
mad r1.z, r0.y, r1, c17.y
rcp r1.w, r1.w
mul r1.w, r1.z, r1
cmp r1.z, v3, c16.x, c16.y
mul r2.x, r1.z, r1.w
mad r1.w, -r2.x, c17.z, r1
mad r1.w, r1.z, c17, r1
mul r2.x, r1.w, c18
max r1.z, r0.x, r0.y
rcp r1.w, r1.z
min r1.z, r0.x, r0.y
dsx r4.w, r2.x
dsy r4.y, r2.x
dsx r2.xy, v3
mul r2.xy, r2, r2
mul r1.w, r1.z, r1
add r1.z, r2.x, r2.y
add r2.x, r2.z, r2.w
mul r2.w, r1, r1
mad r3.x, r2.w, c18.y, c18.z
mad r3.w, r3.x, r2, c18
mad r3.w, r3, r2, c19.x
rsq r1.z, r1.z
rcp r1.z, r1.z
rsq r2.x, r2.x
rcp r2.x, r2.x
mul r4.z, r1, c20.x
mul r4.x, r2, c20
texldd r2.xyz, r1, s1, r4.zwzw, r4
mul r1.xy, r0.zwzw, c6.x
texldd r1.xyz, r1, s2, r4.zwzw, r4
add_pp r3.xyz, r2, -r1
mov r2.xyz, v3
dp3_sat r2.y, v1, -r2
mad r3.w, r3, r2, c19.y
mad r2.x, r3.w, r2.w, c19.z
mul r1.w, r2.x, r1
add r2.y, r2, c23
mad_sat r2.x, r2.y, c23.z, c23.w
mad_pp r1.xyz, r2.x, r3, r1
mov r3.xyz, v6
abs r2.w, v3.y
add r2.x, -r1.w, c19.w
add r0.x, r0, -r0.y
cmp r0.x, -r0, r1.w, r2
add r0.y, -r0.x, c17.w
cmp r0.x, v3.z, r0, r0.y
mul r1.w, v1, c7.x
mul_sat r0.y, r1.w, c17.z
dp3 r1.w, v5, r3
add_pp r2.xyz, -r1, c16.y
mad_pp r1.xyz, r0.y, r2, r1
mul r1.xyz, v0, r1
cmp r0.x, v3, r0, -r0
mul r5.x, r0, c20
add r3.y, -r2.w, c16
mad r3.x, r2.w, c16.z, c16.w
mad r3.x, r3, r2.w, c17
dp3 r0.y, v5, v5
mad r0.y, -r1.w, r1.w, r0
rsq r0.y, r0.y
rsq r3.y, r3.y
add r0.x, r5, c20.y
mad r2.w, r3.x, r2, c17.y
rcp r3.y, r3.y
mul r3.x, r2.w, r3.y
cmp r2.w, v3.y, c16.x, c16.y
mul r3.y, r2.w, r3.x
rcp r3.z, r0.y
mad r0.y, -r3, c17.z, r3.x
mul r3.x, r3.z, r3.z
mad r0.y, r2.w, c17.w, r0
mul r2.w, r0.y, c18.x
mov r0.y, r2.w
mad r3.x, c12, c12, -r3
rsq r3.x, r3.x
texldd r3.yw, r0, s6, r4.zwzw, r4
rcp r5.y, r3.x
add r3.xy, r3.wyzw, c20.w
add r3.w, r1, -r5.y
mul r3.xy, r3, c21
cmp r5.y, r1.w, c16, c16.x
add r3.z, -r3, c12.x
cmp r1.w, r3.z, c16.y, c16.x
mul r1.w, r1, r5.y
add r3.w, r3, -v1
mul r1.w, r1, r3
mov r5.y, r2.w
add r5.xy, r5, r3
add r3.x, -r1.w, c16.y
frc r3.y, r3.x
add_sat r3.x, r3, -r3.y
mul_sat r3.y, -r1.w, c13.x
mad r2.w, r5.y, c21.z, c21.x
mul r1.w, r3.x, c13.x
frc r2.w, r2
mad r1.w, r1, c23.x, r3.y
add_pp r2.xyz, -r1, c14
mad_pp r2.xyz, r1.w, r2, r1
texldd r1.xyz, r0, s0, r4.zwzw, r4
add_pp r3.xyz, r1, -r2
mad r2.w, r2, c22.x, c22.y
sincos r1.xy, r2.w
mad r1.y, r5.x, c21.w, c21.x
frc r1.y, r1
mov_pp r6.y, r1.x
mad r2.w, r1.y, c22.x, c22.y
sincos r1.xy, r2.w
dp4_pp r3.w, c1, c1
rsq_pp r1.z, r3.w
mov_pp r6.xz, r1.yyxw
mul_pp r5.xyz, r1.z, c1
dp3_sat r1.y, v2, r5
dp3_pp_sat r2.w, -r6, -c10
mul r5.xy, r0.zwzw, c15.x
mul_sat r1.x, c11, c11
mad_pp r2.xyz, r1.x, r3, r2
add_pp r1.z, r2.w, -r1.y
mad_pp r1.x, r1, r1.z, r1.y
mul_pp r0.z, r1.x, c2.w
mul_pp_sat r3.w, r0.z, c17.z
mov r0.w, c8.x
add r3.xyz, c2, r0.w
add r0.z, v0.w, c20
mad_sat r3.xyz, r3, r3.w, c0
mul_pp r3.xyz, r3, v4.x
frc r0.w, r0.z
add_sat r3.w, r0.z, -r0
texldd r0, r0, s3, r4.zwzw, r4
mul_pp r0.w, r0, r3
texldd r1, r5, s5, r4.zwzw, r4
mul_pp r1, r0, r1
add_pp r1.xyz, r1, -r2
mad_pp r1.xyz, r1.w, r1, r2
add_pp r1.w, r2, c22.z
mul r6.xyz, r3, c9.x
texldd r2, r5, s4, r4.zwzw, r4
mul_pp r1.w, r1, c2
mul_pp_sat r1.w, r1, c22
mul_pp r0, r0, r2
mad_pp r1.xyz, r1, c3, r6
mad_pp r0.xyz, -r1, r3, r0
add_pp r1.w, -r1, c16.y
mul_pp r1.xyz, r1, r3
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Vector 5 [_DetailOffset]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
"ps_3_0
; 191 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c23, 15.00000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
abs r5.xyz, v4
add r0.xyz, r5, -r5.zxyw
add r0.w, r0.x, c16.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r5.zxyw
add r0.w, r5.y, -r0.x
add r0.w, r0, c16.y
frc r1.x, r0.w
add_pp r2.xyz, r5.yxzw, -r0
add_sat r0.w, r0, -r1.x
mad_pp r0.xyz, r0.w, r2, r0
abs r0.w, v4.z
abs_pp r0.x, r0
rcp_pp r1.z, r0.x
add r1.x, -r0.w, c16.y
mad r0.x, r0.w, c16.z, c16.w
mad r0.x, r0.w, r0, c17
rsq r1.x, r1.x
mul_pp r1.zw, r0.xyzy, r1.z
mad r0.x, r0.w, r0, c17.y
rcp r1.x, r1.x
mul r1.x, r0, r1
cmp r0.x, v4.z, c16, c16.y
mul r1.y, r0.x, r1.x
mad r0.y, -r1, c17.z, r1.x
mov_pp r1.xy, c5
mad_pp r2.xy, r1.zwzw, c20.y, r1
mad r0.x, r0, c17.w, r0.y
mul r0.z, r0.x, c18.x
dsx r1.zw, v4.xyxy
dsy r1.xy, v4
mul r1.xy, r1, r1
add r1.x, r1, r1.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r4.x, r1, c20
dsx r4.w, r0.z
dsy r4.y, r0.z
mul r1.zw, r1, r1
add r0.z, r1, r1.w
mov r3.xyz, v4
dp3_sat r1.w, v1, -r3
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r4.z, r0, c20.x
mul r0.xy, r2, c4.x
mul r1.xy, r2, c6.x
texldd r1.xyz, r1, s2, r4.zwzw, r4
texldd r0.xyz, r0, s1, r4.zwzw, r4
add_pp r3.xyz, r0, -r1
add r2.w, r1, c23.y
mov r0.xyz, v7
dp3 r1.w, v6, r0
mad_sat r0.x, r2.w, c23.z, c23.w
mad_pp r0.xyz, r0.x, r3, r1
dp3 r2.z, v6, v6
mad r2.z, -r1.w, r1.w, r2
rsq r2.z, r2.z
rcp r2.z, r2.z
mul r2.w, r2.z, r2.z
mul r3.x, v1.w, c7
add_pp r1.xyz, -r0, c16.y
mul_sat r3.x, r3, c17.z
mad_pp r0.xyz, r3.x, r1, r0
mad r1.x, c12, c12, -r2.w
rsq r2.w, r1.x
rcp r3.x, r2.w
mul r0.xyz, v0, r0
add r3.y, r1.w, -r3.x
max r2.w, r5.x, r0
rcp r3.x, r2.w
min r2.w, r5.x, r0
mul r2.w, r2, r3.x
add_pp r1.xyz, -r0, c14
cmp r3.x, r1.w, c16.y, c16
add r2.z, -r2, c12.x
cmp r1.w, r2.z, c16.y, c16.x
mul r1.w, r1, r3.x
add r3.y, r3, -v1.w
mul r2.z, r1.w, r3.y
add r3.y, -r2.z, c16
mul r1.w, r2, r2
frc r3.z, r3.y
add_sat r3.y, r3, -r3.z
mad r3.x, r1.w, c18.y, c18.z
mad r3.x, r3, r1.w, c18.w
mad r3.x, r3, r1.w, c19
mad r3.x, r3, r1.w, c19.y
mad r1.w, r3.x, r1, c19.z
mul r1.w, r1, r2
mul_sat r6.x, c11, c11
mul r3.y, r3, c13.x
mul_sat r2.z, -r2, c13.x
mad r2.z, r3.y, c23.x, r2
mad_pp r1.xyz, r2.z, r1, r0
add r0.x, r5, -r0.w
add r0.y, -r1.w, c19.w
cmp r0.w, -r0.x, r1, r0.y
abs r0.x, v4.y
add r1.w, -r0, c17
add r0.z, -r0.x, c16.y
mad r0.y, r0.x, c16.z, c16.w
mad r0.y, r0, r0.x, c17.x
rsq r0.z, r0.z
cmp r0.w, v4.z, r0, r1
mad r0.x, r0.y, r0, c17.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v4.y, c16, c16.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c17.z, r0
cmp r0.z, v4.x, r0.w, -r0.w
mul r5.x, r0.z, c20
mad r0.x, r0, c17.w, r0.y
mul r0.w, r0.x, c18.x
add r5.z, r5.x, c20.y
mov r5.w, r0
texldd r3.yw, r5.zwzw, s6, r4.zwzw, r4
texldd r0.xyz, r5.zwzw, s0, r4.zwzw, r4
add_pp r0.xyz, r0, -r1
add r2.zw, r3.xywy, c20.w
mad_pp r3.xyz, r6.x, r0, r1
mul r0.xy, r2.zwzw, c21
mov r5.y, r0.w
add r1.xy, r5, r0
mul r5.xy, r2, c15.x
mad r1.y, r1, c21.z, c21.x
texldd r0, r5, s5, r4.zwzw, r4
mad r1.z, r1.x, c21.w, c21.x
frc r1.y, r1
mad r1.x, r1.y, c22, c22.y
sincos r2.xy, r1.x
frc r1.y, r1.z
mad r2.y, r1, c22.x, c22
sincos r1.xy, r2.y
mov_pp r2.y, r2.x
mov_pp r2.xz, r1.yyxw
dp4 r1.z, c1, c1
rsq r1.x, r1.z
mul r1.xyz, r1.x, c1
dp3_pp_sat r3.w, -r2, -c10
dp3_sat r6.y, v3, r1
add r1.w, v0, c20.z
frc r1.x, r1.w
add_sat r2.x, r1.w, -r1
texldd r1, r5.zwzw, s3, r4.zwzw, r4
mul_pp r1.w, r1, r2.x
mul_pp r2, r1, r0
add_pp r6.z, r3.w, -r6.y
add_pp r2.xyz, r2, -r3
mad_pp r2.xyz, r2.w, r2, r3
mad_pp r0.y, r6.x, r6.z, r6
rcp r0.x, v2.w
mad r6.xy, v2, r0.x, c20.y
add_pp r2.w, r3, c22.z
dp3 r0.x, v2, v2
texld r0.w, r6, s7
cmp r0.z, -v2, c16.x, c16.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s8
mul_pp r0.w, r0.z, r0.x
mul_pp r0.y, r0, c2.w
mul_pp r0.y, r0.w, r0
mul_pp r2.w, r2, c2
mul_pp r0.w, r2, r0
mul_pp_sat r0.w, r0, c22
mul_pp_sat r5.z, r0.y, c17
mov r0.x, c8
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r5.z, c0
mul_pp r0.xyz, r0, v5.x
mul r3.xyz, r0, c9.x
mad_pp r2.xyz, r2, c3, r3
texldd r3, r5, s4, r4.zwzw, r4
mul_pp r1, r1, r3
mad_pp r1.xyz, -r2, r0, r1
mul_pp r2.xyz, r2, r0
add_pp r0.w, -r0, c16.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Vector 5 [_DetailOffset]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"ps_3_0
; 187 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_cube s8
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c23, 15.00000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
abs r1.xyz, v4
add r0.xyz, r1, -r1.zxyw
add r0.w, r0.x, c16.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r0.xyz, r0.w, r0, r1.zxyw
add r0.w, r1.y, -r0.x
add r0.w, r0, c16.y
frc r1.w, r0
dsy r3.xy, v4
add_pp r2.xyz, r1.yxzw, -r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r2, r0
abs r0.w, v4.z
add r1.y, -r0.w, c16
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mad r0.z, r0.w, c16, c16.w
mad r0.z, r0.w, r0, c17.x
rsq r1.y, r1.y
dsx r2.zw, v4.xyxy
mul r2.zw, r2, r2
mad r0.z, r0.w, r0, c17.y
rcp r1.y, r1.y
mul r1.y, r0.z, r1
cmp r0.z, v4, c16.x, c16.y
mul r1.z, r0, r1.y
mad r1.y, -r1.z, c17.z, r1
mov_pp r2.xy, c5
mad_pp r1.zw, r0.xyxy, c20.y, r2.xyxy
mad r0.x, r0.z, c17.w, r1.y
mul r0.z, r0.x, c18.x
mul r3.xy, r3, r3
add r1.y, r3.x, r3
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r4.x, r1.y, c20
dsx r4.w, r0.z
dsy r4.y, r0.z
add r0.z, r2, r2.w
max r1.y, r1.x, r0.w
rcp r2.w, r1.y
min r1.y, r1.x, r0.w
mul r1.y, r1, r2.w
add r0.w, r1.x, -r0
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r4.z, r0, c20.x
mul r2.xy, r1.zwzw, c4.x
mul r0.xy, r1.zwzw, c6.x
mul r2.w, r1.y, r1.y
mul r5.xy, r1.zwzw, c15.x
texldd r0.xyz, r0, s2, r4.zwzw, r4
texldd r2.xyz, r2, s1, r4.zwzw, r4
add_pp r3.xyz, r2, -r0
mov r2.xyz, v4
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c23
mad_sat r2.y, r2, c23.z, c23.w
mad_pp r0.xyz, r2.y, r3, r0
mad r2.x, r2.w, c18.y, c18.z
mad r3.x, r2, r2.w, c18.w
mad r3.x, r3, r2.w, c19
mul r3.y, v1.w, c7.x
add_pp r2.xyz, -r0, c16.y
mul_sat r3.y, r3, c17.z
mad_pp r0.xyz, r3.y, r2, r0
mad r3.x, r3, r2.w, c19.y
mad r2.x, r3, r2.w, c19.z
mul r1.y, r2.x, r1
add r2.w, -r1.y, c19
mul r0.xyz, v0, r0
cmp r0.w, -r0, r1.y, r2
mov r3.xyz, v7
dp3 r1.y, v6, r3
dp3 r1.x, v6, v6
mad r2.w, -r1.y, r1.y, r1.x
add r1.x, -r0.w, c17.w
cmp r0.w, v4.z, r0, r1.x
cmp r0.w, v4.x, r0, -r0
mul r1.x, r0.w, c20
rsq r2.w, r2.w
rcp r2.w, r2.w
mul r3.x, r2.w, r2.w
mad r0.w, c12.x, c12.x, -r3.x
rsq r3.x, r0.w
add r0.w, -r2, c12.x
add r5.z, r1.x, c20.y
add_pp r2.xyz, -r0, c14
cmp r2.w, r1.y, c16.y, c16.x
rcp r3.x, r3.x
add r1.y, r1, -r3.x
cmp r0.w, r0, c16.y, c16.x
mul r0.w, r0, r2
abs r2.w, v4.y
add r3.y, -r2.w, c16
mad r3.x, r2.w, c16.z, c16.w
mad r3.x, r3, r2.w, c17
rsq r3.y, r3.y
add r1.y, r1, -v1.w
mul r1.y, r0.w, r1
mad r2.w, r3.x, r2, c17.y
rcp r3.y, r3.y
mul r3.x, r2.w, r3.y
cmp r2.w, v4.y, c16.x, c16.y
mul r3.y, r2.w, r3.x
mad r3.x, -r3.y, c17.z, r3
mad r0.w, r2, c17, r3.x
add r2.w, -r1.y, c16.y
mul r0.w, r0, c18.x
mov r5.w, r0
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r1.y, c13
mul r1.y, r2.w, c13.x
mad r1.y, r1, c23.x, r3.x
mad_pp r0.xyz, r1.y, r2, r0
texldd r3.yw, r5.zwzw, s6, r4.zwzw, r4
add r3.xy, r3.wyzw, c20.w
texldd r2.xyz, r5.zwzw, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r0
mul_sat r2.w, c11.x, c11.x
mul r3.xy, r3, c21
mov r1.y, r0.w
add r1.xy, r1, r3
mad_pp r3.xyz, r2.w, r2, r0
mad r0.x, r1.y, c21.z, c21
frc r1.y, r0.x
texldd r0, r5, s5, r4.zwzw, r4
mad r2.x, r1.y, c22, c22.y
mad r2.y, r1.x, c21.w, c21.x
sincos r1.xy, r2.x
frc r1.y, r2
mad r2.x, r1.y, c22, c22.y
mov_pp r2.y, r1.x
sincos r1.xy, r2.x
dp4 r1.z, c1, c1
mov_pp r2.xz, r1.yyxw
rsq r1.z, r1.z
mul r1.xyz, r1.z, c1
dp3_sat r1.z, v3, r1
dp3_pp_sat r3.w, -r2, -c10
add r1.x, v0.w, c20.z
add_pp r1.w, r3, -r1.z
frc r1.y, r1.x
mad_pp r6.x, r2.w, r1.w, r1.z
add_sat r2.x, r1, -r1.y
texldd r1, r5.zwzw, s3, r4.zwzw, r4
mul_pp r1.w, r1, r2.x
mul_pp r2, r1, r0
add_pp r2.xyz, r2, -r3
mad_pp r2.xyz, r2.w, r2, r3
add_pp r2.w, r3, c22.z
dp3 r0.x, v2, v2
texld r0.x, r0.x, s7
texld r0.w, v2, s8
mul r0.w, r0.x, r0
mul_pp r0.y, r6.x, c2.w
mul_pp r0.y, r0.w, r0
mul_pp r2.w, r2, c2
mul_pp r0.w, r2, r0
mul_pp_sat r0.w, r0, c22
mul_pp_sat r5.z, r0.y, c17
mov r0.x, c8
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r5.z, c0
mul_pp r0.xyz, r0, v5.x
mul r3.xyz, r0, c9.x
mad_pp r2.xyz, r2, c3, r3
texldd r3, r5, s4, r4.zwzw, r4
mul_pp r1, r1, r3
mad_pp r1.xyz, -r2, r0, r1
mul_pp r2.xyz, r2, r0
add_pp r0.w, -r0, c16.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Vector 5 [_DetailOffset]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 184 ALU, 22 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c23, 15.00000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
abs r0.xyz, v4
add r1.xyz, r0, -r0.zxyw
add r0.w, r1.x, c16.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r1.xyz, r0.w, r1, r0.zxyw
add r0.w, r0.y, -r1.x
add r0.w, r0, c16.y
add_pp r2.xyz, r0.yxzw, -r1
frc r1.w, r0
add_sat r0.y, r0.w, -r1.w
mad_pp r1.xyz, r0.y, r2, r1
abs_pp r0.y, r1.x
rcp_pp r0.z, r0.y
abs r0.y, v4.z
mul_pp r0.zw, r1.xyzy, r0.z
add r1.y, -r0, c16
mad r1.x, r0.y, c16.z, c16.w
mad r1.x, r0.y, r1, c17
mov_pp r2.xy, c5
mad_pp r0.zw, r0, c20.y, r2.xyxy
rsq r1.y, r1.y
dsy r2.zw, v4.xyxy
mul r2.zw, r2, r2
mad r1.x, r0.y, r1, c17.y
rcp r1.y, r1.y
mul r1.y, r1.x, r1
cmp r1.x, v4.z, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
mad r1.x, r1, c17.w, r1.y
mul r1.z, r1.x, c18.x
dsx r3.w, r1.z
dsy r3.y, r1.z
dsx r1.zw, v4.xyxy
mul r1.zw, r1, r1
add r1.z, r1, r1.w
add r1.w, r2.z, r2
rsq r1.z, r1.z
rcp r1.z, r1.z
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r3.x, r1.w, c20
max r1.w, r0.x, r0.y
rcp r2.w, r1.w
min r1.w, r0.x, r0.y
mul r1.w, r1, r2
add r0.x, r0, -r0.y
mul r3.z, r1, c20.x
mul r2.xy, r0.zwzw, c4.x
mul r1.xy, r0.zwzw, c6.x
mul r2.w, r1, r1
texldd r1.xyz, r1, s2, r3.zwzw, r3
texldd r2.xyz, r2, s1, r3.zwzw, r3
add_pp r4.xyz, r2, -r1
mov r2.xyz, v4
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c23
mad_sat r2.y, r2, c23.z, c23.w
mad_pp r1.xyz, r2.y, r4, r1
mad r2.x, r2.w, c18.y, c18.z
mad r4.x, r2, r2.w, c18.w
mad r4.x, r4, r2.w, c19
mul r4.y, v1.w, c7.x
add_pp r2.xyz, -r1, c16.y
mul_sat r4.y, r4, c17.z
mad_pp r1.xyz, r4.y, r2, r1
mad r4.x, r4, r2.w, c19.y
mad r2.x, r4, r2.w, c19.z
mul r1.w, r2.x, r1
add r2.w, -r1, c19
mul r1.xyz, v0, r1
cmp r0.x, -r0, r1.w, r2.w
mov r4.xyz, v7
dp3 r1.w, v6, r4
dp3 r0.y, v6, v6
mad r2.w, -r1, r1, r0.y
add r0.y, -r0.x, c17.w
cmp r0.x, v4.z, r0, r0.y
rsq r2.w, r2.w
rcp r0.y, r2.w
mul r2.w, r0.y, r0.y
mad r2.w, c12.x, c12.x, -r2
rsq r4.x, r2.w
cmp r0.x, v4, r0, -r0
mul r0.x, r0, c20
add r0.y, -r0, c12.x
add r4.z, r0.x, c20.y
add_pp r2.xyz, -r1, c14
cmp r2.w, r1, c16.y, c16.x
rcp r4.x, r4.x
add r1.w, r1, -r4.x
cmp r0.y, r0, c16, c16.x
mul r0.y, r0, r2.w
abs r2.w, v4.y
add r4.y, -r2.w, c16
mad r4.x, r2.w, c16.z, c16.w
mad r4.x, r4, r2.w, c17
rsq r4.y, r4.y
add r1.w, r1, -v1
mul r1.w, r0.y, r1
mad r2.w, r4.x, r2, c17.y
rcp r4.y, r4.y
mul r4.x, r2.w, r4.y
cmp r2.w, v4.y, c16.x, c16.y
mul r4.y, r2.w, r4.x
mad r4.x, -r4.y, c17.z, r4
mad r0.y, r2.w, c17.w, r4.x
add r2.w, -r1, c16.y
frc r4.x, r2.w
add_sat r2.w, r2, -r4.x
mul_sat r4.x, -r1.w, c13
mul r0.y, r0, c18.x
mov r4.w, r0.y
mul r1.w, r2, c13.x
mad r1.w, r1, c23.x, r4.x
texldd r5.yw, r4.zwzw, s6, r3.zwzw, r3
add r4.xy, r5.wyzw, c20.w
mad_pp r1.xyz, r1.w, r2, r1
texldd r2.xyz, r4.zwzw, s0, r3.zwzw, r3
mul r4.xy, r4, c21
add r0.xy, r0, r4
mad r0.y, r0, c21.z, c21.x
frc r0.y, r0
add_pp r2.xyz, r2, -r1
mul_sat r5.w, c11.x, c11.x
mad_pp r2.xyz, r5.w, r2, r1
mul r4.xy, r0.zwzw, c15.x
mad r2.w, r0.y, c22.x, c22.y
mad r5.x, r0, c21.w, c21
sincos r0.xy, r2.w
frc r0.y, r5.x
mad r2.w, r0.y, c22.x, c22.y
mov_pp r5.y, r0.x
sincos r0.xy, r2.w
dp4_pp r0.z, c1, c1
mov_pp r5.xz, r0.yyxw
rsq_pp r0.z, r0.z
mul_pp r0.xyz, r0.z, c1
dp3_sat r0.z, v3, r0
dp3_pp_sat r2.w, -r5, -c10
add r0.x, v0.w, c20.z
add_pp r0.w, r2, -r0.z
frc r0.y, r0.x
mad_pp r5.x, r5.w, r0.w, r0.z
add_sat r5.y, r0.x, -r0
texldd r0, r4.zwzw, s3, r3.zwzw, r3
mul_pp r0.w, r0, r5.y
texldd r1, r4, s5, r3.zwzw, r3
mul_pp r1, r0, r1
add_pp r1.xyz, r1, -r2
mad_pp r1.xyz, r1.w, r1, r2
add_pp r1.w, r2, c22.z
mul_pp r4.z, r5.x, c2.w
texld r4.w, v2, s7
mul_pp r5.x, r4.w, r4.z
mul_pp r1.w, r1, c2
mul_pp r1.w, r1, r4
mul_pp_sat r1.w, r1, c22
mul_pp_sat r5.w, r5.x, c17.z
mov r4.z, c8.x
add r5.xyz, c2, r4.z
mad_sat r5.xyz, r5, r5.w, c0
mul_pp r5.xyz, r5, v5.x
mul r2.xyz, r5, c9.x
mad_pp r1.xyz, r1, c3, r2
texldd r2, r4, s4, r3.zwzw, r3
mul_pp r0, r0, r2
mad_pp r0.xyz, -r1, r5, r0
add_pp r1.w, -r1, c16.y
mul_pp r1.xyz, r1, r5
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_OceanRadius]
Float 14 [_OceanDepthFactor]
Vector 15 [_OceanColor]
Float 16 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_ShadowMapTexture] 2D
"ps_3_0
; 196 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
def c17, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c22, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c23, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c24, 15.00000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r1.xyz, v5
add r0.xyz, r1, -r1.zxyw
add r0.w, r0.x, c17.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r0.xyz, r0.w, r0, r1.zxyw
add r0.w, r1.y, -r0.x
add r0.w, r0, c17.y
frc r1.w, r0
dsy r3.xy, v5
add_pp r2.xyz, r1.yxzw, -r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r2, r0
abs r0.w, v5.z
add r1.y, -r0.w, c17
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mad r0.z, r0.w, c17, c17.w
mad r0.z, r0.w, r0, c18.x
rsq r1.y, r1.y
dsx r2.zw, v5.xyxy
mul r2.zw, r2, r2
mad r0.z, r0.w, r0, c18.y
rcp r1.y, r1.y
mul r1.y, r0.z, r1
cmp r0.z, v5, c17.x, c17.y
mul r1.z, r0, r1.y
mad r1.y, -r1.z, c18.z, r1
mov_pp r2.xy, c6
mad_pp r1.zw, r0.xyxy, c21.y, r2.xyxy
mad r0.x, r0.z, c18.w, r1.y
mul r0.z, r0.x, c19.x
mul r3.xy, r3, r3
add r1.y, r3.x, r3
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r4.x, r1.y, c21
dsx r4.w, r0.z
dsy r4.y, r0.z
add r0.z, r2, r2.w
max r1.y, r1.x, r0.w
rcp r2.w, r1.y
min r1.y, r1.x, r0.w
mul r1.y, r1, r2.w
add r0.w, r1.x, -r0
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r4.z, r0, c21.x
mul r2.xy, r1.zwzw, c5.x
mul r0.xy, r1.zwzw, c7.x
mul r2.w, r1.y, r1.y
mul r5.xy, r1.zwzw, c16.x
texldd r0.xyz, r0, s2, r4.zwzw, r4
texldd r2.xyz, r2, s1, r4.zwzw, r4
add_pp r3.xyz, r2, -r0
mov r2.xyz, v5
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c24
mad_sat r2.y, r2, c24.z, c24.w
mad_pp r0.xyz, r2.y, r3, r0
mad r2.x, r2.w, c19.y, c19.z
mad r3.x, r2, r2.w, c19.w
mad r3.x, r3, r2.w, c20
mul r3.y, v1.w, c8.x
add_pp r2.xyz, -r0, c17.y
mul_sat r3.y, r3, c18.z
mad_pp r0.xyz, r3.y, r2, r0
mad r3.x, r3, r2.w, c20.y
mad r2.x, r3, r2.w, c20.z
mul r1.y, r2.x, r1
add r2.w, -r1.y, c20
mul r0.xyz, v0, r0
cmp r0.w, -r0, r1.y, r2
mov r3.xyz, v8
dp3 r1.y, v7, r3
dp3 r1.x, v7, v7
mad r2.w, -r1.y, r1.y, r1.x
add r1.x, -r0.w, c18.w
cmp r0.w, v5.z, r0, r1.x
cmp r0.w, v5.x, r0, -r0
mul r1.x, r0.w, c21
rsq r2.w, r2.w
rcp r2.w, r2.w
mul r3.x, r2.w, r2.w
mad r0.w, c13.x, c13.x, -r3.x
rsq r3.x, r0.w
add r0.w, -r2, c13.x
add r5.z, r1.x, c21.y
add_pp r2.xyz, -r0, c15
cmp r2.w, r1.y, c17.y, c17.x
rcp r3.x, r3.x
add r1.y, r1, -r3.x
cmp r0.w, r0, c17.y, c17.x
mul r0.w, r0, r2
abs r2.w, v5.y
add r3.y, -r2.w, c17
mad r3.x, r2.w, c17.z, c17.w
mad r3.x, r3, r2.w, c18
rsq r3.y, r3.y
add r1.y, r1, -v1.w
mul r1.y, r0.w, r1
mad r2.w, r3.x, r2, c18.y
rcp r3.y, r3.y
mul r3.x, r2.w, r3.y
cmp r2.w, v5.y, c17.x, c17.y
mul r3.y, r2.w, r3.x
mad r3.x, -r3.y, c18.z, r3
mad r0.w, r2, c18, r3.x
add r2.w, -r1.y, c17.y
mul r0.w, r0, c19.x
mov r5.w, r0
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r1.y, c14
mul r1.y, r2.w, c14.x
mad r1.y, r1, c24.x, r3.x
mad_pp r0.xyz, r1.y, r2, r0
texldd r3.yw, r5.zwzw, s6, r4.zwzw, r4
add r3.xy, r3.wyzw, c21.w
texldd r2.xyz, r5.zwzw, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r0
mul_sat r2.w, c12.x, c12.x
mul r3.xy, r3, c22
mov r1.y, r0.w
add r1.xy, r1, r3
mad_pp r3.xyz, r2.w, r2, r0
mad r0.x, r1.y, c22.z, c22
frc r1.y, r0.x
texldd r0, r5, s5, r4.zwzw, r4
mad r2.x, r1.y, c23, c23.y
mad r2.y, r1.x, c22.w, c22.x
sincos r1.xy, r2.x
frc r1.y, r2
mad r2.x, r1.y, c23, c23.y
mov_pp r2.y, r1.x
sincos r1.xy, r2.x
dp4 r1.z, c1, c1
mov_pp r2.xz, r1.yyxw
rsq r1.z, r1.z
mul r1.xyz, r1.z, c1
dp3_sat r1.z, v4, r1
dp3_pp_sat r3.w, -r2, -c11
add r1.x, v0.w, c21.z
add_pp r1.w, r3, -r1.z
frc r1.y, r1.x
mad_pp r6.x, r2.w, r1.w, r1.z
add_sat r2.x, r1, -r1.y
texldd r1, r5.zwzw, s3, r4.zwzw, r4
mul_pp r1.w, r1, r2.x
mul_pp r2, r1, r0
add_pp r2.xyz, r2, -r3
mad_pp r2.xyz, r2.w, r2, r3
add_pp r2.w, r3, c23.z
mul_pp r0.y, r6.x, c3.w
texldp r0.x, v3, s9
rcp r0.z, v3.w
mad r0.z, -v3, r0, r0.x
mov r0.w, c2.x
rcp r0.x, v2.w
mad r6.xy, v2, r0.x, c21.y
cmp r0.z, r0, c17.y, r0.w
dp3 r0.x, v2, v2
cmp r5.z, -v2, c17.x, c17.y
texld r0.w, r6, s7
mul_pp r0.w, r5.z, r0
texld r0.x, r0.x, s8
mul_pp r0.x, r0.w, r0
mul_pp r0.w, r0.x, r0.z
mul_pp r0.y, r0.w, r0
mul_pp r2.w, r2, c3
mul_pp r0.w, r2, r0
mul_pp_sat r0.w, r0, c23
mul_pp_sat r5.z, r0.y, c18
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r5.z, c0
mul_pp r0.xyz, r0, v6.x
mul r3.xyz, r0, c10.x
mad_pp r2.xyz, r2, c4, r3
texldd r3, r5, s4, r4.zwzw, r4
mul_pp r1, r1, r3
mad_pp r1.xyz, -r2, r0, r1
mul_pp r2.xyz, r2, r0
add_pp r0.w, -r0, c17.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c17.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_OceanRadius]
Float 14 [_OceanDepthFactor]
Vector 15 [_OceanColor]
Float 16 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_ShadowMapTexture] 2D
"ps_3_0
; 195 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
def c17, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c22, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c23, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c24, 15.00000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r1.xyz, v5
add r0.xyz, r1, -r1.zxyw
add r0.w, r0.x, c17.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r0.xyz, r0.w, r0, r1.zxyw
add r0.w, r1.y, -r0.x
add r0.w, r0, c17.y
frc r1.w, r0
dsy r3.xy, v5
add_pp r2.xyz, r1.yxzw, -r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r2, r0
abs r0.w, v5.z
add r1.y, -r0.w, c17
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mad r0.z, r0.w, c17, c17.w
mad r0.z, r0.w, r0, c18.x
rsq r1.y, r1.y
dsx r2.zw, v5.xyxy
mul r2.zw, r2, r2
mad r0.z, r0.w, r0, c18.y
rcp r1.y, r1.y
mul r1.y, r0.z, r1
cmp r0.z, v5, c17.x, c17.y
mul r1.z, r0, r1.y
mad r1.y, -r1.z, c18.z, r1
mov_pp r2.xy, c6
mad_pp r1.zw, r0.xyxy, c21.y, r2.xyxy
mad r0.x, r0.z, c18.w, r1.y
mul r0.z, r0.x, c19.x
mul r3.xy, r3, r3
add r1.y, r3.x, r3
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r4.x, r1.y, c21
dsx r4.w, r0.z
dsy r4.y, r0.z
add r0.z, r2, r2.w
max r1.y, r1.x, r0.w
rcp r2.w, r1.y
min r1.y, r1.x, r0.w
mul r1.y, r1, r2.w
add r0.w, r1.x, -r0
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r4.z, r0, c21.x
mul r2.xy, r1.zwzw, c5.x
mul r0.xy, r1.zwzw, c7.x
mul r2.w, r1.y, r1.y
mul r5.xy, r1.zwzw, c16.x
texldd r0.xyz, r0, s2, r4.zwzw, r4
texldd r2.xyz, r2, s1, r4.zwzw, r4
add_pp r3.xyz, r2, -r0
mov r2.xyz, v5
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c24
mad_sat r2.y, r2, c24.z, c24.w
mad_pp r0.xyz, r2.y, r3, r0
mad r2.x, r2.w, c19.y, c19.z
mad r3.x, r2, r2.w, c19.w
mad r3.x, r3, r2.w, c20
mul r3.y, v1.w, c8.x
add_pp r2.xyz, -r0, c17.y
mul_sat r3.y, r3, c18.z
mad_pp r0.xyz, r3.y, r2, r0
mad r3.x, r3, r2.w, c20.y
mad r2.x, r3, r2.w, c20.z
mul r1.y, r2.x, r1
add r2.w, -r1.y, c20
mul r0.xyz, v0, r0
cmp r0.w, -r0, r1.y, r2
mov r3.xyz, v8
dp3 r1.y, v7, r3
dp3 r1.x, v7, v7
mad r2.w, -r1.y, r1.y, r1.x
add r1.x, -r0.w, c18.w
cmp r0.w, v5.z, r0, r1.x
cmp r0.w, v5.x, r0, -r0
mul r1.x, r0.w, c21
rsq r2.w, r2.w
rcp r2.w, r2.w
mul r3.x, r2.w, r2.w
mad r0.w, c13.x, c13.x, -r3.x
rsq r3.x, r0.w
add r0.w, -r2, c13.x
add r5.z, r1.x, c21.y
add_pp r2.xyz, -r0, c15
cmp r2.w, r1.y, c17.y, c17.x
rcp r3.x, r3.x
add r1.y, r1, -r3.x
cmp r0.w, r0, c17.y, c17.x
mul r0.w, r0, r2
abs r2.w, v5.y
add r3.y, -r2.w, c17
mad r3.x, r2.w, c17.z, c17.w
mad r3.x, r3, r2.w, c18
rsq r3.y, r3.y
add r1.y, r1, -v1.w
mul r1.y, r0.w, r1
mad r2.w, r3.x, r2, c18.y
rcp r3.y, r3.y
mul r3.x, r2.w, r3.y
cmp r2.w, v5.y, c17.x, c17.y
mul r3.y, r2.w, r3.x
mad r3.x, -r3.y, c18.z, r3
mad r0.w, r2, c18, r3.x
add r2.w, -r1.y, c17.y
mul r0.w, r0, c19.x
mov r5.w, r0
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r1.y, c14
mul r1.y, r2.w, c14.x
mad r1.y, r1, c24.x, r3.x
mad_pp r0.xyz, r1.y, r2, r0
texldd r3.yw, r5.zwzw, s6, r4.zwzw, r4
add r3.xy, r3.wyzw, c21.w
texldd r2.xyz, r5.zwzw, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r0
mul_sat r2.w, c12.x, c12.x
mul r3.xy, r3, c22
mov r1.y, r0.w
add r1.xy, r1, r3
mad_pp r3.xyz, r2.w, r2, r0
mad r0.x, r1.y, c22.z, c22
frc r1.y, r0.x
texldd r0, r5, s5, r4.zwzw, r4
mad r2.x, r1.y, c23, c23.y
mad r2.y, r1.x, c22.w, c22.x
sincos r1.xy, r2.x
frc r1.y, r2
mad r2.x, r1.y, c23, c23.y
mov_pp r2.y, r1.x
sincos r1.xy, r2.x
dp4 r1.z, c1, c1
mov_pp r2.xz, r1.yyxw
rsq r1.z, r1.z
mul r1.xyz, r1.z, c1
dp3_sat r1.z, v4, r1
dp3_pp_sat r3.w, -r2, -c11
add r1.x, v0.w, c21.z
add_pp r1.w, r3, -r1.z
frc r1.y, r1.x
mad_pp r6.x, r2.w, r1.w, r1.z
add_sat r2.x, r1, -r1.y
texldd r1, r5.zwzw, s3, r4.zwzw, r4
mul_pp r1.w, r1, r2.x
mul_pp r2, r1, r0
add_pp r2.xyz, r2, -r3
mad_pp r2.xyz, r2.w, r2, r3
mov r0.x, c2
add r0.z, c17.y, -r0.x
texldp r0.x, v3, s9
mad r0.z, r0.x, r0, c2.x
add_pp r2.w, r3, c23.z
dp3 r0.x, v2, v2
mul_pp r0.y, r6.x, c3.w
rcp r0.w, v2.w
mad r6.xy, v2, r0.w, c21.y
cmp r5.z, -v2, c17.x, c17.y
texld r0.w, r6, s7
mul_pp r0.w, r5.z, r0
texld r0.x, r0.x, s8
mul_pp r0.x, r0.w, r0
mul_pp r0.w, r0.x, r0.z
mul_pp r0.y, r0.w, r0
mul_pp r2.w, r2, c3
mul_pp r0.w, r2, r0
mul_pp_sat r0.w, r0, c23
mul_pp_sat r5.z, r0.y, c18
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r5.z, c0
mul_pp r0.xyz, r0, v6.x
mul r3.xyz, r0, c10.x
mad_pp r2.xyz, r2, c4, r3
texldd r3, r5, s4, r4.zwzw, r4
mul_pp r1, r1, r3
mad_pp r1.xyz, -r2, r0, r1
mul_pp r2.xyz, r2, r0
add_pp r0.w, -r0, c17.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c17.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Vector 5 [_DetailOffset]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] 2D
"ps_3_0
; 184 ALU, 22 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c23, 15.00000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
abs r0.xyz, v4
add r1.xyz, r0, -r0.zxyw
add r0.w, r1.x, c16.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r1.xyz, r0.w, r1, r0.zxyw
add r0.w, r0.y, -r1.x
add r0.w, r0, c16.y
add_pp r2.xyz, r0.yxzw, -r1
frc r1.w, r0
add_sat r0.y, r0.w, -r1.w
mad_pp r1.xyz, r0.y, r2, r1
abs_pp r0.y, r1.x
rcp_pp r0.z, r0.y
abs r0.y, v4.z
mul_pp r0.zw, r1.xyzy, r0.z
add r1.y, -r0, c16
mad r1.x, r0.y, c16.z, c16.w
mad r1.x, r0.y, r1, c17
mov_pp r2.xy, c5
mad_pp r0.zw, r0, c20.y, r2.xyxy
rsq r1.y, r1.y
dsy r2.zw, v4.xyxy
mul r2.zw, r2, r2
mad r1.x, r0.y, r1, c17.y
rcp r1.y, r1.y
mul r1.y, r1.x, r1
cmp r1.x, v4.z, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
mad r1.x, r1, c17.w, r1.y
mul r1.z, r1.x, c18.x
dsx r3.w, r1.z
dsy r3.y, r1.z
dsx r1.zw, v4.xyxy
mul r1.zw, r1, r1
add r1.z, r1, r1.w
add r1.w, r2.z, r2
rsq r1.z, r1.z
rcp r1.z, r1.z
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r3.x, r1.w, c20
max r1.w, r0.x, r0.y
rcp r2.w, r1.w
min r1.w, r0.x, r0.y
mul r1.w, r1, r2
add r0.x, r0, -r0.y
mul r3.z, r1, c20.x
mul r2.xy, r0.zwzw, c4.x
mul r1.xy, r0.zwzw, c6.x
mul r2.w, r1, r1
texldd r1.xyz, r1, s2, r3.zwzw, r3
texldd r2.xyz, r2, s1, r3.zwzw, r3
add_pp r4.xyz, r2, -r1
mov r2.xyz, v4
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c23
mad_sat r2.y, r2, c23.z, c23.w
mad_pp r1.xyz, r2.y, r4, r1
mad r2.x, r2.w, c18.y, c18.z
mad r4.x, r2, r2.w, c18.w
mad r4.x, r4, r2.w, c19
mul r4.y, v1.w, c7.x
add_pp r2.xyz, -r1, c16.y
mul_sat r4.y, r4, c17.z
mad_pp r1.xyz, r4.y, r2, r1
mad r4.x, r4, r2.w, c19.y
mad r2.x, r4, r2.w, c19.z
mul r1.w, r2.x, r1
add r2.w, -r1, c19
mul r1.xyz, v0, r1
cmp r0.x, -r0, r1.w, r2.w
mov r4.xyz, v7
dp3 r1.w, v6, r4
dp3 r0.y, v6, v6
mad r2.w, -r1, r1, r0.y
add r0.y, -r0.x, c17.w
cmp r0.x, v4.z, r0, r0.y
rsq r2.w, r2.w
rcp r0.y, r2.w
mul r2.w, r0.y, r0.y
mad r2.w, c12.x, c12.x, -r2
rsq r4.x, r2.w
cmp r0.x, v4, r0, -r0
mul r0.x, r0, c20
add r0.y, -r0, c12.x
add r4.z, r0.x, c20.y
add_pp r2.xyz, -r1, c14
cmp r2.w, r1, c16.y, c16.x
rcp r4.x, r4.x
add r1.w, r1, -r4.x
cmp r0.y, r0, c16, c16.x
mul r0.y, r0, r2.w
abs r2.w, v4.y
add r4.y, -r2.w, c16
mad r4.x, r2.w, c16.z, c16.w
mad r4.x, r4, r2.w, c17
rsq r4.y, r4.y
add r1.w, r1, -v1
mul r1.w, r0.y, r1
mad r2.w, r4.x, r2, c17.y
rcp r4.y, r4.y
mul r4.x, r2.w, r4.y
cmp r2.w, v4.y, c16.x, c16.y
mul r4.y, r2.w, r4.x
mad r4.x, -r4.y, c17.z, r4
mad r0.y, r2.w, c17.w, r4.x
add r2.w, -r1, c16.y
frc r4.x, r2.w
add_sat r2.w, r2, -r4.x
mul_sat r4.x, -r1.w, c13
mul r0.y, r0, c18.x
mov r4.w, r0.y
mul r1.w, r2, c13.x
mad r1.w, r1, c23.x, r4.x
texldd r5.yw, r4.zwzw, s6, r3.zwzw, r3
add r4.xy, r5.wyzw, c20.w
mad_pp r1.xyz, r1.w, r2, r1
texldd r2.xyz, r4.zwzw, s0, r3.zwzw, r3
mul r4.xy, r4, c21
add r0.xy, r0, r4
mad r0.y, r0, c21.z, c21.x
frc r0.y, r0
add_pp r2.xyz, r2, -r1
mul_sat r5.w, c11.x, c11.x
mad_pp r2.xyz, r5.w, r2, r1
mul r4.xy, r0.zwzw, c15.x
mad r2.w, r0.y, c22.x, c22.y
mad r5.x, r0, c21.w, c21
sincos r0.xy, r2.w
frc r0.y, r5.x
mad r2.w, r0.y, c22.x, c22.y
mov_pp r5.y, r0.x
sincos r0.xy, r2.w
dp4_pp r0.z, c1, c1
mov_pp r5.xz, r0.yyxw
rsq_pp r0.z, r0.z
mul_pp r0.xyz, r0.z, c1
dp3_sat r0.z, v3, r0
dp3_pp_sat r2.w, -r5, -c10
add r0.x, v0.w, c20.z
add_pp r0.w, r2, -r0.z
frc r0.y, r0.x
mad_pp r5.x, r5.w, r0.w, r0.z
add_sat r5.y, r0.x, -r0
texldd r0, r4.zwzw, s3, r3.zwzw, r3
mul_pp r0.w, r0, r5.y
texldd r1, r4, s5, r3.zwzw, r3
mul_pp r1, r0, r1
add_pp r1.xyz, r1, -r2
mad_pp r1.xyz, r1.w, r1, r2
add_pp r1.w, r2, c22.z
mul_pp r4.z, r5.x, c2.w
texldp r6.x, v2, s7
mul_pp r4.w, r6.x, r4.z
mov r4.z, c8.x
mul_pp r1.w, r1, c2
mul_pp r1.w, r1, r6.x
mul_pp_sat r1.w, r1, c22
mul_pp_sat r4.w, r4, c17.z
add r5.xyz, c2, r4.z
mad_sat r5.xyz, r5, r4.w, c0
mul_pp r5.xyz, r5, v5.x
mul r2.xyz, r5, c9.x
mad_pp r1.xyz, r1, c3, r2
texldd r2, r4, s4, r3.zwzw, r3
mul_pp r0, r0, r2
mad_pp r0.xyz, -r1, r5, r0
add_pp r1.w, -r1, c16.y
mul_pp r1.xyz, r1, r5
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Vector 5 [_DetailOffset]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] 2D
SetTexture 8 [_LightTexture0] 2D
"ps_3_0
; 186 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c23, 15.00000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r1.xyz, v5
add r0.xyz, r1, -r1.zxyw
add r0.w, r0.x, c16.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r0.xyz, r0.w, r0, r1.zxyw
add r0.w, r1.y, -r0.x
add r0.w, r0, c16.y
frc r1.w, r0
dsy r3.xy, v5
add_pp r2.xyz, r1.yxzw, -r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r2, r0
abs r0.w, v5.z
add r1.y, -r0.w, c16
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mad r0.z, r0.w, c16, c16.w
mad r0.z, r0.w, r0, c17.x
rsq r1.y, r1.y
dsx r2.zw, v5.xyxy
mul r2.zw, r2, r2
mad r0.z, r0.w, r0, c17.y
rcp r1.y, r1.y
mul r1.y, r0.z, r1
cmp r0.z, v5, c16.x, c16.y
mul r1.z, r0, r1.y
mad r1.y, -r1.z, c17.z, r1
mov_pp r2.xy, c5
mad_pp r1.zw, r0.xyxy, c20.y, r2.xyxy
mad r0.x, r0.z, c17.w, r1.y
mul r0.z, r0.x, c18.x
mul r3.xy, r3, r3
add r1.y, r3.x, r3
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r4.x, r1.y, c20
dsx r4.w, r0.z
dsy r4.y, r0.z
add r0.z, r2, r2.w
max r1.y, r1.x, r0.w
rcp r2.w, r1.y
min r1.y, r1.x, r0.w
mul r1.y, r1, r2.w
add r0.w, r1.x, -r0
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r4.z, r0, c20.x
mul r2.xy, r1.zwzw, c4.x
mul r0.xy, r1.zwzw, c6.x
mul r2.w, r1.y, r1.y
mul r5.xy, r1.zwzw, c15.x
texldd r0.xyz, r0, s2, r4.zwzw, r4
texldd r2.xyz, r2, s1, r4.zwzw, r4
add_pp r3.xyz, r2, -r0
mov r2.xyz, v5
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c23
mad_sat r2.y, r2, c23.z, c23.w
mad_pp r0.xyz, r2.y, r3, r0
mad r2.x, r2.w, c18.y, c18.z
mad r3.x, r2, r2.w, c18.w
mad r3.x, r3, r2.w, c19
mul r3.y, v1.w, c7.x
add_pp r2.xyz, -r0, c16.y
mul_sat r3.y, r3, c17.z
mad_pp r0.xyz, r3.y, r2, r0
mad r3.x, r3, r2.w, c19.y
mad r2.x, r3, r2.w, c19.z
mul r1.y, r2.x, r1
add r2.w, -r1.y, c19
mul r0.xyz, v0, r0
cmp r0.w, -r0, r1.y, r2
mov r3.xyz, v8
dp3 r1.y, v7, r3
dp3 r1.x, v7, v7
mad r2.w, -r1.y, r1.y, r1.x
add r1.x, -r0.w, c17.w
cmp r0.w, v5.z, r0, r1.x
cmp r0.w, v5.x, r0, -r0
mul r1.x, r0.w, c20
rsq r2.w, r2.w
rcp r2.w, r2.w
mul r3.x, r2.w, r2.w
mad r0.w, c12.x, c12.x, -r3.x
rsq r3.x, r0.w
add r0.w, -r2, c12.x
add r5.z, r1.x, c20.y
add_pp r2.xyz, -r0, c14
cmp r2.w, r1.y, c16.y, c16.x
rcp r3.x, r3.x
add r1.y, r1, -r3.x
cmp r0.w, r0, c16.y, c16.x
mul r0.w, r0, r2
abs r2.w, v5.y
add r3.y, -r2.w, c16
mad r3.x, r2.w, c16.z, c16.w
mad r3.x, r3, r2.w, c17
rsq r3.y, r3.y
add r1.y, r1, -v1.w
mul r1.y, r0.w, r1
mad r2.w, r3.x, r2, c17.y
rcp r3.y, r3.y
mul r3.x, r2.w, r3.y
cmp r2.w, v5.y, c16.x, c16.y
mul r3.y, r2.w, r3.x
mad r3.x, -r3.y, c17.z, r3
mad r0.w, r2, c17, r3.x
add r2.w, -r1.y, c16.y
mul r0.w, r0, c18.x
mov r5.w, r0
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r1.y, c13
mul r1.y, r2.w, c13.x
mad r1.y, r1, c23.x, r3.x
mad_pp r0.xyz, r1.y, r2, r0
texldd r3.yw, r5.zwzw, s6, r4.zwzw, r4
add r3.xy, r3.wyzw, c20.w
texldd r2.xyz, r5.zwzw, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r0
mul_sat r2.w, c11.x, c11.x
mul r3.xy, r3, c21
mov r1.y, r0.w
add r1.xy, r1, r3
mad_pp r3.xyz, r2.w, r2, r0
mad r0.x, r1.y, c21.z, c21
frc r1.y, r0.x
texldd r0, r5, s5, r4.zwzw, r4
mad r2.x, r1.y, c22, c22.y
mad r2.y, r1.x, c21.w, c21.x
sincos r1.xy, r2.x
frc r1.y, r2
mad r2.x, r1.y, c22, c22.y
mov_pp r2.y, r1.x
sincos r1.xy, r2.x
dp4_pp r1.z, c1, c1
mov_pp r2.xz, r1.yyxw
rsq_pp r1.z, r1.z
mul_pp r1.xyz, r1.z, c1
dp3_sat r1.z, v4, r1
dp3_pp_sat r3.w, -r2, -c10
add r1.x, v0.w, c20.z
add_pp r1.w, r3, -r1.z
frc r1.y, r1.x
mad_pp r6.x, r2.w, r1.w, r1.z
add_sat r2.x, r1, -r1.y
texldd r1, r5.zwzw, s3, r4.zwzw, r4
mul_pp r1.w, r1, r2.x
mul_pp r2, r1, r0
add_pp r2.xyz, r2, -r3
mad_pp r2.xyz, r2.w, r2, r3
add_pp r2.w, r3, c22.z
texldp r0.x, v3, s7
texld r0.w, v2, s8
mul r0.w, r0, r0.x
mul_pp r0.y, r6.x, c2.w
mul_pp r0.y, r0.w, r0
mul_pp r2.w, r2, c2
mul_pp r0.w, r2, r0
mul_pp_sat r0.w, r0, c22
mul_pp_sat r5.z, r0.y, c17
mov r0.x, c8
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r5.z, c0
mul_pp r0.xyz, r0, v6.x
mul r3.xyz, r0, c9.x
mad_pp r2.xyz, r2, c3, r3
texldd r3, r5, s4, r4.zwzw, r4
mul_pp r1, r1, r3
mad_pp r1.xyz, -r2, r0, r1
mul_pp r2.xyz, r2, r0
add_pp r0.w, -r0, c16.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Vector 7 [_DetailOffset]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Vector 12 [_SunDir]
Float 13 [_PlanetOpacity]
Float 14 [_OceanRadius]
Float 15 [_OceanDepthFactor]
Vector 16 [_OceanColor]
Float 17 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] CUBE
SetTexture 8 [_LightTexture0] 2D
"ps_3_0
; 195 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
dcl_2d s8
def c18, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c23, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c24, 6.28318501, -3.14159298, -0.01000214, 0.97000003
def c25, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c26, 4.03944778, 15.00000000, -0.94999999, 0
def c27, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r5.xyz, v5
add r0.xyz, r5, -r5.zxyw
add r0.w, r0.x, c18.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r5.zxyw
add r0.w, r5.y, -r0.x
add r0.w, r0, c18.y
frc r1.x, r0.w
add_pp r2.xyz, r5.yxzw, -r0
add_sat r0.w, r0, -r1.x
mad_pp r0.xyz, r0.w, r2, r0
abs r0.w, v5.z
abs_pp r0.x, r0
rcp_pp r1.z, r0.x
add r1.x, -r0.w, c18.y
mad r0.x, r0.w, c18.z, c18.w
mad r0.x, r0.w, r0, c19
rsq r1.x, r1.x
mul_pp r1.zw, r0.xyzy, r1.z
mad r0.x, r0.w, r0, c19.y
rcp r1.x, r1.x
mul r1.x, r0, r1
cmp r0.x, v5.z, c18, c18.y
mul r1.y, r0.x, r1.x
mad r0.y, -r1, c19.z, r1.x
mov_pp r1.xy, c7
mad_pp r2.xy, r1.zwzw, c22.y, r1
mad r0.x, r0, c19.w, r0.y
mul r0.z, r0.x, c20.x
dsx r1.zw, v5.xyxy
dsy r1.xy, v5
mul r1.xy, r1, r1
add r1.x, r1, r1.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r4.x, r1, c22
dsx r4.w, r0.z
dsy r4.y, r0.z
mul r1.zw, r1, r1
add r0.z, r1, r1.w
mov r3.xyz, v5
dp3_sat r1.w, v1, -r3
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r4.z, r0, c22.x
mul r0.xy, r2, c6.x
mul r1.xy, r2, c8.x
texldd r1.xyz, r1, s2, r4.zwzw, r4
texldd r0.xyz, r0, s1, r4.zwzw, r4
add_pp r3.xyz, r0, -r1
add r2.w, r1, c26.z
mov r0.xyz, v8
dp3 r1.w, v7, r0
mad_sat r0.x, r2.w, c27, c27.y
mad_pp r0.xyz, r0.x, r3, r1
dp3 r2.z, v7, v7
mad r2.z, -r1.w, r1.w, r2
rsq r2.z, r2.z
rcp r2.z, r2.z
mul r2.w, r2.z, r2.z
mul r3.x, v1.w, c9
add_pp r1.xyz, -r0, c18.y
mul_sat r3.x, r3, c19.z
mad_pp r0.xyz, r3.x, r1, r0
mad r1.x, c14, c14, -r2.w
rsq r2.w, r1.x
rcp r3.x, r2.w
mul r0.xyz, v0, r0
add r3.y, r1.w, -r3.x
max r2.w, r5.x, r0
rcp r3.x, r2.w
min r2.w, r5.x, r0
mul r2.w, r2, r3.x
add_pp r1.xyz, -r0, c16
cmp r3.x, r1.w, c18.y, c18
add r2.z, -r2, c14.x
cmp r1.w, r2.z, c18.y, c18.x
mul r1.w, r1, r3.x
add r3.y, r3, -v1.w
mul r2.z, r1.w, r3.y
add r3.y, -r2.z, c18
mul r1.w, r2, r2
frc r3.z, r3.y
add_sat r3.y, r3, -r3.z
mad r3.x, r1.w, c20.y, c20.z
mad r3.x, r3, r1.w, c20.w
mad r3.x, r3, r1.w, c21
mad r3.x, r3, r1.w, c21.y
mad r1.w, r3.x, r1, c21.z
mul r1.w, r1, r2
mul r3.y, r3, c15.x
mul_sat r2.z, -r2, c15.x
mad r2.z, r3.y, c26.y, r2
mad_pp r1.xyz, r2.z, r1, r0
add r0.x, r5, -r0.w
add r0.y, -r1.w, c21.w
cmp r0.w, -r0.x, r1, r0.y
abs r0.x, v5.y
add r1.w, -r0, c19
add r0.z, -r0.x, c18.y
mad r0.y, r0.x, c18.z, c18.w
mad r0.y, r0, r0.x, c19.x
rsq r0.z, r0.z
cmp r0.w, v5.z, r0, r1
mad r0.x, r0.y, r0, c19.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v5.y, c18, c18.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c19.z, r0
cmp r0.z, v5.x, r0.w, -r0.w
mul r5.x, r0.z, c22
mad r0.x, r0, c19.w, r0.y
mul r0.w, r0.x, c20.x
add r5.z, r5.x, c22.y
mov r5.w, r0
texldd r3.yw, r5.zwzw, s6, r4.zwzw, r4
texldd r0.xyz, r5.zwzw, s0, r4.zwzw, r4
add_pp r0.xyz, r0, -r1
add r2.zw, r3.xywy, c22.w
mul_sat r6.x, c13, c13
mad_pp r3.xyz, r6.x, r0, r1
mul r0.xy, r2.zwzw, c23
mov r5.y, r0.w
add r1.xy, r5, r0
mul r5.xy, r2, c17.x
mad r1.y, r1, c23.z, c23.x
texldd r0, r5, s5, r4.zwzw, r4
mad r1.z, r1.x, c23.w, c23.x
frc r1.y, r1
mad r1.x, r1.y, c24, c24.y
sincos r2.xy, r1.x
frc r1.y, r1.z
mad r2.y, r1, c24.x, c24
sincos r1.xy, r2.y
mov_pp r2.y, r2.x
mov_pp r2.xz, r1.yyxw
dp4 r1.z, c1, c1
rsq r1.x, r1.z
mul r1.xyz, r1.x, c1
dp3_pp_sat r3.w, -r2, -c12
dp3_sat r6.y, v4, r1
add r1.w, v0, c22.z
frc r1.x, r1.w
add_sat r2.x, r1.w, -r1
texldd r1, r5.zwzw, s3, r4.zwzw, r4
mul_pp r1.w, r1, r2.x
mul_pp r2, r1, r0
add_pp r2.xyz, r2, -r3
mad_pp r2.xyz, r2.w, r2, r3
add_pp r6.z, r3.w, -r6.y
mad_pp r0.y, r6.x, r6.z, r6
dp3 r0.x, v3, v3
rsq r5.w, r0.x
mul_pp r5.z, r0.y, c4.w
texld r0, v3, s7
dp4 r0.y, r0, c25
add_pp r2.w, r3, c24.z
rcp r5.w, r5.w
mul r0.x, r5.w, c2.w
mad r0.y, -r0.x, c24.w, r0
mov r0.z, c3.x
dp3 r0.x, v2, v2
cmp r0.y, r0, c18, r0.z
texld r0.x, r0.x, s8
mul r0.w, r0.x, r0.y
mul_pp r0.y, r0.w, r5.z
mul_pp r2.w, r2, c4
mul_pp r0.w, r2, r0
mul_pp_sat r0.w, r0, c26.x
mul_pp_sat r5.z, r0.y, c19
mov r0.x, c10
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r5.z, c0
mul_pp r0.xyz, r0, v6.x
mul r3.xyz, r0, c11.x
mad_pp r2.xyz, r2, c5, r3
texldd r3, r5, s4, r4.zwzw, r4
mul_pp r1, r1, r3
mad_pp r1.xyz, -r2, r0, r1
mul_pp r2.xyz, r2, r0
add_pp r0.w, -r0, c18.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c18.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Vector 7 [_DetailOffset]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Vector 12 [_SunDir]
Float 13 [_PlanetOpacity]
Float 14 [_OceanRadius]
Float 15 [_OceanDepthFactor]
Vector 16 [_OceanColor]
Float 17 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] CUBE
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_LightTexture0] CUBE
"ps_3_0
; 196 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
dcl_2d s8
dcl_cube s9
def c18, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c23, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c24, 6.28318501, -3.14159298, -0.01000214, 0.97000003
def c25, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c26, 4.03944778, 15.00000000, -0.94999999, 0
def c27, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r1.xyz, v5
add r0.xyz, r1, -r1.zxyw
add r0.w, r0.x, c18.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r0.xyz, r0.w, r0, r1.zxyw
add r0.w, r1.y, -r0.x
add r0.w, r0, c18.y
frc r1.w, r0
dsy r3.xy, v5
add_pp r2.xyz, r1.yxzw, -r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r2, r0
abs r0.w, v5.z
add r1.y, -r0.w, c18
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mad r0.z, r0.w, c18, c18.w
mad r0.z, r0.w, r0, c19.x
rsq r1.y, r1.y
dsx r2.zw, v5.xyxy
mul r2.zw, r2, r2
mad r0.z, r0.w, r0, c19.y
rcp r1.y, r1.y
mul r1.y, r0.z, r1
cmp r0.z, v5, c18.x, c18.y
mul r1.z, r0, r1.y
mad r1.y, -r1.z, c19.z, r1
mov_pp r2.xy, c7
mad_pp r1.zw, r0.xyxy, c22.y, r2.xyxy
mad r0.x, r0.z, c19.w, r1.y
mul r0.z, r0.x, c20.x
mul r3.xy, r3, r3
add r1.y, r3.x, r3
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r4.x, r1.y, c22
dsx r4.w, r0.z
dsy r4.y, r0.z
add r0.z, r2, r2.w
max r1.y, r1.x, r0.w
rcp r2.w, r1.y
min r1.y, r1.x, r0.w
mul r1.y, r1, r2.w
add r0.w, r1.x, -r0
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r4.z, r0, c22.x
mul r2.xy, r1.zwzw, c6.x
mul r0.xy, r1.zwzw, c8.x
mul r2.w, r1.y, r1.y
mul r5.xy, r1.zwzw, c17.x
texldd r0.xyz, r0, s2, r4.zwzw, r4
texldd r2.xyz, r2, s1, r4.zwzw, r4
add_pp r3.xyz, r2, -r0
mov r2.xyz, v5
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c26.z
mad_sat r2.y, r2, c27.x, c27
mad_pp r0.xyz, r2.y, r3, r0
mad r2.x, r2.w, c20.y, c20.z
mad r3.x, r2, r2.w, c20.w
mad r3.x, r3, r2.w, c21
mul r3.y, v1.w, c9.x
add_pp r2.xyz, -r0, c18.y
mul_sat r3.y, r3, c19.z
mad_pp r0.xyz, r3.y, r2, r0
mad r3.x, r3, r2.w, c21.y
mad r2.x, r3, r2.w, c21.z
mul r1.y, r2.x, r1
add r2.w, -r1.y, c21
mul r0.xyz, v0, r0
cmp r0.w, -r0, r1.y, r2
mov r3.xyz, v8
dp3 r1.y, v7, r3
dp3 r1.x, v7, v7
mad r2.w, -r1.y, r1.y, r1.x
add r1.x, -r0.w, c19.w
cmp r0.w, v5.z, r0, r1.x
cmp r0.w, v5.x, r0, -r0
mul r1.x, r0.w, c22
rsq r2.w, r2.w
rcp r2.w, r2.w
mul r3.x, r2.w, r2.w
mad r0.w, c14.x, c14.x, -r3.x
rsq r3.x, r0.w
add r0.w, -r2, c14.x
add r5.z, r1.x, c22.y
add_pp r2.xyz, -r0, c16
cmp r2.w, r1.y, c18.y, c18.x
rcp r3.x, r3.x
add r1.y, r1, -r3.x
cmp r0.w, r0, c18.y, c18.x
mul r0.w, r0, r2
abs r2.w, v5.y
add r3.y, -r2.w, c18
mad r3.x, r2.w, c18.z, c18.w
mad r3.x, r3, r2.w, c19
rsq r3.y, r3.y
add r1.y, r1, -v1.w
mul r1.y, r0.w, r1
mad r2.w, r3.x, r2, c19.y
rcp r3.y, r3.y
mul r3.x, r2.w, r3.y
cmp r2.w, v5.y, c18.x, c18.y
mul r3.y, r2.w, r3.x
mad r3.x, -r3.y, c19.z, r3
mad r0.w, r2, c19, r3.x
add r2.w, -r1.y, c18.y
mul r0.w, r0, c20.x
mov r5.w, r0
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r1.y, c15
mul r1.y, r2.w, c15.x
mad r1.y, r1, c26, r3.x
mad_pp r0.xyz, r1.y, r2, r0
texldd r3.yw, r5.zwzw, s6, r4.zwzw, r4
add r3.xy, r3.wyzw, c22.w
texldd r2.xyz, r5.zwzw, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r0
mul_sat r2.w, c13.x, c13.x
mul r3.xy, r3, c23
mov r1.y, r0.w
add r1.xy, r1, r3
mad_pp r3.xyz, r2.w, r2, r0
mad r0.x, r1.y, c23.z, c23
frc r1.y, r0.x
mad r2.x, r1.y, c24, c24.y
mad r2.y, r1.x, c23.w, c23.x
sincos r1.xy, r2.x
frc r1.y, r2
mad r2.x, r1.y, c24, c24.y
mov_pp r2.y, r1.x
sincos r1.xy, r2.x
dp4 r1.z, c1, c1
mov_pp r2.xz, r1.yyxw
rsq r1.z, r1.z
mul r1.xyz, r1.z, c1
dp3_sat r1.z, v4, r1
dp3_pp_sat r3.w, -r2, -c12
add r1.x, v0.w, c22.z
add_pp r1.w, r3, -r1.z
frc r1.y, r1.x
mad_pp r6.x, r2.w, r1.w, r1.z
add_sat r2.x, r1, -r1.y
texldd r1, r5.zwzw, s3, r4.zwzw, r4
dp3 r5.w, v3, v3
mul_pp r1.w, r1, r2.x
texldd r0, r5, s5, r4.zwzw, r4
mul_pp r2, r1, r0
texld r0, v3, s7
dp4 r0.y, r0, c25
add_pp r2.xyz, r2, -r3
mad_pp r2.xyz, r2.w, r2, r3
add_pp r2.w, r3, c24.z
rsq r5.w, r5.w
rcp r0.x, r5.w
mul r0.x, r0, c2.w
mad r0.x, -r0, c24.w, r0.y
mov r0.z, c3.x
cmp r0.y, r0.x, c18, r0.z
dp3 r0.x, v2, v2
mul_pp r5.z, r6.x, c4.w
texld r0.w, v2, s9
texld r0.x, r0.x, s8
mul r0.x, r0, r0.w
mul r0.w, r0.x, r0.y
mul_pp r0.y, r0.w, r5.z
mul_pp r2.w, r2, c4
mul_pp r0.w, r2, r0
mul_pp_sat r0.w, r0, c26.x
mul_pp_sat r5.z, r0.y, c19
mov r0.x, c10
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r5.z, c0
mul_pp r0.xyz, r0, v6.x
mul r3.xyz, r0, c11.x
mad_pp r2.xyz, r2, c5, r3
texldd r3, r5, s4, r4.zwzw, r4
mul_pp r1, r1, r3
mad_pp r1.xyz, -r2, r0, r1
mul_pp r2.xyz, r2, r0
add_pp r0.w, -r0, c18.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c18.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Vector 10 [_DetailOffset]
Float 11 [_DetailVertScale]
Float 12 [_DetailDist]
Float 13 [_MinLight]
Float 14 [_Albedo]
Vector 15 [_SunDir]
Float 16 [_PlanetOpacity]
Float 17 [_OceanRadius]
Float 18 [_OceanDepthFactor]
Vector 19 [_OceanColor]
Float 20 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_ShadowMapTexture] 2D
"ps_3_0
; 204 ALU, 27 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
def c21, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c22, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c23, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c24, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c25, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c26, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c27, 6.28318501, -3.14159298, -0.01000214, 0.25000000
def c28, 4.03944778, 15.00000000, -0.94999999, 0
def c29, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r1.xyz, v5
add r0.xyz, r1, -r1.zxyw
add r0.w, r0.x, c21.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r0.xyz, r0.w, r0, r1.zxyw
add r0.w, r1.y, -r0.x
add r0.w, r0, c21.y
frc r1.w, r0
add_pp r2.xyz, r1.yxzw, -r0
add_sat r0.w, r0, -r1
mad_pp r2.xyz, r0.w, r2, r0
abs r0.w, v5.z
abs_pp r0.x, r2
rcp_pp r1.y, r0.x
mul_pp r1.zw, r2.xyzy, r1.y
add r0.y, -r0.w, c21
mad r0.x, r0.w, c21.z, c21.w
mad r0.x, r0.w, r0, c22
mov_pp r2.xy, c10
mad_pp r1.zw, r1, c25.y, r2.xyxy
rsq r0.y, r0.y
dsx r2.xy, v5
dsy r2.zw, v5.xyxy
mul r2.zw, r2, r2
add r1.y, r2.z, r2.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r4.x, r1.y, c25
mov r3.xyz, v5
dp3_sat r1.y, v1, -r3
mad r0.x, r0.w, r0, c22.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v5.z, c21, c21.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c22.z, r0
mad r0.x, r0, c22.w, r0.y
mul r0.z, r0.x, c23.x
dsx r4.w, r0.z
dsy r4.y, r0.z
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r4.z, r0, c25.x
mul r0.xy, r1.zwzw, c9.x
mul r2.xy, r1.zwzw, c11.x
texldd r2.xyz, r2, s2, r4.zwzw, r4
texldd r0.xyz, r0, s1, r4.zwzw, r4
add_pp r3.xyz, r0, -r2
add r3.w, r1.y, c28.z
mov r0.xyz, v8
dp3 r1.y, v7, r0
mad_sat r0.x, r3.w, c29, c29.y
mad_pp r0.xyz, r0.x, r3, r2
dp3 r2.w, v7, v7
mad r2.w, -r1.y, r1.y, r2
rsq r2.w, r2.w
rcp r2.w, r2.w
mul r3.x, r2.w, r2.w
mul r3.y, v1.w, c12.x
add_pp r2.xyz, -r0, c21.y
mul_sat r3.y, r3, c22.z
mad_pp r0.xyz, r3.y, r2, r0
mad r2.x, c17, c17, -r3
rsq r3.x, r2.x
rcp r3.y, r3.x
add r3.z, r1.y, -r3.y
max r3.x, r1, r0.w
rcp r3.y, r3.x
min r3.x, r1, r0.w
mul r3.x, r3, r3.y
mul r0.xyz, v0, r0
add_pp r2.xyz, -r0, c19
cmp r3.y, r1, c21, c21.x
add r2.w, -r2, c17.x
cmp r1.y, r2.w, c21, c21.x
mul r1.y, r1, r3
add r3.z, r3, -v1.w
mul r3.y, r1, r3.z
add r3.z, -r3.y, c21.y
mul r1.y, r3.x, r3.x
frc r3.w, r3.z
add_sat r3.z, r3, -r3.w
mad r2.w, r1.y, c23.y, c23.z
mad r2.w, r2, r1.y, c23
mad r2.w, r2, r1.y, c24.x
mad r2.w, r2, r1.y, c24.y
mad r1.y, r2.w, r1, c24.z
mul r1.y, r1, r3.x
add r0.w, r1.x, -r0
mul r3.z, r3, c18.x
mul_sat r3.y, -r3, c18.x
mad r2.w, r3.z, c28.y, r3.y
mad_pp r0.xyz, r2.w, r2, r0
add r2.x, -r1.y, c24.w
cmp r2.x, -r0.w, r1.y, r2
abs r0.w, v5.y
add r2.y, -r2.x, c22.w
add r1.y, -r0.w, c21
mad r1.x, r0.w, c21.z, c21.w
mad r1.x, r1, r0.w, c22
rsq r1.y, r1.y
mad r0.w, r1.x, r0, c22.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v5.y, c21.x, c21.y
mul r1.y, r0.w, r1.x
mad r1.x, -r1.y, c22.z, r1
mad r0.w, r0, c22, r1.x
cmp r2.x, v5.z, r2, r2.y
cmp r1.y, v5.x, r2.x, -r2.x
mul r5.z, r1.y, c25.x
mul r0.w, r0, c23.x
add r1.x, r5.z, c25.y
mov r1.y, r0.w
texldd r2.xyz, r1, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r0
mul_sat r6.w, c16.x, c16.x
mad_pp r3.xyz, r6.w, r2, r0
texldd r5.yw, r1, s6, r4.zwzw, r4
add r0.xy, r5.wyzw, c25.w
mul r5.xy, r1.zwzw, c20.x
add r1.z, v0.w, c25
mul r0.xy, r0, c26
mov r5.w, r0
add r5.zw, r5, r0.xyxy
mad r1.w, r5, c26.z, c26.x
frc r2.x, r1.w
rcp r5.w, v3.w
mad r3.w, r2.x, c27.x, c27.y
frc r1.w, r1.z
add_sat r2.x, r1.z, -r1.w
texldd r1, r1, s3, r4.zwzw, r4
mul_pp r1.w, r1, r2.x
texldd r0, r5, s5, r4.zwzw, r4
mul_pp r2, r1, r0
sincos r0.xy, r3.w
mad r0.y, r5.z, c26.w, c26.x
add_pp r2.xyz, r2, -r3
frc r0.y, r0
mad_pp r2.xyz, r2.w, r2, r3
mad r3.w, r0.y, c27.x, c27.y
mov_pp r7.y, r0.x
sincos r0.xy, r3.w
dp4 r5.z, c1, c1
rsq r0.z, r5.z
mov_pp r7.xz, r0.yyxw
mul r6.xyz, r0.z, c1
dp3_sat r0.x, v4, r6
dp3_pp_sat r3.w, -r7, -c15
add_pp r0.y, r3.w, -r0.x
mad_pp r0.z, r6.w, r0.y, r0.x
mad r0.xy, v3, r5.w, c6
texld r0.x, r0, s9
add_pp r2.w, r3, c27.z
mul_pp r5.z, r0, c7.w
mad r6.xy, v3, r5.w, c5
mov r0.w, r0.x
texld r0.x, r6, s9
mad r6.xy, v3, r5.w, c4
mov r0.z, r0.x
texld r0.x, r6, s9
mad r6.xy, v3, r5.w, c3
mov r0.y, r0.x
texld r0.x, r6, s9
mad r0, -v3.z, r5.w, r0
mov r6.x, c2
cmp r0, r0, c21.y, r6.x
dp4_pp r0.y, r0, c27.w
rcp r5.w, v2.w
mad r6.xy, v2, r5.w, c25.y
dp3 r0.x, v2, v2
texld r0.w, r6, s7
cmp r0.z, -v2, c21.x, c21.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s8
mul_pp r0.x, r0.z, r0
mul_pp r0.w, r0.x, r0.y
mul_pp r0.y, r0.w, r5.z
mul_pp r2.w, r2, c7
mul_pp r0.w, r2, r0
mul_pp_sat r0.w, r0, c28.x
mul_pp_sat r5.z, r0.y, c22
mov r0.x, c13
add r0.xyz, c7, r0.x
mad_sat r0.xyz, r0, r5.z, c0
mul_pp r0.xyz, r0, v6.x
mul r3.xyz, r0, c14.x
mad_pp r2.xyz, r2, c8, r3
texldd r3, r5, s4, r4.zwzw, r4
mul_pp r1, r1, r3
mad_pp r1.xyz, -r2, r0, r1
mul_pp r2.xyz, r2, r0
add_pp r0.w, -r0, c21.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c21.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Vector 10 [_DetailOffset]
Float 11 [_DetailVertScale]
Float 12 [_DetailDist]
Float 13 [_MinLight]
Float 14 [_Albedo]
Vector 15 [_SunDir]
Float 16 [_PlanetOpacity]
Float 17 [_OceanRadius]
Float 18 [_OceanDepthFactor]
Vector 19 [_OceanColor]
Float 20 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_ShadowMapTexture] 2D
"ps_3_0
; 204 ALU, 27 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
def c21, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c22, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c23, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c24, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c25, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c26, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c27, 6.28318501, -3.14159298, -0.01000214, 0.25000000
def c28, 4.03944778, 15.00000000, -0.94999999, 0
def c29, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r1.xyz, v5
add r0.xyz, r1, -r1.zxyw
add r0.w, r0.x, c21.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r0.xyz, r0.w, r0, r1.zxyw
add r0.w, r1.y, -r0.x
add r0.w, r0, c21.y
frc r1.w, r0
add_pp r2.xyz, r1.yxzw, -r0
add_sat r0.w, r0, -r1
mad_pp r2.xyz, r0.w, r2, r0
abs r0.w, v5.z
abs_pp r0.x, r2
rcp_pp r1.y, r0.x
mul_pp r1.zw, r2.xyzy, r1.y
add r0.y, -r0.w, c21
mad r0.x, r0.w, c21.z, c21.w
mad r0.x, r0.w, r0, c22
mov_pp r2.xy, c10
mad_pp r5.zw, r1, c25.y, r2.xyxy
rsq r0.y, r0.y
dsx r2.xy, v5
dsy r2.zw, v5.xyxy
mul r2.zw, r2, r2
add r1.y, r2.z, r2.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.z, r1.y, c25.x
mov r3.xyz, v5
dp3_sat r1.y, v1, -r3
rcp r6.w, v3.w
mad r0.x, r0.w, r0, c22.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v5.z, c21, c21.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c22.z, r0
mad r0.x, r0, c22.w, r0.y
mul r0.z, r0.x, c23.x
dsx r5.y, r0.z
dsy r1.w, r0.z
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r5.x, r0.z, c25
mul r0.xy, r5.zwzw, c9.x
mul r2.xy, r5.zwzw, c11.x
texldd r2.xyz, r2, s2, r5, r1.zwzw
texldd r0.xyz, r0, s1, r5, r1.zwzw
add_pp r3.xyz, r0, -r2
add r3.w, r1.y, c28.z
mov r0.xyz, v8
dp3 r1.y, v7, r0
mad_sat r0.x, r3.w, c29, c29.y
mad_pp r0.xyz, r0.x, r3, r2
dp3 r2.w, v7, v7
mad r2.w, -r1.y, r1.y, r2
rsq r2.w, r2.w
rcp r2.w, r2.w
mul r3.x, r2.w, r2.w
mul r3.y, v1.w, c12.x
add_pp r2.xyz, -r0, c21.y
mul_sat r3.y, r3, c22.z
mad_pp r0.xyz, r3.y, r2, r0
mad r2.x, c17, c17, -r3
rsq r3.x, r2.x
rcp r3.y, r3.x
mul r0.xyz, v0, r0
add r3.z, r1.y, -r3.y
max r3.x, r1, r0.w
rcp r3.y, r3.x
min r3.x, r1, r0.w
mul r3.x, r3, r3.y
add_pp r2.xyz, -r0, c19
cmp r3.y, r1, c21, c21.x
add r2.w, -r2, c17.x
cmp r1.y, r2.w, c21, c21.x
mul r1.y, r1, r3
add r3.z, r3, -v1.w
mul r3.y, r1, r3.z
add r3.z, -r3.y, c21.y
mul r1.y, r3.x, r3.x
frc r3.w, r3.z
add_sat r3.z, r3, -r3.w
mad r2.w, r1.y, c23.y, c23.z
mad r2.w, r2, r1.y, c23
mad r2.w, r2, r1.y, c24.x
mad r2.w, r2, r1.y, c24.y
mad r1.y, r2.w, r1, c24.z
mul r1.y, r1, r3.x
mul r3.z, r3, c18.x
mul_sat r3.y, -r3, c18.x
mad r2.w, r3.z, c28.y, r3.y
mad_pp r3.xyz, r2.w, r2, r0
add r0.x, r1, -r0.w
add r0.y, -r1, c24.w
cmp r0.w, -r0.x, r1.y, r0.y
abs r0.x, v5.y
add r1.x, -r0.w, c22.w
cmp r0.w, v5.z, r0, r1.x
add r0.z, -r0.x, c21.y
mad r0.y, r0.x, c21.z, c21.w
mad r0.y, r0, r0.x, c22.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c22.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v5.y, c21, c21.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c22.z, r0
cmp r0.z, v5.x, r0.w, -r0.w
mul r2.z, r0, c25.x
mad r0.x, r0, c22.w, r0.y
mul r1.y, r0.x, c23.x
add r2.x, r2.z, c25.y
mov r2.y, r1
texldd r0.xyz, r2, s0, r5, r1.zwzw
add_pp r0.xyz, r0, -r3
mul_sat r1.x, c16, c16
mad_pp r4.xyz, r1.x, r0, r3
texldd r0.yw, r2, s6, r5, r1.zwzw
add r3.xy, r0.wyzw, c25.w
mul r5.zw, r5, c20.x
mul r3.xy, r3, c26
mov r2.w, r1.y
add r6.xy, r2.zwzw, r3
add r2.z, v0.w, c25
mad r1.y, r6, c26.z, c26.x
frc r2.w, r2.z
add_sat r3.x, r2.z, -r2.w
texldd r2, r2, s3, r5, r1.zwzw
frc r1.y, r1
texldd r0, r5.zwzw, s5, r5, r1.zwzw
mul_pp r2.w, r2, r3.x
mul_pp r3, r2, r0
add_pp r3.xyz, r3, -r4
mad r1.y, r1, c27.x, c27
sincos r0.xy, r1.y
mad r4.w, r6.x, c26, c26.x
frc r0.y, r4.w
mad_pp r3.xyz, r3.w, r3, r4
mad r1.y, r0, c27.x, c27
mov_pp r6.y, r0.x
sincos r0.xy, r1.y
dp4 r0.z, c1, c1
mov_pp r6.xz, r0.yyxw
dp3_pp_sat r1.y, -r6, -c15
rsq r0.z, r0.z
mul r0.xyz, r0.z, c1
dp3_sat r0.w, v4, r0
add_pp r4.w, r1.y, -r0
mad_pp r0.w, r1.x, r4, r0
mad r0.xyz, v3, r6.w, c6
mad r6.xyz, v3, r6.w, c4
texld r1.x, r6, s9
texld r0.x, r0, s9
mul_pp r4.w, r0, c7
mov_pp r0.w, r0.x
mad r0.xyz, v3, r6.w, c5
texld r0.x, r0, s9
mov_pp r0.z, r0.x
mov_pp r0.y, r1.x
mov r0.x, c2
add r1.x, c21.y, -r0
mad r6.xyz, v3, r6.w, c3
texld r0.x, r6, s9
mad r0, r0, r1.x, c2.x
dp4_pp r0.y, r0, c27.w
rcp r1.x, v2.w
mad r6.xy, v2, r1.x, c25.y
dp3 r0.x, v2, v2
texld r0.w, r6, s7
cmp r0.z, -v2, c21.x, c21.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s8
mul_pp r0.x, r0.z, r0
mul_pp r0.w, r0.x, r0.y
mul_pp r0.y, r0.w, r4.w
mul_pp_sat r1.x, r0.y, c22.z
mov r0.x, c13
add r0.xyz, c7, r0.x
mad_sat r0.xyz, r0, r1.x, c0
mul_pp r0.xyz, r0, v6.x
mul r4.xyz, r0, c14.x
add_pp r1.x, r1.y, c27.z
mul_pp r3.w, r1.x, c7
texldd r1, r5.zwzw, s4, r5, r1.zwzw
mul_pp r0.w, r3, r0
mul_pp_sat r0.w, r0, c28.x
mul_pp r1, r2, r1
mad_pp r3.xyz, r3, c8, r4
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c21.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c21.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Vector 7 [_DetailOffset]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Vector 12 [_SunDir]
Float 13 [_PlanetOpacity]
Float 14 [_OceanRadius]
Float 15 [_OceanDepthFactor]
Vector 16 [_OceanColor]
Float 17 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] CUBE
SetTexture 8 [_LightTexture0] 2D
"ps_3_0
; 203 ALU, 26 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
dcl_2d s8
def c18, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c23, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c24, 6.28318501, -3.14159298, -0.01000214, 0.00781250
def c25, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c26, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c27, 4.03944778, 15.00000000, -0.94999999, 0
def c28, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r1.xyz, v5
add r0.xyz, r1, -r1.zxyw
add r0.w, r0.x, c18.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r0.xyz, r0.w, r0, r1.zxyw
add r0.w, r1.y, -r0.x
add r0.w, r0, c18.y
frc r1.w, r0
add_pp r2.xyz, r1.yxzw, -r0
add_sat r0.w, r0, -r1
mad_pp r2.xyz, r0.w, r2, r0
abs r0.w, v5.z
abs_pp r0.x, r2
rcp_pp r1.y, r0.x
mul_pp r1.zw, r2.xyzy, r1.y
add r0.y, -r0.w, c18
mad r0.x, r0.w, c18.z, c18.w
mad r0.x, r0.w, r0, c19
mov_pp r2.xy, c7
mad_pp r1.zw, r1, c22.y, r2.xyxy
rsq r0.y, r0.y
dsx r2.xy, v5
dsy r2.zw, v5.xyxy
mul r2.zw, r2, r2
add r1.y, r2.z, r2.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r6.x, r1.y, c22
mov r3.xyz, v5
dp3_sat r1.y, v1, -r3
mul r7.xy, r1.zwzw, c17.x
mad r0.x, r0.w, r0, c19.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v5.z, c18, c18.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c19.z, r0
mad r0.x, r0, c19.w, r0.y
mul r0.z, r0.x, c20.x
dsx r6.w, r0.z
dsy r6.y, r0.z
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r6.z, r0, c22.x
mul r0.xy, r1.zwzw, c6.x
mul r2.xy, r1.zwzw, c8.x
texldd r2.xyz, r2, s2, r6.zwzw, r6
texldd r0.xyz, r0, s1, r6.zwzw, r6
add_pp r3.xyz, r0, -r2
add r3.w, r1.y, c27.z
mov r0.xyz, v8
dp3 r1.y, v7, r0
mad_sat r0.x, r3.w, c28, c28.y
mad_pp r0.xyz, r0.x, r3, r2
dp3 r2.w, v7, v7
mad r2.w, -r1.y, r1.y, r2
rsq r2.w, r2.w
rcp r2.w, r2.w
mul r3.x, r2.w, r2.w
mul r3.y, v1.w, c9.x
add_pp r2.xyz, -r0, c18.y
mul_sat r3.y, r3, c19.z
mad_pp r0.xyz, r3.y, r2, r0
mad r2.x, c14, c14, -r3
rsq r3.x, r2.x
rcp r3.y, r3.x
add r3.z, r1.y, -r3.y
max r3.x, r1, r0.w
rcp r3.y, r3.x
min r3.x, r1, r0.w
mul r3.x, r3, r3.y
mul r0.xyz, v0, r0
add_pp r2.xyz, -r0, c16
cmp r3.y, r1, c18, c18.x
add r2.w, -r2, c14.x
cmp r1.y, r2.w, c18, c18.x
mul r1.y, r1, r3
add r3.z, r3, -v1.w
mul r3.y, r1, r3.z
add r3.z, -r3.y, c18.y
mul r1.y, r3.x, r3.x
frc r3.w, r3.z
add_sat r3.z, r3, -r3.w
mad r2.w, r1.y, c20.y, c20.z
mad r2.w, r2, r1.y, c20
mad r2.w, r2, r1.y, c21.x
mad r2.w, r2, r1.y, c21.y
mad r1.y, r2.w, r1, c21.z
mul r1.y, r1, r3.x
add r0.w, r1.x, -r0
mul_sat r3.w, c13.x, c13.x
add r1.z, v0.w, c22
mul r3.z, r3, c15.x
mul_sat r3.y, -r3, c15.x
mad r2.w, r3.z, c27.y, r3.y
mad_pp r0.xyz, r2.w, r2, r0
add r2.x, -r1.y, c21.w
cmp r2.x, -r0.w, r1.y, r2
abs r0.w, v5.y
add r2.y, -r2.x, c19.w
add r1.y, -r0.w, c18
mad r1.x, r0.w, c18.z, c18.w
mad r1.x, r1, r0.w, c19
rsq r1.y, r1.y
mad r0.w, r1.x, r0, c19.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v5.y, c18.x, c18.y
mul r1.y, r0.w, r1.x
mad r1.x, -r1.y, c19.z, r1
mad r0.w, r0, c19, r1.x
mul r0.w, r0, c20.x
cmp r2.x, v5.z, r2, r2.y
cmp r1.y, v5.x, r2.x, -r2.x
mul r3.x, r1.y, c22
add r1.x, r3, c22.y
mov r1.y, r0.w
texldd r2.xyz, r1, s0, r6.zwzw, r6
add_pp r2.xyz, r2, -r0
mad_pp r4.xyz, r3.w, r2, r0
texldd r5.yw, r1, s6, r6.zwzw, r6
add r0.xy, r5.wyzw, c22.w
mul r0.xy, r0, c23
mov r3.y, r0.w
add r3.xy, r3, r0
mad r1.w, r3.y, c23.z, c23.x
frc r2.x, r1.w
mad r3.y, r2.x, c24.x, c24
frc r1.w, r1.z
add_sat r2.x, r1.z, -r1.w
texldd r1, r1, s3, r6.zwzw, r6
mul_pp r1.w, r1, r2.x
texldd r0, r7, s5, r6.zwzw, r6
mul_pp r2, r1, r0
sincos r0.xy, r3.y
mad r0.y, r3.x, c23.w, c23.x
frc r0.y, r0
add_pp r2.xyz, r2, -r4
mov_pp r5.y, r0.x
mad r3.x, r0.y, c24, c24.y
sincos r0.xy, r3.x
dp4 r3.y, c1, c1
rsq r0.z, r3.y
mul r3.xyz, r0.z, c1
mov_pp r5.xz, r0.yyxw
dp3_sat r0.w, v4, r3
dp3_pp_sat r4.w, -r5, -c12
add_pp r3.x, r4.w, -r0.w
mad_pp r3.x, r3.w, r3, r0.w
mul_pp r7.z, r3.x, c4.w
mad_pp r2.xyz, r2.w, r2, r4
add r0.xyz, v3, c25.xyyw
texld r0, r0, s7
dp4 r5.w, r0, c26
add r0.xyz, v3, c25.yxyw
texld r0, r0, s7
dp4 r5.z, r0, c26
add r3.xyz, v3, c25.yyxw
texld r3, r3, s7
dp4 r5.y, r3, c26
add r0.xyz, v3, c24.w
texld r0, r0, s7
dp3 r3.x, v3, v3
add_pp r2.w, r4, c24.z
rsq r3.x, r3.x
dp4 r5.x, r0, c26
rcp r0.x, r3.x
mul r0.x, r0, c2.w
mad r0, -r0.x, c25.z, r5
mov r3.x, c3
cmp r3, r0, c18.y, r3.x
dp3 r0.x, v2, v2
dp4_pp r0.y, r3, c25.w
texld r0.x, r0.x, s8
mul r0.w, r0.x, r0.y
mul_pp r0.y, r0.w, r7.z
mul_pp r2.w, r2, c4
mul_pp r0.w, r2, r0
mul_pp_sat r0.w, r0, c27.x
mul_pp_sat r3.x, r0.y, c19.z
mov r0.x, c10
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r3.x, c0
mul_pp r0.xyz, r0, v6.x
mul r3.xyz, r0, c11.x
mad_pp r2.xyz, r2, c5, r3
texldd r3, r7, s4, r6.zwzw, r6
mul_pp r1, r1, r3
mad_pp r1.xyz, -r2, r0, r1
mul_pp r2.xyz, r2, r0
add_pp r0.w, -r0, c18.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c18.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Vector 7 [_DetailOffset]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Vector 12 [_SunDir]
Float 13 [_PlanetOpacity]
Float 14 [_OceanRadius]
Float 15 [_OceanDepthFactor]
Vector 16 [_OceanColor]
Float 17 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] CUBE
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_LightTexture0] CUBE
"ps_3_0
; 203 ALU, 27 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
dcl_2d s8
dcl_cube s9
def c18, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c23, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c24, 6.28318501, -3.14159298, -0.01000214, 0.00781250
def c25, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c26, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c27, 4.03944778, 15.00000000, -0.94999999, 0
def c28, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r4.xyz, v5
add r0.xyz, r4, -r4.zxyw
add r0.w, r0.x, c18.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r4.zxyw
add r0.w, r4.y, -r0.x
add r0.w, r0, c18.y
frc r1.x, r0.w
add_pp r2.xyz, r4.yxzw, -r0
add_sat r0.w, r0, -r1.x
mad_pp r1.xyz, r0.w, r2, r0
abs r0.w, v5.z
abs_pp r0.x, r1
rcp_pp r1.x, r0.x
mul_pp r1.xy, r1.zyzw, r1.x
add r0.y, -r0.w, c18
mad r0.x, r0.w, c18.z, c18.w
mad r0.x, r0.w, r0, c19
mov_pp r1.zw, c7.xyxy
mad_pp r3.xy, r1, c22.y, r1.zwzw
rsq r0.y, r0.y
dsx r1.xy, v5
dsy r1.zw, v5.xyxy
mul r1.zw, r1, r1
mul r1.xy, r1, r1
mad r0.x, r0.w, r0, c19.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v5.z, c18, c18.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c19.z, r0
mad r0.x, r0, c19.w, r0.y
mul r0.z, r0.x, c20.x
dsx r6.w, r0.z
dsy r6.y, r0.z
add r0.z, r1.x, r1.y
add r1.x, r1.z, r1.w
mov r2.xyz, v5
dp3_sat r1.w, v1, -r2
rsq r0.z, r0.z
rcp r0.z, r0.z
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r6.x, r1, c22
mul r6.z, r0, c22.x
mul r0.xy, r3, c6.x
mul r1.xy, r3, c8.x
texldd r1.xyz, r1, s2, r6.zwzw, r6
texldd r0.xyz, r0, s1, r6.zwzw, r6
add_pp r2.xyz, r0, -r1
add r3.z, r1.w, c27
mov r0.xyz, v8
dp3 r1.w, v7, r0
mad_sat r0.x, r3.z, c28, c28.y
mad_pp r0.xyz, r0.x, r2, r1
dp3 r2.w, v7, v7
mad r2.w, -r1, r1, r2
rsq r2.x, r2.w
rcp r2.x, r2.x
mul r2.y, r2.x, r2.x
mul r2.z, v1.w, c9.x
add_pp r1.xyz, -r0, c18.y
mul_sat r2.z, r2, c19
mad_pp r0.xyz, r2.z, r1, r0
mad r1.x, c14, c14, -r2.y
rsq r2.y, r1.x
rcp r2.z, r2.y
mul r0.xyz, v0, r0
add r2.w, r1, -r2.z
max r2.y, r4.x, r0.w
rcp r2.z, r2.y
min r2.y, r4.x, r0.w
mul r2.y, r2, r2.z
add_pp r1.xyz, -r0, c16
cmp r2.z, r1.w, c18.y, c18.x
add r2.x, -r2, c14
cmp r1.w, r2.x, c18.y, c18.x
mul r1.w, r1, r2.z
add r2.w, r2, -v1
mul r2.z, r1.w, r2.w
add r2.w, -r2.z, c18.y
mul r1.w, r2.y, r2.y
frc r3.z, r2.w
add_sat r2.w, r2, -r3.z
mad r2.x, r1.w, c20.y, c20.z
mad r2.x, r2, r1.w, c20.w
mad r2.x, r2, r1.w, c21
mad r2.x, r2, r1.w, c21.y
mad r1.w, r2.x, r1, c21.z
mul r1.w, r1, r2.y
mul_sat r3.w, c13.x, c13.x
mul r7.xy, r3, c17.x
mul r2.w, r2, c15.x
mul_sat r2.z, -r2, c15.x
mad r2.x, r2.w, c27.y, r2.z
mad_pp r2.xyz, r2.x, r1, r0
add r0.x, r4, -r0.w
add r0.y, -r1.w, c21.w
cmp r0.w, -r0.x, r1, r0.y
abs r0.x, v5.y
add r1.x, -r0.w, c19.w
add r0.z, -r0.x, c18.y
mad r0.y, r0.x, c18.z, c18.w
mad r0.y, r0, r0.x, c19.x
rsq r0.z, r0.z
cmp r0.w, v5.z, r0, r1.x
mad r0.x, r0.y, r0, c19.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v5.y, c18, c18.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c19.z, r0
cmp r0.z, v5.x, r0.w, -r0.w
mul r1.z, r0, c22.x
mad r0.x, r0, c19.w, r0.y
mul r1.w, r0.x, c20.x
add r1.x, r1.z, c22.y
mov r1.y, r1.w
texldd r0.xyz, r1, s0, r6.zwzw, r6
add_pp r0.xyz, r0, -r2
mad_pp r4.xyz, r3.w, r0, r2
texldd r0.yw, r1, s6, r6.zwzw, r6
add r2.xy, r0.wyzw, c22.w
mul r2.xy, r2, c23
add r3.xy, r1.zwzw, r2
add r1.z, v0.w, c22
mad r2.x, r3.y, c23.z, c23
frc r3.y, r2.x
frc r1.w, r1.z
add_sat r2.x, r1.z, -r1.w
texldd r1, r1, s3, r6.zwzw, r6
mul_pp r1.w, r1, r2.x
texldd r0, r7, s5, r6.zwzw, r6
mul_pp r2, r1, r0
mad r3.y, r3, c24.x, c24
add_pp r2.xyz, r2, -r4
sincos r0.xy, r3.y
mad r3.x, r3, c23.w, c23
frc r0.y, r3.x
mad r3.x, r0.y, c24, c24.y
mov_pp r3.y, r0.x
sincos r0.xy, r3.x
dp4 r0.z, c1, c1
mov_pp r3.xz, r0.yyxw
rsq r0.z, r0.z
dp3_pp_sat r4.w, -r3, -c12
mul r0.xyz, r0.z, c1
dp3_sat r3.x, v4, r0
add_pp r3.y, r4.w, -r3.x
mad_pp r7.z, r3.w, r3.y, r3.x
mad_pp r2.xyz, r2.w, r2, r4
add r0.xyz, v3, c25.xyyw
texld r0, r0, s7
dp4 r5.w, r0, c26
add r0.xyz, v3, c25.yxyw
texld r0, r0, s7
dp4 r5.z, r0, c26
add r3.xyz, v3, c25.yyxw
texld r3, r3, s7
dp4 r5.y, r3, c26
add r0.xyz, v3, c24.w
texld r0, r0, s7
dp3 r3.x, v3, v3
add_pp r2.w, r4, c24.z
rsq r3.x, r3.x
dp4 r5.x, r0, c26
rcp r0.x, r3.x
mul r0.x, r0, c2.w
mov r3.x, c3
mad r0, -r0.x, c25.z, r5
cmp r0, r0, c18.y, r3.x
dp4_pp r0.y, r0, c25.w
dp3 r0.x, v2, v2
mul_pp r3.x, r7.z, c4.w
texld r0.w, v2, s9
texld r0.x, r0.x, s8
mul r0.x, r0, r0.w
mul r0.w, r0.x, r0.y
mul_pp r0.y, r0.w, r3.x
mul_pp r2.w, r2, c4
mul_pp r0.w, r2, r0
mul_pp_sat r0.w, r0, c27.x
mul_pp_sat r3.x, r0.y, c19.z
mov r0.x, c10
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r3.x, c0
mul_pp r0.xyz, r0, v6.x
mul r3.xyz, r0, c11.x
mad_pp r2.xyz, r2, c5, r3
texldd r3, r7, s4, r6.zwzw, r6
mul_pp r1, r1, r3
mad_pp r1.xyz, -r2, r0, r1
mul_pp r2.xyz, r2, r0
add_pp r0.w, -r0, c18.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c18.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Vector 5 [_DetailOffset]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 187 ALU, 22 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c23, 15.00000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
abs r5.xyz, v4
add r0.xyz, r5, -r5.zxyw
add r0.w, r0.x, c16.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r5.zxyw
add r0.w, r5.y, -r0.x
add r0.w, r0, c16.y
frc r1.x, r0.w
add_pp r2.xyz, r5.yxzw, -r0
add_sat r0.w, r0, -r1.x
mad_pp r0.xyz, r0.w, r2, r0
abs r0.w, v4.z
abs_pp r0.x, r0
rcp_pp r1.z, r0.x
add r1.x, -r0.w, c16.y
mad r0.x, r0.w, c16.z, c16.w
mad r0.x, r0.w, r0, c17
rsq r1.x, r1.x
mul_pp r1.zw, r0.xyzy, r1.z
mad r0.x, r0.w, r0, c17.y
rcp r1.x, r1.x
mul r1.x, r0, r1
cmp r0.x, v4.z, c16, c16.y
mul r1.y, r0.x, r1.x
mad r0.y, -r1, c17.z, r1.x
mov_pp r1.xy, c5
mad_pp r3.xy, r1.zwzw, c20.y, r1
mad r0.x, r0, c17.w, r0.y
mul r0.z, r0.x, c18.x
dsx r1.zw, v4.xyxy
dsy r1.xy, v4
mul r1.xy, r1, r1
add r1.x, r1, r1.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r4.x, r1, c20
dsx r4.w, r0.z
dsy r4.y, r0.z
mul r1.zw, r1, r1
add r0.z, r1, r1.w
mov r2.xyz, v4
dp3_sat r1.w, v1, -r2
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r4.z, r0, c20.x
mul r0.xy, r3, c4.x
mul r1.xy, r3, c6.x
texldd r1.xyz, r1, s2, r4.zwzw, r4
texldd r0.xyz, r0, s1, r4.zwzw, r4
add_pp r2.xyz, r0, -r1
add r3.z, r1.w, c23.y
mov r0.xyz, v7
dp3 r1.w, v6, r0
mad_sat r0.x, r3.z, c23.z, c23.w
mad_pp r0.xyz, r0.x, r2, r1
dp3 r2.w, v6, v6
mad r2.w, -r1, r1, r2
rsq r2.x, r2.w
rcp r2.x, r2.x
mul r2.y, r2.x, r2.x
mul r2.z, v1.w, c7.x
add_pp r1.xyz, -r0, c16.y
mul_sat r2.z, r2, c17
mad_pp r0.xyz, r2.z, r1, r0
mad r1.x, c12, c12, -r2.y
rsq r2.y, r1.x
rcp r2.z, r2.y
mul r0.xyz, v0, r0
add r2.w, r1, -r2.z
max r2.y, r5.x, r0.w
rcp r2.z, r2.y
min r2.y, r5.x, r0.w
mul r2.y, r2, r2.z
add_pp r1.xyz, -r0, c14
cmp r2.z, r1.w, c16.y, c16.x
add r2.x, -r2, c12
cmp r1.w, r2.x, c16.y, c16.x
mul r1.w, r1, r2.z
add r2.w, r2, -v1
mul r2.x, r1.w, r2.w
add r2.w, -r2.x, c16.y
mul r1.w, r2.y, r2.y
frc r3.z, r2.w
add_sat r2.w, r2, -r3.z
mad r2.z, r1.w, c18.y, c18
mad r2.z, r2, r1.w, c18.w
mad r2.z, r2, r1.w, c19.x
mad r2.z, r2, r1.w, c19.y
mad r1.w, r2.z, r1, c19.z
mul r1.w, r1, r2.y
mul r2.w, r2, c13.x
mul_sat r2.x, -r2, c13
mad r2.x, r2.w, c23, r2
mad_pp r1.xyz, r2.x, r1, r0
add r0.x, r5, -r0.w
add r0.y, -r1.w, c19.w
cmp r0.w, -r0.x, r1, r0.y
abs r0.x, v4.y
add r1.w, -r0, c17
add r0.z, -r0.x, c16.y
mad r0.y, r0.x, c16.z, c16.w
mad r0.y, r0, r0.x, c17.x
rsq r0.z, r0.z
cmp r0.w, v4.z, r0, r1
mad r0.x, r0.y, r0, c17.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v4.y, c16, c16.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c17.z, r0
cmp r0.z, v4.x, r0.w, -r0.w
mul r5.x, r0.z, c20
mad r0.x, r0, c17.w, r0.y
mul r0.w, r0.x, c18.x
add r5.z, r5.x, c20.y
mov r5.w, r0
texldd r2.yw, r5.zwzw, s6, r4.zwzw, r4
texldd r0.xyz, r5.zwzw, s0, r4.zwzw, r4
add_pp r0.xyz, r0, -r1
add r3.zw, r2.xywy, c20.w
mul_sat r6.x, c11, c11
mad_pp r2.xyz, r6.x, r0, r1
mov r5.y, r0.w
mul r0.xy, r3.zwzw, c21
add r0.xy, r5, r0
mul r5.xy, r3, c15.x
mad r0.y, r0, c21.z, c21.x
mad r0.z, r0.x, c21.w, c21.x
frc r0.y, r0
mad r0.x, r0.y, c22, c22.y
sincos r3.xy, r0.x
frc r0.y, r0.z
mad r2.w, r0.y, c22.x, c22.y
sincos r0.xy, r2.w
mov_pp r3.y, r3.x
mov_pp r3.xz, r0.yyxw
dp4 r0.z, c1, c1
rsq r0.x, r0.z
mul r0.xyz, r0.x, c1
dp3_pp_sat r2.w, -r3, -c10
dp3_sat r6.y, v3, r0
add r0.w, v0, c20.z
frc r0.x, r0.w
add_sat r3.x, r0.w, -r0
texldd r0, r5.zwzw, s3, r4.zwzw, r4
mul_pp r3.w, r0, r3.x
mov_pp r3.xyz, r0
add_pp r6.z, r2.w, -r6.y
texldd r1, r5, s5, r4.zwzw, r4
mul_pp r1, r3, r1
add_pp r1.xyz, r1, -r2
mad_pp r1.xyz, r1.w, r1, r2
add_pp r1.w, r2, c22.z
mad_pp r0.y, r6.x, r6.z, r6
dp3 r0.x, v2, v2
mul_pp r0.y, r0, c2.w
texld r0.x, r0.x, s7
mul_pp r0.z, r0.x, r0.y
mul_pp r1.w, r1, c2
mul_pp r0.x, r1.w, r0
mul_pp_sat r0.x, r0, c22.w
mul_pp_sat r5.z, r0, c17
mov r0.y, c8.x
add r0.yzw, c2.xxyz, r0.y
mad_sat r0.yzw, r0, r5.z, c0.xxyz
mul_pp r0.yzw, r0, v5.x
mul r2.xyz, r0.yzww, c9.x
mad_pp r1.xyz, r1, c3, r2
texldd r2, r5, s4, r4.zwzw, r4
mul_pp r2, r3, r2
mad_pp r2.xyz, -r1, r0.yzww, r2
add_pp r0.x, -r0, c16.y
mul_pp r1.xyz, r1, r0.yzww
mul_pp r0.x, r2.w, r0
mad_pp oC0.xyz, r0.x, r2, r1
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Vector 5 [_DetailOffset]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
"ps_3_0
; 183 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c23, 15.00000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord4 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.x
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.xyz
abs r0.xyz, v3
add r1.xyz, r0, -r0.zxyw
add r0.w, r1.x, c16.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r1.xyz, r0.w, r1, r0.zxyw
add r0.w, r0.y, -r1.x
add r0.w, r0, c16.y
add_pp r2.xyz, r0.yxzw, -r1
frc r1.w, r0
add_sat r0.y, r0.w, -r1.w
mad_pp r1.xyz, r0.y, r2, r1
abs_pp r0.y, r1.x
rcp_pp r0.y, r0.y
mul_pp r0.zw, r1.xyzy, r0.y
abs r0.y, v3.z
mov_pp r1.xy, c5
mad_pp r0.zw, r0, c20.y, r1.xyxy
add r1.w, -r0.y, c16.y
mad r1.z, r0.y, c16, c16.w
mad r1.z, r0.y, r1, c17.x
rsq r1.w, r1.w
dsy r2.zw, v3.xyxy
mul r2.zw, r2, r2
mul r1.xy, r0.zwzw, c4.x
mad r1.z, r0.y, r1, c17.y
rcp r1.w, r1.w
mul r1.w, r1.z, r1
cmp r1.z, v3, c16.x, c16.y
mul r2.x, r1.z, r1.w
mad r1.w, -r2.x, c17.z, r1
mad r1.w, r1.z, c17, r1
mul r2.x, r1.w, c18
max r1.z, r0.x, r0.y
rcp r1.w, r1.z
min r1.z, r0.x, r0.y
dsx r4.w, r2.x
dsy r4.y, r2.x
dsx r2.xy, v3
mul r2.xy, r2, r2
mul r1.w, r1.z, r1
add r1.z, r2.x, r2.y
add r2.x, r2.z, r2.w
mul r2.w, r1, r1
mad r3.x, r2.w, c18.y, c18.z
mad r3.w, r3.x, r2, c18
mad r3.w, r3, r2, c19.x
rsq r1.z, r1.z
rcp r1.z, r1.z
rsq r2.x, r2.x
rcp r2.x, r2.x
mul r4.z, r1, c20.x
mul r4.x, r2, c20
texldd r2.xyz, r1, s1, r4.zwzw, r4
mul r1.xy, r0.zwzw, c6.x
texldd r1.xyz, r1, s2, r4.zwzw, r4
add_pp r3.xyz, r2, -r1
mov r2.xyz, v3
dp3_sat r2.y, v1, -r2
mad r3.w, r3, r2, c19.y
mad r2.x, r3.w, r2.w, c19.z
mul r1.w, r2.x, r1
add r2.y, r2, c23
mad_sat r2.x, r2.y, c23.z, c23.w
mad_pp r1.xyz, r2.x, r3, r1
mov r3.xyz, v6
abs r2.w, v3.y
add r2.x, -r1.w, c19.w
add r0.x, r0, -r0.y
cmp r0.x, -r0, r1.w, r2
add r0.y, -r0.x, c17.w
cmp r0.x, v3.z, r0, r0.y
mul r1.w, v1, c7.x
mul_sat r0.y, r1.w, c17.z
dp3 r1.w, v5, r3
add_pp r2.xyz, -r1, c16.y
mad_pp r1.xyz, r0.y, r2, r1
mul r1.xyz, v0, r1
cmp r0.x, v3, r0, -r0
mul r5.x, r0, c20
add r3.y, -r2.w, c16
mad r3.x, r2.w, c16.z, c16.w
mad r3.x, r3, r2.w, c17
dp3 r0.y, v5, v5
mad r0.y, -r1.w, r1.w, r0
rsq r0.y, r0.y
rsq r3.y, r3.y
add r0.x, r5, c20.y
mad r2.w, r3.x, r2, c17.y
rcp r3.y, r3.y
mul r3.x, r2.w, r3.y
cmp r2.w, v3.y, c16.x, c16.y
mul r3.y, r2.w, r3.x
rcp r3.z, r0.y
mad r0.y, -r3, c17.z, r3.x
mul r3.x, r3.z, r3.z
mad r0.y, r2.w, c17.w, r0
mul r2.w, r0.y, c18.x
mov r0.y, r2.w
mad r3.x, c12, c12, -r3
rsq r3.x, r3.x
texldd r3.yw, r0, s6, r4.zwzw, r4
rcp r5.y, r3.x
add r3.xy, r3.wyzw, c20.w
add r3.w, r1, -r5.y
mul r3.xy, r3, c21
cmp r5.y, r1.w, c16, c16.x
add r3.z, -r3, c12.x
cmp r1.w, r3.z, c16.y, c16.x
mul r1.w, r1, r5.y
add r3.w, r3, -v1
mul r1.w, r1, r3
mov r5.y, r2.w
add r5.xy, r5, r3
add r3.x, -r1.w, c16.y
frc r3.y, r3.x
add_sat r3.x, r3, -r3.y
mul_sat r3.y, -r1.w, c13.x
mad r2.w, r5.y, c21.z, c21.x
mul r1.w, r3.x, c13.x
frc r2.w, r2
mad r1.w, r1, c23.x, r3.y
add_pp r2.xyz, -r1, c14
mad_pp r2.xyz, r1.w, r2, r1
texldd r1.xyz, r0, s0, r4.zwzw, r4
add_pp r3.xyz, r1, -r2
mad r2.w, r2, c22.x, c22.y
sincos r1.xy, r2.w
mad r1.y, r5.x, c21.w, c21.x
frc r1.y, r1
mov_pp r6.y, r1.x
mad r2.w, r1.y, c22.x, c22.y
sincos r1.xy, r2.w
dp4_pp r3.w, c1, c1
rsq_pp r1.z, r3.w
mov_pp r6.xz, r1.yyxw
mul_pp r5.xyz, r1.z, c1
dp3_sat r1.y, v2, r5
dp3_pp_sat r2.w, -r6, -c10
mul r5.xy, r0.zwzw, c15.x
mul_sat r1.x, c11, c11
mad_pp r2.xyz, r1.x, r3, r2
add_pp r1.z, r2.w, -r1.y
mad_pp r1.x, r1, r1.z, r1.y
mul_pp r0.z, r1.x, c2.w
mul_pp_sat r3.w, r0.z, c17.z
mov r0.w, c8.x
add r3.xyz, c2, r0.w
add r0.z, v0.w, c20
mad_sat r3.xyz, r3, r3.w, c0
mul_pp r3.xyz, r3, v4.x
frc r0.w, r0.z
add_sat r3.w, r0.z, -r0
texldd r0, r0, s3, r4.zwzw, r4
mul_pp r0.w, r0, r3
texldd r1, r5, s5, r4.zwzw, r4
mul_pp r1, r0, r1
add_pp r1.xyz, r1, -r2
mad_pp r1.xyz, r1.w, r1, r2
add_pp r1.w, r2, c22.z
mul r6.xyz, r3, c9.x
texldd r2, r5, s4, r4.zwzw, r4
mul_pp r1.w, r1, c2
mul_pp_sat r1.w, r1, c22
mul_pp r0, r0, r2
mad_pp r1.xyz, r1, c3, r6
mad_pp r0.xyz, -r1, r3, r0
add_pp r1.w, -r1, c16.y
mul_pp r1.xyz, r1, r3
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Vector 5 [_DetailOffset]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
"ps_3_0
; 191 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c23, 15.00000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
abs r5.xyz, v4
add r0.xyz, r5, -r5.zxyw
add r0.w, r0.x, c16.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r5.zxyw
add r0.w, r5.y, -r0.x
add r0.w, r0, c16.y
frc r1.x, r0.w
add_pp r2.xyz, r5.yxzw, -r0
add_sat r0.w, r0, -r1.x
mad_pp r0.xyz, r0.w, r2, r0
abs r0.w, v4.z
abs_pp r0.x, r0
rcp_pp r1.z, r0.x
add r1.x, -r0.w, c16.y
mad r0.x, r0.w, c16.z, c16.w
mad r0.x, r0.w, r0, c17
rsq r1.x, r1.x
mul_pp r1.zw, r0.xyzy, r1.z
mad r0.x, r0.w, r0, c17.y
rcp r1.x, r1.x
mul r1.x, r0, r1
cmp r0.x, v4.z, c16, c16.y
mul r1.y, r0.x, r1.x
mad r0.y, -r1, c17.z, r1.x
mov_pp r1.xy, c5
mad_pp r2.xy, r1.zwzw, c20.y, r1
mad r0.x, r0, c17.w, r0.y
mul r0.z, r0.x, c18.x
dsx r1.zw, v4.xyxy
dsy r1.xy, v4
mul r1.xy, r1, r1
add r1.x, r1, r1.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r4.x, r1, c20
dsx r4.w, r0.z
dsy r4.y, r0.z
mul r1.zw, r1, r1
add r0.z, r1, r1.w
mov r3.xyz, v4
dp3_sat r1.w, v1, -r3
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r4.z, r0, c20.x
mul r0.xy, r2, c4.x
mul r1.xy, r2, c6.x
texldd r1.xyz, r1, s2, r4.zwzw, r4
texldd r0.xyz, r0, s1, r4.zwzw, r4
add_pp r3.xyz, r0, -r1
add r2.w, r1, c23.y
mov r0.xyz, v7
dp3 r1.w, v6, r0
mad_sat r0.x, r2.w, c23.z, c23.w
mad_pp r0.xyz, r0.x, r3, r1
dp3 r2.z, v6, v6
mad r2.z, -r1.w, r1.w, r2
rsq r2.z, r2.z
rcp r2.z, r2.z
mul r2.w, r2.z, r2.z
mul r3.x, v1.w, c7
add_pp r1.xyz, -r0, c16.y
mul_sat r3.x, r3, c17.z
mad_pp r0.xyz, r3.x, r1, r0
mad r1.x, c12, c12, -r2.w
rsq r2.w, r1.x
rcp r3.x, r2.w
mul r0.xyz, v0, r0
add r3.y, r1.w, -r3.x
max r2.w, r5.x, r0
rcp r3.x, r2.w
min r2.w, r5.x, r0
mul r2.w, r2, r3.x
add_pp r1.xyz, -r0, c14
cmp r3.x, r1.w, c16.y, c16
add r2.z, -r2, c12.x
cmp r1.w, r2.z, c16.y, c16.x
mul r1.w, r1, r3.x
add r3.y, r3, -v1.w
mul r2.z, r1.w, r3.y
add r3.y, -r2.z, c16
mul r1.w, r2, r2
frc r3.z, r3.y
add_sat r3.y, r3, -r3.z
mad r3.x, r1.w, c18.y, c18.z
mad r3.x, r3, r1.w, c18.w
mad r3.x, r3, r1.w, c19
mad r3.x, r3, r1.w, c19.y
mad r1.w, r3.x, r1, c19.z
mul r1.w, r1, r2
mul_sat r6.x, c11, c11
mul r3.y, r3, c13.x
mul_sat r2.z, -r2, c13.x
mad r2.z, r3.y, c23.x, r2
mad_pp r1.xyz, r2.z, r1, r0
add r0.x, r5, -r0.w
add r0.y, -r1.w, c19.w
cmp r0.w, -r0.x, r1, r0.y
abs r0.x, v4.y
add r1.w, -r0, c17
add r0.z, -r0.x, c16.y
mad r0.y, r0.x, c16.z, c16.w
mad r0.y, r0, r0.x, c17.x
rsq r0.z, r0.z
cmp r0.w, v4.z, r0, r1
mad r0.x, r0.y, r0, c17.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v4.y, c16, c16.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c17.z, r0
cmp r0.z, v4.x, r0.w, -r0.w
mul r5.x, r0.z, c20
mad r0.x, r0, c17.w, r0.y
mul r0.w, r0.x, c18.x
add r5.z, r5.x, c20.y
mov r5.w, r0
texldd r3.yw, r5.zwzw, s6, r4.zwzw, r4
texldd r0.xyz, r5.zwzw, s0, r4.zwzw, r4
add_pp r0.xyz, r0, -r1
add r2.zw, r3.xywy, c20.w
mad_pp r3.xyz, r6.x, r0, r1
mul r0.xy, r2.zwzw, c21
mov r5.y, r0.w
add r1.xy, r5, r0
mul r5.xy, r2, c15.x
mad r1.y, r1, c21.z, c21.x
texldd r0, r5, s5, r4.zwzw, r4
mad r1.z, r1.x, c21.w, c21.x
frc r1.y, r1
mad r1.x, r1.y, c22, c22.y
sincos r2.xy, r1.x
frc r1.y, r1.z
mad r2.y, r1, c22.x, c22
sincos r1.xy, r2.y
mov_pp r2.y, r2.x
mov_pp r2.xz, r1.yyxw
dp4 r1.z, c1, c1
rsq r1.x, r1.z
mul r1.xyz, r1.x, c1
dp3_pp_sat r3.w, -r2, -c10
dp3_sat r6.y, v3, r1
add r1.w, v0, c20.z
frc r1.x, r1.w
add_sat r2.x, r1.w, -r1
texldd r1, r5.zwzw, s3, r4.zwzw, r4
mul_pp r1.w, r1, r2.x
mul_pp r2, r1, r0
add_pp r6.z, r3.w, -r6.y
add_pp r2.xyz, r2, -r3
mad_pp r2.xyz, r2.w, r2, r3
mad_pp r0.y, r6.x, r6.z, r6
rcp r0.x, v2.w
mad r6.xy, v2, r0.x, c20.y
add_pp r2.w, r3, c22.z
dp3 r0.x, v2, v2
texld r0.w, r6, s7
cmp r0.z, -v2, c16.x, c16.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s8
mul_pp r0.w, r0.z, r0.x
mul_pp r0.y, r0, c2.w
mul_pp r0.y, r0.w, r0
mul_pp r2.w, r2, c2
mul_pp r0.w, r2, r0
mul_pp_sat r0.w, r0, c22
mul_pp_sat r5.z, r0.y, c17
mov r0.x, c8
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r5.z, c0
mul_pp r0.xyz, r0, v5.x
mul r3.xyz, r0, c9.x
mad_pp r2.xyz, r2, c3, r3
texldd r3, r5, s4, r4.zwzw, r4
mul_pp r1, r1, r3
mad_pp r1.xyz, -r2, r0, r1
mul_pp r2.xyz, r2, r0
add_pp r0.w, -r0, c16.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Vector 5 [_DetailOffset]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"ps_3_0
; 187 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_cube s8
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c23, 15.00000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
abs r1.xyz, v4
add r0.xyz, r1, -r1.zxyw
add r0.w, r0.x, c16.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r0.xyz, r0.w, r0, r1.zxyw
add r0.w, r1.y, -r0.x
add r0.w, r0, c16.y
frc r1.w, r0
dsy r3.xy, v4
add_pp r2.xyz, r1.yxzw, -r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r2, r0
abs r0.w, v4.z
add r1.y, -r0.w, c16
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mad r0.z, r0.w, c16, c16.w
mad r0.z, r0.w, r0, c17.x
rsq r1.y, r1.y
dsx r2.zw, v4.xyxy
mul r2.zw, r2, r2
mad r0.z, r0.w, r0, c17.y
rcp r1.y, r1.y
mul r1.y, r0.z, r1
cmp r0.z, v4, c16.x, c16.y
mul r1.z, r0, r1.y
mad r1.y, -r1.z, c17.z, r1
mov_pp r2.xy, c5
mad_pp r1.zw, r0.xyxy, c20.y, r2.xyxy
mad r0.x, r0.z, c17.w, r1.y
mul r0.z, r0.x, c18.x
mul r3.xy, r3, r3
add r1.y, r3.x, r3
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r4.x, r1.y, c20
dsx r4.w, r0.z
dsy r4.y, r0.z
add r0.z, r2, r2.w
max r1.y, r1.x, r0.w
rcp r2.w, r1.y
min r1.y, r1.x, r0.w
mul r1.y, r1, r2.w
add r0.w, r1.x, -r0
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r4.z, r0, c20.x
mul r2.xy, r1.zwzw, c4.x
mul r0.xy, r1.zwzw, c6.x
mul r2.w, r1.y, r1.y
mul r5.xy, r1.zwzw, c15.x
texldd r0.xyz, r0, s2, r4.zwzw, r4
texldd r2.xyz, r2, s1, r4.zwzw, r4
add_pp r3.xyz, r2, -r0
mov r2.xyz, v4
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c23
mad_sat r2.y, r2, c23.z, c23.w
mad_pp r0.xyz, r2.y, r3, r0
mad r2.x, r2.w, c18.y, c18.z
mad r3.x, r2, r2.w, c18.w
mad r3.x, r3, r2.w, c19
mul r3.y, v1.w, c7.x
add_pp r2.xyz, -r0, c16.y
mul_sat r3.y, r3, c17.z
mad_pp r0.xyz, r3.y, r2, r0
mad r3.x, r3, r2.w, c19.y
mad r2.x, r3, r2.w, c19.z
mul r1.y, r2.x, r1
add r2.w, -r1.y, c19
mul r0.xyz, v0, r0
cmp r0.w, -r0, r1.y, r2
mov r3.xyz, v7
dp3 r1.y, v6, r3
dp3 r1.x, v6, v6
mad r2.w, -r1.y, r1.y, r1.x
add r1.x, -r0.w, c17.w
cmp r0.w, v4.z, r0, r1.x
cmp r0.w, v4.x, r0, -r0
mul r1.x, r0.w, c20
rsq r2.w, r2.w
rcp r2.w, r2.w
mul r3.x, r2.w, r2.w
mad r0.w, c12.x, c12.x, -r3.x
rsq r3.x, r0.w
add r0.w, -r2, c12.x
add r5.z, r1.x, c20.y
add_pp r2.xyz, -r0, c14
cmp r2.w, r1.y, c16.y, c16.x
rcp r3.x, r3.x
add r1.y, r1, -r3.x
cmp r0.w, r0, c16.y, c16.x
mul r0.w, r0, r2
abs r2.w, v4.y
add r3.y, -r2.w, c16
mad r3.x, r2.w, c16.z, c16.w
mad r3.x, r3, r2.w, c17
rsq r3.y, r3.y
add r1.y, r1, -v1.w
mul r1.y, r0.w, r1
mad r2.w, r3.x, r2, c17.y
rcp r3.y, r3.y
mul r3.x, r2.w, r3.y
cmp r2.w, v4.y, c16.x, c16.y
mul r3.y, r2.w, r3.x
mad r3.x, -r3.y, c17.z, r3
mad r0.w, r2, c17, r3.x
add r2.w, -r1.y, c16.y
mul r0.w, r0, c18.x
mov r5.w, r0
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r1.y, c13
mul r1.y, r2.w, c13.x
mad r1.y, r1, c23.x, r3.x
mad_pp r0.xyz, r1.y, r2, r0
texldd r3.yw, r5.zwzw, s6, r4.zwzw, r4
add r3.xy, r3.wyzw, c20.w
texldd r2.xyz, r5.zwzw, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r0
mul_sat r2.w, c11.x, c11.x
mul r3.xy, r3, c21
mov r1.y, r0.w
add r1.xy, r1, r3
mad_pp r3.xyz, r2.w, r2, r0
mad r0.x, r1.y, c21.z, c21
frc r1.y, r0.x
texldd r0, r5, s5, r4.zwzw, r4
mad r2.x, r1.y, c22, c22.y
mad r2.y, r1.x, c21.w, c21.x
sincos r1.xy, r2.x
frc r1.y, r2
mad r2.x, r1.y, c22, c22.y
mov_pp r2.y, r1.x
sincos r1.xy, r2.x
dp4 r1.z, c1, c1
mov_pp r2.xz, r1.yyxw
rsq r1.z, r1.z
mul r1.xyz, r1.z, c1
dp3_sat r1.z, v3, r1
dp3_pp_sat r3.w, -r2, -c10
add r1.x, v0.w, c20.z
add_pp r1.w, r3, -r1.z
frc r1.y, r1.x
mad_pp r6.x, r2.w, r1.w, r1.z
add_sat r2.x, r1, -r1.y
texldd r1, r5.zwzw, s3, r4.zwzw, r4
mul_pp r1.w, r1, r2.x
mul_pp r2, r1, r0
add_pp r2.xyz, r2, -r3
mad_pp r2.xyz, r2.w, r2, r3
add_pp r2.w, r3, c22.z
dp3 r0.x, v2, v2
texld r0.x, r0.x, s7
texld r0.w, v2, s8
mul r0.w, r0.x, r0
mul_pp r0.y, r6.x, c2.w
mul_pp r0.y, r0.w, r0
mul_pp r2.w, r2, c2
mul_pp r0.w, r2, r0
mul_pp_sat r0.w, r0, c22
mul_pp_sat r5.z, r0.y, c17
mov r0.x, c8
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r5.z, c0
mul_pp r0.xyz, r0, v5.x
mul r3.xyz, r0, c9.x
mad_pp r2.xyz, r2, c3, r3
texldd r3, r5, s4, r4.zwzw, r4
mul_pp r1, r1, r3
mad_pp r1.xyz, -r2, r0, r1
mul_pp r2.xyz, r2, r0
add_pp r0.w, -r0, c16.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Vector 5 [_DetailOffset]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 184 ALU, 22 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c23, 15.00000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
abs r0.xyz, v4
add r1.xyz, r0, -r0.zxyw
add r0.w, r1.x, c16.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r1.xyz, r0.w, r1, r0.zxyw
add r0.w, r0.y, -r1.x
add r0.w, r0, c16.y
add_pp r2.xyz, r0.yxzw, -r1
frc r1.w, r0
add_sat r0.y, r0.w, -r1.w
mad_pp r1.xyz, r0.y, r2, r1
abs_pp r0.y, r1.x
rcp_pp r0.z, r0.y
abs r0.y, v4.z
mul_pp r0.zw, r1.xyzy, r0.z
add r1.y, -r0, c16
mad r1.x, r0.y, c16.z, c16.w
mad r1.x, r0.y, r1, c17
mov_pp r2.xy, c5
mad_pp r0.zw, r0, c20.y, r2.xyxy
rsq r1.y, r1.y
dsy r2.zw, v4.xyxy
mul r2.zw, r2, r2
mad r1.x, r0.y, r1, c17.y
rcp r1.y, r1.y
mul r1.y, r1.x, r1
cmp r1.x, v4.z, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
mad r1.x, r1, c17.w, r1.y
mul r1.z, r1.x, c18.x
dsx r3.w, r1.z
dsy r3.y, r1.z
dsx r1.zw, v4.xyxy
mul r1.zw, r1, r1
add r1.z, r1, r1.w
add r1.w, r2.z, r2
rsq r1.z, r1.z
rcp r1.z, r1.z
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r3.x, r1.w, c20
max r1.w, r0.x, r0.y
rcp r2.w, r1.w
min r1.w, r0.x, r0.y
mul r1.w, r1, r2
add r0.x, r0, -r0.y
mul r3.z, r1, c20.x
mul r2.xy, r0.zwzw, c4.x
mul r1.xy, r0.zwzw, c6.x
mul r2.w, r1, r1
texldd r1.xyz, r1, s2, r3.zwzw, r3
texldd r2.xyz, r2, s1, r3.zwzw, r3
add_pp r4.xyz, r2, -r1
mov r2.xyz, v4
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c23
mad_sat r2.y, r2, c23.z, c23.w
mad_pp r1.xyz, r2.y, r4, r1
mad r2.x, r2.w, c18.y, c18.z
mad r4.x, r2, r2.w, c18.w
mad r4.x, r4, r2.w, c19
mul r4.y, v1.w, c7.x
add_pp r2.xyz, -r1, c16.y
mul_sat r4.y, r4, c17.z
mad_pp r1.xyz, r4.y, r2, r1
mad r4.x, r4, r2.w, c19.y
mad r2.x, r4, r2.w, c19.z
mul r1.w, r2.x, r1
add r2.w, -r1, c19
mul r1.xyz, v0, r1
cmp r0.x, -r0, r1.w, r2.w
mov r4.xyz, v7
dp3 r1.w, v6, r4
dp3 r0.y, v6, v6
mad r2.w, -r1, r1, r0.y
add r0.y, -r0.x, c17.w
cmp r0.x, v4.z, r0, r0.y
rsq r2.w, r2.w
rcp r0.y, r2.w
mul r2.w, r0.y, r0.y
mad r2.w, c12.x, c12.x, -r2
rsq r4.x, r2.w
cmp r0.x, v4, r0, -r0
mul r0.x, r0, c20
add r0.y, -r0, c12.x
add r4.z, r0.x, c20.y
add_pp r2.xyz, -r1, c14
cmp r2.w, r1, c16.y, c16.x
rcp r4.x, r4.x
add r1.w, r1, -r4.x
cmp r0.y, r0, c16, c16.x
mul r0.y, r0, r2.w
abs r2.w, v4.y
add r4.y, -r2.w, c16
mad r4.x, r2.w, c16.z, c16.w
mad r4.x, r4, r2.w, c17
rsq r4.y, r4.y
add r1.w, r1, -v1
mul r1.w, r0.y, r1
mad r2.w, r4.x, r2, c17.y
rcp r4.y, r4.y
mul r4.x, r2.w, r4.y
cmp r2.w, v4.y, c16.x, c16.y
mul r4.y, r2.w, r4.x
mad r4.x, -r4.y, c17.z, r4
mad r0.y, r2.w, c17.w, r4.x
add r2.w, -r1, c16.y
frc r4.x, r2.w
add_sat r2.w, r2, -r4.x
mul_sat r4.x, -r1.w, c13
mul r0.y, r0, c18.x
mov r4.w, r0.y
mul r1.w, r2, c13.x
mad r1.w, r1, c23.x, r4.x
texldd r5.yw, r4.zwzw, s6, r3.zwzw, r3
add r4.xy, r5.wyzw, c20.w
mad_pp r1.xyz, r1.w, r2, r1
texldd r2.xyz, r4.zwzw, s0, r3.zwzw, r3
mul r4.xy, r4, c21
add r0.xy, r0, r4
mad r0.y, r0, c21.z, c21.x
frc r0.y, r0
add_pp r2.xyz, r2, -r1
mul_sat r5.w, c11.x, c11.x
mad_pp r2.xyz, r5.w, r2, r1
mul r4.xy, r0.zwzw, c15.x
mad r2.w, r0.y, c22.x, c22.y
mad r5.x, r0, c21.w, c21
sincos r0.xy, r2.w
frc r0.y, r5.x
mad r2.w, r0.y, c22.x, c22.y
mov_pp r5.y, r0.x
sincos r0.xy, r2.w
dp4_pp r0.z, c1, c1
mov_pp r5.xz, r0.yyxw
rsq_pp r0.z, r0.z
mul_pp r0.xyz, r0.z, c1
dp3_sat r0.z, v3, r0
dp3_pp_sat r2.w, -r5, -c10
add r0.x, v0.w, c20.z
add_pp r0.w, r2, -r0.z
frc r0.y, r0.x
mad_pp r5.x, r5.w, r0.w, r0.z
add_sat r5.y, r0.x, -r0
texldd r0, r4.zwzw, s3, r3.zwzw, r3
mul_pp r0.w, r0, r5.y
texldd r1, r4, s5, r3.zwzw, r3
mul_pp r1, r0, r1
add_pp r1.xyz, r1, -r2
mad_pp r1.xyz, r1.w, r1, r2
add_pp r1.w, r2, c22.z
mul_pp r4.z, r5.x, c2.w
texld r4.w, v2, s7
mul_pp r5.x, r4.w, r4.z
mul_pp r1.w, r1, c2
mul_pp r1.w, r1, r4
mul_pp_sat r1.w, r1, c22
mul_pp_sat r5.w, r5.x, c17.z
mov r4.z, c8.x
add r5.xyz, c2, r4.z
mad_sat r5.xyz, r5, r5.w, c0
mul_pp r5.xyz, r5, v5.x
mul r2.xyz, r5, c9.x
mad_pp r1.xyz, r1, c3, r2
texldd r2, r4, s4, r3.zwzw, r3
mul_pp r0, r0, r2
mad_pp r0.xyz, -r1, r5, r0
add_pp r1.w, -r1, c16.y
mul_pp r1.xyz, r1, r5
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_OceanRadius]
Float 14 [_OceanDepthFactor]
Vector 15 [_OceanColor]
Float 16 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_ShadowMapTexture] 2D
"ps_3_0
; 196 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
def c17, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c22, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c23, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c24, 15.00000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r1.xyz, v5
add r0.xyz, r1, -r1.zxyw
add r0.w, r0.x, c17.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r0.xyz, r0.w, r0, r1.zxyw
add r0.w, r1.y, -r0.x
add r0.w, r0, c17.y
frc r1.w, r0
dsy r3.xy, v5
add_pp r2.xyz, r1.yxzw, -r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r2, r0
abs r0.w, v5.z
add r1.y, -r0.w, c17
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mad r0.z, r0.w, c17, c17.w
mad r0.z, r0.w, r0, c18.x
rsq r1.y, r1.y
dsx r2.zw, v5.xyxy
mul r2.zw, r2, r2
mad r0.z, r0.w, r0, c18.y
rcp r1.y, r1.y
mul r1.y, r0.z, r1
cmp r0.z, v5, c17.x, c17.y
mul r1.z, r0, r1.y
mad r1.y, -r1.z, c18.z, r1
mov_pp r2.xy, c6
mad_pp r1.zw, r0.xyxy, c21.y, r2.xyxy
mad r0.x, r0.z, c18.w, r1.y
mul r0.z, r0.x, c19.x
mul r3.xy, r3, r3
add r1.y, r3.x, r3
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r4.x, r1.y, c21
dsx r4.w, r0.z
dsy r4.y, r0.z
add r0.z, r2, r2.w
max r1.y, r1.x, r0.w
rcp r2.w, r1.y
min r1.y, r1.x, r0.w
mul r1.y, r1, r2.w
add r0.w, r1.x, -r0
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r4.z, r0, c21.x
mul r2.xy, r1.zwzw, c5.x
mul r0.xy, r1.zwzw, c7.x
mul r2.w, r1.y, r1.y
mul r5.xy, r1.zwzw, c16.x
texldd r0.xyz, r0, s2, r4.zwzw, r4
texldd r2.xyz, r2, s1, r4.zwzw, r4
add_pp r3.xyz, r2, -r0
mov r2.xyz, v5
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c24
mad_sat r2.y, r2, c24.z, c24.w
mad_pp r0.xyz, r2.y, r3, r0
mad r2.x, r2.w, c19.y, c19.z
mad r3.x, r2, r2.w, c19.w
mad r3.x, r3, r2.w, c20
mul r3.y, v1.w, c8.x
add_pp r2.xyz, -r0, c17.y
mul_sat r3.y, r3, c18.z
mad_pp r0.xyz, r3.y, r2, r0
mad r3.x, r3, r2.w, c20.y
mad r2.x, r3, r2.w, c20.z
mul r1.y, r2.x, r1
add r2.w, -r1.y, c20
mul r0.xyz, v0, r0
cmp r0.w, -r0, r1.y, r2
mov r3.xyz, v8
dp3 r1.y, v7, r3
dp3 r1.x, v7, v7
mad r2.w, -r1.y, r1.y, r1.x
add r1.x, -r0.w, c18.w
cmp r0.w, v5.z, r0, r1.x
cmp r0.w, v5.x, r0, -r0
mul r1.x, r0.w, c21
rsq r2.w, r2.w
rcp r2.w, r2.w
mul r3.x, r2.w, r2.w
mad r0.w, c13.x, c13.x, -r3.x
rsq r3.x, r0.w
add r0.w, -r2, c13.x
add r5.z, r1.x, c21.y
add_pp r2.xyz, -r0, c15
cmp r2.w, r1.y, c17.y, c17.x
rcp r3.x, r3.x
add r1.y, r1, -r3.x
cmp r0.w, r0, c17.y, c17.x
mul r0.w, r0, r2
abs r2.w, v5.y
add r3.y, -r2.w, c17
mad r3.x, r2.w, c17.z, c17.w
mad r3.x, r3, r2.w, c18
rsq r3.y, r3.y
add r1.y, r1, -v1.w
mul r1.y, r0.w, r1
mad r2.w, r3.x, r2, c18.y
rcp r3.y, r3.y
mul r3.x, r2.w, r3.y
cmp r2.w, v5.y, c17.x, c17.y
mul r3.y, r2.w, r3.x
mad r3.x, -r3.y, c18.z, r3
mad r0.w, r2, c18, r3.x
add r2.w, -r1.y, c17.y
mul r0.w, r0, c19.x
mov r5.w, r0
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r1.y, c14
mul r1.y, r2.w, c14.x
mad r1.y, r1, c24.x, r3.x
mad_pp r0.xyz, r1.y, r2, r0
texldd r3.yw, r5.zwzw, s6, r4.zwzw, r4
add r3.xy, r3.wyzw, c21.w
texldd r2.xyz, r5.zwzw, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r0
mul_sat r2.w, c12.x, c12.x
mul r3.xy, r3, c22
mov r1.y, r0.w
add r1.xy, r1, r3
mad_pp r3.xyz, r2.w, r2, r0
mad r0.x, r1.y, c22.z, c22
frc r1.y, r0.x
texldd r0, r5, s5, r4.zwzw, r4
mad r2.x, r1.y, c23, c23.y
mad r2.y, r1.x, c22.w, c22.x
sincos r1.xy, r2.x
frc r1.y, r2
mad r2.x, r1.y, c23, c23.y
mov_pp r2.y, r1.x
sincos r1.xy, r2.x
dp4 r1.z, c1, c1
mov_pp r2.xz, r1.yyxw
rsq r1.z, r1.z
mul r1.xyz, r1.z, c1
dp3_sat r1.z, v4, r1
dp3_pp_sat r3.w, -r2, -c11
add r1.x, v0.w, c21.z
add_pp r1.w, r3, -r1.z
frc r1.y, r1.x
mad_pp r6.x, r2.w, r1.w, r1.z
add_sat r2.x, r1, -r1.y
texldd r1, r5.zwzw, s3, r4.zwzw, r4
mul_pp r1.w, r1, r2.x
mul_pp r2, r1, r0
add_pp r2.xyz, r2, -r3
mad_pp r2.xyz, r2.w, r2, r3
add_pp r2.w, r3, c23.z
mul_pp r0.y, r6.x, c3.w
texldp r0.x, v3, s9
rcp r0.z, v3.w
mad r0.z, -v3, r0, r0.x
mov r0.w, c2.x
rcp r0.x, v2.w
mad r6.xy, v2, r0.x, c21.y
cmp r0.z, r0, c17.y, r0.w
dp3 r0.x, v2, v2
cmp r5.z, -v2, c17.x, c17.y
texld r0.w, r6, s7
mul_pp r0.w, r5.z, r0
texld r0.x, r0.x, s8
mul_pp r0.x, r0.w, r0
mul_pp r0.w, r0.x, r0.z
mul_pp r0.y, r0.w, r0
mul_pp r2.w, r2, c3
mul_pp r0.w, r2, r0
mul_pp_sat r0.w, r0, c23
mul_pp_sat r5.z, r0.y, c18
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r5.z, c0
mul_pp r0.xyz, r0, v6.x
mul r3.xyz, r0, c10.x
mad_pp r2.xyz, r2, c4, r3
texldd r3, r5, s4, r4.zwzw, r4
mul_pp r1, r1, r3
mad_pp r1.xyz, -r2, r0, r1
mul_pp r2.xyz, r2, r0
add_pp r0.w, -r0, c17.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c17.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_OceanRadius]
Float 14 [_OceanDepthFactor]
Vector 15 [_OceanColor]
Float 16 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_ShadowMapTexture] 2D
"ps_3_0
; 195 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
def c17, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c22, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c23, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c24, 15.00000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r1.xyz, v5
add r0.xyz, r1, -r1.zxyw
add r0.w, r0.x, c17.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r0.xyz, r0.w, r0, r1.zxyw
add r0.w, r1.y, -r0.x
add r0.w, r0, c17.y
frc r1.w, r0
dsy r3.xy, v5
add_pp r2.xyz, r1.yxzw, -r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r2, r0
abs r0.w, v5.z
add r1.y, -r0.w, c17
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mad r0.z, r0.w, c17, c17.w
mad r0.z, r0.w, r0, c18.x
rsq r1.y, r1.y
dsx r2.zw, v5.xyxy
mul r2.zw, r2, r2
mad r0.z, r0.w, r0, c18.y
rcp r1.y, r1.y
mul r1.y, r0.z, r1
cmp r0.z, v5, c17.x, c17.y
mul r1.z, r0, r1.y
mad r1.y, -r1.z, c18.z, r1
mov_pp r2.xy, c6
mad_pp r1.zw, r0.xyxy, c21.y, r2.xyxy
mad r0.x, r0.z, c18.w, r1.y
mul r0.z, r0.x, c19.x
mul r3.xy, r3, r3
add r1.y, r3.x, r3
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r4.x, r1.y, c21
dsx r4.w, r0.z
dsy r4.y, r0.z
add r0.z, r2, r2.w
max r1.y, r1.x, r0.w
rcp r2.w, r1.y
min r1.y, r1.x, r0.w
mul r1.y, r1, r2.w
add r0.w, r1.x, -r0
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r4.z, r0, c21.x
mul r2.xy, r1.zwzw, c5.x
mul r0.xy, r1.zwzw, c7.x
mul r2.w, r1.y, r1.y
mul r5.xy, r1.zwzw, c16.x
texldd r0.xyz, r0, s2, r4.zwzw, r4
texldd r2.xyz, r2, s1, r4.zwzw, r4
add_pp r3.xyz, r2, -r0
mov r2.xyz, v5
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c24
mad_sat r2.y, r2, c24.z, c24.w
mad_pp r0.xyz, r2.y, r3, r0
mad r2.x, r2.w, c19.y, c19.z
mad r3.x, r2, r2.w, c19.w
mad r3.x, r3, r2.w, c20
mul r3.y, v1.w, c8.x
add_pp r2.xyz, -r0, c17.y
mul_sat r3.y, r3, c18.z
mad_pp r0.xyz, r3.y, r2, r0
mad r3.x, r3, r2.w, c20.y
mad r2.x, r3, r2.w, c20.z
mul r1.y, r2.x, r1
add r2.w, -r1.y, c20
mul r0.xyz, v0, r0
cmp r0.w, -r0, r1.y, r2
mov r3.xyz, v8
dp3 r1.y, v7, r3
dp3 r1.x, v7, v7
mad r2.w, -r1.y, r1.y, r1.x
add r1.x, -r0.w, c18.w
cmp r0.w, v5.z, r0, r1.x
cmp r0.w, v5.x, r0, -r0
mul r1.x, r0.w, c21
rsq r2.w, r2.w
rcp r2.w, r2.w
mul r3.x, r2.w, r2.w
mad r0.w, c13.x, c13.x, -r3.x
rsq r3.x, r0.w
add r0.w, -r2, c13.x
add r5.z, r1.x, c21.y
add_pp r2.xyz, -r0, c15
cmp r2.w, r1.y, c17.y, c17.x
rcp r3.x, r3.x
add r1.y, r1, -r3.x
cmp r0.w, r0, c17.y, c17.x
mul r0.w, r0, r2
abs r2.w, v5.y
add r3.y, -r2.w, c17
mad r3.x, r2.w, c17.z, c17.w
mad r3.x, r3, r2.w, c18
rsq r3.y, r3.y
add r1.y, r1, -v1.w
mul r1.y, r0.w, r1
mad r2.w, r3.x, r2, c18.y
rcp r3.y, r3.y
mul r3.x, r2.w, r3.y
cmp r2.w, v5.y, c17.x, c17.y
mul r3.y, r2.w, r3.x
mad r3.x, -r3.y, c18.z, r3
mad r0.w, r2, c18, r3.x
add r2.w, -r1.y, c17.y
mul r0.w, r0, c19.x
mov r5.w, r0
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r1.y, c14
mul r1.y, r2.w, c14.x
mad r1.y, r1, c24.x, r3.x
mad_pp r0.xyz, r1.y, r2, r0
texldd r3.yw, r5.zwzw, s6, r4.zwzw, r4
add r3.xy, r3.wyzw, c21.w
texldd r2.xyz, r5.zwzw, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r0
mul_sat r2.w, c12.x, c12.x
mul r3.xy, r3, c22
mov r1.y, r0.w
add r1.xy, r1, r3
mad_pp r3.xyz, r2.w, r2, r0
mad r0.x, r1.y, c22.z, c22
frc r1.y, r0.x
texldd r0, r5, s5, r4.zwzw, r4
mad r2.x, r1.y, c23, c23.y
mad r2.y, r1.x, c22.w, c22.x
sincos r1.xy, r2.x
frc r1.y, r2
mad r2.x, r1.y, c23, c23.y
mov_pp r2.y, r1.x
sincos r1.xy, r2.x
dp4 r1.z, c1, c1
mov_pp r2.xz, r1.yyxw
rsq r1.z, r1.z
mul r1.xyz, r1.z, c1
dp3_sat r1.z, v4, r1
dp3_pp_sat r3.w, -r2, -c11
add r1.x, v0.w, c21.z
add_pp r1.w, r3, -r1.z
frc r1.y, r1.x
mad_pp r6.x, r2.w, r1.w, r1.z
add_sat r2.x, r1, -r1.y
texldd r1, r5.zwzw, s3, r4.zwzw, r4
mul_pp r1.w, r1, r2.x
mul_pp r2, r1, r0
add_pp r2.xyz, r2, -r3
mad_pp r2.xyz, r2.w, r2, r3
mov r0.x, c2
add r0.z, c17.y, -r0.x
texldp r0.x, v3, s9
mad r0.z, r0.x, r0, c2.x
add_pp r2.w, r3, c23.z
dp3 r0.x, v2, v2
mul_pp r0.y, r6.x, c3.w
rcp r0.w, v2.w
mad r6.xy, v2, r0.w, c21.y
cmp r5.z, -v2, c17.x, c17.y
texld r0.w, r6, s7
mul_pp r0.w, r5.z, r0
texld r0.x, r0.x, s8
mul_pp r0.x, r0.w, r0
mul_pp r0.w, r0.x, r0.z
mul_pp r0.y, r0.w, r0
mul_pp r2.w, r2, c3
mul_pp r0.w, r2, r0
mul_pp_sat r0.w, r0, c23
mul_pp_sat r5.z, r0.y, c18
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r5.z, c0
mul_pp r0.xyz, r0, v6.x
mul r3.xyz, r0, c10.x
mad_pp r2.xyz, r2, c4, r3
texldd r3, r5, s4, r4.zwzw, r4
mul_pp r1, r1, r3
mad_pp r1.xyz, -r2, r0, r1
mul_pp r2.xyz, r2, r0
add_pp r0.w, -r0, c17.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c17.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Vector 5 [_DetailOffset]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] 2D
"ps_3_0
; 184 ALU, 22 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c23, 15.00000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
abs r0.xyz, v4
add r1.xyz, r0, -r0.zxyw
add r0.w, r1.x, c16.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r1.xyz, r0.w, r1, r0.zxyw
add r0.w, r0.y, -r1.x
add r0.w, r0, c16.y
add_pp r2.xyz, r0.yxzw, -r1
frc r1.w, r0
add_sat r0.y, r0.w, -r1.w
mad_pp r1.xyz, r0.y, r2, r1
abs_pp r0.y, r1.x
rcp_pp r0.z, r0.y
abs r0.y, v4.z
mul_pp r0.zw, r1.xyzy, r0.z
add r1.y, -r0, c16
mad r1.x, r0.y, c16.z, c16.w
mad r1.x, r0.y, r1, c17
mov_pp r2.xy, c5
mad_pp r0.zw, r0, c20.y, r2.xyxy
rsq r1.y, r1.y
dsy r2.zw, v4.xyxy
mul r2.zw, r2, r2
mad r1.x, r0.y, r1, c17.y
rcp r1.y, r1.y
mul r1.y, r1.x, r1
cmp r1.x, v4.z, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
mad r1.x, r1, c17.w, r1.y
mul r1.z, r1.x, c18.x
dsx r3.w, r1.z
dsy r3.y, r1.z
dsx r1.zw, v4.xyxy
mul r1.zw, r1, r1
add r1.z, r1, r1.w
add r1.w, r2.z, r2
rsq r1.z, r1.z
rcp r1.z, r1.z
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r3.x, r1.w, c20
max r1.w, r0.x, r0.y
rcp r2.w, r1.w
min r1.w, r0.x, r0.y
mul r1.w, r1, r2
add r0.x, r0, -r0.y
mul r3.z, r1, c20.x
mul r2.xy, r0.zwzw, c4.x
mul r1.xy, r0.zwzw, c6.x
mul r2.w, r1, r1
texldd r1.xyz, r1, s2, r3.zwzw, r3
texldd r2.xyz, r2, s1, r3.zwzw, r3
add_pp r4.xyz, r2, -r1
mov r2.xyz, v4
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c23
mad_sat r2.y, r2, c23.z, c23.w
mad_pp r1.xyz, r2.y, r4, r1
mad r2.x, r2.w, c18.y, c18.z
mad r4.x, r2, r2.w, c18.w
mad r4.x, r4, r2.w, c19
mul r4.y, v1.w, c7.x
add_pp r2.xyz, -r1, c16.y
mul_sat r4.y, r4, c17.z
mad_pp r1.xyz, r4.y, r2, r1
mad r4.x, r4, r2.w, c19.y
mad r2.x, r4, r2.w, c19.z
mul r1.w, r2.x, r1
add r2.w, -r1, c19
mul r1.xyz, v0, r1
cmp r0.x, -r0, r1.w, r2.w
mov r4.xyz, v7
dp3 r1.w, v6, r4
dp3 r0.y, v6, v6
mad r2.w, -r1, r1, r0.y
add r0.y, -r0.x, c17.w
cmp r0.x, v4.z, r0, r0.y
rsq r2.w, r2.w
rcp r0.y, r2.w
mul r2.w, r0.y, r0.y
mad r2.w, c12.x, c12.x, -r2
rsq r4.x, r2.w
cmp r0.x, v4, r0, -r0
mul r0.x, r0, c20
add r0.y, -r0, c12.x
add r4.z, r0.x, c20.y
add_pp r2.xyz, -r1, c14
cmp r2.w, r1, c16.y, c16.x
rcp r4.x, r4.x
add r1.w, r1, -r4.x
cmp r0.y, r0, c16, c16.x
mul r0.y, r0, r2.w
abs r2.w, v4.y
add r4.y, -r2.w, c16
mad r4.x, r2.w, c16.z, c16.w
mad r4.x, r4, r2.w, c17
rsq r4.y, r4.y
add r1.w, r1, -v1
mul r1.w, r0.y, r1
mad r2.w, r4.x, r2, c17.y
rcp r4.y, r4.y
mul r4.x, r2.w, r4.y
cmp r2.w, v4.y, c16.x, c16.y
mul r4.y, r2.w, r4.x
mad r4.x, -r4.y, c17.z, r4
mad r0.y, r2.w, c17.w, r4.x
add r2.w, -r1, c16.y
frc r4.x, r2.w
add_sat r2.w, r2, -r4.x
mul_sat r4.x, -r1.w, c13
mul r0.y, r0, c18.x
mov r4.w, r0.y
mul r1.w, r2, c13.x
mad r1.w, r1, c23.x, r4.x
texldd r5.yw, r4.zwzw, s6, r3.zwzw, r3
add r4.xy, r5.wyzw, c20.w
mad_pp r1.xyz, r1.w, r2, r1
texldd r2.xyz, r4.zwzw, s0, r3.zwzw, r3
mul r4.xy, r4, c21
add r0.xy, r0, r4
mad r0.y, r0, c21.z, c21.x
frc r0.y, r0
add_pp r2.xyz, r2, -r1
mul_sat r5.w, c11.x, c11.x
mad_pp r2.xyz, r5.w, r2, r1
mul r4.xy, r0.zwzw, c15.x
mad r2.w, r0.y, c22.x, c22.y
mad r5.x, r0, c21.w, c21
sincos r0.xy, r2.w
frc r0.y, r5.x
mad r2.w, r0.y, c22.x, c22.y
mov_pp r5.y, r0.x
sincos r0.xy, r2.w
dp4_pp r0.z, c1, c1
mov_pp r5.xz, r0.yyxw
rsq_pp r0.z, r0.z
mul_pp r0.xyz, r0.z, c1
dp3_sat r0.z, v3, r0
dp3_pp_sat r2.w, -r5, -c10
add r0.x, v0.w, c20.z
add_pp r0.w, r2, -r0.z
frc r0.y, r0.x
mad_pp r5.x, r5.w, r0.w, r0.z
add_sat r5.y, r0.x, -r0
texldd r0, r4.zwzw, s3, r3.zwzw, r3
mul_pp r0.w, r0, r5.y
texldd r1, r4, s5, r3.zwzw, r3
mul_pp r1, r0, r1
add_pp r1.xyz, r1, -r2
mad_pp r1.xyz, r1.w, r1, r2
add_pp r1.w, r2, c22.z
mul_pp r4.z, r5.x, c2.w
texldp r6.x, v2, s7
mul_pp r4.w, r6.x, r4.z
mov r4.z, c8.x
mul_pp r1.w, r1, c2
mul_pp r1.w, r1, r6.x
mul_pp_sat r1.w, r1, c22
mul_pp_sat r4.w, r4, c17.z
add r5.xyz, c2, r4.z
mad_sat r5.xyz, r5, r4.w, c0
mul_pp r5.xyz, r5, v5.x
mul r2.xyz, r5, c9.x
mad_pp r1.xyz, r1, c3, r2
texldd r2, r4, s4, r3.zwzw, r3
mul_pp r0, r0, r2
mad_pp r0.xyz, -r1, r5, r0
add_pp r1.w, -r1, c16.y
mul_pp r1.xyz, r1, r5
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Vector 5 [_DetailOffset]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] 2D
SetTexture 8 [_LightTexture0] 2D
"ps_3_0
; 186 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c23, 15.00000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r1.xyz, v5
add r0.xyz, r1, -r1.zxyw
add r0.w, r0.x, c16.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r0.xyz, r0.w, r0, r1.zxyw
add r0.w, r1.y, -r0.x
add r0.w, r0, c16.y
frc r1.w, r0
dsy r3.xy, v5
add_pp r2.xyz, r1.yxzw, -r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r2, r0
abs r0.w, v5.z
add r1.y, -r0.w, c16
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mad r0.z, r0.w, c16, c16.w
mad r0.z, r0.w, r0, c17.x
rsq r1.y, r1.y
dsx r2.zw, v5.xyxy
mul r2.zw, r2, r2
mad r0.z, r0.w, r0, c17.y
rcp r1.y, r1.y
mul r1.y, r0.z, r1
cmp r0.z, v5, c16.x, c16.y
mul r1.z, r0, r1.y
mad r1.y, -r1.z, c17.z, r1
mov_pp r2.xy, c5
mad_pp r1.zw, r0.xyxy, c20.y, r2.xyxy
mad r0.x, r0.z, c17.w, r1.y
mul r0.z, r0.x, c18.x
mul r3.xy, r3, r3
add r1.y, r3.x, r3
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r4.x, r1.y, c20
dsx r4.w, r0.z
dsy r4.y, r0.z
add r0.z, r2, r2.w
max r1.y, r1.x, r0.w
rcp r2.w, r1.y
min r1.y, r1.x, r0.w
mul r1.y, r1, r2.w
add r0.w, r1.x, -r0
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r4.z, r0, c20.x
mul r2.xy, r1.zwzw, c4.x
mul r0.xy, r1.zwzw, c6.x
mul r2.w, r1.y, r1.y
mul r5.xy, r1.zwzw, c15.x
texldd r0.xyz, r0, s2, r4.zwzw, r4
texldd r2.xyz, r2, s1, r4.zwzw, r4
add_pp r3.xyz, r2, -r0
mov r2.xyz, v5
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c23
mad_sat r2.y, r2, c23.z, c23.w
mad_pp r0.xyz, r2.y, r3, r0
mad r2.x, r2.w, c18.y, c18.z
mad r3.x, r2, r2.w, c18.w
mad r3.x, r3, r2.w, c19
mul r3.y, v1.w, c7.x
add_pp r2.xyz, -r0, c16.y
mul_sat r3.y, r3, c17.z
mad_pp r0.xyz, r3.y, r2, r0
mad r3.x, r3, r2.w, c19.y
mad r2.x, r3, r2.w, c19.z
mul r1.y, r2.x, r1
add r2.w, -r1.y, c19
mul r0.xyz, v0, r0
cmp r0.w, -r0, r1.y, r2
mov r3.xyz, v8
dp3 r1.y, v7, r3
dp3 r1.x, v7, v7
mad r2.w, -r1.y, r1.y, r1.x
add r1.x, -r0.w, c17.w
cmp r0.w, v5.z, r0, r1.x
cmp r0.w, v5.x, r0, -r0
mul r1.x, r0.w, c20
rsq r2.w, r2.w
rcp r2.w, r2.w
mul r3.x, r2.w, r2.w
mad r0.w, c12.x, c12.x, -r3.x
rsq r3.x, r0.w
add r0.w, -r2, c12.x
add r5.z, r1.x, c20.y
add_pp r2.xyz, -r0, c14
cmp r2.w, r1.y, c16.y, c16.x
rcp r3.x, r3.x
add r1.y, r1, -r3.x
cmp r0.w, r0, c16.y, c16.x
mul r0.w, r0, r2
abs r2.w, v5.y
add r3.y, -r2.w, c16
mad r3.x, r2.w, c16.z, c16.w
mad r3.x, r3, r2.w, c17
rsq r3.y, r3.y
add r1.y, r1, -v1.w
mul r1.y, r0.w, r1
mad r2.w, r3.x, r2, c17.y
rcp r3.y, r3.y
mul r3.x, r2.w, r3.y
cmp r2.w, v5.y, c16.x, c16.y
mul r3.y, r2.w, r3.x
mad r3.x, -r3.y, c17.z, r3
mad r0.w, r2, c17, r3.x
add r2.w, -r1.y, c16.y
mul r0.w, r0, c18.x
mov r5.w, r0
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r1.y, c13
mul r1.y, r2.w, c13.x
mad r1.y, r1, c23.x, r3.x
mad_pp r0.xyz, r1.y, r2, r0
texldd r3.yw, r5.zwzw, s6, r4.zwzw, r4
add r3.xy, r3.wyzw, c20.w
texldd r2.xyz, r5.zwzw, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r0
mul_sat r2.w, c11.x, c11.x
mul r3.xy, r3, c21
mov r1.y, r0.w
add r1.xy, r1, r3
mad_pp r3.xyz, r2.w, r2, r0
mad r0.x, r1.y, c21.z, c21
frc r1.y, r0.x
texldd r0, r5, s5, r4.zwzw, r4
mad r2.x, r1.y, c22, c22.y
mad r2.y, r1.x, c21.w, c21.x
sincos r1.xy, r2.x
frc r1.y, r2
mad r2.x, r1.y, c22, c22.y
mov_pp r2.y, r1.x
sincos r1.xy, r2.x
dp4_pp r1.z, c1, c1
mov_pp r2.xz, r1.yyxw
rsq_pp r1.z, r1.z
mul_pp r1.xyz, r1.z, c1
dp3_sat r1.z, v4, r1
dp3_pp_sat r3.w, -r2, -c10
add r1.x, v0.w, c20.z
add_pp r1.w, r3, -r1.z
frc r1.y, r1.x
mad_pp r6.x, r2.w, r1.w, r1.z
add_sat r2.x, r1, -r1.y
texldd r1, r5.zwzw, s3, r4.zwzw, r4
mul_pp r1.w, r1, r2.x
mul_pp r2, r1, r0
add_pp r2.xyz, r2, -r3
mad_pp r2.xyz, r2.w, r2, r3
add_pp r2.w, r3, c22.z
texldp r0.x, v3, s7
texld r0.w, v2, s8
mul r0.w, r0, r0.x
mul_pp r0.y, r6.x, c2.w
mul_pp r0.y, r0.w, r0
mul_pp r2.w, r2, c2
mul_pp r0.w, r2, r0
mul_pp_sat r0.w, r0, c22
mul_pp_sat r5.z, r0.y, c17
mov r0.x, c8
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r5.z, c0
mul_pp r0.xyz, r0, v6.x
mul r3.xyz, r0, c9.x
mad_pp r2.xyz, r2, c3, r3
texldd r3, r5, s4, r4.zwzw, r4
mul_pp r1, r1, r3
mad_pp r1.xyz, -r2, r0, r1
mul_pp r2.xyz, r2, r0
add_pp r0.w, -r0, c16.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Vector 7 [_DetailOffset]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Vector 12 [_SunDir]
Float 13 [_PlanetOpacity]
Float 14 [_OceanRadius]
Float 15 [_OceanDepthFactor]
Vector 16 [_OceanColor]
Float 17 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] CUBE
SetTexture 8 [_LightTexture0] 2D
"ps_3_0
; 195 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
dcl_2d s8
def c18, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c23, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c24, 6.28318501, -3.14159298, -0.01000214, 0.97000003
def c25, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c26, 4.03944778, 15.00000000, -0.94999999, 0
def c27, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r5.xyz, v5
add r0.xyz, r5, -r5.zxyw
add r0.w, r0.x, c18.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r5.zxyw
add r0.w, r5.y, -r0.x
add r0.w, r0, c18.y
frc r1.x, r0.w
add_pp r2.xyz, r5.yxzw, -r0
add_sat r0.w, r0, -r1.x
mad_pp r0.xyz, r0.w, r2, r0
abs r0.w, v5.z
abs_pp r0.x, r0
rcp_pp r1.z, r0.x
add r1.x, -r0.w, c18.y
mad r0.x, r0.w, c18.z, c18.w
mad r0.x, r0.w, r0, c19
rsq r1.x, r1.x
mul_pp r1.zw, r0.xyzy, r1.z
mad r0.x, r0.w, r0, c19.y
rcp r1.x, r1.x
mul r1.x, r0, r1
cmp r0.x, v5.z, c18, c18.y
mul r1.y, r0.x, r1.x
mad r0.y, -r1, c19.z, r1.x
mov_pp r1.xy, c7
mad_pp r2.xy, r1.zwzw, c22.y, r1
mad r0.x, r0, c19.w, r0.y
mul r0.z, r0.x, c20.x
dsx r1.zw, v5.xyxy
dsy r1.xy, v5
mul r1.xy, r1, r1
add r1.x, r1, r1.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r4.x, r1, c22
dsx r4.w, r0.z
dsy r4.y, r0.z
mul r1.zw, r1, r1
add r0.z, r1, r1.w
mov r3.xyz, v5
dp3_sat r1.w, v1, -r3
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r4.z, r0, c22.x
mul r0.xy, r2, c6.x
mul r1.xy, r2, c8.x
texldd r1.xyz, r1, s2, r4.zwzw, r4
texldd r0.xyz, r0, s1, r4.zwzw, r4
add_pp r3.xyz, r0, -r1
add r2.w, r1, c26.z
mov r0.xyz, v8
dp3 r1.w, v7, r0
mad_sat r0.x, r2.w, c27, c27.y
mad_pp r0.xyz, r0.x, r3, r1
dp3 r2.z, v7, v7
mad r2.z, -r1.w, r1.w, r2
rsq r2.z, r2.z
rcp r2.z, r2.z
mul r2.w, r2.z, r2.z
mul r3.x, v1.w, c9
add_pp r1.xyz, -r0, c18.y
mul_sat r3.x, r3, c19.z
mad_pp r0.xyz, r3.x, r1, r0
mad r1.x, c14, c14, -r2.w
rsq r2.w, r1.x
rcp r3.x, r2.w
mul r0.xyz, v0, r0
add r3.y, r1.w, -r3.x
max r2.w, r5.x, r0
rcp r3.x, r2.w
min r2.w, r5.x, r0
mul r2.w, r2, r3.x
add_pp r1.xyz, -r0, c16
cmp r3.x, r1.w, c18.y, c18
add r2.z, -r2, c14.x
cmp r1.w, r2.z, c18.y, c18.x
mul r1.w, r1, r3.x
add r3.y, r3, -v1.w
mul r2.z, r1.w, r3.y
add r3.y, -r2.z, c18
mul r1.w, r2, r2
frc r3.z, r3.y
add_sat r3.y, r3, -r3.z
mad r3.x, r1.w, c20.y, c20.z
mad r3.x, r3, r1.w, c20.w
mad r3.x, r3, r1.w, c21
mad r3.x, r3, r1.w, c21.y
mad r1.w, r3.x, r1, c21.z
mul r1.w, r1, r2
mul r3.y, r3, c15.x
mul_sat r2.z, -r2, c15.x
mad r2.z, r3.y, c26.y, r2
mad_pp r1.xyz, r2.z, r1, r0
add r0.x, r5, -r0.w
add r0.y, -r1.w, c21.w
cmp r0.w, -r0.x, r1, r0.y
abs r0.x, v5.y
add r1.w, -r0, c19
add r0.z, -r0.x, c18.y
mad r0.y, r0.x, c18.z, c18.w
mad r0.y, r0, r0.x, c19.x
rsq r0.z, r0.z
cmp r0.w, v5.z, r0, r1
mad r0.x, r0.y, r0, c19.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v5.y, c18, c18.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c19.z, r0
cmp r0.z, v5.x, r0.w, -r0.w
mul r5.x, r0.z, c22
mad r0.x, r0, c19.w, r0.y
mul r0.w, r0.x, c20.x
add r5.z, r5.x, c22.y
mov r5.w, r0
texldd r3.yw, r5.zwzw, s6, r4.zwzw, r4
texldd r0.xyz, r5.zwzw, s0, r4.zwzw, r4
add_pp r0.xyz, r0, -r1
add r2.zw, r3.xywy, c22.w
mul_sat r6.x, c13, c13
mad_pp r3.xyz, r6.x, r0, r1
mul r0.xy, r2.zwzw, c23
mov r5.y, r0.w
add r1.xy, r5, r0
mul r5.xy, r2, c17.x
mad r1.y, r1, c23.z, c23.x
texldd r0, r5, s5, r4.zwzw, r4
mad r1.z, r1.x, c23.w, c23.x
frc r1.y, r1
mad r1.x, r1.y, c24, c24.y
sincos r2.xy, r1.x
frc r1.y, r1.z
mad r2.y, r1, c24.x, c24
sincos r1.xy, r2.y
mov_pp r2.y, r2.x
mov_pp r2.xz, r1.yyxw
dp4 r1.z, c1, c1
rsq r1.x, r1.z
mul r1.xyz, r1.x, c1
dp3_pp_sat r3.w, -r2, -c12
dp3_sat r6.y, v4, r1
add r1.w, v0, c22.z
frc r1.x, r1.w
add_sat r2.x, r1.w, -r1
texldd r1, r5.zwzw, s3, r4.zwzw, r4
mul_pp r1.w, r1, r2.x
mul_pp r2, r1, r0
add_pp r2.xyz, r2, -r3
mad_pp r2.xyz, r2.w, r2, r3
add_pp r6.z, r3.w, -r6.y
mad_pp r0.y, r6.x, r6.z, r6
dp3 r0.x, v3, v3
rsq r5.w, r0.x
mul_pp r5.z, r0.y, c4.w
texld r0, v3, s7
dp4 r0.y, r0, c25
add_pp r2.w, r3, c24.z
rcp r5.w, r5.w
mul r0.x, r5.w, c2.w
mad r0.y, -r0.x, c24.w, r0
mov r0.z, c3.x
dp3 r0.x, v2, v2
cmp r0.y, r0, c18, r0.z
texld r0.x, r0.x, s8
mul r0.w, r0.x, r0.y
mul_pp r0.y, r0.w, r5.z
mul_pp r2.w, r2, c4
mul_pp r0.w, r2, r0
mul_pp_sat r0.w, r0, c26.x
mul_pp_sat r5.z, r0.y, c19
mov r0.x, c10
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r5.z, c0
mul_pp r0.xyz, r0, v6.x
mul r3.xyz, r0, c11.x
mad_pp r2.xyz, r2, c5, r3
texldd r3, r5, s4, r4.zwzw, r4
mul_pp r1, r1, r3
mad_pp r1.xyz, -r2, r0, r1
mul_pp r2.xyz, r2, r0
add_pp r0.w, -r0, c18.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c18.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Vector 7 [_DetailOffset]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Vector 12 [_SunDir]
Float 13 [_PlanetOpacity]
Float 14 [_OceanRadius]
Float 15 [_OceanDepthFactor]
Vector 16 [_OceanColor]
Float 17 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] CUBE
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_LightTexture0] CUBE
"ps_3_0
; 196 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
dcl_2d s8
dcl_cube s9
def c18, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c23, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c24, 6.28318501, -3.14159298, -0.01000214, 0.97000003
def c25, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c26, 4.03944778, 15.00000000, -0.94999999, 0
def c27, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r1.xyz, v5
add r0.xyz, r1, -r1.zxyw
add r0.w, r0.x, c18.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r0.xyz, r0.w, r0, r1.zxyw
add r0.w, r1.y, -r0.x
add r0.w, r0, c18.y
frc r1.w, r0
dsy r3.xy, v5
add_pp r2.xyz, r1.yxzw, -r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r2, r0
abs r0.w, v5.z
add r1.y, -r0.w, c18
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mad r0.z, r0.w, c18, c18.w
mad r0.z, r0.w, r0, c19.x
rsq r1.y, r1.y
dsx r2.zw, v5.xyxy
mul r2.zw, r2, r2
mad r0.z, r0.w, r0, c19.y
rcp r1.y, r1.y
mul r1.y, r0.z, r1
cmp r0.z, v5, c18.x, c18.y
mul r1.z, r0, r1.y
mad r1.y, -r1.z, c19.z, r1
mov_pp r2.xy, c7
mad_pp r1.zw, r0.xyxy, c22.y, r2.xyxy
mad r0.x, r0.z, c19.w, r1.y
mul r0.z, r0.x, c20.x
mul r3.xy, r3, r3
add r1.y, r3.x, r3
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r4.x, r1.y, c22
dsx r4.w, r0.z
dsy r4.y, r0.z
add r0.z, r2, r2.w
max r1.y, r1.x, r0.w
rcp r2.w, r1.y
min r1.y, r1.x, r0.w
mul r1.y, r1, r2.w
add r0.w, r1.x, -r0
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r4.z, r0, c22.x
mul r2.xy, r1.zwzw, c6.x
mul r0.xy, r1.zwzw, c8.x
mul r2.w, r1.y, r1.y
mul r5.xy, r1.zwzw, c17.x
texldd r0.xyz, r0, s2, r4.zwzw, r4
texldd r2.xyz, r2, s1, r4.zwzw, r4
add_pp r3.xyz, r2, -r0
mov r2.xyz, v5
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c26.z
mad_sat r2.y, r2, c27.x, c27
mad_pp r0.xyz, r2.y, r3, r0
mad r2.x, r2.w, c20.y, c20.z
mad r3.x, r2, r2.w, c20.w
mad r3.x, r3, r2.w, c21
mul r3.y, v1.w, c9.x
add_pp r2.xyz, -r0, c18.y
mul_sat r3.y, r3, c19.z
mad_pp r0.xyz, r3.y, r2, r0
mad r3.x, r3, r2.w, c21.y
mad r2.x, r3, r2.w, c21.z
mul r1.y, r2.x, r1
add r2.w, -r1.y, c21
mul r0.xyz, v0, r0
cmp r0.w, -r0, r1.y, r2
mov r3.xyz, v8
dp3 r1.y, v7, r3
dp3 r1.x, v7, v7
mad r2.w, -r1.y, r1.y, r1.x
add r1.x, -r0.w, c19.w
cmp r0.w, v5.z, r0, r1.x
cmp r0.w, v5.x, r0, -r0
mul r1.x, r0.w, c22
rsq r2.w, r2.w
rcp r2.w, r2.w
mul r3.x, r2.w, r2.w
mad r0.w, c14.x, c14.x, -r3.x
rsq r3.x, r0.w
add r0.w, -r2, c14.x
add r5.z, r1.x, c22.y
add_pp r2.xyz, -r0, c16
cmp r2.w, r1.y, c18.y, c18.x
rcp r3.x, r3.x
add r1.y, r1, -r3.x
cmp r0.w, r0, c18.y, c18.x
mul r0.w, r0, r2
abs r2.w, v5.y
add r3.y, -r2.w, c18
mad r3.x, r2.w, c18.z, c18.w
mad r3.x, r3, r2.w, c19
rsq r3.y, r3.y
add r1.y, r1, -v1.w
mul r1.y, r0.w, r1
mad r2.w, r3.x, r2, c19.y
rcp r3.y, r3.y
mul r3.x, r2.w, r3.y
cmp r2.w, v5.y, c18.x, c18.y
mul r3.y, r2.w, r3.x
mad r3.x, -r3.y, c19.z, r3
mad r0.w, r2, c19, r3.x
add r2.w, -r1.y, c18.y
mul r0.w, r0, c20.x
mov r5.w, r0
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
mul_sat r3.x, -r1.y, c15
mul r1.y, r2.w, c15.x
mad r1.y, r1, c26, r3.x
mad_pp r0.xyz, r1.y, r2, r0
texldd r3.yw, r5.zwzw, s6, r4.zwzw, r4
add r3.xy, r3.wyzw, c22.w
texldd r2.xyz, r5.zwzw, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r0
mul_sat r2.w, c13.x, c13.x
mul r3.xy, r3, c23
mov r1.y, r0.w
add r1.xy, r1, r3
mad_pp r3.xyz, r2.w, r2, r0
mad r0.x, r1.y, c23.z, c23
frc r1.y, r0.x
mad r2.x, r1.y, c24, c24.y
mad r2.y, r1.x, c23.w, c23.x
sincos r1.xy, r2.x
frc r1.y, r2
mad r2.x, r1.y, c24, c24.y
mov_pp r2.y, r1.x
sincos r1.xy, r2.x
dp4 r1.z, c1, c1
mov_pp r2.xz, r1.yyxw
rsq r1.z, r1.z
mul r1.xyz, r1.z, c1
dp3_sat r1.z, v4, r1
dp3_pp_sat r3.w, -r2, -c12
add r1.x, v0.w, c22.z
add_pp r1.w, r3, -r1.z
frc r1.y, r1.x
mad_pp r6.x, r2.w, r1.w, r1.z
add_sat r2.x, r1, -r1.y
texldd r1, r5.zwzw, s3, r4.zwzw, r4
dp3 r5.w, v3, v3
mul_pp r1.w, r1, r2.x
texldd r0, r5, s5, r4.zwzw, r4
mul_pp r2, r1, r0
texld r0, v3, s7
dp4 r0.y, r0, c25
add_pp r2.xyz, r2, -r3
mad_pp r2.xyz, r2.w, r2, r3
add_pp r2.w, r3, c24.z
rsq r5.w, r5.w
rcp r0.x, r5.w
mul r0.x, r0, c2.w
mad r0.x, -r0, c24.w, r0.y
mov r0.z, c3.x
cmp r0.y, r0.x, c18, r0.z
dp3 r0.x, v2, v2
mul_pp r5.z, r6.x, c4.w
texld r0.w, v2, s9
texld r0.x, r0.x, s8
mul r0.x, r0, r0.w
mul r0.w, r0.x, r0.y
mul_pp r0.y, r0.w, r5.z
mul_pp r2.w, r2, c4
mul_pp r0.w, r2, r0
mul_pp_sat r0.w, r0, c26.x
mul_pp_sat r5.z, r0.y, c19
mov r0.x, c10
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r5.z, c0
mul_pp r0.xyz, r0, v6.x
mul r3.xyz, r0, c11.x
mad_pp r2.xyz, r2, c5, r3
texldd r3, r5, s4, r4.zwzw, r4
mul_pp r1, r1, r3
mad_pp r1.xyz, -r2, r0, r1
mul_pp r2.xyz, r2, r0
add_pp r0.w, -r0, c18.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c18.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Vector 10 [_DetailOffset]
Float 11 [_DetailVertScale]
Float 12 [_DetailDist]
Float 13 [_MinLight]
Float 14 [_Albedo]
Vector 15 [_SunDir]
Float 16 [_PlanetOpacity]
Float 17 [_OceanRadius]
Float 18 [_OceanDepthFactor]
Vector 19 [_OceanColor]
Float 20 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_ShadowMapTexture] 2D
"ps_3_0
; 204 ALU, 27 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
def c21, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c22, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c23, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c24, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c25, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c26, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c27, 6.28318501, -3.14159298, -0.01000214, 0.25000000
def c28, 4.03944778, 15.00000000, -0.94999999, 0
def c29, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r1.xyz, v5
add r0.xyz, r1, -r1.zxyw
add r0.w, r0.x, c21.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r0.xyz, r0.w, r0, r1.zxyw
add r0.w, r1.y, -r0.x
add r0.w, r0, c21.y
frc r1.w, r0
add_pp r2.xyz, r1.yxzw, -r0
add_sat r0.w, r0, -r1
mad_pp r2.xyz, r0.w, r2, r0
abs r0.w, v5.z
abs_pp r0.x, r2
rcp_pp r1.y, r0.x
mul_pp r1.zw, r2.xyzy, r1.y
add r0.y, -r0.w, c21
mad r0.x, r0.w, c21.z, c21.w
mad r0.x, r0.w, r0, c22
mov_pp r2.xy, c10
mad_pp r1.zw, r1, c25.y, r2.xyxy
rsq r0.y, r0.y
dsx r2.xy, v5
dsy r2.zw, v5.xyxy
mul r2.zw, r2, r2
add r1.y, r2.z, r2.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r4.x, r1.y, c25
mov r3.xyz, v5
dp3_sat r1.y, v1, -r3
mad r0.x, r0.w, r0, c22.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v5.z, c21, c21.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c22.z, r0
mad r0.x, r0, c22.w, r0.y
mul r0.z, r0.x, c23.x
dsx r4.w, r0.z
dsy r4.y, r0.z
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r4.z, r0, c25.x
mul r0.xy, r1.zwzw, c9.x
mul r2.xy, r1.zwzw, c11.x
texldd r2.xyz, r2, s2, r4.zwzw, r4
texldd r0.xyz, r0, s1, r4.zwzw, r4
add_pp r3.xyz, r0, -r2
add r3.w, r1.y, c28.z
mov r0.xyz, v8
dp3 r1.y, v7, r0
mad_sat r0.x, r3.w, c29, c29.y
mad_pp r0.xyz, r0.x, r3, r2
dp3 r2.w, v7, v7
mad r2.w, -r1.y, r1.y, r2
rsq r2.w, r2.w
rcp r2.w, r2.w
mul r3.x, r2.w, r2.w
mul r3.y, v1.w, c12.x
add_pp r2.xyz, -r0, c21.y
mul_sat r3.y, r3, c22.z
mad_pp r0.xyz, r3.y, r2, r0
mad r2.x, c17, c17, -r3
rsq r3.x, r2.x
rcp r3.y, r3.x
add r3.z, r1.y, -r3.y
max r3.x, r1, r0.w
rcp r3.y, r3.x
min r3.x, r1, r0.w
mul r3.x, r3, r3.y
mul r0.xyz, v0, r0
add_pp r2.xyz, -r0, c19
cmp r3.y, r1, c21, c21.x
add r2.w, -r2, c17.x
cmp r1.y, r2.w, c21, c21.x
mul r1.y, r1, r3
add r3.z, r3, -v1.w
mul r3.y, r1, r3.z
add r3.z, -r3.y, c21.y
mul r1.y, r3.x, r3.x
frc r3.w, r3.z
add_sat r3.z, r3, -r3.w
mad r2.w, r1.y, c23.y, c23.z
mad r2.w, r2, r1.y, c23
mad r2.w, r2, r1.y, c24.x
mad r2.w, r2, r1.y, c24.y
mad r1.y, r2.w, r1, c24.z
mul r1.y, r1, r3.x
add r0.w, r1.x, -r0
mul r3.z, r3, c18.x
mul_sat r3.y, -r3, c18.x
mad r2.w, r3.z, c28.y, r3.y
mad_pp r0.xyz, r2.w, r2, r0
add r2.x, -r1.y, c24.w
cmp r2.x, -r0.w, r1.y, r2
abs r0.w, v5.y
add r2.y, -r2.x, c22.w
add r1.y, -r0.w, c21
mad r1.x, r0.w, c21.z, c21.w
mad r1.x, r1, r0.w, c22
rsq r1.y, r1.y
mad r0.w, r1.x, r0, c22.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v5.y, c21.x, c21.y
mul r1.y, r0.w, r1.x
mad r1.x, -r1.y, c22.z, r1
mad r0.w, r0, c22, r1.x
cmp r2.x, v5.z, r2, r2.y
cmp r1.y, v5.x, r2.x, -r2.x
mul r5.z, r1.y, c25.x
mul r0.w, r0, c23.x
add r1.x, r5.z, c25.y
mov r1.y, r0.w
texldd r2.xyz, r1, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r0
mul_sat r6.w, c16.x, c16.x
mad_pp r3.xyz, r6.w, r2, r0
texldd r5.yw, r1, s6, r4.zwzw, r4
add r0.xy, r5.wyzw, c25.w
mul r5.xy, r1.zwzw, c20.x
add r1.z, v0.w, c25
mul r0.xy, r0, c26
mov r5.w, r0
add r5.zw, r5, r0.xyxy
mad r1.w, r5, c26.z, c26.x
frc r2.x, r1.w
rcp r5.w, v3.w
mad r3.w, r2.x, c27.x, c27.y
frc r1.w, r1.z
add_sat r2.x, r1.z, -r1.w
texldd r1, r1, s3, r4.zwzw, r4
mul_pp r1.w, r1, r2.x
texldd r0, r5, s5, r4.zwzw, r4
mul_pp r2, r1, r0
sincos r0.xy, r3.w
mad r0.y, r5.z, c26.w, c26.x
add_pp r2.xyz, r2, -r3
frc r0.y, r0
mad_pp r2.xyz, r2.w, r2, r3
mad r3.w, r0.y, c27.x, c27.y
mov_pp r7.y, r0.x
sincos r0.xy, r3.w
dp4 r5.z, c1, c1
rsq r0.z, r5.z
mov_pp r7.xz, r0.yyxw
mul r6.xyz, r0.z, c1
dp3_sat r0.x, v4, r6
dp3_pp_sat r3.w, -r7, -c15
add_pp r0.y, r3.w, -r0.x
mad_pp r0.z, r6.w, r0.y, r0.x
mad r0.xy, v3, r5.w, c6
texld r0.x, r0, s9
add_pp r2.w, r3, c27.z
mul_pp r5.z, r0, c7.w
mad r6.xy, v3, r5.w, c5
mov r0.w, r0.x
texld r0.x, r6, s9
mad r6.xy, v3, r5.w, c4
mov r0.z, r0.x
texld r0.x, r6, s9
mad r6.xy, v3, r5.w, c3
mov r0.y, r0.x
texld r0.x, r6, s9
mad r0, -v3.z, r5.w, r0
mov r6.x, c2
cmp r0, r0, c21.y, r6.x
dp4_pp r0.y, r0, c27.w
rcp r5.w, v2.w
mad r6.xy, v2, r5.w, c25.y
dp3 r0.x, v2, v2
texld r0.w, r6, s7
cmp r0.z, -v2, c21.x, c21.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s8
mul_pp r0.x, r0.z, r0
mul_pp r0.w, r0.x, r0.y
mul_pp r0.y, r0.w, r5.z
mul_pp r2.w, r2, c7
mul_pp r0.w, r2, r0
mul_pp_sat r0.w, r0, c28.x
mul_pp_sat r5.z, r0.y, c22
mov r0.x, c13
add r0.xyz, c7, r0.x
mad_sat r0.xyz, r0, r5.z, c0
mul_pp r0.xyz, r0, v6.x
mul r3.xyz, r0, c14.x
mad_pp r2.xyz, r2, c8, r3
texldd r3, r5, s4, r4.zwzw, r4
mul_pp r1, r1, r3
mad_pp r1.xyz, -r2, r0, r1
mul_pp r2.xyz, r2, r0
add_pp r0.w, -r0, c21.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c21.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Vector 10 [_DetailOffset]
Float 11 [_DetailVertScale]
Float 12 [_DetailDist]
Float 13 [_MinLight]
Float 14 [_Albedo]
Vector 15 [_SunDir]
Float 16 [_PlanetOpacity]
Float 17 [_OceanRadius]
Float 18 [_OceanDepthFactor]
Vector 19 [_OceanColor]
Float 20 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_ShadowMapTexture] 2D
"ps_3_0
; 204 ALU, 27 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
def c21, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c22, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c23, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c24, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c25, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c26, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c27, 6.28318501, -3.14159298, -0.01000214, 0.25000000
def c28, 4.03944778, 15.00000000, -0.94999999, 0
def c29, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r1.xyz, v5
add r0.xyz, r1, -r1.zxyw
add r0.w, r0.x, c21.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r0.xyz, r0.w, r0, r1.zxyw
add r0.w, r1.y, -r0.x
add r0.w, r0, c21.y
frc r1.w, r0
add_pp r2.xyz, r1.yxzw, -r0
add_sat r0.w, r0, -r1
mad_pp r2.xyz, r0.w, r2, r0
abs r0.w, v5.z
abs_pp r0.x, r2
rcp_pp r1.y, r0.x
mul_pp r1.zw, r2.xyzy, r1.y
add r0.y, -r0.w, c21
mad r0.x, r0.w, c21.z, c21.w
mad r0.x, r0.w, r0, c22
mov_pp r2.xy, c10
mad_pp r5.zw, r1, c25.y, r2.xyxy
rsq r0.y, r0.y
dsx r2.xy, v5
dsy r2.zw, v5.xyxy
mul r2.zw, r2, r2
add r1.y, r2.z, r2.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.z, r1.y, c25.x
mov r3.xyz, v5
dp3_sat r1.y, v1, -r3
rcp r6.w, v3.w
mad r0.x, r0.w, r0, c22.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v5.z, c21, c21.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c22.z, r0
mad r0.x, r0, c22.w, r0.y
mul r0.z, r0.x, c23.x
dsx r5.y, r0.z
dsy r1.w, r0.z
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r5.x, r0.z, c25
mul r0.xy, r5.zwzw, c9.x
mul r2.xy, r5.zwzw, c11.x
texldd r2.xyz, r2, s2, r5, r1.zwzw
texldd r0.xyz, r0, s1, r5, r1.zwzw
add_pp r3.xyz, r0, -r2
add r3.w, r1.y, c28.z
mov r0.xyz, v8
dp3 r1.y, v7, r0
mad_sat r0.x, r3.w, c29, c29.y
mad_pp r0.xyz, r0.x, r3, r2
dp3 r2.w, v7, v7
mad r2.w, -r1.y, r1.y, r2
rsq r2.w, r2.w
rcp r2.w, r2.w
mul r3.x, r2.w, r2.w
mul r3.y, v1.w, c12.x
add_pp r2.xyz, -r0, c21.y
mul_sat r3.y, r3, c22.z
mad_pp r0.xyz, r3.y, r2, r0
mad r2.x, c17, c17, -r3
rsq r3.x, r2.x
rcp r3.y, r3.x
mul r0.xyz, v0, r0
add r3.z, r1.y, -r3.y
max r3.x, r1, r0.w
rcp r3.y, r3.x
min r3.x, r1, r0.w
mul r3.x, r3, r3.y
add_pp r2.xyz, -r0, c19
cmp r3.y, r1, c21, c21.x
add r2.w, -r2, c17.x
cmp r1.y, r2.w, c21, c21.x
mul r1.y, r1, r3
add r3.z, r3, -v1.w
mul r3.y, r1, r3.z
add r3.z, -r3.y, c21.y
mul r1.y, r3.x, r3.x
frc r3.w, r3.z
add_sat r3.z, r3, -r3.w
mad r2.w, r1.y, c23.y, c23.z
mad r2.w, r2, r1.y, c23
mad r2.w, r2, r1.y, c24.x
mad r2.w, r2, r1.y, c24.y
mad r1.y, r2.w, r1, c24.z
mul r1.y, r1, r3.x
mul r3.z, r3, c18.x
mul_sat r3.y, -r3, c18.x
mad r2.w, r3.z, c28.y, r3.y
mad_pp r3.xyz, r2.w, r2, r0
add r0.x, r1, -r0.w
add r0.y, -r1, c24.w
cmp r0.w, -r0.x, r1.y, r0.y
abs r0.x, v5.y
add r1.x, -r0.w, c22.w
cmp r0.w, v5.z, r0, r1.x
add r0.z, -r0.x, c21.y
mad r0.y, r0.x, c21.z, c21.w
mad r0.y, r0, r0.x, c22.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c22.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v5.y, c21, c21.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c22.z, r0
cmp r0.z, v5.x, r0.w, -r0.w
mul r2.z, r0, c25.x
mad r0.x, r0, c22.w, r0.y
mul r1.y, r0.x, c23.x
add r2.x, r2.z, c25.y
mov r2.y, r1
texldd r0.xyz, r2, s0, r5, r1.zwzw
add_pp r0.xyz, r0, -r3
mul_sat r1.x, c16, c16
mad_pp r4.xyz, r1.x, r0, r3
texldd r0.yw, r2, s6, r5, r1.zwzw
add r3.xy, r0.wyzw, c25.w
mul r5.zw, r5, c20.x
mul r3.xy, r3, c26
mov r2.w, r1.y
add r6.xy, r2.zwzw, r3
add r2.z, v0.w, c25
mad r1.y, r6, c26.z, c26.x
frc r2.w, r2.z
add_sat r3.x, r2.z, -r2.w
texldd r2, r2, s3, r5, r1.zwzw
frc r1.y, r1
texldd r0, r5.zwzw, s5, r5, r1.zwzw
mul_pp r2.w, r2, r3.x
mul_pp r3, r2, r0
add_pp r3.xyz, r3, -r4
mad r1.y, r1, c27.x, c27
sincos r0.xy, r1.y
mad r4.w, r6.x, c26, c26.x
frc r0.y, r4.w
mad_pp r3.xyz, r3.w, r3, r4
mad r1.y, r0, c27.x, c27
mov_pp r6.y, r0.x
sincos r0.xy, r1.y
dp4 r0.z, c1, c1
mov_pp r6.xz, r0.yyxw
dp3_pp_sat r1.y, -r6, -c15
rsq r0.z, r0.z
mul r0.xyz, r0.z, c1
dp3_sat r0.w, v4, r0
add_pp r4.w, r1.y, -r0
mad_pp r0.w, r1.x, r4, r0
mad r0.xyz, v3, r6.w, c6
mad r6.xyz, v3, r6.w, c4
texld r1.x, r6, s9
texld r0.x, r0, s9
mul_pp r4.w, r0, c7
mov_pp r0.w, r0.x
mad r0.xyz, v3, r6.w, c5
texld r0.x, r0, s9
mov_pp r0.z, r0.x
mov_pp r0.y, r1.x
mov r0.x, c2
add r1.x, c21.y, -r0
mad r6.xyz, v3, r6.w, c3
texld r0.x, r6, s9
mad r0, r0, r1.x, c2.x
dp4_pp r0.y, r0, c27.w
rcp r1.x, v2.w
mad r6.xy, v2, r1.x, c25.y
dp3 r0.x, v2, v2
texld r0.w, r6, s7
cmp r0.z, -v2, c21.x, c21.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s8
mul_pp r0.x, r0.z, r0
mul_pp r0.w, r0.x, r0.y
mul_pp r0.y, r0.w, r4.w
mul_pp_sat r1.x, r0.y, c22.z
mov r0.x, c13
add r0.xyz, c7, r0.x
mad_sat r0.xyz, r0, r1.x, c0
mul_pp r0.xyz, r0, v6.x
mul r4.xyz, r0, c14.x
add_pp r1.x, r1.y, c27.z
mul_pp r3.w, r1.x, c7
texldd r1, r5.zwzw, s4, r5, r1.zwzw
mul_pp r0.w, r3, r0
mul_pp_sat r0.w, r0, c28.x
mul_pp r1, r2, r1
mad_pp r3.xyz, r3, c8, r4
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c21.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c21.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Vector 7 [_DetailOffset]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Vector 12 [_SunDir]
Float 13 [_PlanetOpacity]
Float 14 [_OceanRadius]
Float 15 [_OceanDepthFactor]
Vector 16 [_OceanColor]
Float 17 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] CUBE
SetTexture 8 [_LightTexture0] 2D
"ps_3_0
; 203 ALU, 26 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
dcl_2d s8
def c18, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c23, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c24, 6.28318501, -3.14159298, -0.01000214, 0.00781250
def c25, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c26, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c27, 4.03944778, 15.00000000, -0.94999999, 0
def c28, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r1.xyz, v5
add r0.xyz, r1, -r1.zxyw
add r0.w, r0.x, c18.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad r0.xyz, r0.w, r0, r1.zxyw
add r0.w, r1.y, -r0.x
add r0.w, r0, c18.y
frc r1.w, r0
add_pp r2.xyz, r1.yxzw, -r0
add_sat r0.w, r0, -r1
mad_pp r2.xyz, r0.w, r2, r0
abs r0.w, v5.z
abs_pp r0.x, r2
rcp_pp r1.y, r0.x
mul_pp r1.zw, r2.xyzy, r1.y
add r0.y, -r0.w, c18
mad r0.x, r0.w, c18.z, c18.w
mad r0.x, r0.w, r0, c19
mov_pp r2.xy, c7
mad_pp r1.zw, r1, c22.y, r2.xyxy
rsq r0.y, r0.y
dsx r2.xy, v5
dsy r2.zw, v5.xyxy
mul r2.zw, r2, r2
add r1.y, r2.z, r2.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r6.x, r1.y, c22
mov r3.xyz, v5
dp3_sat r1.y, v1, -r3
mul r7.xy, r1.zwzw, c17.x
mad r0.x, r0.w, r0, c19.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v5.z, c18, c18.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c19.z, r0
mad r0.x, r0, c19.w, r0.y
mul r0.z, r0.x, c20.x
dsx r6.w, r0.z
dsy r6.y, r0.z
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r6.z, r0, c22.x
mul r0.xy, r1.zwzw, c6.x
mul r2.xy, r1.zwzw, c8.x
texldd r2.xyz, r2, s2, r6.zwzw, r6
texldd r0.xyz, r0, s1, r6.zwzw, r6
add_pp r3.xyz, r0, -r2
add r3.w, r1.y, c27.z
mov r0.xyz, v8
dp3 r1.y, v7, r0
mad_sat r0.x, r3.w, c28, c28.y
mad_pp r0.xyz, r0.x, r3, r2
dp3 r2.w, v7, v7
mad r2.w, -r1.y, r1.y, r2
rsq r2.w, r2.w
rcp r2.w, r2.w
mul r3.x, r2.w, r2.w
mul r3.y, v1.w, c9.x
add_pp r2.xyz, -r0, c18.y
mul_sat r3.y, r3, c19.z
mad_pp r0.xyz, r3.y, r2, r0
mad r2.x, c14, c14, -r3
rsq r3.x, r2.x
rcp r3.y, r3.x
add r3.z, r1.y, -r3.y
max r3.x, r1, r0.w
rcp r3.y, r3.x
min r3.x, r1, r0.w
mul r3.x, r3, r3.y
mul r0.xyz, v0, r0
add_pp r2.xyz, -r0, c16
cmp r3.y, r1, c18, c18.x
add r2.w, -r2, c14.x
cmp r1.y, r2.w, c18, c18.x
mul r1.y, r1, r3
add r3.z, r3, -v1.w
mul r3.y, r1, r3.z
add r3.z, -r3.y, c18.y
mul r1.y, r3.x, r3.x
frc r3.w, r3.z
add_sat r3.z, r3, -r3.w
mad r2.w, r1.y, c20.y, c20.z
mad r2.w, r2, r1.y, c20
mad r2.w, r2, r1.y, c21.x
mad r2.w, r2, r1.y, c21.y
mad r1.y, r2.w, r1, c21.z
mul r1.y, r1, r3.x
add r0.w, r1.x, -r0
mul_sat r3.w, c13.x, c13.x
add r1.z, v0.w, c22
mul r3.z, r3, c15.x
mul_sat r3.y, -r3, c15.x
mad r2.w, r3.z, c27.y, r3.y
mad_pp r0.xyz, r2.w, r2, r0
add r2.x, -r1.y, c21.w
cmp r2.x, -r0.w, r1.y, r2
abs r0.w, v5.y
add r2.y, -r2.x, c19.w
add r1.y, -r0.w, c18
mad r1.x, r0.w, c18.z, c18.w
mad r1.x, r1, r0.w, c19
rsq r1.y, r1.y
mad r0.w, r1.x, r0, c19.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v5.y, c18.x, c18.y
mul r1.y, r0.w, r1.x
mad r1.x, -r1.y, c19.z, r1
mad r0.w, r0, c19, r1.x
mul r0.w, r0, c20.x
cmp r2.x, v5.z, r2, r2.y
cmp r1.y, v5.x, r2.x, -r2.x
mul r3.x, r1.y, c22
add r1.x, r3, c22.y
mov r1.y, r0.w
texldd r2.xyz, r1, s0, r6.zwzw, r6
add_pp r2.xyz, r2, -r0
mad_pp r4.xyz, r3.w, r2, r0
texldd r5.yw, r1, s6, r6.zwzw, r6
add r0.xy, r5.wyzw, c22.w
mul r0.xy, r0, c23
mov r3.y, r0.w
add r3.xy, r3, r0
mad r1.w, r3.y, c23.z, c23.x
frc r2.x, r1.w
mad r3.y, r2.x, c24.x, c24
frc r1.w, r1.z
add_sat r2.x, r1.z, -r1.w
texldd r1, r1, s3, r6.zwzw, r6
mul_pp r1.w, r1, r2.x
texldd r0, r7, s5, r6.zwzw, r6
mul_pp r2, r1, r0
sincos r0.xy, r3.y
mad r0.y, r3.x, c23.w, c23.x
frc r0.y, r0
add_pp r2.xyz, r2, -r4
mov_pp r5.y, r0.x
mad r3.x, r0.y, c24, c24.y
sincos r0.xy, r3.x
dp4 r3.y, c1, c1
rsq r0.z, r3.y
mul r3.xyz, r0.z, c1
mov_pp r5.xz, r0.yyxw
dp3_sat r0.w, v4, r3
dp3_pp_sat r4.w, -r5, -c12
add_pp r3.x, r4.w, -r0.w
mad_pp r3.x, r3.w, r3, r0.w
mul_pp r7.z, r3.x, c4.w
mad_pp r2.xyz, r2.w, r2, r4
add r0.xyz, v3, c25.xyyw
texld r0, r0, s7
dp4 r5.w, r0, c26
add r0.xyz, v3, c25.yxyw
texld r0, r0, s7
dp4 r5.z, r0, c26
add r3.xyz, v3, c25.yyxw
texld r3, r3, s7
dp4 r5.y, r3, c26
add r0.xyz, v3, c24.w
texld r0, r0, s7
dp3 r3.x, v3, v3
add_pp r2.w, r4, c24.z
rsq r3.x, r3.x
dp4 r5.x, r0, c26
rcp r0.x, r3.x
mul r0.x, r0, c2.w
mad r0, -r0.x, c25.z, r5
mov r3.x, c3
cmp r3, r0, c18.y, r3.x
dp3 r0.x, v2, v2
dp4_pp r0.y, r3, c25.w
texld r0.x, r0.x, s8
mul r0.w, r0.x, r0.y
mul_pp r0.y, r0.w, r7.z
mul_pp r2.w, r2, c4
mul_pp r0.w, r2, r0
mul_pp_sat r0.w, r0, c27.x
mul_pp_sat r3.x, r0.y, c19.z
mov r0.x, c10
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r3.x, c0
mul_pp r0.xyz, r0, v6.x
mul r3.xyz, r0, c11.x
mad_pp r2.xyz, r2, c5, r3
texldd r3, r7, s4, r6.zwzw, r6
mul_pp r1, r1, r3
mad_pp r1.xyz, -r2, r0, r1
mul_pp r2.xyz, r2, r0
add_pp r0.w, -r0, c18.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c18.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Vector 7 [_DetailOffset]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Vector 12 [_SunDir]
Float 13 [_PlanetOpacity]
Float 14 [_OceanRadius]
Float 15 [_OceanDepthFactor]
Vector 16 [_OceanColor]
Float 17 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_midTex] 2D
SetTexture 2 [_steepTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] CUBE
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_LightTexture0] CUBE
"ps_3_0
; 203 ALU, 27 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
dcl_2d s8
dcl_cube s9
def c18, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c23, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c24, 6.28318501, -3.14159298, -0.01000214, 0.00781250
def c25, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c26, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c27, 4.03944778, 15.00000000, -0.94999999, 0
def c28, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
abs r4.xyz, v5
add r0.xyz, r4, -r4.zxyw
add r0.w, r0.x, c18.y
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
mad r0.xyz, r0.w, r0, r4.zxyw
add r0.w, r4.y, -r0.x
add r0.w, r0, c18.y
frc r1.x, r0.w
add_pp r2.xyz, r4.yxzw, -r0
add_sat r0.w, r0, -r1.x
mad_pp r1.xyz, r0.w, r2, r0
abs r0.w, v5.z
abs_pp r0.x, r1
rcp_pp r1.x, r0.x
mul_pp r1.xy, r1.zyzw, r1.x
add r0.y, -r0.w, c18
mad r0.x, r0.w, c18.z, c18.w
mad r0.x, r0.w, r0, c19
mov_pp r1.zw, c7.xyxy
mad_pp r3.xy, r1, c22.y, r1.zwzw
rsq r0.y, r0.y
dsx r1.xy, v5
dsy r1.zw, v5.xyxy
mul r1.zw, r1, r1
mul r1.xy, r1, r1
mad r0.x, r0.w, r0, c19.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v5.z, c18, c18.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c19.z, r0
mad r0.x, r0, c19.w, r0.y
mul r0.z, r0.x, c20.x
dsx r6.w, r0.z
dsy r6.y, r0.z
add r0.z, r1.x, r1.y
add r1.x, r1.z, r1.w
mov r2.xyz, v5
dp3_sat r1.w, v1, -r2
rsq r0.z, r0.z
rcp r0.z, r0.z
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r6.x, r1, c22
mul r6.z, r0, c22.x
mul r0.xy, r3, c6.x
mul r1.xy, r3, c8.x
texldd r1.xyz, r1, s2, r6.zwzw, r6
texldd r0.xyz, r0, s1, r6.zwzw, r6
add_pp r2.xyz, r0, -r1
add r3.z, r1.w, c27
mov r0.xyz, v8
dp3 r1.w, v7, r0
mad_sat r0.x, r3.z, c28, c28.y
mad_pp r0.xyz, r0.x, r2, r1
dp3 r2.w, v7, v7
mad r2.w, -r1, r1, r2
rsq r2.x, r2.w
rcp r2.x, r2.x
mul r2.y, r2.x, r2.x
mul r2.z, v1.w, c9.x
add_pp r1.xyz, -r0, c18.y
mul_sat r2.z, r2, c19
mad_pp r0.xyz, r2.z, r1, r0
mad r1.x, c14, c14, -r2.y
rsq r2.y, r1.x
rcp r2.z, r2.y
mul r0.xyz, v0, r0
add r2.w, r1, -r2.z
max r2.y, r4.x, r0.w
rcp r2.z, r2.y
min r2.y, r4.x, r0.w
mul r2.y, r2, r2.z
add_pp r1.xyz, -r0, c16
cmp r2.z, r1.w, c18.y, c18.x
add r2.x, -r2, c14
cmp r1.w, r2.x, c18.y, c18.x
mul r1.w, r1, r2.z
add r2.w, r2, -v1
mul r2.z, r1.w, r2.w
add r2.w, -r2.z, c18.y
mul r1.w, r2.y, r2.y
frc r3.z, r2.w
add_sat r2.w, r2, -r3.z
mad r2.x, r1.w, c20.y, c20.z
mad r2.x, r2, r1.w, c20.w
mad r2.x, r2, r1.w, c21
mad r2.x, r2, r1.w, c21.y
mad r1.w, r2.x, r1, c21.z
mul r1.w, r1, r2.y
mul_sat r3.w, c13.x, c13.x
mul r7.xy, r3, c17.x
mul r2.w, r2, c15.x
mul_sat r2.z, -r2, c15.x
mad r2.x, r2.w, c27.y, r2.z
mad_pp r2.xyz, r2.x, r1, r0
add r0.x, r4, -r0.w
add r0.y, -r1.w, c21.w
cmp r0.w, -r0.x, r1, r0.y
abs r0.x, v5.y
add r1.x, -r0.w, c19.w
add r0.z, -r0.x, c18.y
mad r0.y, r0.x, c18.z, c18.w
mad r0.y, r0, r0.x, c19.x
rsq r0.z, r0.z
cmp r0.w, v5.z, r0, r1.x
mad r0.x, r0.y, r0, c19.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v5.y, c18, c18.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c19.z, r0
cmp r0.z, v5.x, r0.w, -r0.w
mul r1.z, r0, c22.x
mad r0.x, r0, c19.w, r0.y
mul r1.w, r0.x, c20.x
add r1.x, r1.z, c22.y
mov r1.y, r1.w
texldd r0.xyz, r1, s0, r6.zwzw, r6
add_pp r0.xyz, r0, -r2
mad_pp r4.xyz, r3.w, r0, r2
texldd r0.yw, r1, s6, r6.zwzw, r6
add r2.xy, r0.wyzw, c22.w
mul r2.xy, r2, c23
add r3.xy, r1.zwzw, r2
add r1.z, v0.w, c22
mad r2.x, r3.y, c23.z, c23
frc r3.y, r2.x
frc r1.w, r1.z
add_sat r2.x, r1.z, -r1.w
texldd r1, r1, s3, r6.zwzw, r6
mul_pp r1.w, r1, r2.x
texldd r0, r7, s5, r6.zwzw, r6
mul_pp r2, r1, r0
mad r3.y, r3, c24.x, c24
add_pp r2.xyz, r2, -r4
sincos r0.xy, r3.y
mad r3.x, r3, c23.w, c23
frc r0.y, r3.x
mad r3.x, r0.y, c24, c24.y
mov_pp r3.y, r0.x
sincos r0.xy, r3.x
dp4 r0.z, c1, c1
mov_pp r3.xz, r0.yyxw
rsq r0.z, r0.z
dp3_pp_sat r4.w, -r3, -c12
mul r0.xyz, r0.z, c1
dp3_sat r3.x, v4, r0
add_pp r3.y, r4.w, -r3.x
mad_pp r7.z, r3.w, r3.y, r3.x
mad_pp r2.xyz, r2.w, r2, r4
add r0.xyz, v3, c25.xyyw
texld r0, r0, s7
dp4 r5.w, r0, c26
add r0.xyz, v3, c25.yxyw
texld r0, r0, s7
dp4 r5.z, r0, c26
add r3.xyz, v3, c25.yyxw
texld r3, r3, s7
dp4 r5.y, r3, c26
add r0.xyz, v3, c24.w
texld r0, r0, s7
dp3 r3.x, v3, v3
add_pp r2.w, r4, c24.z
rsq r3.x, r3.x
dp4 r5.x, r0, c26
rcp r0.x, r3.x
mul r0.x, r0, c2.w
mov r3.x, c3
mad r0, -r0.x, c25.z, r5
cmp r0, r0, c18.y, r3.x
dp4_pp r0.y, r0, c25.w
dp3 r0.x, v2, v2
mul_pp r3.x, r7.z, c4.w
texld r0.w, v2, s9
texld r0.x, r0.x, s8
mul r0.x, r0, r0.w
mul r0.w, r0.x, r0.y
mul_pp r0.y, r0.w, r3.x
mul_pp r2.w, r2, c4
mul_pp r0.w, r2, r0
mul_pp_sat r0.w, r0, c27.x
mul_pp_sat r3.x, r0.y, c19.z
mov r0.x, c10
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r3.x, c0
mul_pp r0.xyz, r0, v6.x
mul r3.xyz, r0, c11.x
mad_pp r2.xyz, r2, c5, r3
texldd r3, r7, s4, r6.zwzw, r6
mul_pp r1, r1, r3
mad_pp r1.xyz, -r2, r0, r1
mul_pp r2.xyz, r2, r0
add_pp r0.w, -r0, c18.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c18.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

}

#LINE 239

	
		}
		
		Pass {
            Tags {"LightMode" = "ForwardAdd"} 
            Blend One One                                      
            Program "vp" {
// Vertex combos: 5
//   opengl - ALU: 10 to 19
//   d3d9 - ALU: 12 to 21
//   d3d11 - ALU: 8 to 17, TEX: 0 to 0, FLOW: 1 to 1
//   d3d11_9x - ALU: 8 to 17, TEX: 0 to 0, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Vector 17 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 18 [unity_Scale]
Matrix 13 [_LightMatrix0]
"!!ARBvp1.0
# 18 ALU
PARAM c[19] = { program.local[0],
		state.matrix.mvp,
		program.local[5..18] };
TEMP R0;
TEMP R1;
MOV R1, c[17];
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, R1, c[11];
DP4 R0.x, R1, c[9];
DP4 R0.y, R1, c[10];
MAD result.texcoord[2].xyz, R0, c[18].w, -vertex.position;
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP4 result.texcoord[3].z, R0, c[15];
DP4 result.texcoord[3].y, R0, c[14];
DP4 result.texcoord[3].x, R0, c[13];
MOV result.texcoord[5], vertex.color;
MOV result.texcoord[1].xyz, vertex.normal;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 18 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 17 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_2_0
; 20 ALU
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
mov r0, c10
dp4 r2.z, c16, r0
mov r0, c9
dp4 r2.y, c16, r0
mov r1, c8
dp4 r2.x, c16, r1
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mad oT2.xyz, r2, c17.w, -v0
dp4 oT3.z, r0, c14
dp4 oT3.y, r0, c13
dp4 oT3.x, r0, c12
mov oT5, v1
mov oT1.xyz, v2
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedmjjpegplcgemohadockdciemelndpjpbabaaaaaaoiaeaaaaadaaaaaa
cmaaaaaalmaaaaaaheabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaaaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadapaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaakeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcgmadaaaaeaaaabaa
nlaaaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
abaaaaaafjaaaaaeegiocaaaacaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaajhcaabaaa
aaaaaaaafgifcaaaabaaaaaaaaaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaal
hcaabaaaaaaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabcaaaaaa
kgikcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaa
egiccaaaacaaaaaabdaaaaaapgipcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaalhccabaaaacaaaaaaegacbaaaaaaaaaaapgipcaaaacaaaaaabeaaaaaa
egbcbaiaebaaaaaaaaaaaaaadgaaaaafhccabaaaadaaaaaaegbcbaaaacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhccabaaaaeaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafpccabaaaafaaaaaaegbobaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz);
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  highp float tmpvar_4;
  tmpvar_4 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_5;
  tmpvar_5 = texture2D (_LightTexture0, vec2(tmpvar_4)).w;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_6;
  tmpvar_6 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (tmpvar_5 * 2.0));
  c_1.xyz = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_8;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "POINT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz);
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  highp float tmpvar_4;
  tmpvar_4 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_5;
  tmpvar_5 = texture2D (_LightTexture0, vec2(tmpvar_4)).w;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_6;
  tmpvar_6 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (tmpvar_5 * 2.0));
  c_1.xyz = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_8;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 17 [unity_Scale]
Matrix 12 [_LightMatrix0]
"agal_vs
[bc]
aaaaaaaaaaaaapacakaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c10
bdaaaaaaacaaaeacbaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r2.z, c16, r0
aaaaaaaaaaaaapacajaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c9
bdaaaaaaacaaacacbaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r2.y, c16, r0
aaaaaaaaabaaapacaiaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1, c8
bdaaaaaaacaaabacbaaaaaoeabaaaaaaabaaaaoeacaaaaaa dp4 r2.x, c16, r1
bdaaaaaaaaaaaiacaaaaaaoeaaaaaaaaahaaaaoeabaaaaaa dp4 r0.w, a0, c7
bdaaaaaaaaaaaeacaaaaaaoeaaaaaaaaagaaaaoeabaaaaaa dp4 r0.z, a0, c6
bdaaaaaaaaaaabacaaaaaaoeaaaaaaaaaeaaaaoeabaaaaaa dp4 r0.x, a0, c4
bdaaaaaaaaaaacacaaaaaaoeaaaaaaaaafaaaaoeabaaaaaa dp4 r0.y, a0, c5
adaaaaaaabaaahacacaaaakeacaaaaaabbaaaappabaaaaaa mul r1.xyz, r2.xyzz, c17.w
acaaaaaaacaaahaeabaaaakeacaaaaaaaaaaaaoeaaaaaaaa sub v2.xyz, r1.xyzz, a0
bdaaaaaaadaaaeaeaaaaaaoeacaaaaaaaoaaaaoeabaaaaaa dp4 v3.z, r0, c14
bdaaaaaaadaaacaeaaaaaaoeacaaaaaaanaaaaoeabaaaaaa dp4 v3.y, r0, c13
bdaaaaaaadaaabaeaaaaaaoeacaaaaaaamaaaaoeabaaaaaa dp4 v3.x, r0, c12
aaaaaaaaafaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v5, a2
aaaaaaaaabaaahaeabaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v1.xyz, a1
bdaaaaaaaaaaaiadaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 o0.w, a0, c3
bdaaaaaaaaaaaeadaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 o0.z, a0, c2
bdaaaaaaaaaaacadaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 o0.y, a0, c1
bdaaaaaaaaaaabadaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 o0.x, a0, c0
aaaaaaaaabaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.w, c0
aaaaaaaaacaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v2.w, c0
aaaaaaaaadaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v3.w, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedakhailhlejdgcnafjjmlpemddlfdopddabaaaaaaaaahaaaaaeaaaaaa
daaaaaaaeeacaaaaliafaaaaeiagaaaaebgpgodjamacaaaaamacaaaaaaacpopp
leabaaaafiaaaaaaaeaaceaaaaaafeaaaaaafeaaaaaaceaaabaafeaaaaaaabaa
aeaaabaaaaaaaaaaabaaaaaaabaaafaaaaaaaaaaacaaaaaaaeaaagaaaaaaaaaa
acaaamaaajaaakaaaaaaaaaaaaaaaaaaaaacpoppbpaaaaacafaaaaiaaaaaapja
bpaaaaacafaaabiaabaaapjabpaaaaacafaaaciaacaaapjaabaaaaacaaaaapia
afaaoekaafaaaaadabaaahiaaaaaffiaapaaoekaaeaaaaaeabaaahiaaoaaoeka
aaaaaaiaabaaoeiaaeaaaaaeaaaaahiabaaaoekaaaaakkiaabaaoeiaaeaaaaae
aaaaahiabbaaoekaaaaappiaaaaaoeiaaeaaaaaeabaaahoaaaaaoeiabcaappka
aaaaoejbafaaaaadaaaaapiaaaaaffjaalaaoekaaeaaaaaeaaaaapiaakaaoeka
aaaaaajaaaaaoeiaaeaaaaaeaaaaapiaamaaoekaaaaakkjaaaaaoeiaaeaaaaae
aaaaapiaanaaoekaaaaappjaaaaaoeiaafaaaaadabaaahiaaaaaffiaacaaoeka
aeaaaaaeabaaahiaabaaoekaaaaaaaiaabaaoeiaaeaaaaaeaaaaahiaadaaoeka
aaaakkiaabaaoeiaaeaaaaaeadaaahoaaeaaoekaaaaappiaaaaaoeiaafaaaaad
aaaaapiaaaaaffjaahaaoekaaeaaaaaeaaaaapiaagaaoekaaaaaaajaaaaaoeia
aeaaaaaeaaaaapiaaiaaoekaaaaakkjaaaaaoeiaaeaaaaaeaaaaapiaajaaoeka
aaaappjaaaaaoeiaaeaaaaaeaaaaadmaaaaappiaaaaaoekaaaaaoeiaabaaaaac
aaaaammaaaaaoeiaabaaaaacacaaahoaacaaoejaabaaaaacaeaaapoaabaaoeja
ppppaaaafdeieefcgmadaaaaeaaaabaanlaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
bfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaajhcaabaaaaaaaaaaafgifcaaaabaaaaaaaaaaaaaa
egiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaa
baaaaaaaagiacaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaa
aaaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaaabaaaaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabdaaaaaapgipcaaa
abaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhccabaaaacaaaaaaegacbaaa
aaaaaaaapgipcaaaacaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaadgaaaaaf
hccabaaaadaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
aeaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
dgaaaaafpccabaaaafaaaaaaegbobaaaabaaaaaadoaaaaabejfdeheoiiaaaaaa
aeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaa
hbaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaacaaaaaaahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaafeeb
eoehefeofeaaklklepfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaa
abaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaadapaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaa
keaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaiaaaakeaaaaaaadaaaaaa
aaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaa
afaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklkl
"
}

SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec4 color;
};
#line 317
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 348
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 335
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 339
    o.lightDir = ObjSpaceLightDir( v.vertex);
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 344
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD5;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.uv);
    xlv_TEXCOORD2 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD1 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec4 color;
};
#line 317
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 348
#line 348
lowp vec4 frag( in v2f IN ) {
    IN.lightDir = normalize(IN.lightDir);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    #line 352
    lowp vec3 normal = IN.normal;
    lowp float diff = xll_saturate_f(dot( normal, IN.lightDir));
    lowp vec4 c;
    c.xyz = (((IN.color.xyz * _LightColor0.xyz) * diff) * (atten * 2.0));
    #line 356
    c.w = IN.color.w;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.uv = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD2);
    xlt_IN.normal = vec3(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Vector 9 [_WorldSpaceLightPos0]
Matrix 5 [_World2Object]
"!!ARBvp1.0
# 10 ALU
PARAM c[10] = { program.local[0],
		state.matrix.mvp,
		program.local[5..9] };
TEMP R0;
MOV R0, c[9];
DP4 result.texcoord[2].z, R0, c[7];
DP4 result.texcoord[2].y, R0, c[6];
DP4 result.texcoord[2].x, R0, c[5];
MOV result.texcoord[5], vertex.color;
MOV result.texcoord[1].xyz, vertex.normal;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 10 instructions, 1 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceLightPos0]
Matrix 4 [_World2Object]
"vs_2_0
; 12 ALU
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
mov r0, c6
dp4 oT2.z, c8, r0
mov r0, c5
mov r1, c4
dp4 oT2.y, c8, r0
dp4 oT2.x, c8, r1
mov oT5, v1
mov oT1.xyz, v2
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 320 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 256 [_World2Object] 4
BindCB "UnityLighting" 0
BindCB "UnityPerDraw" 1
// 11 instructions, 1 temp regs, 0 temp arrays:
// ALU 8 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhlffamgibkghgdhcndobnoaidcnlmladabaaaaaafiadaaaaadaaaaaa
cmaaaaaalmaaaaaafmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaaaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
jiaaaaaaafaaaaaaaiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaimaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadapaaaaimaaaaaa
acaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaimaaaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaahaiaaaaimaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
peabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaaaaaaaaaaabaaaaaafjaaaaae
egiocaaaabaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaa
aeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaadiaaaaajhcaabaaaaaaaaaaafgifcaaaaaaaaaaaaaaaaaaaegiccaaa
abaaaaaabbaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaabaaaaaabaaaaaaa
agiacaaaaaaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaa
egiccaaaabaaaaaabcaaaaaakgikcaaaaaaaaaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaalhccabaaaacaaaaaaegiccaaaabaaaaaabdaaaaaapgipcaaaaaaaaaaa
aaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaadaaaaaaegbcbaaaacaaaaaa
dgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (_World2Object * _WorldSpaceLightPos0).xyz;
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_4;
  tmpvar_4 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * 2.0);
  c_1.xyz = tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_6;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (_World2Object * _WorldSpaceLightPos0).xyz;
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_4;
  tmpvar_4 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * 2.0);
  c_1.xyz = tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_6;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceLightPos0]
Matrix 4 [_World2Object]
"agal_vs
[bc]
aaaaaaaaaaaaapacagaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c6
bdaaaaaaacaaaeaeaiaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 v2.z, c8, r0
aaaaaaaaaaaaapacafaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c5
aaaaaaaaabaaapacaeaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1, c4
bdaaaaaaacaaacaeaiaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 v2.y, c8, r0
bdaaaaaaacaaabaeaiaaaaoeabaaaaaaabaaaaoeacaaaaaa dp4 v2.x, c8, r1
aaaaaaaaafaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v5, a2
aaaaaaaaabaaahaeabaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v1.xyz, a1
bdaaaaaaaaaaaiadaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 o0.w, a0, c3
bdaaaaaaaaaaaeadaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 o0.z, a0, c2
bdaaaaaaaaaaacadaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 o0.y, a0, c1
bdaaaaaaaaaaabadaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 o0.x, a0, c0
aaaaaaaaabaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.w, c0
aaaaaaaaacaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v2.w, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 320 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 256 [_World2Object] 4
BindCB "UnityLighting" 0
BindCB "UnityPerDraw" 1
// 11 instructions, 1 temp regs, 0 temp arrays:
// ALU 8 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedjnmaggkionlfmiffnkeilonkceebjlmlabaaaaaaliaeaaaaaeaaaaaa
daaaaaaaimabaaaaiiadaaaabiaeaaaaebgpgodjfeabaaaafeabaaaaaaacpopp
aiabaaaaemaaaaaaadaaceaaaaaaeiaaaaaaeiaaaaaaceaaabaaeiaaaaaaaaaa
abaaabaaaaaaaaaaabaaaaaaaeaaacaaaaaaaaaaabaabaaaaeaaagaaaaaaaaaa
aaaaaaaaaaacpoppbpaaaaacafaaaaiaaaaaapjabpaaaaacafaaabiaabaaapja
bpaaaaacafaaaciaacaaapjaabaaaaacaaaaapiaabaaoekaafaaaaadabaaahia
aaaaffiaahaaoekaaeaaaaaeabaaahiaagaaoekaaaaaaaiaabaaoeiaaeaaaaae
aaaaahiaaiaaoekaaaaakkiaabaaoeiaaeaaaaaeabaaahoaajaaoekaaaaappia
aaaaoeiaafaaaaadaaaaapiaaaaaffjaadaaoekaaeaaaaaeaaaaapiaacaaoeka
aaaaaajaaaaaoeiaaeaaaaaeaaaaapiaaeaaoekaaaaakkjaaaaaoeiaaeaaaaae
aaaaapiaafaaoekaaaaappjaaaaaoeiaaeaaaaaeaaaaadmaaaaappiaaaaaoeka
aaaaoeiaabaaaaacaaaaammaaaaaoeiaabaaaaacacaaahoaacaaoejaabaaaaac
adaaapoaabaaoejappppaaaafdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaae
egiocaaaaaaaaaaaabaaaaaafjaaaaaeegiocaaaabaaaaaabeaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaad
hccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaajhcaabaaaaaaaaaaa
fgifcaaaaaaaaaaaaaaaaaaaegiccaaaabaaaaaabbaaaaaadcaaaaalhcaabaaa
aaaaaaaaegiccaaaabaaaaaabaaaaaaaagiacaaaaaaaaaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaabaaaaaabcaaaaaakgikcaaa
aaaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhccabaaaacaaaaaaegiccaaa
abaaaaaabdaaaaaapgipcaaaaaaaaaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaf
hccabaaaadaaaaaaegbcbaaaacaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaa
abaaaaaadoaaaaabejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaa
hoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaaaaaafaepfdejfeejepeo
aaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheojiaaaaaa
afaaaaaaaiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaa
imaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadapaaaaimaaaaaaacaaaaaa
aaaaaaaaadaaaaaaacaaaaaaahaiaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahaiaaaaimaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaa
fdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklkl"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec4 color;
};
#line 315
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 332
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 344
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 332
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 336
    o.lightDir = ObjSpaceLightDir( v.vertex);
    o.color = v.color;
    o.normal = v.normal;
    #line 340
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD5;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.uv);
    xlv_TEXCOORD2 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD1 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec4 color;
};
#line 315
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 332
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 344
#line 344
lowp vec4 frag( in v2f IN ) {
    IN.lightDir = normalize(IN.lightDir);
    lowp float atten = 1.0;
    #line 348
    lowp vec3 normal = IN.normal;
    lowp float diff = xll_saturate_f(dot( normal, IN.lightDir));
    lowp vec4 c;
    c.xyz = (((IN.color.xyz * _LightColor0.xyz) * diff) * (atten * 2.0));
    #line 352
    c.w = IN.color.w;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.uv = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD2);
    xlt_IN.normal = vec3(xlv_TEXCOORD1);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Vector 17 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 18 [unity_Scale]
Matrix 13 [_LightMatrix0]
"!!ARBvp1.0
# 19 ALU
PARAM c[19] = { program.local[0],
		state.matrix.mvp,
		program.local[5..18] };
TEMP R0;
TEMP R1;
MOV R1, c[17];
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, R1, c[11];
DP4 R0.x, R1, c[9];
DP4 R0.y, R1, c[10];
MAD result.texcoord[2].xyz, R0, c[18].w, -vertex.position;
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP4 result.texcoord[3].w, R0, c[16];
DP4 result.texcoord[3].z, R0, c[15];
DP4 result.texcoord[3].y, R0, c[14];
DP4 result.texcoord[3].x, R0, c[13];
MOV result.texcoord[5], vertex.color;
MOV result.texcoord[1].xyz, vertex.normal;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 19 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 17 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_2_0
; 21 ALU
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
mov r0, c10
dp4 r2.z, c16, r0
mov r0, c9
dp4 r2.y, c16, r0
mov r1, c8
dp4 r2.x, c16, r1
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mad oT2.xyz, r2, c17.w, -v0
dp4 oT3.w, r0, c15
dp4 oT3.z, r0, c14
dp4 oT3.y, r0, c13
dp4 oT3.x, r0, c12
mov oT5, v1
mov oT1.xyz, v2
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddiemkimndippbbnjeipihbehkfmhcbkpabaaaaaaoiaeaaaaadaaaaaa
cmaaaaaalmaaaaaaheabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaaaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadapaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaakeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcgmadaaaaeaaaabaa
nlaaaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
abaaaaaafjaaaaaeegiocaaaacaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadpccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaajhcaabaaa
aaaaaaaafgifcaaaabaaaaaaaaaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaal
hcaabaaaaaaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabcaaaaaa
kgikcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaa
egiccaaaacaaaaaabdaaaaaapgipcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaalhccabaaaacaaaaaaegacbaaaaaaaaaaapgipcaaaacaaaaaabeaaaaaa
egbcbaiaebaaaaaaaaaaaaaadgaaaaafhccabaaaadaaaaaaegbcbaaaacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpccabaaaaeaaaaaaegiocaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafpccabaaaafaaaaaaegbobaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz);
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  lowp float atten_4;
  lowp vec4 tmpvar_5;
  highp vec2 P_6;
  P_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_5 = texture2D (_LightTexture0, P_6);
  highp float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightTextureB0, vec2(tmpvar_7));
  highp float tmpvar_9;
  tmpvar_9 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_5.w) * tmpvar_8.w);
  atten_4 = tmpvar_9;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_10;
  tmpvar_10 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (atten_4 * 2.0));
  c_1.xyz = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_12;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SPOT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz);
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  lowp float atten_4;
  lowp vec4 tmpvar_5;
  highp vec2 P_6;
  P_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_5 = texture2D (_LightTexture0, P_6);
  highp float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightTextureB0, vec2(tmpvar_7));
  highp float tmpvar_9;
  tmpvar_9 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_5.w) * tmpvar_8.w);
  atten_4 = tmpvar_9;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_10;
  tmpvar_10 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (atten_4 * 2.0));
  c_1.xyz = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_12;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 17 [unity_Scale]
Matrix 12 [_LightMatrix0]
"agal_vs
[bc]
aaaaaaaaaaaaapacakaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c10
bdaaaaaaacaaaeacbaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r2.z, c16, r0
aaaaaaaaaaaaapacajaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c9
bdaaaaaaacaaacacbaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r2.y, c16, r0
aaaaaaaaabaaapacaiaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1, c8
bdaaaaaaacaaabacbaaaaaoeabaaaaaaabaaaaoeacaaaaaa dp4 r2.x, c16, r1
bdaaaaaaaaaaaiacaaaaaaoeaaaaaaaaahaaaaoeabaaaaaa dp4 r0.w, a0, c7
bdaaaaaaaaaaaeacaaaaaaoeaaaaaaaaagaaaaoeabaaaaaa dp4 r0.z, a0, c6
bdaaaaaaaaaaabacaaaaaaoeaaaaaaaaaeaaaaoeabaaaaaa dp4 r0.x, a0, c4
bdaaaaaaaaaaacacaaaaaaoeaaaaaaaaafaaaaoeabaaaaaa dp4 r0.y, a0, c5
adaaaaaaabaaahacacaaaakeacaaaaaabbaaaappabaaaaaa mul r1.xyz, r2.xyzz, c17.w
acaaaaaaacaaahaeabaaaakeacaaaaaaaaaaaaoeaaaaaaaa sub v2.xyz, r1.xyzz, a0
bdaaaaaaadaaaiaeaaaaaaoeacaaaaaaapaaaaoeabaaaaaa dp4 v3.w, r0, c15
bdaaaaaaadaaaeaeaaaaaaoeacaaaaaaaoaaaaoeabaaaaaa dp4 v3.z, r0, c14
bdaaaaaaadaaacaeaaaaaaoeacaaaaaaanaaaaoeabaaaaaa dp4 v3.y, r0, c13
bdaaaaaaadaaabaeaaaaaaoeacaaaaaaamaaaaoeabaaaaaa dp4 v3.x, r0, c12
aaaaaaaaafaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v5, a2
aaaaaaaaabaaahaeabaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v1.xyz, a1
bdaaaaaaaaaaaiadaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 o0.w, a0, c3
bdaaaaaaaaaaaeadaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 o0.z, a0, c2
bdaaaaaaaaaaacadaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 o0.y, a0, c1
bdaaaaaaaaaaabadaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 o0.x, a0, c0
aaaaaaaaabaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.w, c0
aaaaaaaaacaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v2.w, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedeikidmidnabnlgbjbikkomfoibegjdckabaaaaaaaaahaaaaaeaaaaaa
daaaaaaaeeacaaaaliafaaaaeiagaaaaebgpgodjamacaaaaamacaaaaaaacpopp
leabaaaafiaaaaaaaeaaceaaaaaafeaaaaaafeaaaaaaceaaabaafeaaaaaaabaa
aeaaabaaaaaaaaaaabaaaaaaabaaafaaaaaaaaaaacaaaaaaaeaaagaaaaaaaaaa
acaaamaaajaaakaaaaaaaaaaaaaaaaaaaaacpoppbpaaaaacafaaaaiaaaaaapja
bpaaaaacafaaabiaabaaapjabpaaaaacafaaaciaacaaapjaabaaaaacaaaaapia
afaaoekaafaaaaadabaaahiaaaaaffiaapaaoekaaeaaaaaeabaaahiaaoaaoeka
aaaaaaiaabaaoeiaaeaaaaaeaaaaahiabaaaoekaaaaakkiaabaaoeiaaeaaaaae
aaaaahiabbaaoekaaaaappiaaaaaoeiaaeaaaaaeabaaahoaaaaaoeiabcaappka
aaaaoejbafaaaaadaaaaapiaaaaaffjaalaaoekaaeaaaaaeaaaaapiaakaaoeka
aaaaaajaaaaaoeiaaeaaaaaeaaaaapiaamaaoekaaaaakkjaaaaaoeiaaeaaaaae
aaaaapiaanaaoekaaaaappjaaaaaoeiaafaaaaadabaaapiaaaaaffiaacaaoeka
aeaaaaaeabaaapiaabaaoekaaaaaaaiaabaaoeiaaeaaaaaeabaaapiaadaaoeka
aaaakkiaabaaoeiaaeaaaaaeadaaapoaaeaaoekaaaaappiaabaaoeiaafaaaaad
aaaaapiaaaaaffjaahaaoekaaeaaaaaeaaaaapiaagaaoekaaaaaaajaaaaaoeia
aeaaaaaeaaaaapiaaiaaoekaaaaakkjaaaaaoeiaaeaaaaaeaaaaapiaajaaoeka
aaaappjaaaaaoeiaaeaaaaaeaaaaadmaaaaappiaaaaaoekaaaaaoeiaabaaaaac
aaaaammaaaaaoeiaabaaaaacacaaahoaacaaoejaabaaaaacaeaaapoaabaaoeja
ppppaaaafdeieefcgmadaaaaeaaaabaanlaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
bfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaajhcaabaaaaaaaaaaafgifcaaaabaaaaaaaaaaaaaa
egiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaa
baaaaaaaagiacaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaa
aaaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaaabaaaaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabdaaaaaapgipcaaa
abaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhccabaaaacaaaaaaegacbaaa
aaaaaaaapgipcaaaacaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaadgaaaaaf
hccabaaaadaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaa
aaaaaaaaacaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaa
aeaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaa
dgaaaaafpccabaaaafaaaaaaegbobaaaabaaaaaadoaaaaabejfdeheoiiaaaaaa
aeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaa
hbaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaacaaaaaaahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaafeeb
eoehefeofeaaklklepfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaa
abaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaadapaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaa
keaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaiaaaakeaaaaaaadaaaaaa
aaaaaaaaadaaaaaaaeaaaaaaapaaaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaa
afaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklkl
"
}

SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 334
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 color;
};
#line 326
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 344
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 357
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 344
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 348
    o.lightDir = ObjSpaceLightDir( v.vertex);
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 353
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD5;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.uv);
    xlv_TEXCOORD2 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD1 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 334
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 color;
};
#line 326
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 344
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 357
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 357
lowp vec4 frag( in v2f IN ) {
    IN.lightDir = normalize(IN.lightDir);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    #line 361
    lowp vec3 normal = IN.normal;
    lowp float diff = xll_saturate_f(dot( normal, IN.lightDir));
    lowp vec4 c;
    c.xyz = (((IN.color.xyz * _LightColor0.xyz) * diff) * (atten * 2.0));
    #line 365
    c.w = IN.color.w;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.uv = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD2);
    xlt_IN.normal = vec3(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Vector 17 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 18 [unity_Scale]
Matrix 13 [_LightMatrix0]
"!!ARBvp1.0
# 18 ALU
PARAM c[19] = { program.local[0],
		state.matrix.mvp,
		program.local[5..18] };
TEMP R0;
TEMP R1;
MOV R1, c[17];
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, R1, c[11];
DP4 R0.x, R1, c[9];
DP4 R0.y, R1, c[10];
MAD result.texcoord[2].xyz, R0, c[18].w, -vertex.position;
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP4 result.texcoord[3].z, R0, c[15];
DP4 result.texcoord[3].y, R0, c[14];
DP4 result.texcoord[3].x, R0, c[13];
MOV result.texcoord[5], vertex.color;
MOV result.texcoord[1].xyz, vertex.normal;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 18 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 17 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_2_0
; 20 ALU
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
mov r0, c10
dp4 r2.z, c16, r0
mov r0, c9
dp4 r2.y, c16, r0
mov r1, c8
dp4 r2.x, c16, r1
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mad oT2.xyz, r2, c17.w, -v0
dp4 oT3.z, r0, c14
dp4 oT3.y, r0, c13
dp4 oT3.x, r0, c12
mov oT5, v1
mov oT1.xyz, v2
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedmjjpegplcgemohadockdciemelndpjpbabaaaaaaoiaeaaaaadaaaaaa
cmaaaaaalmaaaaaaheabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaaaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadapaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaakeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcgmadaaaaeaaaabaa
nlaaaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
abaaaaaafjaaaaaeegiocaaaacaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaajhcaabaaa
aaaaaaaafgifcaaaabaaaaaaaaaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaal
hcaabaaaaaaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabcaaaaaa
kgikcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaa
egiccaaaacaaaaaabdaaaaaapgipcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaalhccabaaaacaaaaaaegacbaaaaaaaaaaapgipcaaaacaaaaaabeaaaaaa
egbcbaiaebaaaaaaaaaaaaaadgaaaaafhccabaaaadaaaaaaegbcbaaaacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhccabaaaaeaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafpccabaaaafaaaaaaegbobaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz);
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  highp float tmpvar_4;
  tmpvar_4 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_5;
  tmpvar_5 = (texture2D (_LightTextureB0, vec2(tmpvar_4)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_6;
  tmpvar_6 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (tmpvar_5 * 2.0));
  c_1.xyz = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_8;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz);
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  highp float tmpvar_4;
  tmpvar_4 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_5;
  tmpvar_5 = (texture2D (_LightTextureB0, vec2(tmpvar_4)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_6;
  tmpvar_6 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (tmpvar_5 * 2.0));
  c_1.xyz = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_8;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 17 [unity_Scale]
Matrix 12 [_LightMatrix0]
"agal_vs
[bc]
aaaaaaaaaaaaapacakaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c10
bdaaaaaaacaaaeacbaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r2.z, c16, r0
aaaaaaaaaaaaapacajaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c9
bdaaaaaaacaaacacbaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r2.y, c16, r0
aaaaaaaaabaaapacaiaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1, c8
bdaaaaaaacaaabacbaaaaaoeabaaaaaaabaaaaoeacaaaaaa dp4 r2.x, c16, r1
bdaaaaaaaaaaaiacaaaaaaoeaaaaaaaaahaaaaoeabaaaaaa dp4 r0.w, a0, c7
bdaaaaaaaaaaaeacaaaaaaoeaaaaaaaaagaaaaoeabaaaaaa dp4 r0.z, a0, c6
bdaaaaaaaaaaabacaaaaaaoeaaaaaaaaaeaaaaoeabaaaaaa dp4 r0.x, a0, c4
bdaaaaaaaaaaacacaaaaaaoeaaaaaaaaafaaaaoeabaaaaaa dp4 r0.y, a0, c5
adaaaaaaabaaahacacaaaakeacaaaaaabbaaaappabaaaaaa mul r1.xyz, r2.xyzz, c17.w
acaaaaaaacaaahaeabaaaakeacaaaaaaaaaaaaoeaaaaaaaa sub v2.xyz, r1.xyzz, a0
bdaaaaaaadaaaeaeaaaaaaoeacaaaaaaaoaaaaoeabaaaaaa dp4 v3.z, r0, c14
bdaaaaaaadaaacaeaaaaaaoeacaaaaaaanaaaaoeabaaaaaa dp4 v3.y, r0, c13
bdaaaaaaadaaabaeaaaaaaoeacaaaaaaamaaaaoeabaaaaaa dp4 v3.x, r0, c12
aaaaaaaaafaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v5, a2
aaaaaaaaabaaahaeabaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v1.xyz, a1
bdaaaaaaaaaaaiadaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 o0.w, a0, c3
bdaaaaaaaaaaaeadaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 o0.z, a0, c2
bdaaaaaaaaaaacadaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 o0.y, a0, c1
bdaaaaaaaaaaabadaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 o0.x, a0, c0
aaaaaaaaabaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.w, c0
aaaaaaaaacaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v2.w, c0
aaaaaaaaadaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v3.w, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedakhailhlejdgcnafjjmlpemddlfdopddabaaaaaaaaahaaaaaeaaaaaa
daaaaaaaeeacaaaaliafaaaaeiagaaaaebgpgodjamacaaaaamacaaaaaaacpopp
leabaaaafiaaaaaaaeaaceaaaaaafeaaaaaafeaaaaaaceaaabaafeaaaaaaabaa
aeaaabaaaaaaaaaaabaaaaaaabaaafaaaaaaaaaaacaaaaaaaeaaagaaaaaaaaaa
acaaamaaajaaakaaaaaaaaaaaaaaaaaaaaacpoppbpaaaaacafaaaaiaaaaaapja
bpaaaaacafaaabiaabaaapjabpaaaaacafaaaciaacaaapjaabaaaaacaaaaapia
afaaoekaafaaaaadabaaahiaaaaaffiaapaaoekaaeaaaaaeabaaahiaaoaaoeka
aaaaaaiaabaaoeiaaeaaaaaeaaaaahiabaaaoekaaaaakkiaabaaoeiaaeaaaaae
aaaaahiabbaaoekaaaaappiaaaaaoeiaaeaaaaaeabaaahoaaaaaoeiabcaappka
aaaaoejbafaaaaadaaaaapiaaaaaffjaalaaoekaaeaaaaaeaaaaapiaakaaoeka
aaaaaajaaaaaoeiaaeaaaaaeaaaaapiaamaaoekaaaaakkjaaaaaoeiaaeaaaaae
aaaaapiaanaaoekaaaaappjaaaaaoeiaafaaaaadabaaahiaaaaaffiaacaaoeka
aeaaaaaeabaaahiaabaaoekaaaaaaaiaabaaoeiaaeaaaaaeaaaaahiaadaaoeka
aaaakkiaabaaoeiaaeaaaaaeadaaahoaaeaaoekaaaaappiaaaaaoeiaafaaaaad
aaaaapiaaaaaffjaahaaoekaaeaaaaaeaaaaapiaagaaoekaaaaaaajaaaaaoeia
aeaaaaaeaaaaapiaaiaaoekaaaaakkjaaaaaoeiaaeaaaaaeaaaaapiaajaaoeka
aaaappjaaaaaoeiaaeaaaaaeaaaaadmaaaaappiaaaaaoekaaaaaoeiaabaaaaac
aaaaammaaaaaoeiaabaaaaacacaaahoaacaaoejaabaaaaacaeaaapoaabaaoeja
ppppaaaafdeieefcgmadaaaaeaaaabaanlaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
bfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaajhcaabaaaaaaaaaaafgifcaaaabaaaaaaaaaaaaaa
egiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaa
baaaaaaaagiacaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaa
aaaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaaabaaaaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabdaaaaaapgipcaaa
abaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhccabaaaacaaaaaaegacbaaa
aaaaaaaapgipcaaaacaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaadgaaaaaf
hccabaaaadaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
aeaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
dgaaaaafpccabaaaafaaaaaaegbobaaaabaaaaaadoaaaaabejfdeheoiiaaaaaa
aeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaa
hbaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaacaaaaaaahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaafeeb
eoehefeofeaaklklepfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaa
abaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaadapaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaa
keaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaiaaaakeaaaaaaadaaaaaa
aaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaa
afaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklkl
"
}

SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec4 color;
};
#line 318
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 349
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 336
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 340
    o.lightDir = ObjSpaceLightDir( v.vertex);
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 345
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD5;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.uv);
    xlv_TEXCOORD2 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD1 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec4 color;
};
#line 318
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 349
#line 349
lowp vec4 frag( in v2f IN ) {
    IN.lightDir = normalize(IN.lightDir);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    #line 353
    lowp vec3 normal = IN.normal;
    lowp float diff = xll_saturate_f(dot( normal, IN.lightDir));
    lowp vec4 c;
    c.xyz = (((IN.color.xyz * _LightColor0.xyz) * diff) * (atten * 2.0));
    #line 357
    c.w = IN.color.w;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.uv = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD2);
    xlt_IN.normal = vec3(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Vector 17 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Matrix 13 [_LightMatrix0]
"!!ARBvp1.0
# 16 ALU
PARAM c[18] = { program.local[0],
		state.matrix.mvp,
		program.local[5..17] };
TEMP R0;
MOV R0, c[17];
DP4 result.texcoord[2].z, R0, c[11];
DP4 result.texcoord[2].y, R0, c[10];
DP4 result.texcoord[2].x, R0, c[9];
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP4 result.texcoord[3].y, R0, c[14];
DP4 result.texcoord[3].x, R0, c[13];
MOV result.texcoord[5], vertex.color;
MOV result.texcoord[1].xyz, vertex.normal;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 16 instructions, 1 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
"vs_2_0
; 18 ALU
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
mov r0, c10
dp4 oT2.z, c16, r0
mov r0, c9
dp4 oT2.y, c16, r0
mov r1, c8
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 oT2.x, c16, r1
dp4 oT3.y, r0, c13
dp4 oT3.x, r0, c12
mov oT5, v1
mov oT1.xyz, v2
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 320 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 19 instructions, 2 temp regs, 0 temp arrays:
// ALU 16 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddmhacdconjpjameeinopjabeejblfbnhabaaaaaalmaeaaaaadaaaaaa
cmaaaaaalmaaaaaaheabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaaaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadapaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaabaaaaaaamadaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefceaadaaaaeaaaabaa
naaaaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
abaaaaaafjaaaaaeegiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadmccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaa
gfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaajhcaabaaa
aaaaaaaafgifcaaaabaaaaaaaaaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaal
hcaabaaaaaaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabcaaaaaa
kgikcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhccabaaaacaaaaaa
egiccaaaacaaaaaabdaaaaaapgipcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaa
dgaaaaafhccabaaaadaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiacaaaaaaaaaaaacaaaaaadcaaaaakdcaabaaaaaaaaaaaegiacaaaaaaaaaaa
abaaaaaaagaabaaaaaaaaaaaegaabaaaabaaaaaadcaaaaakdcaabaaaaaaaaaaa
egiacaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaabaaaaaaaaaaadcaaaaak
mccabaaaabaaaaaaagiecaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaagaebaaa
aaaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (_World2Object * _WorldSpaceLightPos0).xyz;
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  lowp float tmpvar_4;
  tmpvar_4 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_5;
  tmpvar_5 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (tmpvar_4 * 2.0));
  c_1.xyz = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_7;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (_World2Object * _WorldSpaceLightPos0).xyz;
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  lowp float tmpvar_4;
  tmpvar_4 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_5;
  tmpvar_5 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (tmpvar_4 * 2.0));
  c_1.xyz = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_7;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
"agal_vs
[bc]
aaaaaaaaaaaaapacakaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c10
bdaaaaaaacaaaeaebaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 v2.z, c16, r0
aaaaaaaaaaaaapacajaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c9
bdaaaaaaacaaacaebaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 v2.y, c16, r0
aaaaaaaaabaaapacaiaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1, c8
bdaaaaaaaaaaaiacaaaaaaoeaaaaaaaaahaaaaoeabaaaaaa dp4 r0.w, a0, c7
bdaaaaaaaaaaaeacaaaaaaoeaaaaaaaaagaaaaoeabaaaaaa dp4 r0.z, a0, c6
bdaaaaaaaaaaabacaaaaaaoeaaaaaaaaaeaaaaoeabaaaaaa dp4 r0.x, a0, c4
bdaaaaaaaaaaacacaaaaaaoeaaaaaaaaafaaaaoeabaaaaaa dp4 r0.y, a0, c5
bdaaaaaaacaaabaebaaaaaoeabaaaaaaabaaaaoeacaaaaaa dp4 v2.x, c16, r1
bdaaaaaaadaaacaeaaaaaaoeacaaaaaaanaaaaoeabaaaaaa dp4 v3.y, r0, c13
bdaaaaaaadaaabaeaaaaaaoeacaaaaaaamaaaaoeabaaaaaa dp4 v3.x, r0, c12
aaaaaaaaafaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v5, a2
aaaaaaaaabaaahaeabaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v1.xyz, a1
bdaaaaaaaaaaaiadaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 o0.w, a0, c3
bdaaaaaaaaaaaeadaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 o0.z, a0, c2
bdaaaaaaaaaaacadaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 o0.y, a0, c1
bdaaaaaaaaaaabadaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 o0.x, a0, c0
aaaaaaaaabaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.w, c0
aaaaaaaaacaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v2.w, c0
aaaaaaaaadaaamaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v3.zw, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 320 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 19 instructions, 2 temp regs, 0 temp arrays:
// ALU 16 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedfdghapkdldpokkagfeafamaifeehnmmfabaaaaaamaagaaaaaeaaaaaa
daaaaaaadaacaaaahiafaaaaaiagaaaaebgpgodjpiabaaaapiabaaaaaaacpopp
kaabaaaafiaaaaaaaeaaceaaaaaafeaaaaaafeaaaaaaceaaabaafeaaaaaaabaa
aeaaabaaaaaaaaaaabaaaaaaabaaafaaaaaaaaaaacaaaaaaaeaaagaaaaaaaaaa
acaaamaaaiaaakaaaaaaaaaaaaaaaaaaaaacpoppbpaaaaacafaaaaiaaaaaapja
bpaaaaacafaaabiaabaaapjabpaaaaacafaaaciaacaaapjaabaaaaacaaaaapia
afaaoekaafaaaaadabaaahiaaaaaffiaapaaoekaaeaaaaaeabaaahiaaoaaoeka
aaaaaaiaabaaoeiaaeaaaaaeaaaaahiabaaaoekaaaaakkiaabaaoeiaaeaaaaae
abaaahoabbaaoekaaaaappiaaaaaoeiaafaaaaadaaaaapiaaaaaffjaalaaoeka
aeaaaaaeaaaaapiaakaaoekaaaaaaajaaaaaoeiaaeaaaaaeaaaaapiaamaaoeka
aaaakkjaaaaaoeiaaeaaaaaeaaaaapiaanaaoekaaaaappjaaaaaoeiaafaaaaad
abaaadiaaaaaffiaacaaobkaaeaaaaaeaaaaadiaabaaobkaaaaaaaiaabaaoeia
aeaaaaaeaaaaadiaadaaobkaaaaakkiaaaaaoeiaaeaaaaaeaaaaamoaaeaabeka
aaaappiaaaaaeeiaafaaaaadaaaaapiaaaaaffjaahaaoekaaeaaaaaeaaaaapia
agaaoekaaaaaaajaaaaaoeiaaeaaaaaeaaaaapiaaiaaoekaaaaakkjaaaaaoeia
aeaaaaaeaaaaapiaajaaoekaaaaappjaaaaaoeiaaeaaaaaeaaaaadmaaaaappia
aaaaoekaaaaaoeiaabaaaaacaaaaammaaaaaoeiaabaaaaacacaaahoaacaaoeja
abaaaaacadaaapoaabaaoejappppaaaafdeieefceaadaaaaeaaaabaanaaaaaaa
fjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaad
pcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaadmccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaad
hccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaajhcaabaaaaaaaaaaa
fgifcaaaabaaaaaaaaaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaa
aaaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaa
abaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhccabaaaacaaaaaaegiccaaa
acaaaaaabdaaaaaapgipcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaf
hccabaaaadaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaafgafbaaaaaaaaaaaegiacaaa
aaaaaaaaacaaaaaadcaaaaakdcaabaaaaaaaaaaaegiacaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegaabaaaabaaaaaadcaaaaakdcaabaaaaaaaaaaaegiacaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaabaaaaaaaaaaadcaaaaakmccabaaa
abaaaaaaagiecaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaagaebaaaaaaaaaaa
dgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaabejfdeheoiiaaaaaa
aeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaa
hbaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaacaaaaaaahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaafeeb
eoehefeofeaaklklepfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaa
abaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaadapaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaabaaaaaaamadaaaa
keaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaakeaaaaaaabaaaaaa
aaaaaaaaadaaaaaaadaaaaaaahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaa
aeaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklkl
"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 color;
};
#line 317
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 348
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 335
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 339
    o.lightDir = ObjSpaceLightDir( v.vertex);
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 344
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD5;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.uv);
    xlv_TEXCOORD2 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD1 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 color;
};
#line 317
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 348
#line 348
lowp vec4 frag( in v2f IN ) {
    IN.lightDir = normalize(IN.lightDir);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    #line 352
    lowp vec3 normal = IN.normal;
    lowp float diff = xll_saturate_f(dot( normal, IN.lightDir));
    lowp vec4 c;
    c.xyz = (((IN.color.xyz * _LightColor0.xyz) * diff) * (atten * 2.0));
    #line 356
    c.w = IN.color.w;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.uv = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD2);
    xlt_IN.normal = vec3(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 5
//   opengl - ALU: 8 to 17, TEX: 0 to 2
//   d3d9 - ALU: 9 to 17, TEX: 1 to 2
//   d3d11 - ALU: 7 to 14, TEX: 0 to 2, FLOW: 1 to 1
//   d3d11_9x - ALU: 7 to 14, TEX: 0 to 2, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "POINT" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
"!!ARBfp1.0
# 11 ALU, 1 TEX
PARAM c[2] = { program.local[0],
		{ 2 } };
TEMP R0;
TEMP R1;
DP3 R0.x, fragment.texcoord[3], fragment.texcoord[3];
MOV result.color.w, fragment.texcoord[5];
TEX R0.w, R0.x, texture[0], 2D;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.x, R0.x;
MUL R1.xyz, R0.x, fragment.texcoord[2];
MUL R0.xyz, fragment.texcoord[5], c[0];
DP3_SAT R1.x, fragment.texcoord[1], R1;
MUL R0.w, R0, c[1].x;
MUL R0.xyz, R0, R1.x;
MUL result.color.xyz, R0, R0.w;
END
# 11 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
"ps_2_0
; 12 ALU, 1 TEX
dcl_2d s0
def c1, 2.00000000, 0, 0, 0
dcl t2.xyz
dcl t1.xyz
dcl t3.xyz
dcl t5
dp3 r0.x, t3, t3
mov r0.xy, r0.x
dp3 r1.x, t2, t2
rsq r1.x, r1.x
mul r1.xyz, r1.x, t2
dp3_pp_sat r1.x, t1, r1
mul r2.xyz, t5, c0
mul r1.xyz, r2, r1.x
texld r0, r0, s0
mul_pp r0.x, r0, c1
mul r0.xyz, r1, r0.x
mov_pp r0.w, t5
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "POINT" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTexture0] 2D 0
// 12 instructions, 2 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 1 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedbioionpndiclbpbkjhaodjppefcaogpfabaaaaaammacaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefckmabaaaa
eaaaaaaaglaaaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaafkaaaaadaagabaaa
aaaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadpcbabaaa
afaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacacaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
acaaaaaabacaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaa
diaaaaaiocaabaaaaaaaaaaaagbjbaaaafaaaaaaagijcaaaaaaaaaaaagaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaa
abaaaaaapgapbaaaaaaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaaaaaaaah
icaabaaaaaaaaaaaakaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhccabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
dkbabaaaafaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "POINT" }
"!!GLES"
}

SubProgram "flash " {
Keywords { "POINT" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
"agal_ps
c1 2.0 0.0 0.0 0.0
[bc]
bcaaaaaaaaaaabacadaaaaoeaeaaaaaaadaaaaoeaeaaaaaa dp3 r0.x, v3, v3
aaaaaaaaaaaaadacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa mov r0.xy, r0.x
adaaaaaaacaaahacafaaaaoeaeaaaaaaaaaaaaoeabaaaaaa mul r2.xyz, v5, c0
ciaaaaaaaaaaapacaaaaaafeacaaaaaaaaaaaaaaafaababb tex r0, r0.xyyy, s0 <2d wrap linear point>
bcaaaaaaaaaaabacacaaaaoeaeaaaaaaacaaaaoeaeaaaaaa dp3 r0.x, v2, v2
akaaaaaaaaaaabacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa rsq r0.x, r0.x
adaaaaaaabaaahacaaaaaaaaacaaaaaaacaaaaoeaeaaaaaa mul r1.xyz, r0.x, v2
adaaaaaaaaaaabacaaaaaappacaaaaaaabaaaaoeabaaaaaa mul r0.x, r0.w, c1
bcaaaaaaabaaabacabaaaaoeaeaaaaaaabaaaakeacaaaaaa dp3 r1.x, v1, r1.xyzz
bgaaaaaaabaaabacabaaaaaaacaaaaaaaaaaaaaaaaaaaaaa sat r1.x, r1.x
adaaaaaaabaaahacacaaaakeacaaaaaaabaaaaaaacaaaaaa mul r1.xyz, r2.xyzz, r1.x
adaaaaaaaaaaahacabaaaakeacaaaaaaaaaaaaaaacaaaaaa mul r0.xyz, r1.xyzz, r0.x
aaaaaaaaaaaaaiacafaaaaoeaeaaaaaaaaaaaaaaaaaaaaaa mov r0.w, v5
aaaaaaaaaaaaapadaaaaaaoeacaaaaaaaaaaaaaaaaaaaaaa mov o0, r0
"
}

SubProgram "d3d11_9x " {
Keywords { "POINT" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTexture0] 2D 0
// 12 instructions, 2 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 1 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedalemgnichmemlepajpfbeadidmiehekdabaaaaaapaadaaaaaeaaaaaa
daaaaaaafaabaaaaaeadaaaalmadaaaaebgpgodjbiabaaaabiabaaaaaaacpppp
oeaaaaaadeaaaaaaabaaciaaaaaadeaaaaaadeaaabaaceaaaaaadeaaaaaaaaaa
aaaaagaaabaaaaaaaaaaaaaaaaacppppbpaaaaacaaaaaaiaabaaahlabpaaaaac
aaaaaaiaacaachlabpaaaaacaaaaaaiaadaaahlabpaaaaacaaaaaaiaaeaacpla
bpaaaaacaaaaaajaaaaiapkaceaaaaacaaaaahiaabaaoelaaiaaaaadaaaadbia
acaaoelaaaaaoeiaafaaaaadaaaaaoiaaeaabllaaaaablkaafaaaaadaaaaahia
aaaaaaiaaaaabliaaiaaaaadaaaaaiiaadaaoelaadaaoelaabaaaaacabaaadia
aaaappiaecaaaaadabaacpiaabaaoeiaaaaioekaacaaaaadaaaaaiiaabaaaaia
abaaaaiaafaaaaadaaaachiaaaaappiaaaaaoeiaabaaaaacaaaaciiaaeaappla
abaaaaacaaaicpiaaaaaoeiappppaaaafdeieefckmabaaaaeaaaaaaaglaaaaaa
fjaaaaaeegiocaaaaaaaaaaaahaaaaaafkaaaaadaagabaaaaaaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadpcbabaaaafaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacacaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaabacaaaah
bcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaadiaaaaaiocaabaaa
aaaaaaaaagbjbaaaafaaaaaaagijcaaaaaaaaaaaagaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaapgapbaaa
aaaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaa
akaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaadkbabaaaafaaaaaa
doaaaaabejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaa
adaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaa
adaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklkl"
}

SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" }
Vector 0 [_LightColor0]
"!!ARBfp1.0
# 8 ALU, 0 TEX
PARAM c[2] = { program.local[0],
		{ 2 } };
TEMP R0;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.x, R0.x;
MUL R0.xyz, R0.x, fragment.texcoord[2];
DP3_SAT R0.w, fragment.texcoord[1], R0;
MUL R0.xyz, fragment.texcoord[5], c[0];
MUL R0.xyz, R0, R0.w;
MUL result.color.xyz, R0, c[1].x;
MOV result.color.w, fragment.texcoord[5];
END
# 8 instructions, 1 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" }
Vector 0 [_LightColor0]
"ps_2_0
; 9 ALU
def c1, 2.00000000, 0, 0, 0
dcl t2.xyz
dcl t1.xyz
dcl t5
dp3 r0.x, t2, t2
rsq r0.x, r0.x
mul r0.xyz, r0.x, t2
dp3_pp_sat r0.x, t1, r0
mul r1.xyz, t5, c0
mul r0.xyz, r1, r0.x
mul r0.xyz, r0, c1.x
mov_pp r0.w, t5
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
ConstBuffer "$Globals" 48 // 48 used size, 3 vars
Vector 32 [_LightColor0] 4
BindCB "$Globals" 0
// 9 instructions, 1 temp regs, 0 temp arrays:
// ALU 7 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedloieipnbkbffnjnmagdbeekmebefinkdabaaaaaadaacaaaaadaaaaaa
cmaaaaaammaaaaaaaaabaaaaejfdeheojiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadaaaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaimaaaaaa
afaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcciabaaaaeaaaaaaaekaaaaaafjaaaaaeegiocaaaaaaaaaaaadaaaaaa
gcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadpcbabaaa
aeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacabaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
acaaaaaabacaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaa
diaaaaaiocaabaaaaaaaaaaaagbjbaaaaeaaaaaaagijcaaaaaaaaaaaacaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaaaaaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaa
aaaaaaaadkbabaaaaeaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}

SubProgram "flash " {
Keywords { "DIRECTIONAL" }
Vector 0 [_LightColor0]
"agal_ps
c1 2.0 0.0 0.0 0.0
[bc]
bcaaaaaaaaaaabacacaaaaoeaeaaaaaaacaaaaoeaeaaaaaa dp3 r0.x, v2, v2
akaaaaaaaaaaabacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa rsq r0.x, r0.x
adaaaaaaaaaaahacaaaaaaaaacaaaaaaacaaaaoeaeaaaaaa mul r0.xyz, r0.x, v2
bcaaaaaaaaaaabacabaaaaoeaeaaaaaaaaaaaakeacaaaaaa dp3 r0.x, v1, r0.xyzz
bgaaaaaaaaaaabacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa sat r0.x, r0.x
adaaaaaaabaaahacafaaaaoeaeaaaaaaaaaaaaoeabaaaaaa mul r1.xyz, v5, c0
adaaaaaaaaaaahacabaaaakeacaaaaaaaaaaaaaaacaaaaaa mul r0.xyz, r1.xyzz, r0.x
adaaaaaaaaaaahacaaaaaakeacaaaaaaabaaaaaaabaaaaaa mul r0.xyz, r0.xyzz, c1.x
aaaaaaaaaaaaaiacafaaaaoeaeaaaaaaaaaaaaaaaaaaaaaa mov r0.w, v5
aaaaaaaaaaaaapadaaaaaaoeacaaaaaaaaaaaaaaaaaaaaaa mov o0, r0
"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" }
ConstBuffer "$Globals" 48 // 48 used size, 3 vars
Vector 32 [_LightColor0] 4
BindCB "$Globals" 0
// 9 instructions, 1 temp regs, 0 temp arrays:
// ALU 7 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedhmbgndkhekjafmbnlllfoeplpaliaonaabaaaaaapmacaaaaaeaaaaaa
daaaaaaapiaaaaaaciacaaaamiacaaaaebgpgodjmaaaaaaamaaaaaaaaaacpppp
jaaaaaaadaaaaaaaabaaceaaaaaadaaaaaaadaaaaaaaceaaaaaadaaaaaaaacaa
abaaaaaaaaaaaaaaaaacppppbpaaaaacaaaaaaiaabaaahlabpaaaaacaaaaaaia
acaachlabpaaaaacaaaaaaiaadaacplaceaaaaacaaaaahiaabaaoelaaiaaaaad
aaaadbiaacaaoelaaaaaoeiaafaaaaadaaaaaoiaadaabllaaaaablkaafaaaaad
aaaaahiaaaaaaaiaaaaabliaacaaaaadaaaachiaaaaaoeiaaaaaoeiaabaaaaac
aaaaciiaadaapplaabaaaaacaaaicpiaaaaaoeiappppaaaafdeieefcciabaaaa
eaaaaaaaekaaaaaafjaaaaaeegiocaaaaaaaaaaaadaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadpcbabaaaaeaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacabaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaabacaaaah
bcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaadiaaaaaiocaabaaa
aaaaaaaaagbjbaaaaeaaaaaaagijcaaaaaaaaaaaacaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaaaaaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaadkbabaaa
aeaaaaaadoaaaaabejfdeheojiaaaaaaafaaaaaaaiaaaaaaiaaaaaaaaaaaaaaa
abaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaadaaaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaa
imaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaimaaaaaaafaaaaaa
aaaaaaaaadaaaaaaaeaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SPOT" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
SetTexture 1 [_LightTextureB0] 2D
"!!ARBfp1.0
# 17 ALU, 2 TEX
PARAM c[2] = { program.local[0],
		{ 0, 0.5, 2 } };
TEMP R0;
TEMP R1;
TEMP R2;
DP3 R0.z, fragment.texcoord[3], fragment.texcoord[3];
RCP R0.x, fragment.texcoord[3].w;
MAD R0.xy, fragment.texcoord[3], R0.x, c[1].y;
SLT R2.x, c[1], fragment.texcoord[3].z;
MOV result.color.w, fragment.texcoord[5];
TEX R0.w, R0, texture[0], 2D;
TEX R1.w, R0.z, texture[1], 2D;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R1.x, R0.x;
MUL R0.w, R2.x, R0;
MUL R1.xyz, R1.x, fragment.texcoord[2];
MUL R1.w, R0, R1;
DP3_SAT R0.w, fragment.texcoord[1], R1;
MUL R0.xyz, fragment.texcoord[5], c[0];
MUL R1.x, R1.w, c[1].z;
MUL R0.xyz, R0, R0.w;
MUL result.color.xyz, R0, R1.x;
END
# 17 instructions, 3 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "SPOT" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
SetTexture 1 [_LightTextureB0] 2D
"ps_2_0
; 17 ALU, 2 TEX
dcl_2d s0
dcl_2d s1
def c1, 0.50000000, 0.00000000, 1.00000000, 2.00000000
dcl t2.xyz
dcl t1.xyz
dcl t3
dcl t5
rcp r1.x, t3.w
mad r2.xy, t3, r1.x, c1.x
dp3 r0.x, t3, t3
mov r1.xy, r0.x
texld r0, r2, s0
texld r2, r1, s1
cmp r0.x, -t3.z, c1.y, c1.z
mul_pp r0.x, r0, r0.w
mul_pp r0.x, r0, r2
dp3 r1.x, t2, t2
rsq r1.x, r1.x
mul r1.xyz, r1.x, t2
mul_pp r0.x, r0, c1.w
dp3_pp_sat r1.x, t1, r1
mul r2.xyz, t5, c0
mul r1.xyz, r2, r1.x
mul r0.xyz, r1, r0.x
mov_pp r0.w, t5
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "SPOT" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTexture0] 2D 0
SetTexture 1 [_LightTextureB0] 2D 1
// 18 instructions, 2 temp regs, 0 temp arrays:
// ALU 13 float, 0 int, 1 uint
// TEX 2 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednbeijpebpeecdfmohlgldkeeefgcibieabaaaaaakeadaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapapaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcieacaaaa
eaaaaaaakbaaaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadpcbabaaaaeaaaaaagcbaaaadpcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacacaaaaaaaoaaaaahdcaabaaaaaaaaaaa
egbabaaaaeaaaaaapgbpbaaaaeaaaaaaaaaaaaakdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaefaaaaajpcaabaaa
aaaaaaaaegaabaaaaaaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaadbaaaaah
bcaabaaaaaaaaaaaabeaaaaaaaaaaaaackbabaaaaeaaaaaaabaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaabaaaaaahccaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaafgafbaaaaaaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaapaaaaahbcaabaaaaaaaaaaaagaabaaa
aaaaaaaaagaabaaaabaaaaaabaaaaaahccaabaaaaaaaaaaaegbcbaaaacaaaaaa
egbcbaaaacaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaah
ocaabaaaaaaaaaaafgafbaaaaaaaaaaaagbjbaaaacaaaaaabacaaaahccaabaaa
aaaaaaaaegbcbaaaadaaaaaajgahbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
egbcbaaaafaaaaaaegiccaaaaaaaaaaaagaaaaaadiaaaaahocaabaaaaaaaaaaa
fgafbaaaaaaaaaaaagajbaaaabaaaaaadiaaaaahhccabaaaaaaaaaaaagaabaaa
aaaaaaaajgahbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaadkbabaaaafaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SPOT" }
"!!GLES"
}

SubProgram "flash " {
Keywords { "SPOT" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
SetTexture 1 [_LightTextureB0] 2D
"agal_ps
c1 0.5 0.0 1.0 2.0
[bc]
afaaaaaaabaaabacadaaaappaeaaaaaaaaaaaaaaaaaaaaaa rcp r1.x, v3.w
bcaaaaaaaaaaabacadaaaaoeaeaaaaaaadaaaaoeaeaaaaaa dp3 r0.x, v3, v3
adaaaaaaabaaadacadaaaaoeaeaaaaaaabaaaaaaacaaaaaa mul r1.xy, v3, r1.x
abaaaaaaabaaadacabaaaafeacaaaaaaabaaaaaaabaaaaaa add r1.xy, r1.xyyy, c1.x
aaaaaaaaaaaaadacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa mov r0.xy, r0.x
adaaaaaaacaaahacafaaaaoeaeaaaaaaaaaaaaoeabaaaaaa mul r2.xyz, v5, c0
ciaaaaaaabaaapacabaaaafeacaaaaaaaaaaaaaaafaababb tex r1, r1.xyyy, s0 <2d wrap linear point>
ciaaaaaaaaaaapacaaaaaafeacaaaaaaabaaaaaaafaababb tex r0, r0.xyyy, s1 <2d wrap linear point>
bfaaaaaaacaaaiacadaaaakkaeaaaaaaaaaaaaaaaaaaaaaa neg r2.w, v3.z
ckaaaaaaaaaaabacacaaaappacaaaaaaabaaaaffabaaaaaa slt r0.x, r2.w, c1.y
adaaaaaaaaaaabacaaaaaaaaacaaaaaaabaaaappacaaaaaa mul r0.x, r0.x, r1.w
adaaaaaaaaaaabacaaaaaaaaacaaaaaaaaaaaappacaaaaaa mul r0.x, r0.x, r0.w
bcaaaaaaabaaabacacaaaaoeaeaaaaaaacaaaaoeaeaaaaaa dp3 r1.x, v2, v2
akaaaaaaabaaabacabaaaaaaacaaaaaaaaaaaaaaaaaaaaaa rsq r1.x, r1.x
adaaaaaaabaaahacabaaaaaaacaaaaaaacaaaaoeaeaaaaaa mul r1.xyz, r1.x, v2
bcaaaaaaabaaabacabaaaaoeaeaaaaaaabaaaakeacaaaaaa dp3 r1.x, v1, r1.xyzz
bgaaaaaaabaaabacabaaaaaaacaaaaaaaaaaaaaaaaaaaaaa sat r1.x, r1.x
adaaaaaaaaaaabacaaaaaaaaacaaaaaaabaaaappabaaaaaa mul r0.x, r0.x, c1.w
adaaaaaaabaaahacacaaaakeacaaaaaaabaaaaaaacaaaaaa mul r1.xyz, r2.xyzz, r1.x
adaaaaaaaaaaahacabaaaakeacaaaaaaaaaaaaaaacaaaaaa mul r0.xyz, r1.xyzz, r0.x
aaaaaaaaaaaaaiacafaaaaoeaeaaaaaaaaaaaaaaaaaaaaaa mov r0.w, v5
aaaaaaaaaaaaapadaaaaaaoeacaaaaaaaaaaaaaaaaaaaaaa mov o0, r0
"
}

SubProgram "d3d11_9x " {
Keywords { "SPOT" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTexture0] 2D 0
SetTexture 1 [_LightTextureB0] 2D 1
// 18 instructions, 2 temp regs, 0 temp arrays:
// ALU 13 float, 0 int, 1 uint
// TEX 2 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecediebbibeaffknnoffjkdbkppjakhalgobabaaaaaaeeafaaaaaeaaaaaa
daaaaaaammabaaaafiaeaaaabaafaaaaebgpgodjjeabaaaajeabaaaaaaacpppp
fmabaaaadiaaaaaaabaacmaaaaaadiaaaaaadiaaacaaceaaaaaadiaaaaaaaaaa
abababaaaaaaagaaabaaaaaaaaaaaaaaaaacppppfbaaaaafabaaapkaaaaaaadp
aaaaaaaaaaaaaaaaaaaaaaaabpaaaaacaaaaaaiaabaaahlabpaaaaacaaaaaaia
acaachlabpaaaaacaaaaaaiaadaaaplabpaaaaacaaaaaaiaaeaacplabpaaaaac
aaaaaajaaaaiapkabpaaaaacaaaaaajaabaiapkaagaaaaacaaaaaiiaadaappla
aeaaaaaeaaaaadiaadaaoelaaaaappiaabaaaakaaiaaaaadabaaaiiaadaaoela
adaaoelaabaaaaacabaaadiaabaappiaecaaaaadaaaacpiaaaaaoeiaaaaioeka
ecaaaaadabaacpiaabaaoeiaabaioekaafaaaaadaaaacbiaaaaappiaabaaaaia
fiaaaaaeaaaacbiaadaakklbabaaffkaaaaaaaiaacaaaaadaaaaabiaaaaaaaia
aaaaaaiaceaaaaacabaaahiaabaaoelaaiaaaaadaaaadciaacaaoelaabaaoeia
afaaaaadabaaahiaaeaaoelaaaaaoekaafaaaaadaaaaaoiaaaaaffiaabaablia
afaaaaadaaaachiaaaaaaaiaaaaabliaabaaaaacaaaaciiaaeaapplaabaaaaac
aaaicpiaaaaaoeiappppaaaafdeieefcieacaaaaeaaaaaaakbaaaaaafjaaaaae
egiocaaaaaaaaaaaahaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaa
abaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
pcbabaaaaeaaaaaagcbaaaadpcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacacaaaaaaaoaaaaahdcaabaaaaaaaaaaaegbabaaaaeaaaaaapgbpbaaa
aeaaaaaaaaaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaadpaaaaaaaaaaaaaaaaefaaaaajpcaabaaaaaaaaaaaegaabaaaaaaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaadbaaaaahbcaabaaaaaaaaaaaabeaaaaa
aaaaaaaackbabaaaaeaaaaaaabaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaaaaaaiadpdiaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
aaaaaaaabaaaaaahccaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
efaaaaajpcaabaaaabaaaaaafgafbaaaaaaaaaaaeghobaaaabaaaaaaaagabaaa
abaaaaaaapaaaaahbcaabaaaaaaaaaaaagaabaaaaaaaaaaaagaabaaaabaaaaaa
baaaaaahccaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaaf
ccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaaaacaaaaaabacaaaahccaabaaaaaaaaaaaegbcbaaaadaaaaaa
jgahbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegbcbaaaafaaaaaaegiccaaa
aaaaaaaaagaaaaaadiaaaaahocaabaaaaaaaaaaafgafbaaaaaaaaaaaagajbaaa
abaaaaaadiaaaaahhccabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaa
dgaaaaaficcabaaaaaaaaaaadkbabaaaafaaaaaadoaaaaabejfdeheolaaaaaaa
agaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaa
keaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadaaaaaakeaaaaaaacaaaaaa
aaaaaaaaadaaaaaaacaaaaaaahahaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahahaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapapaaaa
keaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfe
ejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaa
caaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgf
heaaklkl"
}

SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "POINT_COOKIE" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTextureB0] 2D
SetTexture 1 [_LightTexture0] CUBE
"!!ARBfp1.0
# 13 ALU, 2 TEX
PARAM c[2] = { program.local[0],
		{ 2 } };
TEMP R0;
TEMP R1;
TEX R1.w, fragment.texcoord[3], texture[1], CUBE;
DP3 R0.x, fragment.texcoord[3], fragment.texcoord[3];
MOV result.color.w, fragment.texcoord[5];
TEX R0.w, R0.x, texture[0], 2D;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R1.x, R0.x;
MUL R1.xyz, R1.x, fragment.texcoord[2];
MUL R1.w, R0, R1;
DP3_SAT R0.w, fragment.texcoord[1], R1;
MUL R0.xyz, fragment.texcoord[5], c[0];
MUL R1.x, R1.w, c[1];
MUL R0.xyz, R0, R0.w;
MUL result.color.xyz, R0, R1.x;
END
# 13 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTextureB0] 2D
SetTexture 1 [_LightTexture0] CUBE
"ps_2_0
; 13 ALU, 2 TEX
dcl_2d s0
dcl_cube s1
def c1, 2.00000000, 0, 0, 0
dcl t2.xyz
dcl t1.xyz
dcl t3.xyz
dcl t5
dp3 r0.x, t3, t3
mov r0.xy, r0.x
texld r2, r0, s0
texld r0, t3, s1
dp3 r0.x, t2, t2
rsq r1.x, r0.x
mul r1.xyz, r1.x, t2
mul r0.x, r2, r0.w
mul_pp r0.x, r0, c1
dp3_pp_sat r1.x, t1, r1
mul r2.xyz, t5, c0
mul r1.xyz, r2, r1.x
mul r0.xyz, r1, r0.x
mov_pp r0.w, t5
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTextureB0] 2D 1
SetTexture 1 [_LightTexture0] CUBE 0
// 13 instructions, 3 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 2 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedmibmaanhegfhgebjgfckekinpiclngbeabaaaaaaamadaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcomabaaaa
eaaaaaaahlaaaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fidaaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadpcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacadaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaa
bacaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaadiaaaaai
ocaabaaaaaaaaaaaagbjbaaaafaaaaaaagijcaaaaaaaaaaaagaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaabaaaaaahicaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaa
pgapbaaaaaaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaa
acaaaaaaegbcbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaaaaaaaaaapaaaaah
icaabaaaaaaaaaaaagaabaaaabaaaaaapgapbaaaacaaaaaadiaaaaahhccabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
dkbabaaaafaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}

SubProgram "flash " {
Keywords { "POINT_COOKIE" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTextureB0] 2D
SetTexture 1 [_LightTexture0] CUBE
"agal_ps
c1 2.0 0.0 0.0 0.0
[bc]
bcaaaaaaaaaaabacadaaaaoeaeaaaaaaadaaaaoeaeaaaaaa dp3 r0.x, v3, v3
aaaaaaaaaaaaadacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa mov r0.xy, r0.x
adaaaaaaacaaahacafaaaaoeaeaaaaaaaaaaaaoeabaaaaaa mul r2.xyz, v5, c0
ciaaaaaaabaaapacaaaaaafeacaaaaaaaaaaaaaaafaababb tex r1, r0.xyyy, s0 <2d wrap linear point>
ciaaaaaaaaaaapacadaaaaoeaeaaaaaaabaaaaaaafbababb tex r0, v3, s1 <cube wrap linear point>
bcaaaaaaaaaaabacacaaaaoeaeaaaaaaacaaaaoeaeaaaaaa dp3 r0.x, v2, v2
akaaaaaaabaaabacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa rsq r1.x, r0.x
adaaaaaaaaaaabacabaaaappacaaaaaaaaaaaappacaaaaaa mul r0.x, r1.w, r0.w
adaaaaaaabaaahacabaaaaaaacaaaaaaacaaaaoeaeaaaaaa mul r1.xyz, r1.x, v2
bcaaaaaaabaaabacabaaaaoeaeaaaaaaabaaaakeacaaaaaa dp3 r1.x, v1, r1.xyzz
bgaaaaaaabaaabacabaaaaaaacaaaaaaaaaaaaaaaaaaaaaa sat r1.x, r1.x
adaaaaaaaaaaabacaaaaaaaaacaaaaaaabaaaaoeabaaaaaa mul r0.x, r0.x, c1
adaaaaaaabaaahacacaaaakeacaaaaaaabaaaaaaacaaaaaa mul r1.xyz, r2.xyzz, r1.x
adaaaaaaaaaaahacabaaaakeacaaaaaaaaaaaaaaacaaaaaa mul r0.xyz, r1.xyzz, r0.x
aaaaaaaaaaaaaiacafaaaaoeaeaaaaaaaaaaaaaaaaaaaaaa mov r0.w, v5
aaaaaaaaaaaaapadaaaaaaoeacaaaaaaaaaaaaaaaaaaaaaa mov o0, r0
"
}

SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTextureB0] 2D 1
SetTexture 1 [_LightTexture0] CUBE 0
// 13 instructions, 3 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 2 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedllanjeideokngnjhhgonjfkkfphknfmoabaaaaaagaaeaaaaaeaaaaaa
daaaaaaaiaabaaaaheadaaaacmaeaaaaebgpgodjeiabaaaaeiabaaaaaaacpppp
baabaaaadiaaaaaaabaacmaaaaaadiaaaaaadiaaacaaceaaaaaadiaaabaaaaaa
aaababaaaaaaagaaabaaaaaaaaaaaaaaaaacppppbpaaaaacaaaaaaiaabaaahla
bpaaaaacaaaaaaiaacaachlabpaaaaacaaaaaaiaadaaahlabpaaaaacaaaaaaia
aeaacplabpaaaaacaaaaaajiaaaiapkabpaaaaacaaaaaajaabaiapkaaiaaaaad
aaaaaiiaadaaoelaadaaoelaabaaaaacaaaaadiaaaaappiaecaaaaadaaaaapia
aaaaoeiaabaioekaecaaaaadabaaapiaadaaoelaaaaioekaafaaaaadaaaacbia
aaaaaaiaabaappiaacaaaaadaaaaabiaaaaaaaiaaaaaaaiaceaaaaacabaaahia
abaaoelaaiaaaaadaaaadciaacaaoelaabaaoeiaafaaaaadabaaahiaaeaaoela
aaaaoekaafaaaaadaaaaaoiaaaaaffiaabaabliaafaaaaadaaaachiaaaaaaaia
aaaabliaabaaaaacaaaaciiaaeaapplaabaaaaacaaaicpiaaaaaoeiappppaaaa
fdeieefcomabaaaaeaaaaaaahlaaaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafidaaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
pcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacadaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egbcbaaaacaaaaaabacaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaa
aaaaaaaadiaaaaaiocaabaaaaaaaaaaaagbjbaaaafaaaaaaagijcaaaaaaaaaaa
agaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaefaaaaaj
pcaabaaaabaaaaaapgapbaaaaaaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaa
efaaaaajpcaabaaaacaaaaaaegbcbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaa
aaaaaaaaapaaaaahicaabaaaaaaaaaaaagaabaaaabaaaaaapgapbaaaacaaaaaa
diaaaaahhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaf
iccabaaaaaaaaaaadkbabaaaafaaaaaadoaaaaabejfdeheolaaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadaaaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahahaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahahaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaakeaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
"
}

SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
"!!ARBfp1.0
# 10 ALU, 1 TEX
PARAM c[2] = { program.local[0],
		{ 2 } };
TEMP R0;
TEMP R1;
TEX R0.w, fragment.texcoord[3], texture[0], 2D;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.x, R0.x;
MUL R1.xyz, R0.x, fragment.texcoord[2];
MUL R0.xyz, fragment.texcoord[5], c[0];
DP3_SAT R1.x, fragment.texcoord[1], R1;
MUL R0.w, R0, c[1].x;
MUL R0.xyz, R0, R1.x;
MUL result.color.xyz, R0, R0.w;
MOV result.color.w, fragment.texcoord[5];
END
# 10 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
"ps_2_0
; 10 ALU, 1 TEX
dcl_2d s0
def c1, 2.00000000, 0, 0, 0
dcl t2.xyz
dcl t1.xyz
dcl t3.xy
dcl t5
texld r0, t3, s0
dp3 r0.x, t2, t2
rsq r0.x, r0.x
mul r1.xyz, r0.x, t2
mul_pp r0.x, r0.w, c1
dp3_pp_sat r1.x, t1, r1
mul r2.xyz, t5, c0
mul r1.xyz, r2, r1.x
mul r0.xyz, r1, r0.x
mov_pp r0.w, t5
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTexture0] 2D 0
// 11 instructions, 2 temp regs, 0 temp arrays:
// ALU 8 float, 0 int, 0 uint
// TEX 1 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefieceddlagaeffgggjojnblaiknbdlaooljhknabaaaaaalaacaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadaaaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaabaaaaaa
amamaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcjaabaaaa
eaaaaaaageaaaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaafkaaaaadaagabaaa
aaaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaagcbaaaadmcbabaaaabaaaaaa
gcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadpcbabaaa
aeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacacaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
acaaaaaabacaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaa
diaaaaaiocaabaaaaaaaaaaaagbjbaaaaeaaaaaaagijcaaaaaaaaaaaagaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaaefaaaaaj
pcaabaaaabaaaaaaogbkbaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaa
aaaaaaaadkbabaaaaeaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}

SubProgram "flash " {
Keywords { "DIRECTIONAL_COOKIE" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
"agal_ps
c1 2.0 0.0 0.0 0.0
[bc]
ciaaaaaaaaaaapacadaaaaoeaeaaaaaaaaaaaaaaafaababb tex r0, v3, s0 <2d wrap linear point>
bcaaaaaaaaaaabacacaaaaoeaeaaaaaaacaaaaoeaeaaaaaa dp3 r0.x, v2, v2
akaaaaaaaaaaabacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa rsq r0.x, r0.x
adaaaaaaabaaahacaaaaaaaaacaaaaaaacaaaaoeaeaaaaaa mul r1.xyz, r0.x, v2
adaaaaaaaaaaabacaaaaaappacaaaaaaabaaaaoeabaaaaaa mul r0.x, r0.w, c1
bcaaaaaaabaaabacabaaaaoeaeaaaaaaabaaaakeacaaaaaa dp3 r1.x, v1, r1.xyzz
bgaaaaaaabaaabacabaaaaaaacaaaaaaaaaaaaaaaaaaaaaa sat r1.x, r1.x
adaaaaaaacaaahacafaaaaoeaeaaaaaaaaaaaaoeabaaaaaa mul r2.xyz, v5, c0
adaaaaaaabaaahacacaaaakeacaaaaaaabaaaaaaacaaaaaa mul r1.xyz, r2.xyzz, r1.x
adaaaaaaaaaaahacabaaaakeacaaaaaaaaaaaaaaacaaaaaa mul r0.xyz, r1.xyzz, r0.x
aaaaaaaaaaaaaiacafaaaaoeaeaaaaaaaaaaaaaaaaaaaaaa mov r0.w, v5
aaaaaaaaaaaaapadaaaaaaoeacaaaaaaaaaaaaaaaaaaaaaa mov o0, r0
"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTexture0] 2D 0
// 11 instructions, 2 temp regs, 0 temp arrays:
// ALU 8 float, 0 int, 0 uint
// TEX 1 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefieceddjfbacnndndbchhbkadbfkdckhdefnbcabaaaaaameadaaaaaeaaaaaa
daaaaaaaeaabaaaaniacaaaajaadaaaaebgpgodjaiabaaaaaiabaaaaaaacpppp
neaaaaaadeaaaaaaabaaciaaaaaadeaaaaaadeaaabaaceaaaaaadeaaaaaaaaaa
aaaaagaaabaaaaaaaaaaaaaaaaacppppbpaaaaacaaaaaaiaaaaaaplabpaaaaac
aaaaaaiaabaaahlabpaaaaacaaaaaaiaacaachlabpaaaaacaaaaaaiaadaacpla
bpaaaaacaaaaaajaaaaiapkaceaaaaacaaaaahiaabaaoelaaiaaaaadaaaadbia
acaaoelaaaaaoeiaafaaaaadaaaaaoiaadaabllaaaaablkaafaaaaadaaaaahia
aaaaaaiaaaaabliaabaaaaacabaaadiaaaaabllaecaaaaadabaacpiaabaaoeia
aaaioekaacaaaaadaaaaaiiaabaappiaabaappiaafaaaaadaaaachiaaaaappia
aaaaoeiaabaaaaacaaaaciiaadaapplaabaaaaacaaaicpiaaaaaoeiappppaaaa
fdeieefcjaabaaaaeaaaaaaageaaaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaa
fkaaaaadaagabaaaaaaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaagcbaaaad
mcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadpcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacacaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaacaaaaaabacaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaa
egacbaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaaagbjbaaaaeaaaaaaagijcaaa
aaaaaaaaagaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaa
aaaaaaaaefaaaaajpcaabaaaabaaaaaaogbkbaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
dgaaaaaficcabaaaaaaaaaaadkbabaaaaeaaaaaadoaaaaabejfdeheolaaaaaaa
agaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaa
keaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadaaaaaakeaaaaaaadaaaaaa
aaaaaaaaadaaaaaaabaaaaaaamamaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaa
acaaaaaaahahaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaa
keaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapapaaaafdfgfpfaepfdejfe
ejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaa
caaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgf
heaaklkl"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3"
}

}

#LINE 300

        }
	} 
	
	FallBack "VertexLit"
}
